; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes=always-inline < %s | FileCheck %s -check-prefix=ALWAYS
; RUN: opt -S -passes='cgscc(inline)' < %s | FileCheck %s -check-prefix=INLINE
; RUN: opt -S -passes=partial-inliner -skip-partial-inlining-cost-analysis < %s | \
; RUN:     FileCheck %s -check-prefix=PARTIAL
;
; The following tests verify fine_grained_bitfields function attribute under
; different inlining passes.

define i32 @inner() {
; ALWAYS-LABEL: @inner(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    ret i32 0
;
; INLINE-LABEL: @inner(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    ret i32 0
;
; PARTIAL-LABEL: @inner(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    ret i32 0
;
entry:
  ret i32 0
}

define i32 @inner_always() alwaysinline {
; ALWAYS-LABEL: @inner_always(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    ret i32 1
;
; INLINE-LABEL: @inner_always(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    ret i32 1
;
; PARTIAL-LABEL: @inner_always(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    ret i32 1
;
entry:
  ret i32 1
}

define i32 @inner_fgb() fine_grained_bitfields {
; ALWAYS-LABEL: @inner_fgb(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    ret i32 2
;
; INLINE-LABEL: @inner_fgb(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    ret i32 2
;
; PARTIAL-LABEL: @inner_fgb(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    ret i32 2
;
entry:
  ret i32 2
}

define i32 @inner_always_fgb() alwaysinline fine_grained_bitfields {
; ALWAYS-LABEL: @inner_always_fgb(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    ret i32 3
;
; INLINE-LABEL: @inner_always_fgb(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    ret i32 3
;
; PARTIAL-LABEL: @inner_always_fgb(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    ret i32 3
;
entry:
  ret i32 3
}

; Outer functions without the fine_grained_bitfields attribute.

define i32 @outer_inner() {
; ALWAYS-LABEL: @outer_inner(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    [[RET:%.*]] = call i32 @inner()
; ALWAYS-NEXT:    ret i32 [[RET]]
;
; INLINE-LABEL: @outer_inner(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    ret i32 0
;
; PARTIAL-LABEL: @outer_inner(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    [[RET:%.*]] = call i32 @inner()
; PARTIAL-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner()
  ret i32 %ret
}

define i32 @outer_inner_always() {
; ALWAYS-LABEL: @outer_inner_always(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    ret i32 1
;
; INLINE-LABEL: @outer_inner_always(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    ret i32 1
;
; PARTIAL-LABEL: @outer_inner_always(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    [[RET:%.*]] = call i32 @inner_always()
; PARTIAL-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner_always()
  ret i32 %ret
}

define i32 @outer_inner_fbg() {
; ALWAYS-LABEL: @outer_inner_fbg(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    [[RET:%.*]] = call i32 @inner_fgb()
; ALWAYS-NEXT:    ret i32 [[RET]]
;
; INLINE-LABEL: @outer_inner_fbg(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    [[RET:%.*]] = call i32 @inner_fgb()
; INLINE-NEXT:    ret i32 [[RET]]
;
; PARTIAL-LABEL: @outer_inner_fbg(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    [[RET:%.*]] = call i32 @inner_fgb()
; PARTIAL-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner_fgb()
  ret i32 %ret
}

define i32 @outer_inner_always_fbg() {
; ALWAYS-LABEL: @outer_inner_always_fbg(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    [[RET:%.*]] = call i32 @inner_always_fgb()
; ALWAYS-NEXT:    ret i32 [[RET]]
;
; INLINE-LABEL: @outer_inner_always_fbg(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    [[RET:%.*]] = call i32 @inner_always_fgb()
; INLINE-NEXT:    ret i32 [[RET]]
;
; PARTIAL-LABEL: @outer_inner_always_fbg(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    [[RET:%.*]] = call i32 @inner_always_fgb()
; PARTIAL-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner_always_fgb()
  ret i32 %ret
}

; Outer functions with the fine_grained_bitfields attribute.

define i32 @outer_fgb_inner() fine_grained_bitfields {
; ALWAYS-LABEL: @outer_fgb_inner(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    [[RET:%.*]] = call i32 @inner()
; ALWAYS-NEXT:    ret i32 [[RET]]
;
; INLINE-LABEL: @outer_fgb_inner(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    [[RET:%.*]] = call i32 @inner()
; INLINE-NEXT:    ret i32 [[RET]]
;
; PARTIAL-LABEL: @outer_fgb_inner(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    [[RET:%.*]] = call i32 @inner()
; PARTIAL-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner()
  ret i32 %ret
}

define i32 @outer_fgb_inner_always() fine_grained_bitfields {
; ALWAYS-LABEL: @outer_fgb_inner_always(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    [[RET:%.*]] = call i32 @inner_always()
; ALWAYS-NEXT:    ret i32 [[RET]]
;
; INLINE-LABEL: @outer_fgb_inner_always(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    [[RET:%.*]] = call i32 @inner_always()
; INLINE-NEXT:    ret i32 [[RET]]
;
; PARTIAL-LABEL: @outer_fgb_inner_always(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    [[RET:%.*]] = call i32 @inner_always()
; PARTIAL-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner_always()
  ret i32 %ret
}

define i32 @outer_fgb_inner_fbg() fine_grained_bitfields {
; ALWAYS-LABEL: @outer_fgb_inner_fbg(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    [[RET:%.*]] = call i32 @inner_fgb()
; ALWAYS-NEXT:    ret i32 [[RET]]
;
; INLINE-LABEL: @outer_fgb_inner_fbg(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    ret i32 2
;
; PARTIAL-LABEL: @outer_fgb_inner_fbg(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    [[RET:%.*]] = call i32 @inner_fgb()
; PARTIAL-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner_fgb()
  ret i32 %ret
}

define i32 @outer_fgb_inner_always_fbg() fine_grained_bitfields {
; ALWAYS-LABEL: @outer_fgb_inner_always_fbg(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    ret i32 3
;
; INLINE-LABEL: @outer_fgb_inner_always_fbg(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    ret i32 3
;
; PARTIAL-LABEL: @outer_fgb_inner_always_fbg(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    [[RET:%.*]] = call i32 @inner_always_fgb()
; PARTIAL-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner_always_fgb()
  ret i32 %ret
}

define i32 @inner_partial(i1 %cond, i32* align 4 %value) {
; ALWAYS-LABEL: @inner_partial(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    br i1 [[COND:%.*]], label [[IF_THEN:%.*]], label [[RETURN:%.*]]
; ALWAYS:       if.then:
; ALWAYS-NEXT:    store i32 10, i32* [[VALUE:%.*]], align 4
; ALWAYS-NEXT:    br label [[RETURN]]
; ALWAYS:       return:
; ALWAYS-NEXT:    ret i32 0
;
; INLINE-LABEL: @inner_partial(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    br i1 [[COND:%.*]], label [[IF_THEN:%.*]], label [[RETURN:%.*]]
; INLINE:       if.then:
; INLINE-NEXT:    store i32 10, i32* [[VALUE:%.*]], align 4
; INLINE-NEXT:    br label [[RETURN]]
; INLINE:       return:
; INLINE-NEXT:    ret i32 0
;
; PARTIAL-LABEL: @inner_partial(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    br i1 [[COND:%.*]], label [[IF_THEN:%.*]], label [[RETURN:%.*]]
; PARTIAL:       if.then:
; PARTIAL-NEXT:    store i32 10, i32* [[VALUE:%.*]], align 4
; PARTIAL-NEXT:    br label [[RETURN]]
; PARTIAL:       return:
; PARTIAL-NEXT:    ret i32 0
;
entry:
  br i1 %cond, label %if.then, label %return
if.then:
  store i32 10, i32* %value, align 4
  br label %return
return:
  ret i32 0
}

define i32 @inner_partial_fgb(i1 %cond, i32* align 4 %value) fine_grained_bitfields {
; ALWAYS-LABEL: @inner_partial_fgb(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    br i1 [[COND:%.*]], label [[IF_THEN:%.*]], label [[RETURN:%.*]]
; ALWAYS:       if.then:
; ALWAYS-NEXT:    store i32 10, i32* [[VALUE:%.*]], align 4
; ALWAYS-NEXT:    br label [[RETURN]]
; ALWAYS:       return:
; ALWAYS-NEXT:    ret i32 0
;
; INLINE-LABEL: @inner_partial_fgb(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    br i1 [[COND:%.*]], label [[IF_THEN:%.*]], label [[RETURN:%.*]]
; INLINE:       if.then:
; INLINE-NEXT:    store i32 10, i32* [[VALUE:%.*]], align 4
; INLINE-NEXT:    br label [[RETURN]]
; INLINE:       return:
; INLINE-NEXT:    ret i32 0
;
; PARTIAL-LABEL: @inner_partial_fgb(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    br i1 [[COND:%.*]], label [[IF_THEN:%.*]], label [[RETURN:%.*]]
; PARTIAL:       if.then:
; PARTIAL-NEXT:    store i32 10, i32* [[VALUE:%.*]], align 4
; PARTIAL-NEXT:    br label [[RETURN]]
; PARTIAL:       return:
; PARTIAL-NEXT:    ret i32 0
;
entry:
  br i1 %cond, label %if.then, label %return
if.then:
  store i32 10, i32* %value, align 4
  br label %return
return:
  ret i32 0
}

; Outer functions without fine_grained_bitfields and partial inners.

define i32 @outer_inner_partial(i1 %cond, i32* align 4 %value) {
; ALWAYS-LABEL: @outer_inner_partial(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    [[RET:%.*]] = call i32 @inner_partial(i1 [[COND:%.*]], i32* [[VALUE:%.*]])
; ALWAYS-NEXT:    ret i32 [[RET]]
;
; INLINE-LABEL: @outer_inner_partial(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    br i1 [[COND:%.*]], label [[IF_THEN_I:%.*]], label [[INNER_PARTIAL_EXIT:%.*]]
; INLINE:       if.then.i:
; INLINE-NEXT:    store i32 10, i32* [[VALUE:%.*]], align 4
; INLINE-NEXT:    br label [[INNER_PARTIAL_EXIT]]
; INLINE:       inner_partial.exit:
; INLINE-NEXT:    ret i32 0
;
; PARTIAL-LABEL: @outer_inner_partial(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    br i1 [[COND:%.*]], label [[CODEREPL_I:%.*]], label [[INNER_PARTIAL_2_EXIT:%.*]]
; PARTIAL:       codeRepl.i:
; PARTIAL-NEXT:    call void @inner_partial.2.if.then(i32* [[VALUE:%.*]])
; PARTIAL-NEXT:    br label [[INNER_PARTIAL_2_EXIT]]
; PARTIAL:       inner_partial.2.exit:
; PARTIAL-NEXT:    ret i32 0
;
entry:
  %ret = call i32 @inner_partial(i1 %cond, i32* %value)
  ret i32 %ret
}

define i32 @outer_inner_partial_fgb(i1 %cond, i32* align 4 %value) {
; ALWAYS-LABEL: @outer_inner_partial_fgb(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    [[RET:%.*]] = call i32 @inner_partial_fgb(i1 [[COND:%.*]], i32* [[VALUE:%.*]])
; ALWAYS-NEXT:    ret i32 [[RET]]
;
; INLINE-LABEL: @outer_inner_partial_fgb(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    [[RET:%.*]] = call i32 @inner_partial_fgb(i1 [[COND:%.*]], i32* [[VALUE:%.*]])
; INLINE-NEXT:    ret i32 [[RET]]
;
; PARTIAL-LABEL: @outer_inner_partial_fgb(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    [[RET:%.*]] = call i32 @inner_partial_fgb(i1 [[COND:%.*]], i32* [[VALUE:%.*]])
; PARTIAL-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner_partial_fgb(i1 %cond, i32* %value)
  ret i32 %ret
}

; Outer functions with fine_grained_bitfields and partial inners.

define i32 @outer_fgb_inner_partial(i1 %cond, i32* align 4 %value) fine_grained_bitfields {
; ALWAYS-LABEL: @outer_fgb_inner_partial(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    [[RET:%.*]] = call i32 @inner_partial(i1 [[COND:%.*]], i32* [[VALUE:%.*]])
; ALWAYS-NEXT:    ret i32 [[RET]]
;
; INLINE-LABEL: @outer_fgb_inner_partial(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    [[RET:%.*]] = call i32 @inner_partial(i1 [[COND:%.*]], i32* [[VALUE:%.*]])
; INLINE-NEXT:    ret i32 [[RET]]
;
; PARTIAL-LABEL: @outer_fgb_inner_partial(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    [[RET:%.*]] = call i32 @inner_partial(i1 [[COND:%.*]], i32* [[VALUE:%.*]])
; PARTIAL-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner_partial(i1 %cond, i32* %value)
  ret i32 %ret
}

define i32 @outer_fgb_inner_partial_fgb(i1 %cond, i32* align 4 %value) fine_grained_bitfields {
; ALWAYS-LABEL: @outer_fgb_inner_partial_fgb(
; ALWAYS-NEXT:  entry:
; ALWAYS-NEXT:    [[RET:%.*]] = call i32 @inner_partial_fgb(i1 [[COND:%.*]], i32* [[VALUE:%.*]])
; ALWAYS-NEXT:    ret i32 [[RET]]
;
; INLINE-LABEL: @outer_fgb_inner_partial_fgb(
; INLINE-NEXT:  entry:
; INLINE-NEXT:    br i1 [[COND:%.*]], label [[IF_THEN_I:%.*]], label [[INNER_PARTIAL_FGB_EXIT:%.*]]
; INLINE:       if.then.i:
; INLINE-NEXT:    store i32 10, i32* [[VALUE:%.*]], align 4
; INLINE-NEXT:    br label [[INNER_PARTIAL_FGB_EXIT]]
; INLINE:       inner_partial_fgb.exit:
; INLINE-NEXT:    ret i32 0
;
; PARTIAL-LABEL: @outer_fgb_inner_partial_fgb(
; PARTIAL-NEXT:  entry:
; PARTIAL-NEXT:    br i1 [[COND:%.*]], label [[CODEREPL_I:%.*]], label [[INNER_PARTIAL_FGB_1_EXIT:%.*]]
; PARTIAL:       codeRepl.i:
; PARTIAL-NEXT:    call void @inner_partial_fgb.1.if.then(i32* [[VALUE:%.*]])
; PARTIAL-NEXT:    br label [[INNER_PARTIAL_FGB_1_EXIT]]
; PARTIAL:       inner_partial_fgb.1.exit:
; PARTIAL-NEXT:    ret i32 0
;
entry:
  %ret = call i32 @inner_partial_fgb(i1 %cond, i32* %value)
  ret i32 %ret
}
