; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=mem2reg < %s -S | FileCheck %s

define void @test_loadfreeze_none(ptr %arg) {
; CHECK-LABEL: define void @test_loadfreeze_none
; CHECK-SAME: (ptr [[ARG:%.*]]) {
; CHECK-NEXT:    [[ARG_DEREF:%.*]] = load i32, ptr [[ARG]], align 4
; CHECK-NEXT:    [[T2:%.*]] = add i32 [[ARG_DEREF]], 1
; CHECK-NEXT:    [[T4:%.*]] = add i32 [[T2]], 1
; CHECK-NEXT:    store i32 [[T4]], ptr [[ARG]], align 4
; CHECK-NEXT:    ret void
;
  %p = alloca i32
  %arg.deref = load i32, ptr %arg
  store i32 %arg.deref, ptr %p
  %t1 = load i32, ptr %p
  %t2 = add i32 %t1, 1
  store i32 %t2, ptr %p
  %t3 = load i32, ptr %p
  %t4 = add i32 %t3, 1
  store i32 %t4, ptr %p
  %t5 = load i32, ptr %p
  store i32 %t5, ptr %arg
  ret void
}

define void @test_loadfreeze_1(ptr %arg) {
; CHECK-LABEL: define void @test_loadfreeze_1
; CHECK-SAME: (ptr [[ARG:%.*]]) {
; CHECK-NEXT:    [[ARG_DEREF:%.*]] = load i32, ptr [[ARG]], align 4
; CHECK-NEXT:    [[FREEZE:%.*]] = freeze i32 [[ARG_DEREF]]
; CHECK-NEXT:    [[T2:%.*]] = add i32 [[FREEZE]], 1
; CHECK-NEXT:    [[T4:%.*]] = add i32 [[T2]], 1
; CHECK-NEXT:    store i32 [[T4]], ptr [[ARG]], align 4
; CHECK-NEXT:    ret void
;
  %p = alloca i32
  %arg.deref = load i32, ptr %arg
  store i32 %arg.deref, ptr %p
  %t1 = load i32, ptr %p, !freeze_bits !0
  %t2 = add i32 %t1, 1
  store i32 %t2, ptr %p
  %t3 = load i32, ptr %p
  %t4 = add i32 %t3, 1
  store i32 %t4, ptr %p
  %t5 = load i32, ptr %p
  store i32 %t5, ptr %arg
  ret void
}

define void @test_loadfreeze_2(ptr %arg) {
; CHECK-LABEL: define void @test_loadfreeze_2
; CHECK-SAME: (ptr [[ARG:%.*]]) {
; CHECK-NEXT:    [[ARG_DEREF:%.*]] = load i32, ptr [[ARG]], align 4
; CHECK-NEXT:    [[T2:%.*]] = add i32 [[ARG_DEREF]], 1
; CHECK-NEXT:    [[FREEZE:%.*]] = freeze i32 [[T2]]
; CHECK-NEXT:    [[T4:%.*]] = add i32 [[FREEZE]], 1
; CHECK-NEXT:    store i32 [[T4]], ptr [[ARG]], align 4
; CHECK-NEXT:    ret void
;
  %p = alloca i32
  %arg.deref = load i32, ptr %arg
  store i32 %arg.deref, ptr %p
  %t1 = load i32, ptr %p
  %t2 = add i32 %t1, 1
  store i32 %t2, ptr %p
  %t3 = load i32, ptr %p, !freeze_bits !0
  %t4 = add i32 %t3, 1
  store i32 %t4, ptr %p
  %t5 = load i32, ptr %p
  store i32 %t5, ptr %arg
  ret void
}

define void @test_loadfreeze_3(ptr %arg) {
; CHECK-LABEL: define void @test_loadfreeze_3
; CHECK-SAME: (ptr [[ARG:%.*]]) {
; CHECK-NEXT:    [[ARG_DEREF:%.*]] = load i32, ptr [[ARG]], align 4
; CHECK-NEXT:    [[T2:%.*]] = add i32 [[ARG_DEREF]], 1
; CHECK-NEXT:    [[T4:%.*]] = add i32 [[T2]], 1
; CHECK-NEXT:    [[FREEZE:%.*]] = freeze i32 [[T4]]
; CHECK-NEXT:    store i32 [[FREEZE]], ptr [[ARG]], align 4
; CHECK-NEXT:    ret void
;
  %p = alloca i32
  %arg.deref = load i32, ptr %arg
  store i32 %arg.deref, ptr %p
  %t1 = load i32, ptr %p
  %t2 = add i32 %t1, 1
  store i32 %t2, ptr %p
  %t3 = load i32, ptr %p
  %t4 = add i32 %t3, 1
  store i32 %t4, ptr %p
  %t5 = load i32, ptr %p, !freeze_bits !0
  store i32 %t5, ptr %arg
  ret void
}

define void @test_loadfreeze_all(ptr %arg) {
; CHECK-LABEL: define void @test_loadfreeze_all
; CHECK-SAME: (ptr [[ARG:%.*]]) {
; CHECK-NEXT:    [[ARG_DEREF:%.*]] = load i32, ptr [[ARG]], align 4
; CHECK-NEXT:    [[FREEZE2:%.*]] = freeze i32 [[ARG_DEREF]]
; CHECK-NEXT:    [[T2:%.*]] = add i32 [[FREEZE2]], 1
; CHECK-NEXT:    [[FREEZE1:%.*]] = freeze i32 [[T2]]
; CHECK-NEXT:    [[T4:%.*]] = add i32 [[FREEZE1]], 1
; CHECK-NEXT:    [[FREEZE:%.*]] = freeze i32 [[T4]]
; CHECK-NEXT:    store i32 [[FREEZE]], ptr [[ARG]], align 4
; CHECK-NEXT:    ret void
;
  %p = alloca i32
  %arg.deref = load i32, ptr %arg
  store i32 %arg.deref, ptr %p
  %t1 = load i32, ptr %p, !freeze_bits !0
  %t2 = add i32 %t1, 1
  store i32 %t2, ptr %p
  %t3 = load i32, ptr %p, !freeze_bits !0
  %t4 = add i32 %t3, 1
  store i32 %t4, ptr %p
  %t5 = load i32, ptr %p, !freeze_bits !0
  store i32 %t5, ptr %arg
  ret void
}

!0 = !{}
