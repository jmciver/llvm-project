// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs --replace-value-regex "__omp_offloading_[0-9a-z]+_[0-9a-z]+" "reduction_size[.].+[.]" "pl_cond[.].+[.|,]" --prefix-filecheck-ir-name tmp2 --version 2
// RUN: %clang_cc1 -verify -triple x86_64-pc-linux-gnu -fopenmp %s
// RUN: %clang_cc1 -verify -triple x86_64-pc-linux-gnu -fopenmp -emit-llvm %s -o - | FileCheck %s --check-prefix=IR

// Check same results after serialization round-trip
// RUN: %clang_cc1 -verify -triple x86_64-pc-linux-gnu -fopenmp -emit-pch -o %t %s
// RUN: %clang_cc1 -verify -triple x86_64-pc-linux-gnu -fopenmp -include-pch %t -emit-llvm %s -o - | FileCheck %s --check-prefix=IR-PCH

// expected-no-diagnostics

#ifndef HEADER
#define HEADER

void foo(int t) {

  int i, j, z;
  #pragma omp loop collapse(2) reduction(+:z) lastprivate(j) bind(thread)
  for (int i = 0; i<t; ++i)
    for (j = 0; j<t; ++j)
      z += i+j;
}
#endif
// IR-LABEL: define dso_local void @_Z3fooi
// IR-SAME: (i32 noundef [[T:%.*]]) #[[ATTR0:[0-9]+]] {
// IR-NEXT:  entry:
// IR-NEXT:    [[T_ADDR:%.*]] = alloca i32, align 4
// IR-NEXT:    [[I:%.*]] = alloca i32, align 4
// IR-NEXT:    [[FREEZE_POISON:%.*]] = freeze i32 poison
// IR-NEXT:    store i32 [[FREEZE_POISON]], ptr [[I]], align 4
// IR-NEXT:    [[J:%.*]] = alloca i32, align 4
// IR-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i32 poison
// IR-NEXT:    store i32 [[FREEZE_POISON1]], ptr [[J]], align 4
// IR-NEXT:    [[Z:%.*]] = alloca i32, align 4
// IR-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i32 poison
// IR-NEXT:    store i32 [[FREEZE_POISON2]], ptr [[Z]], align 4
// IR-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// IR-NEXT:    [[TMP2TMP3:%.*]] = alloca i32, align 4
// IR-NEXT:    [[DOTCAPTURE_EXPR_:%.*]] = alloca i32, align 4
// IR-NEXT:    [[FREEZE_POISON4:%.*]] = freeze i32 poison
// IR-NEXT:    store i32 [[FREEZE_POISON4]], ptr [[DOTCAPTURE_EXPR_]], align 4
// IR-NEXT:    [[DOTCAPTURE_EXPR_5:%.*]] = alloca i32, align 4
// IR-NEXT:    [[FREEZE_POISON6:%.*]] = freeze i32 poison
// IR-NEXT:    store i32 [[FREEZE_POISON6]], ptr [[DOTCAPTURE_EXPR_5]], align 4
// IR-NEXT:    [[DOTCAPTURE_EXPR_7:%.*]] = alloca i64, align 8
// IR-NEXT:    [[FREEZE_POISON8:%.*]] = freeze i64 poison
// IR-NEXT:    store i64 [[FREEZE_POISON8]], ptr [[DOTCAPTURE_EXPR_7]], align 8
// IR-NEXT:    [[I13:%.*]] = alloca i32, align 4
// IR-NEXT:    [[FREEZE_POISON14:%.*]] = freeze i32 poison
// IR-NEXT:    store i32 [[FREEZE_POISON14]], ptr [[I13]], align 4
// IR-NEXT:    [[J15:%.*]] = alloca i32, align 4
// IR-NEXT:    [[FREEZE_POISON16:%.*]] = freeze i32 poison
// IR-NEXT:    store i32 [[FREEZE_POISON16]], ptr [[J15]], align 4
// IR-NEXT:    [[DOTOMP_IV:%.*]] = alloca i64, align 8
// IR-NEXT:    [[FREEZE_POISON18:%.*]] = freeze i64 poison
// IR-NEXT:    store i64 [[FREEZE_POISON18]], ptr [[DOTOMP_IV]], align 8
// IR-NEXT:    [[I19:%.*]] = alloca i32, align 4
// IR-NEXT:    [[FREEZE_POISON20:%.*]] = freeze i32 poison
// IR-NEXT:    store i32 [[FREEZE_POISON20]], ptr [[I19]], align 4
// IR-NEXT:    [[J21:%.*]] = alloca i32, align 4
// IR-NEXT:    [[FREEZE_POISON22:%.*]] = freeze i32 poison
// IR-NEXT:    store i32 [[FREEZE_POISON22]], ptr [[J21]], align 4
// IR-NEXT:    [[Z23:%.*]] = alloca i32, align 4
// IR-NEXT:    [[FREEZE_POISON24:%.*]] = freeze i32 poison
// IR-NEXT:    store i32 [[FREEZE_POISON24]], ptr [[Z23]], align 4
// IR-NEXT:    store i32 [[T]], ptr [[T_ADDR]], align 4
// IR-NEXT:    [[TMP0:%.*]] = load i32, ptr [[T_ADDR]], align 4
// IR-NEXT:    store i32 [[TMP0]], ptr [[DOTCAPTURE_EXPR_]], align 4
// IR-NEXT:    [[TMP1:%.*]] = load i32, ptr [[T_ADDR]], align 4
// IR-NEXT:    store i32 [[TMP1]], ptr [[DOTCAPTURE_EXPR_5]], align 4
// IR-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_]], align 4
// IR-NEXT:    [[SUB:%.*]] = sub nsw i32 [[TMP2]], 0
// IR-NEXT:    [[DIV:%.*]] = sdiv i32 [[SUB]], 1
// IR-NEXT:    [[CONV:%.*]] = sext i32 [[DIV]] to i64
// IR-NEXT:    [[TMP3:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4
// IR-NEXT:    [[SUB9:%.*]] = sub nsw i32 [[TMP3]], 0
// IR-NEXT:    [[DIV10:%.*]] = sdiv i32 [[SUB9]], 1
// IR-NEXT:    [[CONV11:%.*]] = sext i32 [[DIV10]] to i64
// IR-NEXT:    [[MUL:%.*]] = mul nsw i64 [[CONV]], [[CONV11]]
// IR-NEXT:    [[SUB12:%.*]] = sub nsw i64 [[MUL]], 1
// IR-NEXT:    store i64 [[SUB12]], ptr [[DOTCAPTURE_EXPR_7]], align 8
// IR-NEXT:    store i32 0, ptr [[I13]], align 4
// IR-NEXT:    store i32 0, ptr [[J15]], align 4
// IR-NEXT:    [[TMP4:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_]], align 4
// IR-NEXT:    [[CMP:%.*]] = icmp slt i32 0, [[TMP4]]
// IR-NEXT:    br i1 [[CMP]], label [[LAND_LHS_TRUE:%.*]], label [[SIMD_IF_END:%.*]]
// IR:       land.lhs.true:
// IR-NEXT:    [[TMP5:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4
// IR-NEXT:    [[CMP17:%.*]] = icmp slt i32 0, [[TMP5]]
// IR-NEXT:    br i1 [[CMP17]], label [[SIMD_IF_THEN:%.*]], label [[SIMD_IF_END]]
// IR:       simd.if.then:
// IR-NEXT:    store i64 0, ptr [[DOTOMP_IV]], align 8
// IR-NEXT:    store i32 0, ptr [[Z23]], align 4
// IR-NEXT:    br label [[OMP_INNER_FOR_COND:%.*]]
// IR:       omp.inner.for.cond:
// IR-NEXT:    [[TMP6:%.*]] = load i64, ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3:![0-9]+]]
// IR-NEXT:    [[TMP7:%.*]] = load i64, ptr [[DOTCAPTURE_EXPR_7]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[ADD:%.*]] = add nsw i64 [[TMP7]], 1
// IR-NEXT:    [[CMP25:%.*]] = icmp slt i64 [[TMP6]], [[ADD]]
// IR-NEXT:    br i1 [[CMP25]], label [[OMP_INNER_FOR_BODY:%.*]], label [[OMP_INNER_FOR_END:%.*]]
// IR:       omp.inner.for.body:
// IR-NEXT:    [[TMP8:%.*]] = load i64, ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[TMP9:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[SUB26:%.*]] = sub nsw i32 [[TMP9]], 0
// IR-NEXT:    [[DIV27:%.*]] = sdiv i32 [[SUB26]], 1
// IR-NEXT:    [[MUL28:%.*]] = mul nsw i32 1, [[DIV27]]
// IR-NEXT:    [[CONV29:%.*]] = sext i32 [[MUL28]] to i64
// IR-NEXT:    [[DIV30:%.*]] = sdiv i64 [[TMP8]], [[CONV29]]
// IR-NEXT:    [[MUL31:%.*]] = mul nsw i64 [[DIV30]], 1
// IR-NEXT:    [[ADD32:%.*]] = add nsw i64 0, [[MUL31]]
// IR-NEXT:    [[CONV33:%.*]] = trunc i64 [[ADD32]] to i32
// IR-NEXT:    store i32 [[CONV33]], ptr [[I19]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[TMP10:%.*]] = load i64, ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[TMP11:%.*]] = load i64, ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[TMP12:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[SUB34:%.*]] = sub nsw i32 [[TMP12]], 0
// IR-NEXT:    [[DIV35:%.*]] = sdiv i32 [[SUB34]], 1
// IR-NEXT:    [[MUL36:%.*]] = mul nsw i32 1, [[DIV35]]
// IR-NEXT:    [[CONV37:%.*]] = sext i32 [[MUL36]] to i64
// IR-NEXT:    [[DIV38:%.*]] = sdiv i64 [[TMP11]], [[CONV37]]
// IR-NEXT:    [[TMP13:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[SUB39:%.*]] = sub nsw i32 [[TMP13]], 0
// IR-NEXT:    [[DIV40:%.*]] = sdiv i32 [[SUB39]], 1
// IR-NEXT:    [[MUL41:%.*]] = mul nsw i32 1, [[DIV40]]
// IR-NEXT:    [[CONV42:%.*]] = sext i32 [[MUL41]] to i64
// IR-NEXT:    [[MUL43:%.*]] = mul nsw i64 [[DIV38]], [[CONV42]]
// IR-NEXT:    [[SUB44:%.*]] = sub nsw i64 [[TMP10]], [[MUL43]]
// IR-NEXT:    [[MUL45:%.*]] = mul nsw i64 [[SUB44]], 1
// IR-NEXT:    [[ADD46:%.*]] = add nsw i64 0, [[MUL45]]
// IR-NEXT:    [[CONV47:%.*]] = trunc i64 [[ADD46]] to i32
// IR-NEXT:    store i32 [[CONV47]], ptr [[J21]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[TMP14:%.*]] = load i32, ptr [[I19]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[TMP15:%.*]] = load i32, ptr [[J21]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[ADD48:%.*]] = add nsw i32 [[TMP14]], [[TMP15]]
// IR-NEXT:    [[TMP16:%.*]] = load i32, ptr [[Z23]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[ADD49:%.*]] = add nsw i32 [[TMP16]], [[ADD48]]
// IR-NEXT:    store i32 [[ADD49]], ptr [[Z23]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    br label [[OMP_BODY_CONTINUE:%.*]]
// IR:       omp.body.continue:
// IR-NEXT:    br label [[OMP_INNER_FOR_INC:%.*]]
// IR:       omp.inner.for.inc:
// IR-NEXT:    [[TMP17:%.*]] = load i64, ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    [[ADD50:%.*]] = add nsw i64 [[TMP17]], 1
// IR-NEXT:    store i64 [[ADD50]], ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-NEXT:    br label [[OMP_INNER_FOR_COND]], !llvm.loop [[LOOP4:![0-9]+]]
// IR:       omp.inner.for.end:
// IR-NEXT:    [[TMP18:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_]], align 4
// IR-NEXT:    [[SUB51:%.*]] = sub nsw i32 [[TMP18]], 0
// IR-NEXT:    [[DIV52:%.*]] = sdiv i32 [[SUB51]], 1
// IR-NEXT:    [[MUL53:%.*]] = mul nsw i32 [[DIV52]], 1
// IR-NEXT:    [[ADD54:%.*]] = add nsw i32 0, [[MUL53]]
// IR-NEXT:    store i32 [[ADD54]], ptr [[I19]], align 4
// IR-NEXT:    [[TMP19:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4
// IR-NEXT:    [[SUB55:%.*]] = sub nsw i32 [[TMP19]], 0
// IR-NEXT:    [[DIV56:%.*]] = sdiv i32 [[SUB55]], 1
// IR-NEXT:    [[MUL57:%.*]] = mul nsw i32 [[DIV56]], 1
// IR-NEXT:    [[ADD58:%.*]] = add nsw i32 0, [[MUL57]]
// IR-NEXT:    store i32 [[ADD58]], ptr [[J]], align 4
// IR-NEXT:    [[TMP20:%.*]] = load i32, ptr [[Z]], align 4
// IR-NEXT:    [[TMP21:%.*]] = load i32, ptr [[Z23]], align 4
// IR-NEXT:    [[ADD59:%.*]] = add nsw i32 [[TMP20]], [[TMP21]]
// IR-NEXT:    store i32 [[ADD59]], ptr [[Z]], align 4
// IR-NEXT:    br label [[SIMD_IF_END]]
// IR:       simd.if.end:
// IR-NEXT:    ret void
//
//
// IR-PCH-LABEL: define dso_local void @_Z3fooi
// IR-PCH-SAME: (i32 noundef [[T:%.*]]) #[[ATTR0:[0-9]+]] {
// IR-PCH-NEXT:  entry:
// IR-PCH-NEXT:    [[T_ADDR:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[I:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[FREEZE_POISON:%.*]] = freeze i32 poison
// IR-PCH-NEXT:    store i32 [[FREEZE_POISON]], ptr [[I]], align 4
// IR-PCH-NEXT:    [[J:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i32 poison
// IR-PCH-NEXT:    store i32 [[FREEZE_POISON1]], ptr [[J]], align 4
// IR-PCH-NEXT:    [[Z:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i32 poison
// IR-PCH-NEXT:    store i32 [[FREEZE_POISON2]], ptr [[Z]], align 4
// IR-PCH-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[TMP2TMP3:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[DOTCAPTURE_EXPR_:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[FREEZE_POISON4:%.*]] = freeze i32 poison
// IR-PCH-NEXT:    store i32 [[FREEZE_POISON4]], ptr [[DOTCAPTURE_EXPR_]], align 4
// IR-PCH-NEXT:    [[DOTCAPTURE_EXPR_5:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[FREEZE_POISON6:%.*]] = freeze i32 poison
// IR-PCH-NEXT:    store i32 [[FREEZE_POISON6]], ptr [[DOTCAPTURE_EXPR_5]], align 4
// IR-PCH-NEXT:    [[DOTCAPTURE_EXPR_7:%.*]] = alloca i64, align 8
// IR-PCH-NEXT:    [[FREEZE_POISON8:%.*]] = freeze i64 poison
// IR-PCH-NEXT:    store i64 [[FREEZE_POISON8]], ptr [[DOTCAPTURE_EXPR_7]], align 8
// IR-PCH-NEXT:    [[I13:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[FREEZE_POISON14:%.*]] = freeze i32 poison
// IR-PCH-NEXT:    store i32 [[FREEZE_POISON14]], ptr [[I13]], align 4
// IR-PCH-NEXT:    [[J15:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[FREEZE_POISON16:%.*]] = freeze i32 poison
// IR-PCH-NEXT:    store i32 [[FREEZE_POISON16]], ptr [[J15]], align 4
// IR-PCH-NEXT:    [[DOTOMP_IV:%.*]] = alloca i64, align 8
// IR-PCH-NEXT:    [[FREEZE_POISON18:%.*]] = freeze i64 poison
// IR-PCH-NEXT:    store i64 [[FREEZE_POISON18]], ptr [[DOTOMP_IV]], align 8
// IR-PCH-NEXT:    [[I19:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[FREEZE_POISON20:%.*]] = freeze i32 poison
// IR-PCH-NEXT:    store i32 [[FREEZE_POISON20]], ptr [[I19]], align 4
// IR-PCH-NEXT:    [[J21:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[FREEZE_POISON22:%.*]] = freeze i32 poison
// IR-PCH-NEXT:    store i32 [[FREEZE_POISON22]], ptr [[J21]], align 4
// IR-PCH-NEXT:    [[Z23:%.*]] = alloca i32, align 4
// IR-PCH-NEXT:    [[FREEZE_POISON24:%.*]] = freeze i32 poison
// IR-PCH-NEXT:    store i32 [[FREEZE_POISON24]], ptr [[Z23]], align 4
// IR-PCH-NEXT:    store i32 [[T]], ptr [[T_ADDR]], align 4
// IR-PCH-NEXT:    [[TMP0:%.*]] = load i32, ptr [[T_ADDR]], align 4
// IR-PCH-NEXT:    store i32 [[TMP0]], ptr [[DOTCAPTURE_EXPR_]], align 4
// IR-PCH-NEXT:    [[TMP1:%.*]] = load i32, ptr [[T_ADDR]], align 4
// IR-PCH-NEXT:    store i32 [[TMP1]], ptr [[DOTCAPTURE_EXPR_5]], align 4
// IR-PCH-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_]], align 4
// IR-PCH-NEXT:    [[SUB:%.*]] = sub nsw i32 [[TMP2]], 0
// IR-PCH-NEXT:    [[DIV:%.*]] = sdiv i32 [[SUB]], 1
// IR-PCH-NEXT:    [[CONV:%.*]] = sext i32 [[DIV]] to i64
// IR-PCH-NEXT:    [[TMP3:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4
// IR-PCH-NEXT:    [[SUB9:%.*]] = sub nsw i32 [[TMP3]], 0
// IR-PCH-NEXT:    [[DIV10:%.*]] = sdiv i32 [[SUB9]], 1
// IR-PCH-NEXT:    [[CONV11:%.*]] = sext i32 [[DIV10]] to i64
// IR-PCH-NEXT:    [[MUL:%.*]] = mul nsw i64 [[CONV]], [[CONV11]]
// IR-PCH-NEXT:    [[SUB12:%.*]] = sub nsw i64 [[MUL]], 1
// IR-PCH-NEXT:    store i64 [[SUB12]], ptr [[DOTCAPTURE_EXPR_7]], align 8
// IR-PCH-NEXT:    store i32 0, ptr [[I13]], align 4
// IR-PCH-NEXT:    store i32 0, ptr [[J15]], align 4
// IR-PCH-NEXT:    [[TMP4:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_]], align 4
// IR-PCH-NEXT:    [[CMP:%.*]] = icmp slt i32 0, [[TMP4]]
// IR-PCH-NEXT:    br i1 [[CMP]], label [[LAND_LHS_TRUE:%.*]], label [[SIMD_IF_END:%.*]]
// IR-PCH:       land.lhs.true:
// IR-PCH-NEXT:    [[TMP5:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4
// IR-PCH-NEXT:    [[CMP17:%.*]] = icmp slt i32 0, [[TMP5]]
// IR-PCH-NEXT:    br i1 [[CMP17]], label [[SIMD_IF_THEN:%.*]], label [[SIMD_IF_END]]
// IR-PCH:       simd.if.then:
// IR-PCH-NEXT:    store i64 0, ptr [[DOTOMP_IV]], align 8
// IR-PCH-NEXT:    store i32 0, ptr [[Z23]], align 4
// IR-PCH-NEXT:    br label [[OMP_INNER_FOR_COND:%.*]]
// IR-PCH:       omp.inner.for.cond:
// IR-PCH-NEXT:    [[TMP6:%.*]] = load i64, ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3:![0-9]+]]
// IR-PCH-NEXT:    [[TMP7:%.*]] = load i64, ptr [[DOTCAPTURE_EXPR_7]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[ADD:%.*]] = add nsw i64 [[TMP7]], 1
// IR-PCH-NEXT:    [[CMP25:%.*]] = icmp slt i64 [[TMP6]], [[ADD]]
// IR-PCH-NEXT:    br i1 [[CMP25]], label [[OMP_INNER_FOR_BODY:%.*]], label [[OMP_INNER_FOR_END:%.*]]
// IR-PCH:       omp.inner.for.body:
// IR-PCH-NEXT:    [[TMP8:%.*]] = load i64, ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[TMP9:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[SUB26:%.*]] = sub nsw i32 [[TMP9]], 0
// IR-PCH-NEXT:    [[DIV27:%.*]] = sdiv i32 [[SUB26]], 1
// IR-PCH-NEXT:    [[MUL28:%.*]] = mul nsw i32 1, [[DIV27]]
// IR-PCH-NEXT:    [[CONV29:%.*]] = sext i32 [[MUL28]] to i64
// IR-PCH-NEXT:    [[DIV30:%.*]] = sdiv i64 [[TMP8]], [[CONV29]]
// IR-PCH-NEXT:    [[MUL31:%.*]] = mul nsw i64 [[DIV30]], 1
// IR-PCH-NEXT:    [[ADD32:%.*]] = add nsw i64 0, [[MUL31]]
// IR-PCH-NEXT:    [[CONV33:%.*]] = trunc i64 [[ADD32]] to i32
// IR-PCH-NEXT:    store i32 [[CONV33]], ptr [[I19]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[TMP10:%.*]] = load i64, ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[TMP11:%.*]] = load i64, ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[TMP12:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[SUB34:%.*]] = sub nsw i32 [[TMP12]], 0
// IR-PCH-NEXT:    [[DIV35:%.*]] = sdiv i32 [[SUB34]], 1
// IR-PCH-NEXT:    [[MUL36:%.*]] = mul nsw i32 1, [[DIV35]]
// IR-PCH-NEXT:    [[CONV37:%.*]] = sext i32 [[MUL36]] to i64
// IR-PCH-NEXT:    [[DIV38:%.*]] = sdiv i64 [[TMP11]], [[CONV37]]
// IR-PCH-NEXT:    [[TMP13:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[SUB39:%.*]] = sub nsw i32 [[TMP13]], 0
// IR-PCH-NEXT:    [[DIV40:%.*]] = sdiv i32 [[SUB39]], 1
// IR-PCH-NEXT:    [[MUL41:%.*]] = mul nsw i32 1, [[DIV40]]
// IR-PCH-NEXT:    [[CONV42:%.*]] = sext i32 [[MUL41]] to i64
// IR-PCH-NEXT:    [[MUL43:%.*]] = mul nsw i64 [[DIV38]], [[CONV42]]
// IR-PCH-NEXT:    [[SUB44:%.*]] = sub nsw i64 [[TMP10]], [[MUL43]]
// IR-PCH-NEXT:    [[MUL45:%.*]] = mul nsw i64 [[SUB44]], 1
// IR-PCH-NEXT:    [[ADD46:%.*]] = add nsw i64 0, [[MUL45]]
// IR-PCH-NEXT:    [[CONV47:%.*]] = trunc i64 [[ADD46]] to i32
// IR-PCH-NEXT:    store i32 [[CONV47]], ptr [[J21]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[TMP14:%.*]] = load i32, ptr [[I19]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[TMP15:%.*]] = load i32, ptr [[J21]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[ADD48:%.*]] = add nsw i32 [[TMP14]], [[TMP15]]
// IR-PCH-NEXT:    [[TMP16:%.*]] = load i32, ptr [[Z23]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[ADD49:%.*]] = add nsw i32 [[TMP16]], [[ADD48]]
// IR-PCH-NEXT:    store i32 [[ADD49]], ptr [[Z23]], align 4, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    br label [[OMP_BODY_CONTINUE:%.*]]
// IR-PCH:       omp.body.continue:
// IR-PCH-NEXT:    br label [[OMP_INNER_FOR_INC:%.*]]
// IR-PCH:       omp.inner.for.inc:
// IR-PCH-NEXT:    [[TMP17:%.*]] = load i64, ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    [[ADD50:%.*]] = add nsw i64 [[TMP17]], 1
// IR-PCH-NEXT:    store i64 [[ADD50]], ptr [[DOTOMP_IV]], align 8, !llvm.access.group [[ACC_GRP3]]
// IR-PCH-NEXT:    br label [[OMP_INNER_FOR_COND]], !llvm.loop [[LOOP4:![0-9]+]]
// IR-PCH:       omp.inner.for.end:
// IR-PCH-NEXT:    [[TMP18:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_]], align 4
// IR-PCH-NEXT:    [[SUB51:%.*]] = sub nsw i32 [[TMP18]], 0
// IR-PCH-NEXT:    [[DIV52:%.*]] = sdiv i32 [[SUB51]], 1
// IR-PCH-NEXT:    [[MUL53:%.*]] = mul nsw i32 [[DIV52]], 1
// IR-PCH-NEXT:    [[ADD54:%.*]] = add nsw i32 0, [[MUL53]]
// IR-PCH-NEXT:    store i32 [[ADD54]], ptr [[I19]], align 4
// IR-PCH-NEXT:    [[TMP19:%.*]] = load i32, ptr [[DOTCAPTURE_EXPR_5]], align 4
// IR-PCH-NEXT:    [[SUB55:%.*]] = sub nsw i32 [[TMP19]], 0
// IR-PCH-NEXT:    [[DIV56:%.*]] = sdiv i32 [[SUB55]], 1
// IR-PCH-NEXT:    [[MUL57:%.*]] = mul nsw i32 [[DIV56]], 1
// IR-PCH-NEXT:    [[ADD58:%.*]] = add nsw i32 0, [[MUL57]]
// IR-PCH-NEXT:    store i32 [[ADD58]], ptr [[J]], align 4
// IR-PCH-NEXT:    [[TMP20:%.*]] = load i32, ptr [[Z]], align 4
// IR-PCH-NEXT:    [[TMP21:%.*]] = load i32, ptr [[Z23]], align 4
// IR-PCH-NEXT:    [[ADD59:%.*]] = add nsw i32 [[TMP20]], [[TMP21]]
// IR-PCH-NEXT:    store i32 [[ADD59]], ptr [[Z]], align 4
// IR-PCH-NEXT:    br label [[SIMD_IF_END]]
// IR-PCH:       simd.if.end:
// IR-PCH-NEXT:    ret void
//
