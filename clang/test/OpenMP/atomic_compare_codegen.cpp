// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs
// RUN: %clang_cc1 -verify -triple x86_64-apple-darwin10 -target-cpu core2 -fopenmp -x c -emit-llvm %s -o - | FileCheck %s
// RUN: %clang_cc1 -fopenmp -x c -triple x86_64-apple-darwin10 -target-cpu core2 -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -x c -triple x86_64-apple-darwin10 -target-cpu core2 -include-pch %t -verify %s -emit-llvm -o - | FileCheck %s

// RUN: %clang_cc1 -verify -triple x86_64-apple-darwin10 -target-cpu core2 -fopenmp-simd -x c -emit-llvm %s -o - | FileCheck --check-prefix SIMD-ONLY0 %s
// RUN: %clang_cc1 -fopenmp-simd -x c -triple x86_64-apple-darwin10 -target-cpu core2 -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -x c -triple x86_64-apple-darwin10 -target-cpu core2 -include-pch %t -verify %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY0 %s
// expected-no-diagnostics

#ifndef HEADER
#define HEADER

void foo(void) {
  char cx, ce, cd;
  unsigned char ucx, uce, ucd;
  short sx, se, sd;
  unsigned short usx, use, usd;
  int ix, ie, id;
  unsigned int uix, uie, uid;
  long lx, le, ld;
  unsigned long ulx, ule, uld;
  long long llx, lle, lld;
  unsigned long long ullx, ulle, ulld;
  float fx, fe, fd;
  double dx, de, dd;

#pragma omp atomic compare
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare acq_rel
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare acq_rel
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare acq_rel
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare acq_rel
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare acq_rel
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare acq_rel
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare acq_rel
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare acq_rel
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare acq_rel
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare acq_rel
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare acq_rel
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare acq_rel
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare acq_rel
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare acq_rel
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare acq_rel
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare acq_rel
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare acq_rel
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare acq_rel
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare acq_rel
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare acq_rel
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare acq_rel
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare acq_rel
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare acq_rel
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare acq_rel
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare acquire
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare acquire
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare acquire
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare acquire
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare acquire
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare acquire
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare acquire
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare acquire
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare acquire
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare acquire
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare acquire
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare acquire
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare acquire
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare acquire
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare acquire
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare acquire
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare acquire
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare acquire
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare acquire
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare acquire
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare acquire
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare acquire
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare acquire
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare acquire
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare relaxed
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare relaxed
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare relaxed
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare relaxed
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare relaxed
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare relaxed
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare relaxed
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare relaxed
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare relaxed
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare relaxed
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare relaxed
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare relaxed
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare relaxed
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare relaxed
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare relaxed
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare relaxed
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare relaxed
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare relaxed
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare relaxed
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare relaxed
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare relaxed
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare relaxed
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare relaxed
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare relaxed
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare release
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare release
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare release
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare release
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare release
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare release
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare release
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare release
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare release
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare release
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare release
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare release
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare release
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare release
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare release
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare release
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare release
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare release
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare release
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare release
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare release
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare release
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare release
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare release
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare seq_cst
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare seq_cst
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare seq_cst
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare seq_cst
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare seq_cst
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare seq_cst
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare seq_cst
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare seq_cst
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare seq_cst
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare seq_cst
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare seq_cst
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare seq_cst
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare seq_cst
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare seq_cst
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare seq_cst
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare seq_cst
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare seq_cst
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare seq_cst
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare seq_cst
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare seq_cst
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare seq_cst
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare seq_cst
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare seq_cst
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare seq_cst
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare
  sx = sx > se ? se : sx;
#pragma omp atomic compare
  sx = sx < se ? se : sx;
#pragma omp atomic compare
  sx = se > sx ? se : sx;
#pragma omp atomic compare
  sx = se < sx ? se : sx;
#pragma omp atomic compare
  if (sx > se)
    sx = se;
#pragma omp atomic compare
  if (sx < se)
    sx = se;
#pragma omp atomic compare
  if (se > sx)
    sx = se;
#pragma omp atomic compare
  if (se < sx)
    sx = se;

#pragma omp atomic compare
  sx = sx == se ? sd : sx;
#pragma omp atomic compare
  sx = se == sx ? sd : sx;
#pragma omp atomic compare
  if (sx == se)
    sx = sd;
#pragma omp atomic compare
  if (se == sx)
    sx = sd;

#pragma omp atomic compare
  usx = usx > use ? use : usx;
#pragma omp atomic compare
  usx = usx < use ? use : usx;
#pragma omp atomic compare
  usx = use > usx ? use : usx;
#pragma omp atomic compare
  usx = use < usx ? use : usx;
#pragma omp atomic compare
  if (usx > use)
    usx = use;
#pragma omp atomic compare
  if (usx < use)
    usx = use;
#pragma omp atomic compare
  if (use > usx)
    usx = use;
#pragma omp atomic compare
  if (use < usx)
    usx = use;

#pragma omp atomic compare
  usx = usx == use ? usd : usx;
#pragma omp atomic compare
  usx = use == usx ? usd : usx;
#pragma omp atomic compare
  if (usx == use)
    usx = usd;
#pragma omp atomic compare
  if (use == usx)
    usx = usd;

#pragma omp atomic compare acq_rel
  sx = sx > se ? se : sx;
#pragma omp atomic compare acq_rel
  sx = sx < se ? se : sx;
#pragma omp atomic compare acq_rel
  sx = se > sx ? se : sx;
#pragma omp atomic compare acq_rel
  sx = se < sx ? se : sx;
#pragma omp atomic compare acq_rel
  if (sx > se)
    sx = se;
#pragma omp atomic compare acq_rel
  if (sx < se)
    sx = se;
#pragma omp atomic compare acq_rel
  if (se > sx)
    sx = se;
#pragma omp atomic compare acq_rel
  if (se < sx)
    sx = se;

#pragma omp atomic compare acq_rel
  sx = sx == se ? sd : sx;
#pragma omp atomic compare acq_rel
  sx = se == sx ? sd : sx;
#pragma omp atomic compare acq_rel
  if (sx == se)
    sx = sd;
#pragma omp atomic compare acq_rel
  if (se == sx)
    sx = sd;

#pragma omp atomic compare acq_rel
  usx = usx > use ? use : usx;
#pragma omp atomic compare acq_rel
  usx = usx < use ? use : usx;
#pragma omp atomic compare acq_rel
  usx = use > usx ? use : usx;
#pragma omp atomic compare acq_rel
  usx = use < usx ? use : usx;
#pragma omp atomic compare acq_rel
  if (usx > use)
    usx = use;
#pragma omp atomic compare acq_rel
  if (usx < use)
    usx = use;
#pragma omp atomic compare acq_rel
  if (use > usx)
    usx = use;
#pragma omp atomic compare acq_rel
  if (use < usx)
    usx = use;

#pragma omp atomic compare acq_rel
  usx = usx == use ? usd : usx;
#pragma omp atomic compare acq_rel
  usx = use == usx ? usd : usx;
#pragma omp atomic compare acq_rel
  if (usx == use)
    usx = usd;
#pragma omp atomic compare acq_rel
  if (use == usx)
    usx = usd;

#pragma omp atomic compare acquire
  sx = sx > se ? se : sx;
#pragma omp atomic compare acquire
  sx = sx < se ? se : sx;
#pragma omp atomic compare acquire
  sx = se > sx ? se : sx;
#pragma omp atomic compare acquire
  sx = se < sx ? se : sx;
#pragma omp atomic compare acquire
  if (sx > se)
    sx = se;
#pragma omp atomic compare acquire
  if (sx < se)
    sx = se;
#pragma omp atomic compare acquire
  if (se > sx)
    sx = se;
#pragma omp atomic compare acquire
  if (se < sx)
    sx = se;

#pragma omp atomic compare acquire
  sx = sx == se ? sd : sx;
#pragma omp atomic compare acquire
  sx = se == sx ? sd : sx;
#pragma omp atomic compare acquire
  if (sx == se)
    sx = sd;
#pragma omp atomic compare acquire
  if (se == sx)
    sx = sd;

#pragma omp atomic compare acquire
  usx = usx > use ? use : usx;
#pragma omp atomic compare acquire
  usx = usx < use ? use : usx;
#pragma omp atomic compare acquire
  usx = use > usx ? use : usx;
#pragma omp atomic compare acquire
  usx = use < usx ? use : usx;
#pragma omp atomic compare acquire
  if (usx > use)
    usx = use;
#pragma omp atomic compare acquire
  if (usx < use)
    usx = use;
#pragma omp atomic compare acquire
  if (use > usx)
    usx = use;
#pragma omp atomic compare acquire
  if (use < usx)
    usx = use;

#pragma omp atomic compare acquire
  usx = usx == use ? usd : usx;
#pragma omp atomic compare acquire
  usx = use == usx ? usd : usx;
#pragma omp atomic compare acquire
  if (usx == use)
    usx = usd;
#pragma omp atomic compare acquire
  if (use == usx)
    usx = usd;

#pragma omp atomic compare relaxed
  sx = sx > se ? se : sx;
#pragma omp atomic compare relaxed
  sx = sx < se ? se : sx;
#pragma omp atomic compare relaxed
  sx = se > sx ? se : sx;
#pragma omp atomic compare relaxed
  sx = se < sx ? se : sx;
#pragma omp atomic compare relaxed
  if (sx > se)
    sx = se;
#pragma omp atomic compare relaxed
  if (sx < se)
    sx = se;
#pragma omp atomic compare relaxed
  if (se > sx)
    sx = se;
#pragma omp atomic compare relaxed
  if (se < sx)
    sx = se;

#pragma omp atomic compare relaxed
  sx = sx == se ? sd : sx;
#pragma omp atomic compare relaxed
  sx = se == sx ? sd : sx;
#pragma omp atomic compare relaxed
  if (sx == se)
    sx = sd;
#pragma omp atomic compare relaxed
  if (se == sx)
    sx = sd;

#pragma omp atomic compare relaxed
  usx = usx > use ? use : usx;
#pragma omp atomic compare relaxed
  usx = usx < use ? use : usx;
#pragma omp atomic compare relaxed
  usx = use > usx ? use : usx;
#pragma omp atomic compare relaxed
  usx = use < usx ? use : usx;
#pragma omp atomic compare relaxed
  if (usx > use)
    usx = use;
#pragma omp atomic compare relaxed
  if (usx < use)
    usx = use;
#pragma omp atomic compare relaxed
  if (use > usx)
    usx = use;
#pragma omp atomic compare relaxed
  if (use < usx)
    usx = use;

#pragma omp atomic compare relaxed
  usx = usx == use ? usd : usx;
#pragma omp atomic compare relaxed
  usx = use == usx ? usd : usx;
#pragma omp atomic compare relaxed
  if (usx == use)
    usx = usd;
#pragma omp atomic compare relaxed
  if (use == usx)
    usx = usd;

#pragma omp atomic compare release
  sx = sx > se ? se : sx;
#pragma omp atomic compare release
  sx = sx < se ? se : sx;
#pragma omp atomic compare release
  sx = se > sx ? se : sx;
#pragma omp atomic compare release
  sx = se < sx ? se : sx;
#pragma omp atomic compare release
  if (sx > se)
    sx = se;
#pragma omp atomic compare release
  if (sx < se)
    sx = se;
#pragma omp atomic compare release
  if (se > sx)
    sx = se;
#pragma omp atomic compare release
  if (se < sx)
    sx = se;

#pragma omp atomic compare release
  sx = sx == se ? sd : sx;
#pragma omp atomic compare release
  sx = se == sx ? sd : sx;
#pragma omp atomic compare release
  if (sx == se)
    sx = sd;
#pragma omp atomic compare release
  if (se == sx)
    sx = sd;

#pragma omp atomic compare release
  usx = usx > use ? use : usx;
#pragma omp atomic compare release
  usx = usx < use ? use : usx;
#pragma omp atomic compare release
  usx = use > usx ? use : usx;
#pragma omp atomic compare release
  usx = use < usx ? use : usx;
#pragma omp atomic compare release
  if (usx > use)
    usx = use;
#pragma omp atomic compare release
  if (usx < use)
    usx = use;
#pragma omp atomic compare release
  if (use > usx)
    usx = use;
#pragma omp atomic compare release
  if (use < usx)
    usx = use;

#pragma omp atomic compare release
  usx = usx == use ? usd : usx;
#pragma omp atomic compare release
  usx = use == usx ? usd : usx;
#pragma omp atomic compare release
  if (usx == use)
    usx = usd;
#pragma omp atomic compare release
  if (use == usx)
    usx = usd;

#pragma omp atomic compare seq_cst
  sx = sx > se ? se : sx;
#pragma omp atomic compare seq_cst
  sx = sx < se ? se : sx;
#pragma omp atomic compare seq_cst
  sx = se > sx ? se : sx;
#pragma omp atomic compare seq_cst
  sx = se < sx ? se : sx;
#pragma omp atomic compare seq_cst
  if (sx > se)
    sx = se;
#pragma omp atomic compare seq_cst
  if (sx < se)
    sx = se;
#pragma omp atomic compare seq_cst
  if (se > sx)
    sx = se;
#pragma omp atomic compare seq_cst
  if (se < sx)
    sx = se;

#pragma omp atomic compare seq_cst
  sx = sx == se ? sd : sx;
#pragma omp atomic compare seq_cst
  sx = se == sx ? sd : sx;
#pragma omp atomic compare seq_cst
  if (sx == se)
    sx = sd;
#pragma omp atomic compare seq_cst
  if (se == sx)
    sx = sd;

#pragma omp atomic compare seq_cst
  usx = usx > use ? use : usx;
#pragma omp atomic compare seq_cst
  usx = usx < use ? use : usx;
#pragma omp atomic compare seq_cst
  usx = use > usx ? use : usx;
#pragma omp atomic compare seq_cst
  usx = use < usx ? use : usx;
#pragma omp atomic compare seq_cst
  if (usx > use)
    usx = use;
#pragma omp atomic compare seq_cst
  if (usx < use)
    usx = use;
#pragma omp atomic compare seq_cst
  if (use > usx)
    usx = use;
#pragma omp atomic compare seq_cst
  if (use < usx)
    usx = use;

#pragma omp atomic compare seq_cst
  usx = usx == use ? usd : usx;
#pragma omp atomic compare seq_cst
  usx = use == usx ? usd : usx;
#pragma omp atomic compare seq_cst
  if (usx == use)
    usx = usd;
#pragma omp atomic compare seq_cst
  if (use == usx)
    usx = usd;

#pragma omp atomic compare
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare
  ix = ix == ie ? id : ix;
#pragma omp atomic compare
  ix = ie == ix ? id : ix;
#pragma omp atomic compare
  if (ix == ie)
    ix = id;
#pragma omp atomic compare
  if (ie == ix)
    ix = id;

#pragma omp atomic compare
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare acq_rel
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare acq_rel
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare acq_rel
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare acq_rel
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare acq_rel
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare acq_rel
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare acq_rel
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare acq_rel
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare acq_rel
  ix = ix == ie ? id : ix;
#pragma omp atomic compare acq_rel
  ix = ie == ix ? id : ix;
#pragma omp atomic compare acq_rel
  if (ix == ie)
    ix = id;
#pragma omp atomic compare acq_rel
  if (ie == ix)
    ix = id;

#pragma omp atomic compare acq_rel
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare acq_rel
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare acq_rel
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare acq_rel
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare acq_rel
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare acq_rel
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare acq_rel
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare acq_rel
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare acq_rel
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare acq_rel
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare acq_rel
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare acq_rel
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare acquire
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare acquire
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare acquire
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare acquire
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare acquire
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare acquire
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare acquire
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare acquire
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare acquire
  ix = ix == ie ? id : ix;
#pragma omp atomic compare acquire
  ix = ie == ix ? id : ix;
#pragma omp atomic compare acquire
  if (ix == ie)
    ix = id;
#pragma omp atomic compare acquire
  if (ie == ix)
    ix = id;

#pragma omp atomic compare acquire
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare acquire
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare acquire
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare acquire
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare acquire
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare acquire
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare acquire
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare acquire
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare acquire
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare acquire
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare acquire
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare acquire
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare relaxed
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare relaxed
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare relaxed
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare relaxed
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare relaxed
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare relaxed
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare relaxed
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare relaxed
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare relaxed
  ix = ix == ie ? id : ix;
#pragma omp atomic compare relaxed
  ix = ie == ix ? id : ix;
#pragma omp atomic compare relaxed
  if (ix == ie)
    ix = id;
#pragma omp atomic compare relaxed
  if (ie == ix)
    ix = id;

#pragma omp atomic compare relaxed
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare relaxed
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare relaxed
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare relaxed
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare relaxed
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare relaxed
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare relaxed
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare relaxed
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare relaxed
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare relaxed
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare relaxed
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare relaxed
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare release
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare release
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare release
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare release
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare release
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare release
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare release
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare release
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare release
  ix = ix == ie ? id : ix;
#pragma omp atomic compare release
  ix = ie == ix ? id : ix;
#pragma omp atomic compare release
  if (ix == ie)
    ix = id;
#pragma omp atomic compare release
  if (ie == ix)
    ix = id;

#pragma omp atomic compare release
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare release
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare release
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare release
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare release
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare release
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare release
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare release
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare release
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare release
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare release
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare release
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare seq_cst
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare seq_cst
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare seq_cst
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare seq_cst
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare seq_cst
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare seq_cst
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare seq_cst
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare seq_cst
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare seq_cst
  ix = ix == ie ? id : ix;
#pragma omp atomic compare seq_cst
  ix = ie == ix ? id : ix;
#pragma omp atomic compare seq_cst
  if (ix == ie)
    ix = id;
#pragma omp atomic compare seq_cst
  if (ie == ix)
    ix = id;

#pragma omp atomic compare seq_cst
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare seq_cst
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare seq_cst
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare seq_cst
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare seq_cst
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare seq_cst
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare seq_cst
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare seq_cst
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare seq_cst
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare seq_cst
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare seq_cst
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare seq_cst
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare
  lx = lx > le ? le : lx;
#pragma omp atomic compare
  lx = lx < le ? le : lx;
#pragma omp atomic compare
  lx = le > lx ? le : lx;
#pragma omp atomic compare
  lx = le < lx ? le : lx;
#pragma omp atomic compare
  if (lx > le)
    lx = le;
#pragma omp atomic compare
  if (lx < le)
    lx = le;
#pragma omp atomic compare
  if (le > lx)
    lx = le;
#pragma omp atomic compare
  if (le < lx)
    lx = le;

#pragma omp atomic compare
  lx = lx == le ? ld : lx;
#pragma omp atomic compare
  lx = le == lx ? ld : lx;
#pragma omp atomic compare
  if (lx == le)
    lx = ld;
#pragma omp atomic compare
  if (le == lx)
    lx = ld;

#pragma omp atomic compare
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare acq_rel
  lx = lx > le ? le : lx;
#pragma omp atomic compare acq_rel
  lx = lx < le ? le : lx;
#pragma omp atomic compare acq_rel
  lx = le > lx ? le : lx;
#pragma omp atomic compare acq_rel
  lx = le < lx ? le : lx;
#pragma omp atomic compare acq_rel
  if (lx > le)
    lx = le;
#pragma omp atomic compare acq_rel
  if (lx < le)
    lx = le;
#pragma omp atomic compare acq_rel
  if (le > lx)
    lx = le;
#pragma omp atomic compare acq_rel
  if (le < lx)
    lx = le;

#pragma omp atomic compare acq_rel
  lx = lx == le ? ld : lx;
#pragma omp atomic compare acq_rel
  lx = le == lx ? ld : lx;
#pragma omp atomic compare acq_rel
  if (lx == le)
    lx = ld;
#pragma omp atomic compare acq_rel
  if (le == lx)
    lx = ld;

#pragma omp atomic compare acq_rel
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare acq_rel
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare acq_rel
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare acq_rel
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare acq_rel
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare acq_rel
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare acq_rel
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare acq_rel
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare acq_rel
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare acq_rel
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare acq_rel
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare acq_rel
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare acquire
  lx = lx > le ? le : lx;
#pragma omp atomic compare acquire
  lx = lx < le ? le : lx;
#pragma omp atomic compare acquire
  lx = le > lx ? le : lx;
#pragma omp atomic compare acquire
  lx = le < lx ? le : lx;
#pragma omp atomic compare acquire
  if (lx > le)
    lx = le;
#pragma omp atomic compare acquire
  if (lx < le)
    lx = le;
#pragma omp atomic compare acquire
  if (le > lx)
    lx = le;
#pragma omp atomic compare acquire
  if (le < lx)
    lx = le;

#pragma omp atomic compare acquire
  lx = lx == le ? ld : lx;
#pragma omp atomic compare acquire
  lx = le == lx ? ld : lx;
#pragma omp atomic compare acquire
  if (lx == le)
    lx = ld;
#pragma omp atomic compare acquire
  if (le == lx)
    lx = ld;

#pragma omp atomic compare acquire
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare acquire
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare acquire
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare acquire
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare acquire
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare acquire
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare acquire
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare acquire
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare acquire
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare acquire
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare acquire
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare acquire
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare relaxed
  lx = lx > le ? le : lx;
#pragma omp atomic compare relaxed
  lx = lx < le ? le : lx;
#pragma omp atomic compare relaxed
  lx = le > lx ? le : lx;
#pragma omp atomic compare relaxed
  lx = le < lx ? le : lx;
#pragma omp atomic compare relaxed
  if (lx > le)
    lx = le;
#pragma omp atomic compare relaxed
  if (lx < le)
    lx = le;
#pragma omp atomic compare relaxed
  if (le > lx)
    lx = le;
#pragma omp atomic compare relaxed
  if (le < lx)
    lx = le;

#pragma omp atomic compare relaxed
  lx = lx == le ? ld : lx;
#pragma omp atomic compare relaxed
  lx = le == lx ? ld : lx;
#pragma omp atomic compare relaxed
  if (lx == le)
    lx = ld;
#pragma omp atomic compare relaxed
  if (le == lx)
    lx = ld;

#pragma omp atomic compare relaxed
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare relaxed
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare relaxed
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare relaxed
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare relaxed
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare relaxed
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare relaxed
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare relaxed
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare relaxed
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare relaxed
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare relaxed
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare relaxed
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare release
  lx = lx > le ? le : lx;
#pragma omp atomic compare release
  lx = lx < le ? le : lx;
#pragma omp atomic compare release
  lx = le > lx ? le : lx;
#pragma omp atomic compare release
  lx = le < lx ? le : lx;
#pragma omp atomic compare release
  if (lx > le)
    lx = le;
#pragma omp atomic compare release
  if (lx < le)
    lx = le;
#pragma omp atomic compare release
  if (le > lx)
    lx = le;
#pragma omp atomic compare release
  if (le < lx)
    lx = le;

#pragma omp atomic compare release
  lx = lx == le ? ld : lx;
#pragma omp atomic compare release
  lx = le == lx ? ld : lx;
#pragma omp atomic compare release
  if (lx == le)
    lx = ld;
#pragma omp atomic compare release
  if (le == lx)
    lx = ld;

#pragma omp atomic compare release
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare release
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare release
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare release
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare release
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare release
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare release
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare release
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare release
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare release
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare release
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare release
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare seq_cst
  lx = lx > le ? le : lx;
#pragma omp atomic compare seq_cst
  lx = lx < le ? le : lx;
#pragma omp atomic compare seq_cst
  lx = le > lx ? le : lx;
#pragma omp atomic compare seq_cst
  lx = le < lx ? le : lx;
#pragma omp atomic compare seq_cst
  if (lx > le)
    lx = le;
#pragma omp atomic compare seq_cst
  if (lx < le)
    lx = le;
#pragma omp atomic compare seq_cst
  if (le > lx)
    lx = le;
#pragma omp atomic compare seq_cst
  if (le < lx)
    lx = le;

#pragma omp atomic compare seq_cst
  lx = lx == le ? ld : lx;
#pragma omp atomic compare seq_cst
  lx = le == lx ? ld : lx;
#pragma omp atomic compare seq_cst
  if (lx == le)
    lx = ld;
#pragma omp atomic compare seq_cst
  if (le == lx)
    lx = ld;

#pragma omp atomic compare seq_cst
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare seq_cst
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare seq_cst
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare seq_cst
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare seq_cst
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare seq_cst
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare seq_cst
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare seq_cst
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare seq_cst
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare seq_cst
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare seq_cst
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare seq_cst
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare acq_rel
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare acq_rel
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare acq_rel
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare acq_rel
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare acq_rel
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare acq_rel
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare acq_rel
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare acq_rel
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare acq_rel
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare acq_rel
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare acq_rel
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare acq_rel
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare acq_rel
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare acq_rel
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare acq_rel
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare acq_rel
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare acq_rel
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare acq_rel
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare acq_rel
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare acq_rel
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare acq_rel
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare acq_rel
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare acq_rel
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare acq_rel
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare acquire
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare acquire
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare acquire
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare acquire
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare acquire
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare acquire
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare acquire
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare acquire
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare acquire
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare acquire
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare acquire
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare acquire
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare acquire
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare acquire
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare acquire
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare acquire
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare acquire
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare acquire
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare acquire
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare acquire
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare acquire
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare acquire
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare acquire
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare acquire
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare relaxed
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare relaxed
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare relaxed
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare relaxed
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare relaxed
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare relaxed
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare relaxed
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare relaxed
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare relaxed
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare relaxed
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare relaxed
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare relaxed
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare relaxed
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare relaxed
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare relaxed
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare relaxed
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare relaxed
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare relaxed
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare relaxed
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare relaxed
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare relaxed
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare relaxed
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare relaxed
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare relaxed
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare release
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare release
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare release
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare release
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare release
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare release
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare release
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare release
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare release
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare release
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare release
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare release
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare release
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare release
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare release
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare release
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare release
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare release
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare release
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare release
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare release
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare release
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare release
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare release
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare seq_cst
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare seq_cst
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare seq_cst
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare seq_cst
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare seq_cst
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare seq_cst
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare seq_cst
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare seq_cst
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare seq_cst
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare seq_cst
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare seq_cst
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare seq_cst
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare seq_cst
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare seq_cst
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare seq_cst
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare seq_cst
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare seq_cst
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare seq_cst
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare seq_cst
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare seq_cst
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare seq_cst
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare seq_cst
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare seq_cst
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare seq_cst
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare acq_rel
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare acq_rel
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare acq_rel
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare acq_rel
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare acq_rel
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare acq_rel
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare acq_rel
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare acq_rel
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare acquire
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare acquire
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare acquire
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare acquire
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare acquire
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare acquire
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare acquire
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare acquire
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare relaxed
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare relaxed
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare relaxed
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare relaxed
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare relaxed
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare relaxed
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare relaxed
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare relaxed
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare release
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare release
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare release
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare release
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare release
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare release
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare release
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare release
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare seq_cst
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare seq_cst
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare seq_cst
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare seq_cst
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare seq_cst
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare seq_cst
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare seq_cst
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare seq_cst
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare
  dx = dx > de ? de : dx;
#pragma omp atomic compare
  dx = dx < de ? de : dx;
#pragma omp atomic compare
  dx = de > dx ? de : dx;
#pragma omp atomic compare
  dx = de < dx ? de : dx;
#pragma omp atomic compare
  if (dx > de)
    dx = de;
#pragma omp atomic compare
  if (dx < de)
    dx = de;
#pragma omp atomic compare
  if (de > dx)
    dx = de;
#pragma omp atomic compare
  if (de < dx)
    dx = de;

#pragma omp atomic compare acq_rel
  dx = dx > de ? de : dx;
#pragma omp atomic compare acq_rel
  dx = dx < de ? de : dx;
#pragma omp atomic compare acq_rel
  dx = de > dx ? de : dx;
#pragma omp atomic compare acq_rel
  dx = de < dx ? de : dx;
#pragma omp atomic compare acq_rel
  if (dx > de)
    dx = de;
#pragma omp atomic compare acq_rel
  if (dx < de)
    dx = de;
#pragma omp atomic compare acq_rel
  if (de > dx)
    dx = de;
#pragma omp atomic compare acq_rel
  if (de < dx)
    dx = de;

#pragma omp atomic compare acquire
  dx = dx > de ? de : dx;
#pragma omp atomic compare acquire
  dx = dx < de ? de : dx;
#pragma omp atomic compare acquire
  dx = de > dx ? de : dx;
#pragma omp atomic compare acquire
  dx = de < dx ? de : dx;
#pragma omp atomic compare acquire
  if (dx > de)
    dx = de;
#pragma omp atomic compare acquire
  if (dx < de)
    dx = de;
#pragma omp atomic compare acquire
  if (de > dx)
    dx = de;
#pragma omp atomic compare acquire
  if (de < dx)
    dx = de;

#pragma omp atomic compare relaxed
  dx = dx > de ? de : dx;
#pragma omp atomic compare relaxed
  dx = dx < de ? de : dx;
#pragma omp atomic compare relaxed
  dx = de > dx ? de : dx;
#pragma omp atomic compare relaxed
  dx = de < dx ? de : dx;
#pragma omp atomic compare relaxed
  if (dx > de)
    dx = de;
#pragma omp atomic compare relaxed
  if (dx < de)
    dx = de;
#pragma omp atomic compare relaxed
  if (de > dx)
    dx = de;
#pragma omp atomic compare relaxed
  if (de < dx)
    dx = de;

#pragma omp atomic compare release
  dx = dx > de ? de : dx;
#pragma omp atomic compare release
  dx = dx < de ? de : dx;
#pragma omp atomic compare release
  dx = de > dx ? de : dx;
#pragma omp atomic compare release
  dx = de < dx ? de : dx;
#pragma omp atomic compare release
  if (dx > de)
    dx = de;
#pragma omp atomic compare release
  if (dx < de)
    dx = de;
#pragma omp atomic compare release
  if (de > dx)
    dx = de;
#pragma omp atomic compare release
  if (de < dx)
    dx = de;

#pragma omp atomic compare seq_cst
  dx = dx > de ? de : dx;
#pragma omp atomic compare seq_cst
  dx = dx < de ? de : dx;
#pragma omp atomic compare seq_cst
  dx = de > dx ? de : dx;
#pragma omp atomic compare seq_cst
  dx = de < dx ? de : dx;
#pragma omp atomic compare seq_cst
  if (dx > de)
    dx = de;
#pragma omp atomic compare seq_cst
  if (dx < de)
    dx = de;
#pragma omp atomic compare seq_cst
  if (de > dx)
    dx = de;
#pragma omp atomic compare seq_cst
  if (de < dx)
    dx = de;
}

void bar() {
  char cx, cv, cr, ce, cd;
  unsigned char ucx, ucv, ucr, uce, ucd;
  short sx, sv, sr, se, sd;
  unsigned short usx, usv, usr, use, usd;
  int ix, iv, ir, ie, id;
  unsigned int uix, uiv, uir, uie, uid;
  long lx, lv, lr, le, ld;
  unsigned long ulx, ulv, ulr, ule, uld;
  long long llx, llv, llr, lle, lld;
  unsigned long long ullx, ullv, ullr, ulle, ulld;
  float fx, fv, fe, fd;
  double dx, dv, de, dd;

#pragma omp atomic compare capture
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture release
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture release
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture release
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture release
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture release
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture release
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture release
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture release
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture release
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture release
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture release
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture release
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture release
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture release
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture release
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture release
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture release
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture release
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture release
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture release
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture release
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture release
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture release
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture release
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture release
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture release
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture release
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture release
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture release
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture release
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture release
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture release
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture release
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture release
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture release
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture release
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture release
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture release
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture release
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture release
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture release
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture release
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture release
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture release
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture release
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture release
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }

#pragma omp atomic compare capture release
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture release
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
}


char cxevd() {
  char cx, cv, ce, cd;

#pragma omp atomic compare capture
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

#pragma omp atomic compare capture acquire
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture acquire
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

#pragma omp atomic compare capture release
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture release
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

  return cv;
}

unsigned char ucxevd() {
  unsigned char ucx, ucv, uce, ucd;

#pragma omp atomic compare capture
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

#pragma omp atomic compare capture release
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture release
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

  return ucv;
}

short sxevd() {
  short sx, sv, se, sd;

#pragma omp atomic compare capture
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

#pragma omp atomic compare capture acquire
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture acquire
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

#pragma omp atomic compare capture release
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture release
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

  return sv;
}

unsigned short usxevd() {
  unsigned short usx, usv, use, usd;

#pragma omp atomic compare capture
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

#pragma omp atomic compare capture acquire
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture acquire
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

#pragma omp atomic compare capture release
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture release
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

  return usv;
}

int ixevd() {
  int ix, iv, ie, id;

#pragma omp atomic compare capture
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

#pragma omp atomic compare capture acquire
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture acquire
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture relaxed
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

#pragma omp atomic compare capture release
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture release
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

  return iv;
}

unsigned int uixevd() {
  unsigned int uix, uiv, uie, uid;

#pragma omp atomic compare capture
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture acquire
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

#pragma omp atomic compare capture release
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture release
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

  return uiv;
}

long lxevd() {
  long lx, lv, le, ld;

#pragma omp atomic compare capture
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

#pragma omp atomic compare capture acquire
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture acquire
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

#pragma omp atomic compare capture release
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture release
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

  return lv;
}

unsigned long ulxevd() {
  unsigned long ulx, ulv, ule, uld;

#pragma omp atomic compare capture
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

#pragma omp atomic compare capture release
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture release
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

  return ulv;
}

long long llxevd() {
  long long llx, llv, lle, lld;

#pragma omp atomic compare capture
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

#pragma omp atomic compare capture acquire
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture acquire
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

#pragma omp atomic compare capture release
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture release
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

  return llv;
}

unsigned long long ullxevd() {
  unsigned long long ullx, ullv, ulle, ulld;

#pragma omp atomic compare capture
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

#pragma omp atomic compare capture release
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture release
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

  return ullv;
}

float fxevd() {
  float fx, fv, fe, fd;

#pragma omp atomic compare capture
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

#pragma omp atomic compare capture acquire
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture acquire
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture relaxed
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

#pragma omp atomic compare capture release
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture release
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

  return fv;
}

double dxevd() {
  double dx, dv, de, dd;

#pragma omp atomic compare capture
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

#pragma omp atomic compare capture acquire
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture acquire
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture relaxed
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

#pragma omp atomic compare capture release
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture release
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

  return dv;
}


double fail_dxevd() {
  double dx, dv, de, dd;

#pragma omp atomic compare capture relaxed fail(relaxed)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acquire fail(relaxed)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture release fail(relaxed)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acq_rel fail(relaxed)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture seq_cst fail(relaxed)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture relaxed fail(acquire)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acquire fail(acquire)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture release fail(acquire)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acq_rel fail(acquire)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture seq_cst fail(acquire)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture relaxed fail(seq_cst)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acquire fail(seq_cst)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture release fail(seq_cst)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acq_rel fail(seq_cst)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture seq_cst fail(seq_cst)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare seq_cst fail(acquire)
  dx = dx < de ? de : dx;

#pragma omp atomic compare relaxed fail(seq_cst)
  dx = dx > de ? de : dx;

  return dx;
}

#endif
// CHECK-LABEL: @foo(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CX:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[CE:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[CD:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCX:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCE:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCD:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[SX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[IX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[LX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[FX:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FE:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FD:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[DX:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DE:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DD:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON]], ptr [[CX]], align 1
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON1]], ptr [[CE]], align 1
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON2]], ptr [[CD]], align 1
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON3]], ptr [[UCX]], align 1
// CHECK-NEXT:    [[FREEZE_POISON4:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON4]], ptr [[UCE]], align 1
// CHECK-NEXT:    [[FREEZE_POISON5:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON5]], ptr [[UCD]], align 1
// CHECK-NEXT:    [[FREEZE_POISON6:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON6]], ptr [[SX]], align 2
// CHECK-NEXT:    [[FREEZE_POISON7:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON7]], ptr [[SE]], align 2
// CHECK-NEXT:    [[FREEZE_POISON8:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON8]], ptr [[SD]], align 2
// CHECK-NEXT:    [[FREEZE_POISON9:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON9]], ptr [[USX]], align 2
// CHECK-NEXT:    [[FREEZE_POISON10:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON10]], ptr [[USE]], align 2
// CHECK-NEXT:    [[FREEZE_POISON11:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON11]], ptr [[USD]], align 2
// CHECK-NEXT:    [[FREEZE_POISON12:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON12]], ptr [[IX]], align 4
// CHECK-NEXT:    [[FREEZE_POISON13:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON13]], ptr [[IE]], align 4
// CHECK-NEXT:    [[FREEZE_POISON14:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON14]], ptr [[ID]], align 4
// CHECK-NEXT:    [[FREEZE_POISON15:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON15]], ptr [[UIX]], align 4
// CHECK-NEXT:    [[FREEZE_POISON16:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON16]], ptr [[UIE]], align 4
// CHECK-NEXT:    [[FREEZE_POISON17:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON17]], ptr [[UID]], align 4
// CHECK-NEXT:    [[FREEZE_POISON18:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON18]], ptr [[LX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON19:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON19]], ptr [[LE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON20:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON20]], ptr [[LD]], align 8
// CHECK-NEXT:    [[FREEZE_POISON21:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON21]], ptr [[ULX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON22:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON22]], ptr [[ULE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON23:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON23]], ptr [[ULD]], align 8
// CHECK-NEXT:    [[FREEZE_POISON24:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON24]], ptr [[LLX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON25:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON25]], ptr [[LLE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON26:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON26]], ptr [[LLD]], align 8
// CHECK-NEXT:    [[FREEZE_POISON27:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON27]], ptr [[ULLX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON28:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON28]], ptr [[ULLE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON29:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON29]], ptr [[ULLD]], align 8
// CHECK-NEXT:    [[FREEZE_POISON30:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON30]], ptr [[FX]], align 4
// CHECK-NEXT:    [[FREEZE_POISON31:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON31]], ptr [[FE]], align 4
// CHECK-NEXT:    [[FREEZE_POISON32:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON32]], ptr [[FD]], align 4
// CHECK-NEXT:    [[FREEZE_POISON33:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON33]], ptr [[DX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON34:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON34]], ptr [[DE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON35:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON35]], ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP0]] monotonic, align 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP2]] monotonic, align 1
// CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP5:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP4]] monotonic, align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP7:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP6]] monotonic, align 1
// CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP8]] monotonic, align 1
// CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP11:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP10]] monotonic, align 1
// CHECK-NEXT:    [[TMP12:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP12]] monotonic, align 1
// CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP15:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP14]] monotonic, align 1
// CHECK-NEXT:    [[TMP16:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP17:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP16]], i8 [[TMP17]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP19:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP20:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP21:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP19]], i8 [[TMP20]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP22:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP23:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP24:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP22]], i8 [[TMP23]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP25:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP26:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP25]], i8 [[TMP26]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP28:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP28]] monotonic, align 1
// CHECK-NEXT:    [[TMP30:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP30]] monotonic, align 1
// CHECK-NEXT:    [[TMP32:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP33:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP32]] monotonic, align 1
// CHECK-NEXT:    [[TMP34:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP34]] monotonic, align 1
// CHECK-NEXT:    [[TMP36:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP37:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP36]] monotonic, align 1
// CHECK-NEXT:    [[TMP38:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP38]] monotonic, align 1
// CHECK-NEXT:    [[TMP40:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP41:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP40]] monotonic, align 1
// CHECK-NEXT:    [[TMP42:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP43:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP42]] monotonic, align 1
// CHECK-NEXT:    [[TMP44:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP45:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP46:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP44]], i8 [[TMP45]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP47:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP48:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP49:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP47]], i8 [[TMP48]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP50:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP51:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP52:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP50]], i8 [[TMP51]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP53:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP54:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP55:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP53]], i8 [[TMP54]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP56:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP56]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1:[0-9]+]])
// CHECK-NEXT:    [[TMP58:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP59:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP58]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP60:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP61:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP60]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP62:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP63:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP62]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP64:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP65:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP64]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP66:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP66]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP68:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP68]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP70:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP71:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP70]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP72:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP73:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP74:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP72]], i8 [[TMP73]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP75:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP76:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP75]], i8 [[TMP76]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP78:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP79:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP80:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP78]], i8 [[TMP79]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP81:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP82:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP83:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP81]], i8 [[TMP82]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP84:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP85:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP84]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP86:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP87:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP86]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP88:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP88]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP90]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP93:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP92]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP94:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP95:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP94]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP96]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP98:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP99:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP98]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP101:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP102:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP100]], i8 [[TMP101]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP103:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP104:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP105:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP103]], i8 [[TMP104]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP106:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP107:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP108:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP106]], i8 [[TMP107]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP109:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP110:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP111:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP109]], i8 [[TMP110]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP112]] acquire, align 1
// CHECK-NEXT:    [[TMP114:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP115:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP114]] acquire, align 1
// CHECK-NEXT:    [[TMP116:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP117:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP116]] acquire, align 1
// CHECK-NEXT:    [[TMP118:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP118]] acquire, align 1
// CHECK-NEXT:    [[TMP120:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP121:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP120]] acquire, align 1
// CHECK-NEXT:    [[TMP122:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP122]] acquire, align 1
// CHECK-NEXT:    [[TMP124:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP125:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP124]] acquire, align 1
// CHECK-NEXT:    [[TMP126:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP127:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP126]] acquire, align 1
// CHECK-NEXT:    [[TMP128:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP129:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP130:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP128]], i8 [[TMP129]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP131:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP132:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP133:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP131]], i8 [[TMP132]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP134:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP135:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP136:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP134]], i8 [[TMP135]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP137:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP138:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP139:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP137]], i8 [[TMP138]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP140:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP141:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP140]] acquire, align 1
// CHECK-NEXT:    [[TMP142:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP143:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP142]] acquire, align 1
// CHECK-NEXT:    [[TMP144:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP145:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP144]] acquire, align 1
// CHECK-NEXT:    [[TMP146:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP147:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP146]] acquire, align 1
// CHECK-NEXT:    [[TMP148:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP149:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP148]] acquire, align 1
// CHECK-NEXT:    [[TMP150:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP151:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP150]] acquire, align 1
// CHECK-NEXT:    [[TMP152:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP153:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP152]] acquire, align 1
// CHECK-NEXT:    [[TMP154:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP155:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP154]] acquire, align 1
// CHECK-NEXT:    [[TMP156:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP157:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP158:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP156]], i8 [[TMP157]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP159:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP160:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP161:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP159]], i8 [[TMP160]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP162:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP163:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP164:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP162]], i8 [[TMP163]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP165:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP166:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP167:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP165]], i8 [[TMP166]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP168:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP169:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP168]] monotonic, align 1
// CHECK-NEXT:    [[TMP170:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP171:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP170]] monotonic, align 1
// CHECK-NEXT:    [[TMP172:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP173:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP172]] monotonic, align 1
// CHECK-NEXT:    [[TMP174:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP175:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP174]] monotonic, align 1
// CHECK-NEXT:    [[TMP176:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP177:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP176]] monotonic, align 1
// CHECK-NEXT:    [[TMP178:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP179:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP178]] monotonic, align 1
// CHECK-NEXT:    [[TMP180:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP181:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP180]] monotonic, align 1
// CHECK-NEXT:    [[TMP182:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP183:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP182]] monotonic, align 1
// CHECK-NEXT:    [[TMP184:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP185:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP186:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP184]], i8 [[TMP185]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP187:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP188:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP189:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP187]], i8 [[TMP188]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP190:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP191:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP192:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP190]], i8 [[TMP191]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP193:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP194:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP195:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP193]], i8 [[TMP194]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP196:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP197:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP196]] monotonic, align 1
// CHECK-NEXT:    [[TMP198:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP199:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP198]] monotonic, align 1
// CHECK-NEXT:    [[TMP200:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP201:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP200]] monotonic, align 1
// CHECK-NEXT:    [[TMP202:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP203:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP202]] monotonic, align 1
// CHECK-NEXT:    [[TMP204:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP205:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP204]] monotonic, align 1
// CHECK-NEXT:    [[TMP206:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP207:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP206]] monotonic, align 1
// CHECK-NEXT:    [[TMP208:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP209:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP208]] monotonic, align 1
// CHECK-NEXT:    [[TMP210:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP211:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP210]] monotonic, align 1
// CHECK-NEXT:    [[TMP212:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP213:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP214:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP212]], i8 [[TMP213]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP215:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP216:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP217:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP215]], i8 [[TMP216]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP218:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP219:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP220:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP218]], i8 [[TMP219]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP221:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP222:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP223:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP221]], i8 [[TMP222]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP224:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP225:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP224]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP226:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP227:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP226]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP228:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP229:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP228]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP230:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP231:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP230]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP232:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP233:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP232]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP234:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP235:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP234]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP236:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP237:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP236]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP238:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP239:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP238]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP240:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP241:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP242:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP240]], i8 [[TMP241]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP243:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP244:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP245:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP243]], i8 [[TMP244]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP246:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP247:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP248:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP246]], i8 [[TMP247]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP249:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP250:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP251:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP249]], i8 [[TMP250]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP252:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP253:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP252]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP254:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP255:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP254]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP256:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP257:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP256]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP258:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP259:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP258]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP260:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP261:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP260]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP262:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP263:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP262]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP264:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP265:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP264]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP266:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP267:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP266]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP268:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP269:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP270:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP268]], i8 [[TMP269]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP271:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP272:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP273:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP271]], i8 [[TMP272]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP274:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP275:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP276:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP274]], i8 [[TMP275]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP277:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP278:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP279:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP277]], i8 [[TMP278]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP280:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP281:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP280]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP282:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP283:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP282]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP284:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP285:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP284]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP286:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP287:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP286]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP288:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP289:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP288]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP290:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP291:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP290]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP292:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP293:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP292]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP294:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP295:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP294]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP296:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP297:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP298:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP296]], i8 [[TMP297]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP299:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP300:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP301:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP299]], i8 [[TMP300]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP302:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP303:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP304:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP302]], i8 [[TMP303]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP305:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP306:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP307:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP305]], i8 [[TMP306]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP308:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP309:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP308]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP310:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP311:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP310]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP312:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP313:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP312]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP314:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP315:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP314]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP316:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP317:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP316]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP318:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP319:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP318]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP320:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP321:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP320]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP322:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP323:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP322]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP324:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP325:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP326:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP324]], i8 [[TMP325]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP327:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP328:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP329:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP327]], i8 [[TMP328]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP330:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP331:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP332:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP330]], i8 [[TMP331]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP333:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP334:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP335:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP333]], i8 [[TMP334]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP336:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP337:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP336]] monotonic, align 2
// CHECK-NEXT:    [[TMP338:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP339:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP338]] monotonic, align 2
// CHECK-NEXT:    [[TMP340:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP341:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP340]] monotonic, align 2
// CHECK-NEXT:    [[TMP342:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP343:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP342]] monotonic, align 2
// CHECK-NEXT:    [[TMP344:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP345:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP344]] monotonic, align 2
// CHECK-NEXT:    [[TMP346:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP347:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP346]] monotonic, align 2
// CHECK-NEXT:    [[TMP348:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP349:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP348]] monotonic, align 2
// CHECK-NEXT:    [[TMP350:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP351:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP350]] monotonic, align 2
// CHECK-NEXT:    [[TMP352:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP353:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP354:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP352]], i16 [[TMP353]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP355:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP356:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP357:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP355]], i16 [[TMP356]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP358:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP359:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP360:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP358]], i16 [[TMP359]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP361:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP362:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP363:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP361]], i16 [[TMP362]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP364:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP365:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP364]] monotonic, align 2
// CHECK-NEXT:    [[TMP366:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP367:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP366]] monotonic, align 2
// CHECK-NEXT:    [[TMP368:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP369:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP368]] monotonic, align 2
// CHECK-NEXT:    [[TMP370:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP371:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP370]] monotonic, align 2
// CHECK-NEXT:    [[TMP372:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP373:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP372]] monotonic, align 2
// CHECK-NEXT:    [[TMP374:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP375:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP374]] monotonic, align 2
// CHECK-NEXT:    [[TMP376:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP377:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP376]] monotonic, align 2
// CHECK-NEXT:    [[TMP378:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP379:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP378]] monotonic, align 2
// CHECK-NEXT:    [[TMP380:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP381:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP382:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP380]], i16 [[TMP381]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP383:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP384:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP385:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP383]], i16 [[TMP384]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP386:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP387:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP388:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP386]], i16 [[TMP387]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP389:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP390:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP391:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP389]], i16 [[TMP390]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP392:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP393:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP392]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP394:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP395:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP394]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP396:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP397:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP396]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP398:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP399:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP398]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP400:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP401:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP400]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP402:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP403:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP402]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP404:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP405:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP404]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP406:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP407:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP406]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP408:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP409:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP410:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP408]], i16 [[TMP409]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP411:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP412:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP413:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP411]], i16 [[TMP412]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP414:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP415:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP416:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP414]], i16 [[TMP415]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP417:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP418:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP419:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP417]], i16 [[TMP418]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP420:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP421:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP420]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP422:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP423:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP422]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP424:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP425:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP424]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP426:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP427:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP426]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP428:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP429:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP428]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP430:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP431:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP430]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP432:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP433:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP432]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP434:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP435:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP434]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP436:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP437:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP438:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP436]], i16 [[TMP437]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP439:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP440:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP441:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP439]], i16 [[TMP440]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP442:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP443:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP444:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP442]], i16 [[TMP443]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP445:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP446:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP447:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP445]], i16 [[TMP446]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP448:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP449:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP448]] acquire, align 2
// CHECK-NEXT:    [[TMP450:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP451:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP450]] acquire, align 2
// CHECK-NEXT:    [[TMP452:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP453:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP452]] acquire, align 2
// CHECK-NEXT:    [[TMP454:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP455:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP454]] acquire, align 2
// CHECK-NEXT:    [[TMP456:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP457:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP456]] acquire, align 2
// CHECK-NEXT:    [[TMP458:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP459:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP458]] acquire, align 2
// CHECK-NEXT:    [[TMP460:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP461:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP460]] acquire, align 2
// CHECK-NEXT:    [[TMP462:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP463:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP462]] acquire, align 2
// CHECK-NEXT:    [[TMP464:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP465:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP466:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP464]], i16 [[TMP465]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP467:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP468:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP469:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP467]], i16 [[TMP468]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP470:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP471:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP472:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP470]], i16 [[TMP471]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP473:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP474:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP475:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP473]], i16 [[TMP474]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP476:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP477:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP476]] acquire, align 2
// CHECK-NEXT:    [[TMP478:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP479:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP478]] acquire, align 2
// CHECK-NEXT:    [[TMP480:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP481:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP480]] acquire, align 2
// CHECK-NEXT:    [[TMP482:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP483:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP482]] acquire, align 2
// CHECK-NEXT:    [[TMP484:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP485:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP484]] acquire, align 2
// CHECK-NEXT:    [[TMP486:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP487:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP486]] acquire, align 2
// CHECK-NEXT:    [[TMP488:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP489:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP488]] acquire, align 2
// CHECK-NEXT:    [[TMP490:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP491:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP490]] acquire, align 2
// CHECK-NEXT:    [[TMP492:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP493:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP494:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP492]], i16 [[TMP493]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP495:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP496:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP497:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP495]], i16 [[TMP496]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP498:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP499:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP500:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP498]], i16 [[TMP499]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP501:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP502:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP503:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP501]], i16 [[TMP502]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP504:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP505:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP504]] monotonic, align 2
// CHECK-NEXT:    [[TMP506:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP507:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP506]] monotonic, align 2
// CHECK-NEXT:    [[TMP508:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP509:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP508]] monotonic, align 2
// CHECK-NEXT:    [[TMP510:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP511:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP510]] monotonic, align 2
// CHECK-NEXT:    [[TMP512:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP513:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP512]] monotonic, align 2
// CHECK-NEXT:    [[TMP514:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP515:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP514]] monotonic, align 2
// CHECK-NEXT:    [[TMP516:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP517:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP516]] monotonic, align 2
// CHECK-NEXT:    [[TMP518:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP519:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP518]] monotonic, align 2
// CHECK-NEXT:    [[TMP520:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP521:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP522:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP520]], i16 [[TMP521]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP523:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP524:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP525:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP523]], i16 [[TMP524]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP526:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP527:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP528:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP526]], i16 [[TMP527]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP529:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP530:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP531:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP529]], i16 [[TMP530]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP532:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP533:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP532]] monotonic, align 2
// CHECK-NEXT:    [[TMP534:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP535:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP534]] monotonic, align 2
// CHECK-NEXT:    [[TMP536:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP537:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP536]] monotonic, align 2
// CHECK-NEXT:    [[TMP538:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP539:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP538]] monotonic, align 2
// CHECK-NEXT:    [[TMP540:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP541:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP540]] monotonic, align 2
// CHECK-NEXT:    [[TMP542:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP543:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP542]] monotonic, align 2
// CHECK-NEXT:    [[TMP544:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP545:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP544]] monotonic, align 2
// CHECK-NEXT:    [[TMP546:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP547:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP546]] monotonic, align 2
// CHECK-NEXT:    [[TMP548:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP549:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP550:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP548]], i16 [[TMP549]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP551:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP552:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP553:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP551]], i16 [[TMP552]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP554:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP555:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP556:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP554]], i16 [[TMP555]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP557:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP558:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP559:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP557]], i16 [[TMP558]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP560:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP561:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP560]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP562:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP563:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP562]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP564:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP565:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP564]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP566:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP567:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP566]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP568:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP569:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP568]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP570:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP571:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP570]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP572:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP573:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP572]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP574:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP575:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP574]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP576:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP577:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP578:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP576]], i16 [[TMP577]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP579:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP580:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP581:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP579]], i16 [[TMP580]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP582:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP583:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP584:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP582]], i16 [[TMP583]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP585:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP586:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP587:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP585]], i16 [[TMP586]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP588:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP589:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP588]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP590:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP591:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP590]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP592:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP593:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP592]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP594:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP595:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP594]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP596:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP597:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP596]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP598:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP599:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP598]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP600:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP601:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP600]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP602:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP603:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP602]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP604:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP605:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP606:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP604]], i16 [[TMP605]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP607:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP608:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP609:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP607]], i16 [[TMP608]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP610:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP611:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP612:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP610]], i16 [[TMP611]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP613:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP614:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP615:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP613]], i16 [[TMP614]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP616:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP617:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP616]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP618:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP619:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP618]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP620:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP621:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP620]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP622:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP623:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP622]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP624:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP625:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP624]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP626:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP627:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP626]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP628:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP629:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP628]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP630:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP631:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP630]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP632:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP633:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP634:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP632]], i16 [[TMP633]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP635:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP636:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP637:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP635]], i16 [[TMP636]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP638:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP639:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP640:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP638]], i16 [[TMP639]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP641:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP642:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP643:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP641]], i16 [[TMP642]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP644:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP645:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP644]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP646:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP647:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP646]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP648:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP649:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP648]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP650:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP651:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP650]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP652:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP653:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP652]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP654:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP655:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP654]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP656:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP657:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP656]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP658:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP659:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP658]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP660:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP661:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP662:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP660]], i16 [[TMP661]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP663:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP664:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP665:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP663]], i16 [[TMP664]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP666:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP667:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP668:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP666]], i16 [[TMP667]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP669:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP670:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP671:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP669]], i16 [[TMP670]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP672:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP673:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP672]] monotonic, align 4
// CHECK-NEXT:    [[TMP674:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP675:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP674]] monotonic, align 4
// CHECK-NEXT:    [[TMP676:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP677:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP676]] monotonic, align 4
// CHECK-NEXT:    [[TMP678:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP679:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP678]] monotonic, align 4
// CHECK-NEXT:    [[TMP680:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP681:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP680]] monotonic, align 4
// CHECK-NEXT:    [[TMP682:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP683:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP682]] monotonic, align 4
// CHECK-NEXT:    [[TMP684:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP685:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP684]] monotonic, align 4
// CHECK-NEXT:    [[TMP686:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP687:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP686]] monotonic, align 4
// CHECK-NEXT:    [[TMP688:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP689:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP690:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP688]], i32 [[TMP689]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP691:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP692:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP693:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP691]], i32 [[TMP692]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP694:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP695:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP696:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP694]], i32 [[TMP695]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP697:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP698:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP699:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP697]], i32 [[TMP698]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP700:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP701:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP700]] monotonic, align 4
// CHECK-NEXT:    [[TMP702:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP703:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP702]] monotonic, align 4
// CHECK-NEXT:    [[TMP704:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP705:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP704]] monotonic, align 4
// CHECK-NEXT:    [[TMP706:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP707:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP706]] monotonic, align 4
// CHECK-NEXT:    [[TMP708:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP709:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP708]] monotonic, align 4
// CHECK-NEXT:    [[TMP710:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP711:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP710]] monotonic, align 4
// CHECK-NEXT:    [[TMP712:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP713:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP712]] monotonic, align 4
// CHECK-NEXT:    [[TMP714:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP715:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP714]] monotonic, align 4
// CHECK-NEXT:    [[TMP716:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP717:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP718:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP716]], i32 [[TMP717]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP719:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP720:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP721:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP719]], i32 [[TMP720]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP722:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP723:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP724:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP722]], i32 [[TMP723]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP725:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP726:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP727:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP725]], i32 [[TMP726]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP728:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP729:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP728]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP730:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP731:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP730]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP732:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP733:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP732]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP734:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP735:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP734]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP736:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP737:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP736]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP738:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP739:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP738]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP740:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP741:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP740]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP742:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP743:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP742]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP744:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP745:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP746:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP744]], i32 [[TMP745]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP747:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP748:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP749:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP747]], i32 [[TMP748]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP750:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP751:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP752:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP750]], i32 [[TMP751]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP753:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP754:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP755:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP753]], i32 [[TMP754]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP756:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP757:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP756]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP758:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP759:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP758]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP760:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP761:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP760]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP762:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP763:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP762]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP764:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP765:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP764]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP766:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP767:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP766]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP768:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP769:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP768]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP770:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP771:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP770]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP772:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP773:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP774:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP772]], i32 [[TMP773]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP775:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP776:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP777:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP775]], i32 [[TMP776]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP778:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP779:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP780:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP778]], i32 [[TMP779]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP781:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP782:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP783:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP781]], i32 [[TMP782]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP784:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP785:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP784]] acquire, align 4
// CHECK-NEXT:    [[TMP786:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP787:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP786]] acquire, align 4
// CHECK-NEXT:    [[TMP788:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP789:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP788]] acquire, align 4
// CHECK-NEXT:    [[TMP790:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP791:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP790]] acquire, align 4
// CHECK-NEXT:    [[TMP792:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP793:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP792]] acquire, align 4
// CHECK-NEXT:    [[TMP794:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP795:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP794]] acquire, align 4
// CHECK-NEXT:    [[TMP796:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP797:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP796]] acquire, align 4
// CHECK-NEXT:    [[TMP798:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP799:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP798]] acquire, align 4
// CHECK-NEXT:    [[TMP800:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP801:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP802:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP800]], i32 [[TMP801]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP803:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP804:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP805:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP803]], i32 [[TMP804]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP806:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP807:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP808:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP806]], i32 [[TMP807]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP809:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP810:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP811:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP809]], i32 [[TMP810]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP812:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP813:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP812]] acquire, align 4
// CHECK-NEXT:    [[TMP814:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP815:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP814]] acquire, align 4
// CHECK-NEXT:    [[TMP816:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP817:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP816]] acquire, align 4
// CHECK-NEXT:    [[TMP818:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP819:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP818]] acquire, align 4
// CHECK-NEXT:    [[TMP820:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP821:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP820]] acquire, align 4
// CHECK-NEXT:    [[TMP822:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP823:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP822]] acquire, align 4
// CHECK-NEXT:    [[TMP824:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP825:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP824]] acquire, align 4
// CHECK-NEXT:    [[TMP826:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP827:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP826]] acquire, align 4
// CHECK-NEXT:    [[TMP828:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP829:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP830:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP828]], i32 [[TMP829]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP831:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP832:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP833:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP831]], i32 [[TMP832]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP834:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP835:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP836:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP834]], i32 [[TMP835]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP837:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP838:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP839:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP837]], i32 [[TMP838]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP840:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP841:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP840]] monotonic, align 4
// CHECK-NEXT:    [[TMP842:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP843:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP842]] monotonic, align 4
// CHECK-NEXT:    [[TMP844:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP845:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP844]] monotonic, align 4
// CHECK-NEXT:    [[TMP846:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP847:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP846]] monotonic, align 4
// CHECK-NEXT:    [[TMP848:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP849:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP848]] monotonic, align 4
// CHECK-NEXT:    [[TMP850:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP851:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP850]] monotonic, align 4
// CHECK-NEXT:    [[TMP852:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP853:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP852]] monotonic, align 4
// CHECK-NEXT:    [[TMP854:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP855:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP854]] monotonic, align 4
// CHECK-NEXT:    [[TMP856:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP857:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP858:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP856]], i32 [[TMP857]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP859:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP860:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP861:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP859]], i32 [[TMP860]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP862:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP863:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP864:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP862]], i32 [[TMP863]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP865:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP866:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP867:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP865]], i32 [[TMP866]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP868:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP869:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP868]] monotonic, align 4
// CHECK-NEXT:    [[TMP870:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP871:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP870]] monotonic, align 4
// CHECK-NEXT:    [[TMP872:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP873:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP872]] monotonic, align 4
// CHECK-NEXT:    [[TMP874:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP875:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP874]] monotonic, align 4
// CHECK-NEXT:    [[TMP876:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP877:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP876]] monotonic, align 4
// CHECK-NEXT:    [[TMP878:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP879:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP878]] monotonic, align 4
// CHECK-NEXT:    [[TMP880:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP881:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP880]] monotonic, align 4
// CHECK-NEXT:    [[TMP882:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP883:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP882]] monotonic, align 4
// CHECK-NEXT:    [[TMP884:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP885:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP886:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP884]], i32 [[TMP885]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP887:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP888:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP889:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP887]], i32 [[TMP888]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP890:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP891:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP892:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP890]], i32 [[TMP891]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP893:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP894:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP895:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP893]], i32 [[TMP894]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP896:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP897:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP896]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP898:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP899:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP898]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP900:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP901:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP900]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP902:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP903:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP902]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP904:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP905:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP904]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP906:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP907:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP906]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP908:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP909:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP908]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP910:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP911:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP910]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP912:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP913:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP914:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP912]], i32 [[TMP913]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP915:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP916:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP917:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP915]], i32 [[TMP916]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP918:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP919:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP920:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP918]], i32 [[TMP919]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP921:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP922:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP923:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP921]], i32 [[TMP922]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP924:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP925:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP924]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP926:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP927:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP926]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP928:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP929:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP928]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP930:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP931:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP930]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP932:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP933:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP932]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP934:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP935:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP934]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP936:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP937:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP936]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP938:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP939:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP938]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP940:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP941:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP942:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP940]], i32 [[TMP941]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP943:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP944:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP945:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP943]], i32 [[TMP944]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP946:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP947:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP948:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP946]], i32 [[TMP947]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP949:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP950:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP951:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP949]], i32 [[TMP950]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP952:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP953:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP952]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP954:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP955:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP954]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP956:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP957:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP956]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP958:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP959:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP958]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP960:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP961:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP960]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP962:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP963:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP962]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP964:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP965:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP964]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP966:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP967:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP966]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP968:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP969:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP970:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP968]], i32 [[TMP969]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP971:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP972:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP973:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP971]], i32 [[TMP972]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP974:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP975:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP976:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP974]], i32 [[TMP975]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP977:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP978:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP979:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP977]], i32 [[TMP978]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP980:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP981:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP980]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP982:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP983:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP982]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP984:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP985:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP984]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP986:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP987:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP986]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP988:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP989:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP988]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP990:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP991:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP990]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP992:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP993:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP992]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP994:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP995:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP994]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP996:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP997:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP998:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP996]], i32 [[TMP997]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP999:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP1000:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP1001:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP999]], i32 [[TMP1000]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1002:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP1003:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP1004:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP1002]], i32 [[TMP1003]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1005:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP1006:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP1007:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP1005]], i32 [[TMP1006]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1008:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1009:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1008]] monotonic, align 8
// CHECK-NEXT:    [[TMP1010:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1011:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1010]] monotonic, align 8
// CHECK-NEXT:    [[TMP1012:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1013:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1012]] monotonic, align 8
// CHECK-NEXT:    [[TMP1014:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1015:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1014]] monotonic, align 8
// CHECK-NEXT:    [[TMP1016:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1017:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1016]] monotonic, align 8
// CHECK-NEXT:    [[TMP1018:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1019:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1018]] monotonic, align 8
// CHECK-NEXT:    [[TMP1020:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1021:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1020]] monotonic, align 8
// CHECK-NEXT:    [[TMP1022:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1023:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1022]] monotonic, align 8
// CHECK-NEXT:    [[TMP1024:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1025:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1026:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1024]], i64 [[TMP1025]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1027:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1028:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1029:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1027]], i64 [[TMP1028]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1030:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1031:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1032:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1030]], i64 [[TMP1031]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1033:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1034:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1035:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1033]], i64 [[TMP1034]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1036:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1037:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1036]] monotonic, align 8
// CHECK-NEXT:    [[TMP1038:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1039:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1038]] monotonic, align 8
// CHECK-NEXT:    [[TMP1040:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1041:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1040]] monotonic, align 8
// CHECK-NEXT:    [[TMP1042:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1043:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1042]] monotonic, align 8
// CHECK-NEXT:    [[TMP1044:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1045:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1044]] monotonic, align 8
// CHECK-NEXT:    [[TMP1046:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1047:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1046]] monotonic, align 8
// CHECK-NEXT:    [[TMP1048:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1049:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1048]] monotonic, align 8
// CHECK-NEXT:    [[TMP1050:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1051:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1050]] monotonic, align 8
// CHECK-NEXT:    [[TMP1052:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1053:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1054:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1052]], i64 [[TMP1053]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1055:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1056:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1057:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1055]], i64 [[TMP1056]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1058:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1059:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1060:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1058]], i64 [[TMP1059]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1061:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1062:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1063:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1061]], i64 [[TMP1062]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1064:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1065:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1064]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1066:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1067:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1066]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1068:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1069:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1068]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1070:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1071:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1070]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1072:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1073:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1072]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1074:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1075:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1074]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1076:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1077:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1076]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1078:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1079:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1078]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1080:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1081:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1082:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1080]], i64 [[TMP1081]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1083:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1084:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1085:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1083]], i64 [[TMP1084]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1086:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1087:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1088:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1086]], i64 [[TMP1087]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1089:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1090:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1091:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1089]], i64 [[TMP1090]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1092:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1093:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1092]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1094:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1095:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1094]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1096:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1097:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1096]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1098:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1099:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1098]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1100:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1101:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1100]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1102:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1103:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1102]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1104:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1105:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1104]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1106:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1107:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1106]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1108:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1109:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1110:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1108]], i64 [[TMP1109]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1111:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1112:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1113:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1111]], i64 [[TMP1112]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1114:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1115:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1116:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1114]], i64 [[TMP1115]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1117:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1118:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1119:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1117]], i64 [[TMP1118]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1120:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1121:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1120]] acquire, align 8
// CHECK-NEXT:    [[TMP1122:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1123:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1122]] acquire, align 8
// CHECK-NEXT:    [[TMP1124:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1125:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1124]] acquire, align 8
// CHECK-NEXT:    [[TMP1126:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1127:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1126]] acquire, align 8
// CHECK-NEXT:    [[TMP1128:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1129:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1128]] acquire, align 8
// CHECK-NEXT:    [[TMP1130:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1131:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1130]] acquire, align 8
// CHECK-NEXT:    [[TMP1132:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1133:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1132]] acquire, align 8
// CHECK-NEXT:    [[TMP1134:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1135:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1134]] acquire, align 8
// CHECK-NEXT:    [[TMP1136:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1137:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1138:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1136]], i64 [[TMP1137]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1139:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1140:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1141:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1139]], i64 [[TMP1140]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1142:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1143:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1144:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1142]], i64 [[TMP1143]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1145:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1146:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1147:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1145]], i64 [[TMP1146]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1148:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1149:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1148]] acquire, align 8
// CHECK-NEXT:    [[TMP1150:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1151:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1150]] acquire, align 8
// CHECK-NEXT:    [[TMP1152:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1153:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1152]] acquire, align 8
// CHECK-NEXT:    [[TMP1154:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1155:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1154]] acquire, align 8
// CHECK-NEXT:    [[TMP1156:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1157:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1156]] acquire, align 8
// CHECK-NEXT:    [[TMP1158:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1159:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1158]] acquire, align 8
// CHECK-NEXT:    [[TMP1160:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1161:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1160]] acquire, align 8
// CHECK-NEXT:    [[TMP1162:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1163:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1162]] acquire, align 8
// CHECK-NEXT:    [[TMP1164:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1165:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1166:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1164]], i64 [[TMP1165]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1167:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1168:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1169:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1167]], i64 [[TMP1168]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1170:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1171:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1172:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1170]], i64 [[TMP1171]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1173:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1174:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1175:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1173]], i64 [[TMP1174]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1176:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1177:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1176]] monotonic, align 8
// CHECK-NEXT:    [[TMP1178:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1179:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1178]] monotonic, align 8
// CHECK-NEXT:    [[TMP1180:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1181:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1180]] monotonic, align 8
// CHECK-NEXT:    [[TMP1182:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1183:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1182]] monotonic, align 8
// CHECK-NEXT:    [[TMP1184:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1185:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1184]] monotonic, align 8
// CHECK-NEXT:    [[TMP1186:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1187:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1186]] monotonic, align 8
// CHECK-NEXT:    [[TMP1188:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1189:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1188]] monotonic, align 8
// CHECK-NEXT:    [[TMP1190:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1191:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1190]] monotonic, align 8
// CHECK-NEXT:    [[TMP1192:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1193:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1194:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1192]], i64 [[TMP1193]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1195:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1196:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1197:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1195]], i64 [[TMP1196]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1198:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1199:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1200:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1198]], i64 [[TMP1199]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1201:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1202:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1203:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1201]], i64 [[TMP1202]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1204:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1205:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1204]] monotonic, align 8
// CHECK-NEXT:    [[TMP1206:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1207:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1206]] monotonic, align 8
// CHECK-NEXT:    [[TMP1208:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1209:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1208]] monotonic, align 8
// CHECK-NEXT:    [[TMP1210:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1211:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1210]] monotonic, align 8
// CHECK-NEXT:    [[TMP1212:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1213:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1212]] monotonic, align 8
// CHECK-NEXT:    [[TMP1214:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1215:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1214]] monotonic, align 8
// CHECK-NEXT:    [[TMP1216:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1217:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1216]] monotonic, align 8
// CHECK-NEXT:    [[TMP1218:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1219:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1218]] monotonic, align 8
// CHECK-NEXT:    [[TMP1220:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1221:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1222:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1220]], i64 [[TMP1221]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1223:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1224:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1225:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1223]], i64 [[TMP1224]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1226:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1227:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1228:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1226]], i64 [[TMP1227]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1229:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1230:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1231:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1229]], i64 [[TMP1230]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1232:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1233:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1232]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1234:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1235:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1234]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1236:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1237:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1236]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1238:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1239:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1238]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1240:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1241:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1240]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1242:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1243:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1242]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1244:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1245:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1244]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1246:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1247:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1246]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1248:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1249:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1250:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1248]], i64 [[TMP1249]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1251:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1252:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1253:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1251]], i64 [[TMP1252]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1254:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1255:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1256:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1254]], i64 [[TMP1255]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1257:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1258:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1259:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1257]], i64 [[TMP1258]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1260:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1261:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1260]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1262:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1263:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1262]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1264:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1265:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1264]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1266:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1267:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1266]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1268:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1269:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1268]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1270:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1271:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1270]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1272:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1273:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1272]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1274:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1275:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1274]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1276:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1277:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1278:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1276]], i64 [[TMP1277]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1279:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1280:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1281:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1279]], i64 [[TMP1280]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1282:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1283:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1284:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1282]], i64 [[TMP1283]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1285:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1286:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1287:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1285]], i64 [[TMP1286]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1288:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1289:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1288]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1290:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1291:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1290]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1292:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1293:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1292]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1294:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1295:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1294]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1296:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1297:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1296]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1298:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1299:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1298]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1300:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1301:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1300]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1302:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1303:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1302]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1304:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1305:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1306:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1304]], i64 [[TMP1305]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1307:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1308:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1309:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1307]], i64 [[TMP1308]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1310:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1311:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1312:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1310]], i64 [[TMP1311]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1313:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1314:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1315:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1313]], i64 [[TMP1314]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1316:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1317:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1316]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1318:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1319:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1318]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1320:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1321:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1320]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1322:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1323:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1322]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1324:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1325:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1324]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1326:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1327:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1326]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1328:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1329:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1328]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1330:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1331:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1330]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1332:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1333:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1334:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1332]], i64 [[TMP1333]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1335:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1336:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1337:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1335]], i64 [[TMP1336]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1338:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1339:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1340:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1338]], i64 [[TMP1339]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1341:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1342:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1343:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1341]], i64 [[TMP1342]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1344:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1345:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1344]] monotonic, align 8
// CHECK-NEXT:    [[TMP1346:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1347:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1346]] monotonic, align 8
// CHECK-NEXT:    [[TMP1348:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1349:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1348]] monotonic, align 8
// CHECK-NEXT:    [[TMP1350:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1351:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1350]] monotonic, align 8
// CHECK-NEXT:    [[TMP1352:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1353:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1352]] monotonic, align 8
// CHECK-NEXT:    [[TMP1354:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1355:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1354]] monotonic, align 8
// CHECK-NEXT:    [[TMP1356:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1357:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1356]] monotonic, align 8
// CHECK-NEXT:    [[TMP1358:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1359:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1358]] monotonic, align 8
// CHECK-NEXT:    [[TMP1360:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1361:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1362:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1360]], i64 [[TMP1361]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1363:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1364:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1365:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1363]], i64 [[TMP1364]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1366:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1367:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1368:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1366]], i64 [[TMP1367]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1369:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1370:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1371:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1369]], i64 [[TMP1370]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1372:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1373:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1372]] monotonic, align 8
// CHECK-NEXT:    [[TMP1374:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1375:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1374]] monotonic, align 8
// CHECK-NEXT:    [[TMP1376:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1377:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1376]] monotonic, align 8
// CHECK-NEXT:    [[TMP1378:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1379:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1378]] monotonic, align 8
// CHECK-NEXT:    [[TMP1380:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1381:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1380]] monotonic, align 8
// CHECK-NEXT:    [[TMP1382:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1383:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1382]] monotonic, align 8
// CHECK-NEXT:    [[TMP1384:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1385:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1384]] monotonic, align 8
// CHECK-NEXT:    [[TMP1386:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1387:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1386]] monotonic, align 8
// CHECK-NEXT:    [[TMP1388:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1389:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1390:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1388]], i64 [[TMP1389]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1391:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1392:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1393:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1391]], i64 [[TMP1392]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1394:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1395:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1396:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1394]], i64 [[TMP1395]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1397:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1398:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1399:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1397]], i64 [[TMP1398]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1400:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1401:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1400]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1402:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1403:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1402]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1404:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1405:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1404]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1406:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1407:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1406]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1408:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1409:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1408]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1410:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1411:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1410]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1412:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1413:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1412]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1414:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1415:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1414]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1416:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1417:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1418:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1416]], i64 [[TMP1417]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1419:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1420:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1421:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1419]], i64 [[TMP1420]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1422:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1423:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1424:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1422]], i64 [[TMP1423]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1425:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1426:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1427:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1425]], i64 [[TMP1426]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1428:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1429:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1428]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1430:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1431:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1430]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1432:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1433:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1432]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1434:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1435:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1434]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1436:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1437:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1436]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1438:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1439:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1438]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1440:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1441:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1440]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1442:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1443:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1442]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1444:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1445:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1446:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1444]], i64 [[TMP1445]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1447:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1448:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1449:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1447]], i64 [[TMP1448]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1450:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1451:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1452:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1450]], i64 [[TMP1451]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1453:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1454:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1455:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1453]], i64 [[TMP1454]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1456:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1457:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1456]] acquire, align 8
// CHECK-NEXT:    [[TMP1458:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1459:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1458]] acquire, align 8
// CHECK-NEXT:    [[TMP1460:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1461:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1460]] acquire, align 8
// CHECK-NEXT:    [[TMP1462:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1463:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1462]] acquire, align 8
// CHECK-NEXT:    [[TMP1464:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1465:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1464]] acquire, align 8
// CHECK-NEXT:    [[TMP1466:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1467:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1466]] acquire, align 8
// CHECK-NEXT:    [[TMP1468:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1469:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1468]] acquire, align 8
// CHECK-NEXT:    [[TMP1470:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1471:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1470]] acquire, align 8
// CHECK-NEXT:    [[TMP1472:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1473:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1474:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1472]], i64 [[TMP1473]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1475:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1476:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1477:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1475]], i64 [[TMP1476]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1478:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1479:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1480:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1478]], i64 [[TMP1479]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1481:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1482:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1483:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1481]], i64 [[TMP1482]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1484:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1485:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1484]] acquire, align 8
// CHECK-NEXT:    [[TMP1486:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1487:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1486]] acquire, align 8
// CHECK-NEXT:    [[TMP1488:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1489:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1488]] acquire, align 8
// CHECK-NEXT:    [[TMP1490:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1491:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1490]] acquire, align 8
// CHECK-NEXT:    [[TMP1492:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1493:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1492]] acquire, align 8
// CHECK-NEXT:    [[TMP1494:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1495:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1494]] acquire, align 8
// CHECK-NEXT:    [[TMP1496:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1497:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1496]] acquire, align 8
// CHECK-NEXT:    [[TMP1498:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1499:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1498]] acquire, align 8
// CHECK-NEXT:    [[TMP1500:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1501:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1502:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1500]], i64 [[TMP1501]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1503:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1504:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1505:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1503]], i64 [[TMP1504]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1506:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1507:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1508:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1506]], i64 [[TMP1507]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1509:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1510:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1511:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1509]], i64 [[TMP1510]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1512:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1513:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1512]] monotonic, align 8
// CHECK-NEXT:    [[TMP1514:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1515:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1514]] monotonic, align 8
// CHECK-NEXT:    [[TMP1516:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1517:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1516]] monotonic, align 8
// CHECK-NEXT:    [[TMP1518:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1519:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1518]] monotonic, align 8
// CHECK-NEXT:    [[TMP1520:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1521:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1520]] monotonic, align 8
// CHECK-NEXT:    [[TMP1522:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1523:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1522]] monotonic, align 8
// CHECK-NEXT:    [[TMP1524:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1525:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1524]] monotonic, align 8
// CHECK-NEXT:    [[TMP1526:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1527:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1526]] monotonic, align 8
// CHECK-NEXT:    [[TMP1528:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1529:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1530:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1528]], i64 [[TMP1529]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1531:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1532:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1533:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1531]], i64 [[TMP1532]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1534:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1535:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1536:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1534]], i64 [[TMP1535]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1537:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1538:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1539:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1537]], i64 [[TMP1538]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1540:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1541:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1540]] monotonic, align 8
// CHECK-NEXT:    [[TMP1542:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1543:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1542]] monotonic, align 8
// CHECK-NEXT:    [[TMP1544:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1545:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1544]] monotonic, align 8
// CHECK-NEXT:    [[TMP1546:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1547:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1546]] monotonic, align 8
// CHECK-NEXT:    [[TMP1548:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1549:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1548]] monotonic, align 8
// CHECK-NEXT:    [[TMP1550:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1551:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1550]] monotonic, align 8
// CHECK-NEXT:    [[TMP1552:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1553:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1552]] monotonic, align 8
// CHECK-NEXT:    [[TMP1554:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1555:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1554]] monotonic, align 8
// CHECK-NEXT:    [[TMP1556:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1557:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1558:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1556]], i64 [[TMP1557]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1559:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1560:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1561:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1559]], i64 [[TMP1560]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1562:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1563:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1564:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1562]], i64 [[TMP1563]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1565:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1566:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1567:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1565]], i64 [[TMP1566]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1568:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1569:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1568]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1570:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1571:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1570]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1572:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1573:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1572]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1574:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1575:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1574]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1576:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1577:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1576]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1578:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1579:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1578]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1580:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1581:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1580]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1582:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1583:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1582]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1584:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1585:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1586:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1584]], i64 [[TMP1585]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1587:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1588:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1589:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1587]], i64 [[TMP1588]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1590:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1591:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1592:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1590]], i64 [[TMP1591]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1593:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1594:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1595:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1593]], i64 [[TMP1594]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1596:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1597:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1596]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1598:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1599:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1598]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1600:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1601:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1600]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1602:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1603:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1602]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1604:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1605:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1604]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1606:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1607:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1606]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1608:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1609:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1608]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1610:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1611:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1610]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1612:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1613:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1614:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1612]], i64 [[TMP1613]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1615:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1616:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1617:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1615]], i64 [[TMP1616]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1618:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1619:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1620:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1618]], i64 [[TMP1619]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1621:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1622:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1623:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1621]], i64 [[TMP1622]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1624:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1625:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1624]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1626:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1627:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1626]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1628:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1629:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1628]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1630:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1631:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1630]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1632:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1633:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1632]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1634:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1635:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1634]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1636:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1637:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1636]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1638:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1639:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1638]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1640:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1641:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1642:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1640]], i64 [[TMP1641]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1643:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1644:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1645:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1643]], i64 [[TMP1644]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1646:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1647:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1648:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1646]], i64 [[TMP1647]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1649:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1650:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1651:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1649]], i64 [[TMP1650]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1652:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1653:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1652]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1654:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1655:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1654]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1656:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1657:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1656]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1658:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1659:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1658]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1660:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1661:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1660]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1662:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1663:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1662]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1664:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1665:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1664]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1666:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1667:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1666]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1668:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1669:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1670:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1668]], i64 [[TMP1669]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1671:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1672:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1673:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1671]], i64 [[TMP1672]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1674:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1675:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1676:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1674]], i64 [[TMP1675]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1677:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1678:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1679:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1677]], i64 [[TMP1678]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1680:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1681:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1680]] monotonic, align 4
// CHECK-NEXT:    [[TMP1682:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1683:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1682]] monotonic, align 4
// CHECK-NEXT:    [[TMP1684:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1685:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1684]] monotonic, align 4
// CHECK-NEXT:    [[TMP1686:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1687:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1686]] monotonic, align 4
// CHECK-NEXT:    [[TMP1688:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1689:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1688]] monotonic, align 4
// CHECK-NEXT:    [[TMP1690:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1691:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1690]] monotonic, align 4
// CHECK-NEXT:    [[TMP1692:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1693:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1692]] monotonic, align 4
// CHECK-NEXT:    [[TMP1694:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1695:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1694]] monotonic, align 4
// CHECK-NEXT:    [[TMP1696:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1697:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1696]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1698:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1699:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1698]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1700:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1701:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1700]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1702:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1703:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1702]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1704:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1705:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1704]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1706:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1707:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1706]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1708:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1709:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1708]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1710:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1711:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1710]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1712:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1713:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1712]] acquire, align 4
// CHECK-NEXT:    [[TMP1714:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1715:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1714]] acquire, align 4
// CHECK-NEXT:    [[TMP1716:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1717:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1716]] acquire, align 4
// CHECK-NEXT:    [[TMP1718:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1719:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1718]] acquire, align 4
// CHECK-NEXT:    [[TMP1720:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1721:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1720]] acquire, align 4
// CHECK-NEXT:    [[TMP1722:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1723:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1722]] acquire, align 4
// CHECK-NEXT:    [[TMP1724:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1725:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1724]] acquire, align 4
// CHECK-NEXT:    [[TMP1726:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1727:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1726]] acquire, align 4
// CHECK-NEXT:    [[TMP1728:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1729:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1728]] monotonic, align 4
// CHECK-NEXT:    [[TMP1730:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1731:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1730]] monotonic, align 4
// CHECK-NEXT:    [[TMP1732:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1733:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1732]] monotonic, align 4
// CHECK-NEXT:    [[TMP1734:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1735:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1734]] monotonic, align 4
// CHECK-NEXT:    [[TMP1736:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1737:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1736]] monotonic, align 4
// CHECK-NEXT:    [[TMP1738:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1739:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1738]] monotonic, align 4
// CHECK-NEXT:    [[TMP1740:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1741:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1740]] monotonic, align 4
// CHECK-NEXT:    [[TMP1742:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1743:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1742]] monotonic, align 4
// CHECK-NEXT:    [[TMP1744:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1745:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1744]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1746:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1747:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1746]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1748:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1749:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1748]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1750:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1751:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1750]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1752:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1753:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1752]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1754:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1755:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1754]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1756:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1757:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1756]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1758:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1759:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1758]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1760:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1761:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1760]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1762:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1763:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1762]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1764:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1765:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1764]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1766:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1767:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1766]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1768:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1769:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1768]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1770:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1771:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1770]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1772:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1773:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1772]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1774:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1775:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1774]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1776:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1777:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1776]] monotonic, align 8
// CHECK-NEXT:    [[TMP1778:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1779:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1778]] monotonic, align 8
// CHECK-NEXT:    [[TMP1780:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1781:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1780]] monotonic, align 8
// CHECK-NEXT:    [[TMP1782:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1783:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1782]] monotonic, align 8
// CHECK-NEXT:    [[TMP1784:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1785:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1784]] monotonic, align 8
// CHECK-NEXT:    [[TMP1786:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1787:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1786]] monotonic, align 8
// CHECK-NEXT:    [[TMP1788:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1789:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1788]] monotonic, align 8
// CHECK-NEXT:    [[TMP1790:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1791:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1790]] monotonic, align 8
// CHECK-NEXT:    [[TMP1792:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1793:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1792]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1794:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1795:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1794]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1796:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1797:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1796]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1798:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1799:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1798]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1800:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1801:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1800]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1802:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1803:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1802]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1804:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1805:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1804]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1806:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1807:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1806]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1808:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1809:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1808]] acquire, align 8
// CHECK-NEXT:    [[TMP1810:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1811:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1810]] acquire, align 8
// CHECK-NEXT:    [[TMP1812:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1813:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1812]] acquire, align 8
// CHECK-NEXT:    [[TMP1814:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1815:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1814]] acquire, align 8
// CHECK-NEXT:    [[TMP1816:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1817:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1816]] acquire, align 8
// CHECK-NEXT:    [[TMP1818:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1819:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1818]] acquire, align 8
// CHECK-NEXT:    [[TMP1820:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1821:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1820]] acquire, align 8
// CHECK-NEXT:    [[TMP1822:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1823:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1822]] acquire, align 8
// CHECK-NEXT:    [[TMP1824:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1825:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1824]] monotonic, align 8
// CHECK-NEXT:    [[TMP1826:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1827:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1826]] monotonic, align 8
// CHECK-NEXT:    [[TMP1828:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1829:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1828]] monotonic, align 8
// CHECK-NEXT:    [[TMP1830:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1831:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1830]] monotonic, align 8
// CHECK-NEXT:    [[TMP1832:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1833:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1832]] monotonic, align 8
// CHECK-NEXT:    [[TMP1834:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1835:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1834]] monotonic, align 8
// CHECK-NEXT:    [[TMP1836:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1837:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1836]] monotonic, align 8
// CHECK-NEXT:    [[TMP1838:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1839:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1838]] monotonic, align 8
// CHECK-NEXT:    [[TMP1840:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1841:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1840]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1842:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1843:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1842]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1844:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1845:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1844]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1846:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1847:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1846]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1848:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1849:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1848]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1850:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1851:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1850]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1852:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1853:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1852]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1854:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1855:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1854]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1856:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1857:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1856]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1858:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1859:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1858]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1860:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1861:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1860]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1862:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1863:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1862]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1864:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1865:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1864]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1866:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1867:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1866]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1868:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1869:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1868]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1870:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1871:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1870]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @bar(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CX:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[CV:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[CR:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[CE:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[CD:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCX:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCV:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCR:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCE:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCD:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[SX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SV:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SR:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USV:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USR:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[IX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IV:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIV:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[LX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[FX:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FV:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FE:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FD:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[DX:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DV:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DE:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DD:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON]], ptr [[CX]], align 1
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON1]], ptr [[CV]], align 1
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON2]], ptr [[CR]], align 1
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON3]], ptr [[CE]], align 1
// CHECK-NEXT:    [[FREEZE_POISON4:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON4]], ptr [[CD]], align 1
// CHECK-NEXT:    [[FREEZE_POISON5:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON5]], ptr [[UCX]], align 1
// CHECK-NEXT:    [[FREEZE_POISON6:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON6]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[FREEZE_POISON7:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON7]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[FREEZE_POISON8:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON8]], ptr [[UCE]], align 1
// CHECK-NEXT:    [[FREEZE_POISON9:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON9]], ptr [[UCD]], align 1
// CHECK-NEXT:    [[FREEZE_POISON10:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON10]], ptr [[SX]], align 2
// CHECK-NEXT:    [[FREEZE_POISON11:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON11]], ptr [[SV]], align 2
// CHECK-NEXT:    [[FREEZE_POISON12:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON12]], ptr [[SR]], align 2
// CHECK-NEXT:    [[FREEZE_POISON13:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON13]], ptr [[SE]], align 2
// CHECK-NEXT:    [[FREEZE_POISON14:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON14]], ptr [[SD]], align 2
// CHECK-NEXT:    [[FREEZE_POISON15:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON15]], ptr [[USX]], align 2
// CHECK-NEXT:    [[FREEZE_POISON16:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON16]], ptr [[USV]], align 2
// CHECK-NEXT:    [[FREEZE_POISON17:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON17]], ptr [[USR]], align 2
// CHECK-NEXT:    [[FREEZE_POISON18:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON18]], ptr [[USE]], align 2
// CHECK-NEXT:    [[FREEZE_POISON19:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON19]], ptr [[USD]], align 2
// CHECK-NEXT:    [[FREEZE_POISON20:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON20]], ptr [[IX]], align 4
// CHECK-NEXT:    [[FREEZE_POISON21:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON21]], ptr [[IV]], align 4
// CHECK-NEXT:    [[FREEZE_POISON22:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON22]], ptr [[IR]], align 4
// CHECK-NEXT:    [[FREEZE_POISON23:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON23]], ptr [[IE]], align 4
// CHECK-NEXT:    [[FREEZE_POISON24:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON24]], ptr [[ID]], align 4
// CHECK-NEXT:    [[FREEZE_POISON25:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON25]], ptr [[UIX]], align 4
// CHECK-NEXT:    [[FREEZE_POISON26:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON26]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[FREEZE_POISON27:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON27]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[FREEZE_POISON28:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON28]], ptr [[UIE]], align 4
// CHECK-NEXT:    [[FREEZE_POISON29:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON29]], ptr [[UID]], align 4
// CHECK-NEXT:    [[FREEZE_POISON30:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON30]], ptr [[LX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON31:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON31]], ptr [[LV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON32:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON32]], ptr [[LR]], align 8
// CHECK-NEXT:    [[FREEZE_POISON33:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON33]], ptr [[LE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON34:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON34]], ptr [[LD]], align 8
// CHECK-NEXT:    [[FREEZE_POISON35:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON35]], ptr [[ULX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON36:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON36]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON37:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON37]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[FREEZE_POISON38:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON38]], ptr [[ULE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON39:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON39]], ptr [[ULD]], align 8
// CHECK-NEXT:    [[FREEZE_POISON40:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON40]], ptr [[LLX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON41:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON41]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON42:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON42]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[FREEZE_POISON43:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON43]], ptr [[LLE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON44:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON44]], ptr [[LLD]], align 8
// CHECK-NEXT:    [[FREEZE_POISON45:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON45]], ptr [[ULLX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON46:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON46]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON47:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON47]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[FREEZE_POISON48:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON48]], ptr [[ULLE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON49:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON49]], ptr [[ULLD]], align 8
// CHECK-NEXT:    [[FREEZE_POISON50:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON50]], ptr [[FX]], align 4
// CHECK-NEXT:    [[FREEZE_POISON51:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON51]], ptr [[FV]], align 4
// CHECK-NEXT:    [[FREEZE_POISON52:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON52]], ptr [[FE]], align 4
// CHECK-NEXT:    [[FREEZE_POISON53:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON53]], ptr [[FD]], align 4
// CHECK-NEXT:    [[FREEZE_POISON54:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON54]], ptr [[DX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON55:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON55]], ptr [[DV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON56:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON56]], ptr [[DE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON57:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON57]], ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP0]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP1]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP2]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP3]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP5:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP4]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP5]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP7:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP6]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP7]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP9:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP10:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP8]], i8 [[TMP9]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { i8, i1 } [[TMP10]], 0
// CHECK-NEXT:    store i8 [[TMP11]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP12:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP13:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP14:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP12]], i8 [[TMP13]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP15:%.*]] = extractvalue { i8, i1 } [[TMP14]], 0
// CHECK-NEXT:    store i8 [[TMP15]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP16:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP17:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP16]] monotonic, align 1
// CHECK-NEXT:    [[TMP18:%.*]] = icmp sgt i8 [[TMP17]], [[TMP16]]
// CHECK-NEXT:    [[TMP19:%.*]] = select i1 [[TMP18]], i8 [[TMP16]], i8 [[TMP17]]
// CHECK-NEXT:    store i8 [[TMP19]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP20:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP21:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP20]] monotonic, align 1
// CHECK-NEXT:    [[TMP22:%.*]] = icmp slt i8 [[TMP21]], [[TMP20]]
// CHECK-NEXT:    [[TMP23:%.*]] = select i1 [[TMP22]], i8 [[TMP20]], i8 [[TMP21]]
// CHECK-NEXT:    store i8 [[TMP23]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP24:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP24]] monotonic, align 1
// CHECK-NEXT:    [[TMP26:%.*]] = icmp slt i8 [[TMP25]], [[TMP24]]
// CHECK-NEXT:    [[TMP27:%.*]] = select i1 [[TMP26]], i8 [[TMP24]], i8 [[TMP25]]
// CHECK-NEXT:    store i8 [[TMP27]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP28:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP28]] monotonic, align 1
// CHECK-NEXT:    [[TMP30:%.*]] = icmp sgt i8 [[TMP29]], [[TMP28]]
// CHECK-NEXT:    [[TMP31:%.*]] = select i1 [[TMP30]], i8 [[TMP28]], i8 [[TMP29]]
// CHECK-NEXT:    store i8 [[TMP31]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP32:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP33:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP34:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP32]], i8 [[TMP33]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i8, i1 } [[TMP34]], 0
// CHECK-NEXT:    [[TMP36:%.*]] = extractvalue { i8, i1 } [[TMP34]], 1
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i8 [[TMP32]], i8 [[TMP35]]
// CHECK-NEXT:    store i8 [[TMP37]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP38:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP39:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP38]], i8 [[TMP39]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i8, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i8, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i8 [[TMP38]], i8 [[TMP41]]
// CHECK-NEXT:    store i8 [[TMP43]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP44:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP45:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP46:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP44]], i8 [[TMP45]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i8, i1 } [[TMP46]], 0
// CHECK-NEXT:    [[TMP48:%.*]] = extractvalue { i8, i1 } [[TMP46]], 1
// CHECK-NEXT:    br i1 [[TMP48]], label [[CX_ATOMIC_EXIT:%.*]], label [[CX_ATOMIC_CONT:%.*]]
// CHECK:       cx.atomic.cont:
// CHECK-NEXT:    store i8 [[TMP47]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT]]
// CHECK:       cx.atomic.exit:
// CHECK-NEXT:    [[TMP49:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP50:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP51:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP49]], i8 [[TMP50]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP52:%.*]] = extractvalue { i8, i1 } [[TMP51]], 0
// CHECK-NEXT:    [[TMP53:%.*]] = extractvalue { i8, i1 } [[TMP51]], 1
// CHECK-NEXT:    br i1 [[TMP53]], label [[CX_ATOMIC_EXIT58:%.*]], label [[CX_ATOMIC_CONT59:%.*]]
// CHECK:       cx.atomic.cont59:
// CHECK-NEXT:    store i8 [[TMP52]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT58]]
// CHECK:       cx.atomic.exit58:
// CHECK-NEXT:    [[TMP54:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP55:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP56:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP54]], i8 [[TMP55]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP57:%.*]] = extractvalue { i8, i1 } [[TMP56]], 1
// CHECK-NEXT:    [[TMP58:%.*]] = sext i1 [[TMP57]] to i8
// CHECK-NEXT:    store i8 [[TMP58]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP59:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP60:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP61:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP59]], i8 [[TMP60]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP62:%.*]] = extractvalue { i8, i1 } [[TMP61]], 1
// CHECK-NEXT:    [[TMP63:%.*]] = sext i1 [[TMP62]] to i8
// CHECK-NEXT:    store i8 [[TMP63]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP64:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP65:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP66:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP64]], i8 [[TMP65]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP67:%.*]] = extractvalue { i8, i1 } [[TMP66]], 0
// CHECK-NEXT:    [[TMP68:%.*]] = extractvalue { i8, i1 } [[TMP66]], 1
// CHECK-NEXT:    br i1 [[TMP68]], label [[CX_ATOMIC_EXIT60:%.*]], label [[CX_ATOMIC_CONT61:%.*]]
// CHECK:       cx.atomic.cont61:
// CHECK-NEXT:    store i8 [[TMP67]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT60]]
// CHECK:       cx.atomic.exit60:
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i8, i1 } [[TMP66]], 1
// CHECK-NEXT:    [[TMP70:%.*]] = sext i1 [[TMP69]] to i8
// CHECK-NEXT:    store i8 [[TMP70]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP71:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP72:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP73:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP71]], i8 [[TMP72]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP74:%.*]] = extractvalue { i8, i1 } [[TMP73]], 0
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { i8, i1 } [[TMP73]], 1
// CHECK-NEXT:    br i1 [[TMP75]], label [[CX_ATOMIC_EXIT62:%.*]], label [[CX_ATOMIC_CONT63:%.*]]
// CHECK:       cx.atomic.cont63:
// CHECK-NEXT:    store i8 [[TMP74]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT62]]
// CHECK:       cx.atomic.exit62:
// CHECK-NEXT:    [[TMP76:%.*]] = extractvalue { i8, i1 } [[TMP73]], 1
// CHECK-NEXT:    [[TMP77:%.*]] = sext i1 [[TMP76]] to i8
// CHECK-NEXT:    store i8 [[TMP77]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP78:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP78]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP79]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP80:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP81:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP80]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP81]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP82:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP83:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP82]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP83]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP84:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP85:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP84]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP85]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP86:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP87:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP88:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP86]], i8 [[TMP87]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP89:%.*]] = extractvalue { i8, i1 } [[TMP88]], 0
// CHECK-NEXT:    store i8 [[TMP89]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP91:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP92:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP90]], i8 [[TMP91]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i8, i1 } [[TMP92]], 0
// CHECK-NEXT:    store i8 [[TMP93]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP94:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP95:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP94]] acq_rel, align 1
// CHECK-NEXT:    [[TMP96:%.*]] = icmp sgt i8 [[TMP95]], [[TMP94]]
// CHECK-NEXT:    [[TMP97:%.*]] = select i1 [[TMP96]], i8 [[TMP94]], i8 [[TMP95]]
// CHECK-NEXT:    store i8 [[TMP97]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP98:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP99:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP98]] acq_rel, align 1
// CHECK-NEXT:    [[TMP100:%.*]] = icmp slt i8 [[TMP99]], [[TMP98]]
// CHECK-NEXT:    [[TMP101:%.*]] = select i1 [[TMP100]], i8 [[TMP98]], i8 [[TMP99]]
// CHECK-NEXT:    store i8 [[TMP101]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP102:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP103:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP102]] acq_rel, align 1
// CHECK-NEXT:    [[TMP104:%.*]] = icmp slt i8 [[TMP103]], [[TMP102]]
// CHECK-NEXT:    [[TMP105:%.*]] = select i1 [[TMP104]], i8 [[TMP102]], i8 [[TMP103]]
// CHECK-NEXT:    store i8 [[TMP105]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP106:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP107:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP106]] acq_rel, align 1
// CHECK-NEXT:    [[TMP108:%.*]] = icmp sgt i8 [[TMP107]], [[TMP106]]
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i8 [[TMP106]], i8 [[TMP107]]
// CHECK-NEXT:    store i8 [[TMP109]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP111:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP112:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP110]], i8 [[TMP111]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP113:%.*]] = extractvalue { i8, i1 } [[TMP112]], 0
// CHECK-NEXT:    [[TMP114:%.*]] = extractvalue { i8, i1 } [[TMP112]], 1
// CHECK-NEXT:    [[TMP115:%.*]] = select i1 [[TMP114]], i8 [[TMP110]], i8 [[TMP113]]
// CHECK-NEXT:    store i8 [[TMP115]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP116:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP117:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP118:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP116]], i8 [[TMP117]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP119:%.*]] = extractvalue { i8, i1 } [[TMP118]], 0
// CHECK-NEXT:    [[TMP120:%.*]] = extractvalue { i8, i1 } [[TMP118]], 1
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i8 [[TMP116]], i8 [[TMP119]]
// CHECK-NEXT:    store i8 [[TMP121]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP123:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP124:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP122]], i8 [[TMP123]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP125:%.*]] = extractvalue { i8, i1 } [[TMP124]], 0
// CHECK-NEXT:    [[TMP126:%.*]] = extractvalue { i8, i1 } [[TMP124]], 1
// CHECK-NEXT:    br i1 [[TMP126]], label [[CX_ATOMIC_EXIT64:%.*]], label [[CX_ATOMIC_CONT65:%.*]]
// CHECK:       cx.atomic.cont65:
// CHECK-NEXT:    store i8 [[TMP125]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT64]]
// CHECK:       cx.atomic.exit64:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP127:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP128:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP129:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP127]], i8 [[TMP128]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i8, i1 } [[TMP129]], 0
// CHECK-NEXT:    [[TMP131:%.*]] = extractvalue { i8, i1 } [[TMP129]], 1
// CHECK-NEXT:    br i1 [[TMP131]], label [[CX_ATOMIC_EXIT66:%.*]], label [[CX_ATOMIC_CONT67:%.*]]
// CHECK:       cx.atomic.cont67:
// CHECK-NEXT:    store i8 [[TMP130]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT66]]
// CHECK:       cx.atomic.exit66:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP133:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP134:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP132]], i8 [[TMP133]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP135:%.*]] = extractvalue { i8, i1 } [[TMP134]], 1
// CHECK-NEXT:    [[TMP136:%.*]] = sext i1 [[TMP135]] to i8
// CHECK-NEXT:    store i8 [[TMP136]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP137:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP138:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP139:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP137]], i8 [[TMP138]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP140:%.*]] = extractvalue { i8, i1 } [[TMP139]], 1
// CHECK-NEXT:    [[TMP141:%.*]] = sext i1 [[TMP140]] to i8
// CHECK-NEXT:    store i8 [[TMP141]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP142:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP143:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP144:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP142]], i8 [[TMP143]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP145:%.*]] = extractvalue { i8, i1 } [[TMP144]], 0
// CHECK-NEXT:    [[TMP146:%.*]] = extractvalue { i8, i1 } [[TMP144]], 1
// CHECK-NEXT:    br i1 [[TMP146]], label [[CX_ATOMIC_EXIT68:%.*]], label [[CX_ATOMIC_CONT69:%.*]]
// CHECK:       cx.atomic.cont69:
// CHECK-NEXT:    store i8 [[TMP145]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT68]]
// CHECK:       cx.atomic.exit68:
// CHECK-NEXT:    [[TMP147:%.*]] = extractvalue { i8, i1 } [[TMP144]], 1
// CHECK-NEXT:    [[TMP148:%.*]] = sext i1 [[TMP147]] to i8
// CHECK-NEXT:    store i8 [[TMP148]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP149:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP150:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP151:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP149]], i8 [[TMP150]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP152:%.*]] = extractvalue { i8, i1 } [[TMP151]], 0
// CHECK-NEXT:    [[TMP153:%.*]] = extractvalue { i8, i1 } [[TMP151]], 1
// CHECK-NEXT:    br i1 [[TMP153]], label [[CX_ATOMIC_EXIT70:%.*]], label [[CX_ATOMIC_CONT71:%.*]]
// CHECK:       cx.atomic.cont71:
// CHECK-NEXT:    store i8 [[TMP152]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT70]]
// CHECK:       cx.atomic.exit70:
// CHECK-NEXT:    [[TMP154:%.*]] = extractvalue { i8, i1 } [[TMP151]], 1
// CHECK-NEXT:    [[TMP155:%.*]] = sext i1 [[TMP154]] to i8
// CHECK-NEXT:    store i8 [[TMP155]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP156:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP157:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP156]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP157]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP158:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP159:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP158]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP159]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP160:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP161:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP160]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP161]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP162:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP163:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP162]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP163]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP164:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP165:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP166:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP164]], i8 [[TMP165]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP167:%.*]] = extractvalue { i8, i1 } [[TMP166]], 0
// CHECK-NEXT:    store i8 [[TMP167]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP168:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP169:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP170:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP168]], i8 [[TMP169]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP171:%.*]] = extractvalue { i8, i1 } [[TMP170]], 0
// CHECK-NEXT:    store i8 [[TMP171]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP172:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP173:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP172]] acquire, align 1
// CHECK-NEXT:    [[TMP174:%.*]] = icmp sgt i8 [[TMP173]], [[TMP172]]
// CHECK-NEXT:    [[TMP175:%.*]] = select i1 [[TMP174]], i8 [[TMP172]], i8 [[TMP173]]
// CHECK-NEXT:    store i8 [[TMP175]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP176:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP177:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP176]] acquire, align 1
// CHECK-NEXT:    [[TMP178:%.*]] = icmp slt i8 [[TMP177]], [[TMP176]]
// CHECK-NEXT:    [[TMP179:%.*]] = select i1 [[TMP178]], i8 [[TMP176]], i8 [[TMP177]]
// CHECK-NEXT:    store i8 [[TMP179]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP180:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP181:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP180]] acquire, align 1
// CHECK-NEXT:    [[TMP182:%.*]] = icmp slt i8 [[TMP181]], [[TMP180]]
// CHECK-NEXT:    [[TMP183:%.*]] = select i1 [[TMP182]], i8 [[TMP180]], i8 [[TMP181]]
// CHECK-NEXT:    store i8 [[TMP183]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP184:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP185:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP184]] acquire, align 1
// CHECK-NEXT:    [[TMP186:%.*]] = icmp sgt i8 [[TMP185]], [[TMP184]]
// CHECK-NEXT:    [[TMP187:%.*]] = select i1 [[TMP186]], i8 [[TMP184]], i8 [[TMP185]]
// CHECK-NEXT:    store i8 [[TMP187]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP188:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP189:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP190:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP188]], i8 [[TMP189]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP191:%.*]] = extractvalue { i8, i1 } [[TMP190]], 0
// CHECK-NEXT:    [[TMP192:%.*]] = extractvalue { i8, i1 } [[TMP190]], 1
// CHECK-NEXT:    [[TMP193:%.*]] = select i1 [[TMP192]], i8 [[TMP188]], i8 [[TMP191]]
// CHECK-NEXT:    store i8 [[TMP193]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP194:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP195:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP196:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP194]], i8 [[TMP195]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP197:%.*]] = extractvalue { i8, i1 } [[TMP196]], 0
// CHECK-NEXT:    [[TMP198:%.*]] = extractvalue { i8, i1 } [[TMP196]], 1
// CHECK-NEXT:    [[TMP199:%.*]] = select i1 [[TMP198]], i8 [[TMP194]], i8 [[TMP197]]
// CHECK-NEXT:    store i8 [[TMP199]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP200:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP201:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP202:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP200]], i8 [[TMP201]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP203:%.*]] = extractvalue { i8, i1 } [[TMP202]], 0
// CHECK-NEXT:    [[TMP204:%.*]] = extractvalue { i8, i1 } [[TMP202]], 1
// CHECK-NEXT:    br i1 [[TMP204]], label [[CX_ATOMIC_EXIT72:%.*]], label [[CX_ATOMIC_CONT73:%.*]]
// CHECK:       cx.atomic.cont73:
// CHECK-NEXT:    store i8 [[TMP203]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT72]]
// CHECK:       cx.atomic.exit72:
// CHECK-NEXT:    [[TMP205:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP206:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP207:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP205]], i8 [[TMP206]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP208:%.*]] = extractvalue { i8, i1 } [[TMP207]], 0
// CHECK-NEXT:    [[TMP209:%.*]] = extractvalue { i8, i1 } [[TMP207]], 1
// CHECK-NEXT:    br i1 [[TMP209]], label [[CX_ATOMIC_EXIT74:%.*]], label [[CX_ATOMIC_CONT75:%.*]]
// CHECK:       cx.atomic.cont75:
// CHECK-NEXT:    store i8 [[TMP208]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT74]]
// CHECK:       cx.atomic.exit74:
// CHECK-NEXT:    [[TMP210:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP211:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP212:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP210]], i8 [[TMP211]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP213:%.*]] = extractvalue { i8, i1 } [[TMP212]], 1
// CHECK-NEXT:    [[TMP214:%.*]] = sext i1 [[TMP213]] to i8
// CHECK-NEXT:    store i8 [[TMP214]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP215:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP216:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP217:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP215]], i8 [[TMP216]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP218:%.*]] = extractvalue { i8, i1 } [[TMP217]], 1
// CHECK-NEXT:    [[TMP219:%.*]] = sext i1 [[TMP218]] to i8
// CHECK-NEXT:    store i8 [[TMP219]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP220:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP221:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP222:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP220]], i8 [[TMP221]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP223:%.*]] = extractvalue { i8, i1 } [[TMP222]], 0
// CHECK-NEXT:    [[TMP224:%.*]] = extractvalue { i8, i1 } [[TMP222]], 1
// CHECK-NEXT:    br i1 [[TMP224]], label [[CX_ATOMIC_EXIT76:%.*]], label [[CX_ATOMIC_CONT77:%.*]]
// CHECK:       cx.atomic.cont77:
// CHECK-NEXT:    store i8 [[TMP223]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT76]]
// CHECK:       cx.atomic.exit76:
// CHECK-NEXT:    [[TMP225:%.*]] = extractvalue { i8, i1 } [[TMP222]], 1
// CHECK-NEXT:    [[TMP226:%.*]] = sext i1 [[TMP225]] to i8
// CHECK-NEXT:    store i8 [[TMP226]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP227:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP228:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP229:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP227]], i8 [[TMP228]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP230:%.*]] = extractvalue { i8, i1 } [[TMP229]], 0
// CHECK-NEXT:    [[TMP231:%.*]] = extractvalue { i8, i1 } [[TMP229]], 1
// CHECK-NEXT:    br i1 [[TMP231]], label [[CX_ATOMIC_EXIT78:%.*]], label [[CX_ATOMIC_CONT79:%.*]]
// CHECK:       cx.atomic.cont79:
// CHECK-NEXT:    store i8 [[TMP230]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT78]]
// CHECK:       cx.atomic.exit78:
// CHECK-NEXT:    [[TMP232:%.*]] = extractvalue { i8, i1 } [[TMP229]], 1
// CHECK-NEXT:    [[TMP233:%.*]] = sext i1 [[TMP232]] to i8
// CHECK-NEXT:    store i8 [[TMP233]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP234:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP235:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP234]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP235]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP236:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP237:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP236]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP237]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP238:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP239:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP238]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP239]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP240:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP241:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP240]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP241]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP242:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP243:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP244:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP242]], i8 [[TMP243]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP245:%.*]] = extractvalue { i8, i1 } [[TMP244]], 0
// CHECK-NEXT:    store i8 [[TMP245]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP246:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP247:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP248:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP246]], i8 [[TMP247]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP249:%.*]] = extractvalue { i8, i1 } [[TMP248]], 0
// CHECK-NEXT:    store i8 [[TMP249]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP250:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP251:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP250]] monotonic, align 1
// CHECK-NEXT:    [[TMP252:%.*]] = icmp sgt i8 [[TMP251]], [[TMP250]]
// CHECK-NEXT:    [[TMP253:%.*]] = select i1 [[TMP252]], i8 [[TMP250]], i8 [[TMP251]]
// CHECK-NEXT:    store i8 [[TMP253]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP254:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP255:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP254]] monotonic, align 1
// CHECK-NEXT:    [[TMP256:%.*]] = icmp slt i8 [[TMP255]], [[TMP254]]
// CHECK-NEXT:    [[TMP257:%.*]] = select i1 [[TMP256]], i8 [[TMP254]], i8 [[TMP255]]
// CHECK-NEXT:    store i8 [[TMP257]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP258:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP259:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP258]] monotonic, align 1
// CHECK-NEXT:    [[TMP260:%.*]] = icmp slt i8 [[TMP259]], [[TMP258]]
// CHECK-NEXT:    [[TMP261:%.*]] = select i1 [[TMP260]], i8 [[TMP258]], i8 [[TMP259]]
// CHECK-NEXT:    store i8 [[TMP261]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP262:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP263:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP262]] monotonic, align 1
// CHECK-NEXT:    [[TMP264:%.*]] = icmp sgt i8 [[TMP263]], [[TMP262]]
// CHECK-NEXT:    [[TMP265:%.*]] = select i1 [[TMP264]], i8 [[TMP262]], i8 [[TMP263]]
// CHECK-NEXT:    store i8 [[TMP265]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP266:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP267:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP268:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP266]], i8 [[TMP267]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP269:%.*]] = extractvalue { i8, i1 } [[TMP268]], 0
// CHECK-NEXT:    [[TMP270:%.*]] = extractvalue { i8, i1 } [[TMP268]], 1
// CHECK-NEXT:    [[TMP271:%.*]] = select i1 [[TMP270]], i8 [[TMP266]], i8 [[TMP269]]
// CHECK-NEXT:    store i8 [[TMP271]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP272:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP273:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP274:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP272]], i8 [[TMP273]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP275:%.*]] = extractvalue { i8, i1 } [[TMP274]], 0
// CHECK-NEXT:    [[TMP276:%.*]] = extractvalue { i8, i1 } [[TMP274]], 1
// CHECK-NEXT:    [[TMP277:%.*]] = select i1 [[TMP276]], i8 [[TMP272]], i8 [[TMP275]]
// CHECK-NEXT:    store i8 [[TMP277]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP278:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP279:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP280:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP278]], i8 [[TMP279]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP281:%.*]] = extractvalue { i8, i1 } [[TMP280]], 0
// CHECK-NEXT:    [[TMP282:%.*]] = extractvalue { i8, i1 } [[TMP280]], 1
// CHECK-NEXT:    br i1 [[TMP282]], label [[CX_ATOMIC_EXIT80:%.*]], label [[CX_ATOMIC_CONT81:%.*]]
// CHECK:       cx.atomic.cont81:
// CHECK-NEXT:    store i8 [[TMP281]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT80]]
// CHECK:       cx.atomic.exit80:
// CHECK-NEXT:    [[TMP283:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP284:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP285:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP283]], i8 [[TMP284]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP286:%.*]] = extractvalue { i8, i1 } [[TMP285]], 0
// CHECK-NEXT:    [[TMP287:%.*]] = extractvalue { i8, i1 } [[TMP285]], 1
// CHECK-NEXT:    br i1 [[TMP287]], label [[CX_ATOMIC_EXIT82:%.*]], label [[CX_ATOMIC_CONT83:%.*]]
// CHECK:       cx.atomic.cont83:
// CHECK-NEXT:    store i8 [[TMP286]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT82]]
// CHECK:       cx.atomic.exit82:
// CHECK-NEXT:    [[TMP288:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP289:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP290:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP288]], i8 [[TMP289]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP291:%.*]] = extractvalue { i8, i1 } [[TMP290]], 1
// CHECK-NEXT:    [[TMP292:%.*]] = sext i1 [[TMP291]] to i8
// CHECK-NEXT:    store i8 [[TMP292]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP293:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP294:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP295:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP293]], i8 [[TMP294]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP296:%.*]] = extractvalue { i8, i1 } [[TMP295]], 1
// CHECK-NEXT:    [[TMP297:%.*]] = sext i1 [[TMP296]] to i8
// CHECK-NEXT:    store i8 [[TMP297]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP298:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP299:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP300:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP298]], i8 [[TMP299]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP301:%.*]] = extractvalue { i8, i1 } [[TMP300]], 0
// CHECK-NEXT:    [[TMP302:%.*]] = extractvalue { i8, i1 } [[TMP300]], 1
// CHECK-NEXT:    br i1 [[TMP302]], label [[CX_ATOMIC_EXIT84:%.*]], label [[CX_ATOMIC_CONT85:%.*]]
// CHECK:       cx.atomic.cont85:
// CHECK-NEXT:    store i8 [[TMP301]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT84]]
// CHECK:       cx.atomic.exit84:
// CHECK-NEXT:    [[TMP303:%.*]] = extractvalue { i8, i1 } [[TMP300]], 1
// CHECK-NEXT:    [[TMP304:%.*]] = sext i1 [[TMP303]] to i8
// CHECK-NEXT:    store i8 [[TMP304]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP305:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP306:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP307:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP305]], i8 [[TMP306]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP308:%.*]] = extractvalue { i8, i1 } [[TMP307]], 0
// CHECK-NEXT:    [[TMP309:%.*]] = extractvalue { i8, i1 } [[TMP307]], 1
// CHECK-NEXT:    br i1 [[TMP309]], label [[CX_ATOMIC_EXIT86:%.*]], label [[CX_ATOMIC_CONT87:%.*]]
// CHECK:       cx.atomic.cont87:
// CHECK-NEXT:    store i8 [[TMP308]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT86]]
// CHECK:       cx.atomic.exit86:
// CHECK-NEXT:    [[TMP310:%.*]] = extractvalue { i8, i1 } [[TMP307]], 1
// CHECK-NEXT:    [[TMP311:%.*]] = sext i1 [[TMP310]] to i8
// CHECK-NEXT:    store i8 [[TMP311]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP312:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP313:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP312]] release, align 1
// CHECK-NEXT:    store i8 [[TMP313]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP314:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP315:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP314]] release, align 1
// CHECK-NEXT:    store i8 [[TMP315]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP316:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP317:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP316]] release, align 1
// CHECK-NEXT:    store i8 [[TMP317]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP318:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP319:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP318]] release, align 1
// CHECK-NEXT:    store i8 [[TMP319]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP320:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP321:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP322:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP320]], i8 [[TMP321]] release monotonic, align 1
// CHECK-NEXT:    [[TMP323:%.*]] = extractvalue { i8, i1 } [[TMP322]], 0
// CHECK-NEXT:    store i8 [[TMP323]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP324:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP325:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP326:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP324]], i8 [[TMP325]] release monotonic, align 1
// CHECK-NEXT:    [[TMP327:%.*]] = extractvalue { i8, i1 } [[TMP326]], 0
// CHECK-NEXT:    store i8 [[TMP327]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP328:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP329:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP328]] release, align 1
// CHECK-NEXT:    [[TMP330:%.*]] = icmp sgt i8 [[TMP329]], [[TMP328]]
// CHECK-NEXT:    [[TMP331:%.*]] = select i1 [[TMP330]], i8 [[TMP328]], i8 [[TMP329]]
// CHECK-NEXT:    store i8 [[TMP331]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP332:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP333:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP332]] release, align 1
// CHECK-NEXT:    [[TMP334:%.*]] = icmp slt i8 [[TMP333]], [[TMP332]]
// CHECK-NEXT:    [[TMP335:%.*]] = select i1 [[TMP334]], i8 [[TMP332]], i8 [[TMP333]]
// CHECK-NEXT:    store i8 [[TMP335]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP336:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP337:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP336]] release, align 1
// CHECK-NEXT:    [[TMP338:%.*]] = icmp slt i8 [[TMP337]], [[TMP336]]
// CHECK-NEXT:    [[TMP339:%.*]] = select i1 [[TMP338]], i8 [[TMP336]], i8 [[TMP337]]
// CHECK-NEXT:    store i8 [[TMP339]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP340:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP341:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP340]] release, align 1
// CHECK-NEXT:    [[TMP342:%.*]] = icmp sgt i8 [[TMP341]], [[TMP340]]
// CHECK-NEXT:    [[TMP343:%.*]] = select i1 [[TMP342]], i8 [[TMP340]], i8 [[TMP341]]
// CHECK-NEXT:    store i8 [[TMP343]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP344:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP345:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP346:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP344]], i8 [[TMP345]] release monotonic, align 1
// CHECK-NEXT:    [[TMP347:%.*]] = extractvalue { i8, i1 } [[TMP346]], 0
// CHECK-NEXT:    [[TMP348:%.*]] = extractvalue { i8, i1 } [[TMP346]], 1
// CHECK-NEXT:    [[TMP349:%.*]] = select i1 [[TMP348]], i8 [[TMP344]], i8 [[TMP347]]
// CHECK-NEXT:    store i8 [[TMP349]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP350:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP351:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP352:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP350]], i8 [[TMP351]] release monotonic, align 1
// CHECK-NEXT:    [[TMP353:%.*]] = extractvalue { i8, i1 } [[TMP352]], 0
// CHECK-NEXT:    [[TMP354:%.*]] = extractvalue { i8, i1 } [[TMP352]], 1
// CHECK-NEXT:    [[TMP355:%.*]] = select i1 [[TMP354]], i8 [[TMP350]], i8 [[TMP353]]
// CHECK-NEXT:    store i8 [[TMP355]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP356:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP357:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP358:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP356]], i8 [[TMP357]] release monotonic, align 1
// CHECK-NEXT:    [[TMP359:%.*]] = extractvalue { i8, i1 } [[TMP358]], 0
// CHECK-NEXT:    [[TMP360:%.*]] = extractvalue { i8, i1 } [[TMP358]], 1
// CHECK-NEXT:    br i1 [[TMP360]], label [[CX_ATOMIC_EXIT88:%.*]], label [[CX_ATOMIC_CONT89:%.*]]
// CHECK:       cx.atomic.cont89:
// CHECK-NEXT:    store i8 [[TMP359]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT88]]
// CHECK:       cx.atomic.exit88:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP361:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP362:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP363:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP361]], i8 [[TMP362]] release monotonic, align 1
// CHECK-NEXT:    [[TMP364:%.*]] = extractvalue { i8, i1 } [[TMP363]], 0
// CHECK-NEXT:    [[TMP365:%.*]] = extractvalue { i8, i1 } [[TMP363]], 1
// CHECK-NEXT:    br i1 [[TMP365]], label [[CX_ATOMIC_EXIT90:%.*]], label [[CX_ATOMIC_CONT91:%.*]]
// CHECK:       cx.atomic.cont91:
// CHECK-NEXT:    store i8 [[TMP364]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT90]]
// CHECK:       cx.atomic.exit90:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP366:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP367:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP368:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP366]], i8 [[TMP367]] release monotonic, align 1
// CHECK-NEXT:    [[TMP369:%.*]] = extractvalue { i8, i1 } [[TMP368]], 1
// CHECK-NEXT:    [[TMP370:%.*]] = sext i1 [[TMP369]] to i8
// CHECK-NEXT:    store i8 [[TMP370]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP371:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP372:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP373:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP371]], i8 [[TMP372]] release monotonic, align 1
// CHECK-NEXT:    [[TMP374:%.*]] = extractvalue { i8, i1 } [[TMP373]], 1
// CHECK-NEXT:    [[TMP375:%.*]] = sext i1 [[TMP374]] to i8
// CHECK-NEXT:    store i8 [[TMP375]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP376:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP377:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP378:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP376]], i8 [[TMP377]] release monotonic, align 1
// CHECK-NEXT:    [[TMP379:%.*]] = extractvalue { i8, i1 } [[TMP378]], 0
// CHECK-NEXT:    [[TMP380:%.*]] = extractvalue { i8, i1 } [[TMP378]], 1
// CHECK-NEXT:    br i1 [[TMP380]], label [[CX_ATOMIC_EXIT92:%.*]], label [[CX_ATOMIC_CONT93:%.*]]
// CHECK:       cx.atomic.cont93:
// CHECK-NEXT:    store i8 [[TMP379]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT92]]
// CHECK:       cx.atomic.exit92:
// CHECK-NEXT:    [[TMP381:%.*]] = extractvalue { i8, i1 } [[TMP378]], 1
// CHECK-NEXT:    [[TMP382:%.*]] = sext i1 [[TMP381]] to i8
// CHECK-NEXT:    store i8 [[TMP382]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP383:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP384:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP385:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP383]], i8 [[TMP384]] release monotonic, align 1
// CHECK-NEXT:    [[TMP386:%.*]] = extractvalue { i8, i1 } [[TMP385]], 0
// CHECK-NEXT:    [[TMP387:%.*]] = extractvalue { i8, i1 } [[TMP385]], 1
// CHECK-NEXT:    br i1 [[TMP387]], label [[CX_ATOMIC_EXIT94:%.*]], label [[CX_ATOMIC_CONT95:%.*]]
// CHECK:       cx.atomic.cont95:
// CHECK-NEXT:    store i8 [[TMP386]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT94]]
// CHECK:       cx.atomic.exit94:
// CHECK-NEXT:    [[TMP388:%.*]] = extractvalue { i8, i1 } [[TMP385]], 1
// CHECK-NEXT:    [[TMP389:%.*]] = sext i1 [[TMP388]] to i8
// CHECK-NEXT:    store i8 [[TMP389]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP390:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP391:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP390]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP391]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP392:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP393:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP392]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP393]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP394:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP395:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP394]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP395]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP396:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP397:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP396]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP397]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP398:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP399:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP400:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP398]], i8 [[TMP399]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP401:%.*]] = extractvalue { i8, i1 } [[TMP400]], 0
// CHECK-NEXT:    store i8 [[TMP401]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP402:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP403:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP404:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP402]], i8 [[TMP403]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP405:%.*]] = extractvalue { i8, i1 } [[TMP404]], 0
// CHECK-NEXT:    store i8 [[TMP405]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP406:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP407:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP406]] seq_cst, align 1
// CHECK-NEXT:    [[TMP408:%.*]] = icmp sgt i8 [[TMP407]], [[TMP406]]
// CHECK-NEXT:    [[TMP409:%.*]] = select i1 [[TMP408]], i8 [[TMP406]], i8 [[TMP407]]
// CHECK-NEXT:    store i8 [[TMP409]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP410:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP411:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP410]] seq_cst, align 1
// CHECK-NEXT:    [[TMP412:%.*]] = icmp slt i8 [[TMP411]], [[TMP410]]
// CHECK-NEXT:    [[TMP413:%.*]] = select i1 [[TMP412]], i8 [[TMP410]], i8 [[TMP411]]
// CHECK-NEXT:    store i8 [[TMP413]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP414:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP415:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP414]] seq_cst, align 1
// CHECK-NEXT:    [[TMP416:%.*]] = icmp slt i8 [[TMP415]], [[TMP414]]
// CHECK-NEXT:    [[TMP417:%.*]] = select i1 [[TMP416]], i8 [[TMP414]], i8 [[TMP415]]
// CHECK-NEXT:    store i8 [[TMP417]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP418:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP419:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP418]] seq_cst, align 1
// CHECK-NEXT:    [[TMP420:%.*]] = icmp sgt i8 [[TMP419]], [[TMP418]]
// CHECK-NEXT:    [[TMP421:%.*]] = select i1 [[TMP420]], i8 [[TMP418]], i8 [[TMP419]]
// CHECK-NEXT:    store i8 [[TMP421]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP422:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP423:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP424:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP422]], i8 [[TMP423]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP425:%.*]] = extractvalue { i8, i1 } [[TMP424]], 0
// CHECK-NEXT:    [[TMP426:%.*]] = extractvalue { i8, i1 } [[TMP424]], 1
// CHECK-NEXT:    [[TMP427:%.*]] = select i1 [[TMP426]], i8 [[TMP422]], i8 [[TMP425]]
// CHECK-NEXT:    store i8 [[TMP427]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP428:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP429:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP430:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP428]], i8 [[TMP429]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP431:%.*]] = extractvalue { i8, i1 } [[TMP430]], 0
// CHECK-NEXT:    [[TMP432:%.*]] = extractvalue { i8, i1 } [[TMP430]], 1
// CHECK-NEXT:    [[TMP433:%.*]] = select i1 [[TMP432]], i8 [[TMP428]], i8 [[TMP431]]
// CHECK-NEXT:    store i8 [[TMP433]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP434:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP435:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP436:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP434]], i8 [[TMP435]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP437:%.*]] = extractvalue { i8, i1 } [[TMP436]], 0
// CHECK-NEXT:    [[TMP438:%.*]] = extractvalue { i8, i1 } [[TMP436]], 1
// CHECK-NEXT:    br i1 [[TMP438]], label [[CX_ATOMIC_EXIT96:%.*]], label [[CX_ATOMIC_CONT97:%.*]]
// CHECK:       cx.atomic.cont97:
// CHECK-NEXT:    store i8 [[TMP437]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT96]]
// CHECK:       cx.atomic.exit96:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP439:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP440:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP441:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP439]], i8 [[TMP440]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP442:%.*]] = extractvalue { i8, i1 } [[TMP441]], 0
// CHECK-NEXT:    [[TMP443:%.*]] = extractvalue { i8, i1 } [[TMP441]], 1
// CHECK-NEXT:    br i1 [[TMP443]], label [[CX_ATOMIC_EXIT98:%.*]], label [[CX_ATOMIC_CONT99:%.*]]
// CHECK:       cx.atomic.cont99:
// CHECK-NEXT:    store i8 [[TMP442]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT98]]
// CHECK:       cx.atomic.exit98:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP444:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP445:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP446:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP444]], i8 [[TMP445]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP447:%.*]] = extractvalue { i8, i1 } [[TMP446]], 1
// CHECK-NEXT:    [[TMP448:%.*]] = sext i1 [[TMP447]] to i8
// CHECK-NEXT:    store i8 [[TMP448]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP449:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP450:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP451:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP449]], i8 [[TMP450]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP452:%.*]] = extractvalue { i8, i1 } [[TMP451]], 1
// CHECK-NEXT:    [[TMP453:%.*]] = sext i1 [[TMP452]] to i8
// CHECK-NEXT:    store i8 [[TMP453]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP454:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP455:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP456:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP454]], i8 [[TMP455]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP457:%.*]] = extractvalue { i8, i1 } [[TMP456]], 0
// CHECK-NEXT:    [[TMP458:%.*]] = extractvalue { i8, i1 } [[TMP456]], 1
// CHECK-NEXT:    br i1 [[TMP458]], label [[CX_ATOMIC_EXIT100:%.*]], label [[CX_ATOMIC_CONT101:%.*]]
// CHECK:       cx.atomic.cont101:
// CHECK-NEXT:    store i8 [[TMP457]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT100]]
// CHECK:       cx.atomic.exit100:
// CHECK-NEXT:    [[TMP459:%.*]] = extractvalue { i8, i1 } [[TMP456]], 1
// CHECK-NEXT:    [[TMP460:%.*]] = sext i1 [[TMP459]] to i8
// CHECK-NEXT:    store i8 [[TMP460]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP461:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP462:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP463:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP461]], i8 [[TMP462]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP464:%.*]] = extractvalue { i8, i1 } [[TMP463]], 0
// CHECK-NEXT:    [[TMP465:%.*]] = extractvalue { i8, i1 } [[TMP463]], 1
// CHECK-NEXT:    br i1 [[TMP465]], label [[CX_ATOMIC_EXIT102:%.*]], label [[CX_ATOMIC_CONT103:%.*]]
// CHECK:       cx.atomic.cont103:
// CHECK-NEXT:    store i8 [[TMP464]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT102]]
// CHECK:       cx.atomic.exit102:
// CHECK-NEXT:    [[TMP466:%.*]] = extractvalue { i8, i1 } [[TMP463]], 1
// CHECK-NEXT:    [[TMP467:%.*]] = sext i1 [[TMP466]] to i8
// CHECK-NEXT:    store i8 [[TMP467]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP468:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP469:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP468]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP469]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP470:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP471:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP470]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP471]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP472:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP473:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP472]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP473]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP474:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP475:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP474]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP475]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP476:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP477:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP478:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP476]], i8 [[TMP477]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP479:%.*]] = extractvalue { i8, i1 } [[TMP478]], 0
// CHECK-NEXT:    store i8 [[TMP479]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP480:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP481:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP482:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP480]], i8 [[TMP481]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP483:%.*]] = extractvalue { i8, i1 } [[TMP482]], 0
// CHECK-NEXT:    store i8 [[TMP483]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP484:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP485:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP484]] monotonic, align 1
// CHECK-NEXT:    [[TMP486:%.*]] = icmp ugt i8 [[TMP485]], [[TMP484]]
// CHECK-NEXT:    [[TMP487:%.*]] = select i1 [[TMP486]], i8 [[TMP484]], i8 [[TMP485]]
// CHECK-NEXT:    store i8 [[TMP487]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP488:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP489:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP488]] monotonic, align 1
// CHECK-NEXT:    [[TMP490:%.*]] = icmp ult i8 [[TMP489]], [[TMP488]]
// CHECK-NEXT:    [[TMP491:%.*]] = select i1 [[TMP490]], i8 [[TMP488]], i8 [[TMP489]]
// CHECK-NEXT:    store i8 [[TMP491]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP492:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP493:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP492]] monotonic, align 1
// CHECK-NEXT:    [[TMP494:%.*]] = icmp ult i8 [[TMP493]], [[TMP492]]
// CHECK-NEXT:    [[TMP495:%.*]] = select i1 [[TMP494]], i8 [[TMP492]], i8 [[TMP493]]
// CHECK-NEXT:    store i8 [[TMP495]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP496:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP497:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP496]] monotonic, align 1
// CHECK-NEXT:    [[TMP498:%.*]] = icmp ugt i8 [[TMP497]], [[TMP496]]
// CHECK-NEXT:    [[TMP499:%.*]] = select i1 [[TMP498]], i8 [[TMP496]], i8 [[TMP497]]
// CHECK-NEXT:    store i8 [[TMP499]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP500:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP501:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP502:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP500]], i8 [[TMP501]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP503:%.*]] = extractvalue { i8, i1 } [[TMP502]], 0
// CHECK-NEXT:    [[TMP504:%.*]] = extractvalue { i8, i1 } [[TMP502]], 1
// CHECK-NEXT:    [[TMP505:%.*]] = select i1 [[TMP504]], i8 [[TMP500]], i8 [[TMP503]]
// CHECK-NEXT:    store i8 [[TMP505]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP506:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP507:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP508:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP506]], i8 [[TMP507]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP509:%.*]] = extractvalue { i8, i1 } [[TMP508]], 0
// CHECK-NEXT:    [[TMP510:%.*]] = extractvalue { i8, i1 } [[TMP508]], 1
// CHECK-NEXT:    [[TMP511:%.*]] = select i1 [[TMP510]], i8 [[TMP506]], i8 [[TMP509]]
// CHECK-NEXT:    store i8 [[TMP511]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP512:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP513:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP514:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP512]], i8 [[TMP513]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP515:%.*]] = extractvalue { i8, i1 } [[TMP514]], 0
// CHECK-NEXT:    [[TMP516:%.*]] = extractvalue { i8, i1 } [[TMP514]], 1
// CHECK-NEXT:    br i1 [[TMP516]], label [[UCX_ATOMIC_EXIT:%.*]], label [[UCX_ATOMIC_CONT:%.*]]
// CHECK:       ucx.atomic.cont:
// CHECK-NEXT:    store i8 [[TMP515]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT]]
// CHECK:       ucx.atomic.exit:
// CHECK-NEXT:    [[TMP517:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP518:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP519:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP517]], i8 [[TMP518]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP520:%.*]] = extractvalue { i8, i1 } [[TMP519]], 0
// CHECK-NEXT:    [[TMP521:%.*]] = extractvalue { i8, i1 } [[TMP519]], 1
// CHECK-NEXT:    br i1 [[TMP521]], label [[UCX_ATOMIC_EXIT104:%.*]], label [[UCX_ATOMIC_CONT105:%.*]]
// CHECK:       ucx.atomic.cont105:
// CHECK-NEXT:    store i8 [[TMP520]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT104]]
// CHECK:       ucx.atomic.exit104:
// CHECK-NEXT:    [[TMP522:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP523:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP524:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP522]], i8 [[TMP523]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP525:%.*]] = extractvalue { i8, i1 } [[TMP524]], 1
// CHECK-NEXT:    [[TMP526:%.*]] = zext i1 [[TMP525]] to i8
// CHECK-NEXT:    store i8 [[TMP526]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP527:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP528:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP529:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP527]], i8 [[TMP528]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP530:%.*]] = extractvalue { i8, i1 } [[TMP529]], 1
// CHECK-NEXT:    [[TMP531:%.*]] = zext i1 [[TMP530]] to i8
// CHECK-NEXT:    store i8 [[TMP531]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP532:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP533:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP534:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP532]], i8 [[TMP533]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP535:%.*]] = extractvalue { i8, i1 } [[TMP534]], 0
// CHECK-NEXT:    [[TMP536:%.*]] = extractvalue { i8, i1 } [[TMP534]], 1
// CHECK-NEXT:    br i1 [[TMP536]], label [[UCX_ATOMIC_EXIT106:%.*]], label [[UCX_ATOMIC_CONT107:%.*]]
// CHECK:       ucx.atomic.cont107:
// CHECK-NEXT:    store i8 [[TMP535]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT106]]
// CHECK:       ucx.atomic.exit106:
// CHECK-NEXT:    [[TMP537:%.*]] = extractvalue { i8, i1 } [[TMP534]], 1
// CHECK-NEXT:    [[TMP538:%.*]] = zext i1 [[TMP537]] to i8
// CHECK-NEXT:    store i8 [[TMP538]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP539:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP540:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP541:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP539]], i8 [[TMP540]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP542:%.*]] = extractvalue { i8, i1 } [[TMP541]], 0
// CHECK-NEXT:    [[TMP543:%.*]] = extractvalue { i8, i1 } [[TMP541]], 1
// CHECK-NEXT:    br i1 [[TMP543]], label [[UCX_ATOMIC_EXIT108:%.*]], label [[UCX_ATOMIC_CONT109:%.*]]
// CHECK:       ucx.atomic.cont109:
// CHECK-NEXT:    store i8 [[TMP542]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT108]]
// CHECK:       ucx.atomic.exit108:
// CHECK-NEXT:    [[TMP544:%.*]] = extractvalue { i8, i1 } [[TMP541]], 1
// CHECK-NEXT:    [[TMP545:%.*]] = zext i1 [[TMP544]] to i8
// CHECK-NEXT:    store i8 [[TMP545]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP546:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP547:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP546]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP547]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP548:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP549:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP548]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP549]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP550:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP551:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP550]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP551]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP552:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP553:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP552]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP553]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP554:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP555:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP556:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP554]], i8 [[TMP555]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP557:%.*]] = extractvalue { i8, i1 } [[TMP556]], 0
// CHECK-NEXT:    store i8 [[TMP557]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP558:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP559:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP560:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP558]], i8 [[TMP559]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP561:%.*]] = extractvalue { i8, i1 } [[TMP560]], 0
// CHECK-NEXT:    store i8 [[TMP561]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP562:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP563:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP562]] acq_rel, align 1
// CHECK-NEXT:    [[TMP564:%.*]] = icmp ugt i8 [[TMP563]], [[TMP562]]
// CHECK-NEXT:    [[TMP565:%.*]] = select i1 [[TMP564]], i8 [[TMP562]], i8 [[TMP563]]
// CHECK-NEXT:    store i8 [[TMP565]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP566:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP567:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP566]] acq_rel, align 1
// CHECK-NEXT:    [[TMP568:%.*]] = icmp ult i8 [[TMP567]], [[TMP566]]
// CHECK-NEXT:    [[TMP569:%.*]] = select i1 [[TMP568]], i8 [[TMP566]], i8 [[TMP567]]
// CHECK-NEXT:    store i8 [[TMP569]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP570:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP571:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP570]] acq_rel, align 1
// CHECK-NEXT:    [[TMP572:%.*]] = icmp ult i8 [[TMP571]], [[TMP570]]
// CHECK-NEXT:    [[TMP573:%.*]] = select i1 [[TMP572]], i8 [[TMP570]], i8 [[TMP571]]
// CHECK-NEXT:    store i8 [[TMP573]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP574:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP575:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP574]] acq_rel, align 1
// CHECK-NEXT:    [[TMP576:%.*]] = icmp ugt i8 [[TMP575]], [[TMP574]]
// CHECK-NEXT:    [[TMP577:%.*]] = select i1 [[TMP576]], i8 [[TMP574]], i8 [[TMP575]]
// CHECK-NEXT:    store i8 [[TMP577]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP578:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP579:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP580:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP578]], i8 [[TMP579]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP581:%.*]] = extractvalue { i8, i1 } [[TMP580]], 0
// CHECK-NEXT:    [[TMP582:%.*]] = extractvalue { i8, i1 } [[TMP580]], 1
// CHECK-NEXT:    [[TMP583:%.*]] = select i1 [[TMP582]], i8 [[TMP578]], i8 [[TMP581]]
// CHECK-NEXT:    store i8 [[TMP583]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP584:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP585:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP586:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP584]], i8 [[TMP585]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP587:%.*]] = extractvalue { i8, i1 } [[TMP586]], 0
// CHECK-NEXT:    [[TMP588:%.*]] = extractvalue { i8, i1 } [[TMP586]], 1
// CHECK-NEXT:    [[TMP589:%.*]] = select i1 [[TMP588]], i8 [[TMP584]], i8 [[TMP587]]
// CHECK-NEXT:    store i8 [[TMP589]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP590:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP591:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP592:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP590]], i8 [[TMP591]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP593:%.*]] = extractvalue { i8, i1 } [[TMP592]], 0
// CHECK-NEXT:    [[TMP594:%.*]] = extractvalue { i8, i1 } [[TMP592]], 1
// CHECK-NEXT:    br i1 [[TMP594]], label [[UCX_ATOMIC_EXIT110:%.*]], label [[UCX_ATOMIC_CONT111:%.*]]
// CHECK:       ucx.atomic.cont111:
// CHECK-NEXT:    store i8 [[TMP593]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT110]]
// CHECK:       ucx.atomic.exit110:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP595:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP596:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP597:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP595]], i8 [[TMP596]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP598:%.*]] = extractvalue { i8, i1 } [[TMP597]], 0
// CHECK-NEXT:    [[TMP599:%.*]] = extractvalue { i8, i1 } [[TMP597]], 1
// CHECK-NEXT:    br i1 [[TMP599]], label [[UCX_ATOMIC_EXIT112:%.*]], label [[UCX_ATOMIC_CONT113:%.*]]
// CHECK:       ucx.atomic.cont113:
// CHECK-NEXT:    store i8 [[TMP598]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT112]]
// CHECK:       ucx.atomic.exit112:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP600:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP601:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP602:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP600]], i8 [[TMP601]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP603:%.*]] = extractvalue { i8, i1 } [[TMP602]], 1
// CHECK-NEXT:    [[TMP604:%.*]] = zext i1 [[TMP603]] to i8
// CHECK-NEXT:    store i8 [[TMP604]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP605:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP606:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP607:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP605]], i8 [[TMP606]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP608:%.*]] = extractvalue { i8, i1 } [[TMP607]], 1
// CHECK-NEXT:    [[TMP609:%.*]] = zext i1 [[TMP608]] to i8
// CHECK-NEXT:    store i8 [[TMP609]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP610:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP611:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP612:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP610]], i8 [[TMP611]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP613:%.*]] = extractvalue { i8, i1 } [[TMP612]], 0
// CHECK-NEXT:    [[TMP614:%.*]] = extractvalue { i8, i1 } [[TMP612]], 1
// CHECK-NEXT:    br i1 [[TMP614]], label [[UCX_ATOMIC_EXIT114:%.*]], label [[UCX_ATOMIC_CONT115:%.*]]
// CHECK:       ucx.atomic.cont115:
// CHECK-NEXT:    store i8 [[TMP613]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT114]]
// CHECK:       ucx.atomic.exit114:
// CHECK-NEXT:    [[TMP615:%.*]] = extractvalue { i8, i1 } [[TMP612]], 1
// CHECK-NEXT:    [[TMP616:%.*]] = zext i1 [[TMP615]] to i8
// CHECK-NEXT:    store i8 [[TMP616]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP617:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP618:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP619:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP617]], i8 [[TMP618]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP620:%.*]] = extractvalue { i8, i1 } [[TMP619]], 0
// CHECK-NEXT:    [[TMP621:%.*]] = extractvalue { i8, i1 } [[TMP619]], 1
// CHECK-NEXT:    br i1 [[TMP621]], label [[UCX_ATOMIC_EXIT116:%.*]], label [[UCX_ATOMIC_CONT117:%.*]]
// CHECK:       ucx.atomic.cont117:
// CHECK-NEXT:    store i8 [[TMP620]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT116]]
// CHECK:       ucx.atomic.exit116:
// CHECK-NEXT:    [[TMP622:%.*]] = extractvalue { i8, i1 } [[TMP619]], 1
// CHECK-NEXT:    [[TMP623:%.*]] = zext i1 [[TMP622]] to i8
// CHECK-NEXT:    store i8 [[TMP623]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP624:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP625:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP624]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP625]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP626:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP627:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP626]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP627]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP628:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP629:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP628]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP629]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP630:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP631:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP630]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP631]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP632:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP633:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP634:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP632]], i8 [[TMP633]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP635:%.*]] = extractvalue { i8, i1 } [[TMP634]], 0
// CHECK-NEXT:    store i8 [[TMP635]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP636:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP637:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP638:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP636]], i8 [[TMP637]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP639:%.*]] = extractvalue { i8, i1 } [[TMP638]], 0
// CHECK-NEXT:    store i8 [[TMP639]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP640:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP641:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP640]] acquire, align 1
// CHECK-NEXT:    [[TMP642:%.*]] = icmp ugt i8 [[TMP641]], [[TMP640]]
// CHECK-NEXT:    [[TMP643:%.*]] = select i1 [[TMP642]], i8 [[TMP640]], i8 [[TMP641]]
// CHECK-NEXT:    store i8 [[TMP643]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP644:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP645:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP644]] acquire, align 1
// CHECK-NEXT:    [[TMP646:%.*]] = icmp ult i8 [[TMP645]], [[TMP644]]
// CHECK-NEXT:    [[TMP647:%.*]] = select i1 [[TMP646]], i8 [[TMP644]], i8 [[TMP645]]
// CHECK-NEXT:    store i8 [[TMP647]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP648:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP649:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP648]] acquire, align 1
// CHECK-NEXT:    [[TMP650:%.*]] = icmp ult i8 [[TMP649]], [[TMP648]]
// CHECK-NEXT:    [[TMP651:%.*]] = select i1 [[TMP650]], i8 [[TMP648]], i8 [[TMP649]]
// CHECK-NEXT:    store i8 [[TMP651]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP652:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP653:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP652]] acquire, align 1
// CHECK-NEXT:    [[TMP654:%.*]] = icmp ugt i8 [[TMP653]], [[TMP652]]
// CHECK-NEXT:    [[TMP655:%.*]] = select i1 [[TMP654]], i8 [[TMP652]], i8 [[TMP653]]
// CHECK-NEXT:    store i8 [[TMP655]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP656:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP657:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP658:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP656]], i8 [[TMP657]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP659:%.*]] = extractvalue { i8, i1 } [[TMP658]], 0
// CHECK-NEXT:    [[TMP660:%.*]] = extractvalue { i8, i1 } [[TMP658]], 1
// CHECK-NEXT:    [[TMP661:%.*]] = select i1 [[TMP660]], i8 [[TMP656]], i8 [[TMP659]]
// CHECK-NEXT:    store i8 [[TMP661]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP662:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP663:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP664:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP662]], i8 [[TMP663]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP665:%.*]] = extractvalue { i8, i1 } [[TMP664]], 0
// CHECK-NEXT:    [[TMP666:%.*]] = extractvalue { i8, i1 } [[TMP664]], 1
// CHECK-NEXT:    [[TMP667:%.*]] = select i1 [[TMP666]], i8 [[TMP662]], i8 [[TMP665]]
// CHECK-NEXT:    store i8 [[TMP667]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP668:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP669:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP670:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP668]], i8 [[TMP669]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP671:%.*]] = extractvalue { i8, i1 } [[TMP670]], 0
// CHECK-NEXT:    [[TMP672:%.*]] = extractvalue { i8, i1 } [[TMP670]], 1
// CHECK-NEXT:    br i1 [[TMP672]], label [[UCX_ATOMIC_EXIT118:%.*]], label [[UCX_ATOMIC_CONT119:%.*]]
// CHECK:       ucx.atomic.cont119:
// CHECK-NEXT:    store i8 [[TMP671]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT118]]
// CHECK:       ucx.atomic.exit118:
// CHECK-NEXT:    [[TMP673:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP674:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP675:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP673]], i8 [[TMP674]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP676:%.*]] = extractvalue { i8, i1 } [[TMP675]], 0
// CHECK-NEXT:    [[TMP677:%.*]] = extractvalue { i8, i1 } [[TMP675]], 1
// CHECK-NEXT:    br i1 [[TMP677]], label [[UCX_ATOMIC_EXIT120:%.*]], label [[UCX_ATOMIC_CONT121:%.*]]
// CHECK:       ucx.atomic.cont121:
// CHECK-NEXT:    store i8 [[TMP676]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT120]]
// CHECK:       ucx.atomic.exit120:
// CHECK-NEXT:    [[TMP678:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP679:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP680:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP678]], i8 [[TMP679]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP681:%.*]] = extractvalue { i8, i1 } [[TMP680]], 1
// CHECK-NEXT:    [[TMP682:%.*]] = zext i1 [[TMP681]] to i8
// CHECK-NEXT:    store i8 [[TMP682]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP683:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP684:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP685:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP683]], i8 [[TMP684]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP686:%.*]] = extractvalue { i8, i1 } [[TMP685]], 1
// CHECK-NEXT:    [[TMP687:%.*]] = zext i1 [[TMP686]] to i8
// CHECK-NEXT:    store i8 [[TMP687]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP688:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP689:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP690:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP688]], i8 [[TMP689]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP691:%.*]] = extractvalue { i8, i1 } [[TMP690]], 0
// CHECK-NEXT:    [[TMP692:%.*]] = extractvalue { i8, i1 } [[TMP690]], 1
// CHECK-NEXT:    br i1 [[TMP692]], label [[UCX_ATOMIC_EXIT122:%.*]], label [[UCX_ATOMIC_CONT123:%.*]]
// CHECK:       ucx.atomic.cont123:
// CHECK-NEXT:    store i8 [[TMP691]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT122]]
// CHECK:       ucx.atomic.exit122:
// CHECK-NEXT:    [[TMP693:%.*]] = extractvalue { i8, i1 } [[TMP690]], 1
// CHECK-NEXT:    [[TMP694:%.*]] = zext i1 [[TMP693]] to i8
// CHECK-NEXT:    store i8 [[TMP694]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP695:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP696:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP697:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP695]], i8 [[TMP696]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP698:%.*]] = extractvalue { i8, i1 } [[TMP697]], 0
// CHECK-NEXT:    [[TMP699:%.*]] = extractvalue { i8, i1 } [[TMP697]], 1
// CHECK-NEXT:    br i1 [[TMP699]], label [[UCX_ATOMIC_EXIT124:%.*]], label [[UCX_ATOMIC_CONT125:%.*]]
// CHECK:       ucx.atomic.cont125:
// CHECK-NEXT:    store i8 [[TMP698]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT124]]
// CHECK:       ucx.atomic.exit124:
// CHECK-NEXT:    [[TMP700:%.*]] = extractvalue { i8, i1 } [[TMP697]], 1
// CHECK-NEXT:    [[TMP701:%.*]] = zext i1 [[TMP700]] to i8
// CHECK-NEXT:    store i8 [[TMP701]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP702:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP703:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP702]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP703]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP704:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP705:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP704]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP705]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP706:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP707:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP706]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP707]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP708:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP709:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP708]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP709]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP710:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP711:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP712:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP710]], i8 [[TMP711]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP713:%.*]] = extractvalue { i8, i1 } [[TMP712]], 0
// CHECK-NEXT:    store i8 [[TMP713]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP714:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP715:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP716:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP714]], i8 [[TMP715]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP717:%.*]] = extractvalue { i8, i1 } [[TMP716]], 0
// CHECK-NEXT:    store i8 [[TMP717]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP718:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP719:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP718]] monotonic, align 1
// CHECK-NEXT:    [[TMP720:%.*]] = icmp ugt i8 [[TMP719]], [[TMP718]]
// CHECK-NEXT:    [[TMP721:%.*]] = select i1 [[TMP720]], i8 [[TMP718]], i8 [[TMP719]]
// CHECK-NEXT:    store i8 [[TMP721]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP722:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP723:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP722]] monotonic, align 1
// CHECK-NEXT:    [[TMP724:%.*]] = icmp ult i8 [[TMP723]], [[TMP722]]
// CHECK-NEXT:    [[TMP725:%.*]] = select i1 [[TMP724]], i8 [[TMP722]], i8 [[TMP723]]
// CHECK-NEXT:    store i8 [[TMP725]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP726:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP727:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP726]] monotonic, align 1
// CHECK-NEXT:    [[TMP728:%.*]] = icmp ult i8 [[TMP727]], [[TMP726]]
// CHECK-NEXT:    [[TMP729:%.*]] = select i1 [[TMP728]], i8 [[TMP726]], i8 [[TMP727]]
// CHECK-NEXT:    store i8 [[TMP729]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP730:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP731:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP730]] monotonic, align 1
// CHECK-NEXT:    [[TMP732:%.*]] = icmp ugt i8 [[TMP731]], [[TMP730]]
// CHECK-NEXT:    [[TMP733:%.*]] = select i1 [[TMP732]], i8 [[TMP730]], i8 [[TMP731]]
// CHECK-NEXT:    store i8 [[TMP733]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP734:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP735:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP736:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP734]], i8 [[TMP735]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP737:%.*]] = extractvalue { i8, i1 } [[TMP736]], 0
// CHECK-NEXT:    [[TMP738:%.*]] = extractvalue { i8, i1 } [[TMP736]], 1
// CHECK-NEXT:    [[TMP739:%.*]] = select i1 [[TMP738]], i8 [[TMP734]], i8 [[TMP737]]
// CHECK-NEXT:    store i8 [[TMP739]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP740:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP741:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP742:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP740]], i8 [[TMP741]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP743:%.*]] = extractvalue { i8, i1 } [[TMP742]], 0
// CHECK-NEXT:    [[TMP744:%.*]] = extractvalue { i8, i1 } [[TMP742]], 1
// CHECK-NEXT:    [[TMP745:%.*]] = select i1 [[TMP744]], i8 [[TMP740]], i8 [[TMP743]]
// CHECK-NEXT:    store i8 [[TMP745]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP746:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP747:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP748:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP746]], i8 [[TMP747]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP749:%.*]] = extractvalue { i8, i1 } [[TMP748]], 0
// CHECK-NEXT:    [[TMP750:%.*]] = extractvalue { i8, i1 } [[TMP748]], 1
// CHECK-NEXT:    br i1 [[TMP750]], label [[UCX_ATOMIC_EXIT126:%.*]], label [[UCX_ATOMIC_CONT127:%.*]]
// CHECK:       ucx.atomic.cont127:
// CHECK-NEXT:    store i8 [[TMP749]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT126]]
// CHECK:       ucx.atomic.exit126:
// CHECK-NEXT:    [[TMP751:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP752:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP753:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP751]], i8 [[TMP752]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP754:%.*]] = extractvalue { i8, i1 } [[TMP753]], 0
// CHECK-NEXT:    [[TMP755:%.*]] = extractvalue { i8, i1 } [[TMP753]], 1
// CHECK-NEXT:    br i1 [[TMP755]], label [[UCX_ATOMIC_EXIT128:%.*]], label [[UCX_ATOMIC_CONT129:%.*]]
// CHECK:       ucx.atomic.cont129:
// CHECK-NEXT:    store i8 [[TMP754]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT128]]
// CHECK:       ucx.atomic.exit128:
// CHECK-NEXT:    [[TMP756:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP757:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP758:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP756]], i8 [[TMP757]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP759:%.*]] = extractvalue { i8, i1 } [[TMP758]], 1
// CHECK-NEXT:    [[TMP760:%.*]] = zext i1 [[TMP759]] to i8
// CHECK-NEXT:    store i8 [[TMP760]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP761:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP762:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP763:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP761]], i8 [[TMP762]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP764:%.*]] = extractvalue { i8, i1 } [[TMP763]], 1
// CHECK-NEXT:    [[TMP765:%.*]] = zext i1 [[TMP764]] to i8
// CHECK-NEXT:    store i8 [[TMP765]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP766:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP767:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP768:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP766]], i8 [[TMP767]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP769:%.*]] = extractvalue { i8, i1 } [[TMP768]], 0
// CHECK-NEXT:    [[TMP770:%.*]] = extractvalue { i8, i1 } [[TMP768]], 1
// CHECK-NEXT:    br i1 [[TMP770]], label [[UCX_ATOMIC_EXIT130:%.*]], label [[UCX_ATOMIC_CONT131:%.*]]
// CHECK:       ucx.atomic.cont131:
// CHECK-NEXT:    store i8 [[TMP769]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT130]]
// CHECK:       ucx.atomic.exit130:
// CHECK-NEXT:    [[TMP771:%.*]] = extractvalue { i8, i1 } [[TMP768]], 1
// CHECK-NEXT:    [[TMP772:%.*]] = zext i1 [[TMP771]] to i8
// CHECK-NEXT:    store i8 [[TMP772]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP773:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP774:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP775:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP773]], i8 [[TMP774]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP776:%.*]] = extractvalue { i8, i1 } [[TMP775]], 0
// CHECK-NEXT:    [[TMP777:%.*]] = extractvalue { i8, i1 } [[TMP775]], 1
// CHECK-NEXT:    br i1 [[TMP777]], label [[UCX_ATOMIC_EXIT132:%.*]], label [[UCX_ATOMIC_CONT133:%.*]]
// CHECK:       ucx.atomic.cont133:
// CHECK-NEXT:    store i8 [[TMP776]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT132]]
// CHECK:       ucx.atomic.exit132:
// CHECK-NEXT:    [[TMP778:%.*]] = extractvalue { i8, i1 } [[TMP775]], 1
// CHECK-NEXT:    [[TMP779:%.*]] = zext i1 [[TMP778]] to i8
// CHECK-NEXT:    store i8 [[TMP779]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP780:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP781:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP780]] release, align 1
// CHECK-NEXT:    store i8 [[TMP781]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP782:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP783:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP782]] release, align 1
// CHECK-NEXT:    store i8 [[TMP783]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP784:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP785:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP784]] release, align 1
// CHECK-NEXT:    store i8 [[TMP785]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP786:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP787:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP786]] release, align 1
// CHECK-NEXT:    store i8 [[TMP787]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP788:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP789:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP790:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP788]], i8 [[TMP789]] release monotonic, align 1
// CHECK-NEXT:    [[TMP791:%.*]] = extractvalue { i8, i1 } [[TMP790]], 0
// CHECK-NEXT:    store i8 [[TMP791]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP792:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP793:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP794:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP792]], i8 [[TMP793]] release monotonic, align 1
// CHECK-NEXT:    [[TMP795:%.*]] = extractvalue { i8, i1 } [[TMP794]], 0
// CHECK-NEXT:    store i8 [[TMP795]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP796:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP797:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP796]] release, align 1
// CHECK-NEXT:    [[TMP798:%.*]] = icmp ugt i8 [[TMP797]], [[TMP796]]
// CHECK-NEXT:    [[TMP799:%.*]] = select i1 [[TMP798]], i8 [[TMP796]], i8 [[TMP797]]
// CHECK-NEXT:    store i8 [[TMP799]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP800:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP801:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP800]] release, align 1
// CHECK-NEXT:    [[TMP802:%.*]] = icmp ult i8 [[TMP801]], [[TMP800]]
// CHECK-NEXT:    [[TMP803:%.*]] = select i1 [[TMP802]], i8 [[TMP800]], i8 [[TMP801]]
// CHECK-NEXT:    store i8 [[TMP803]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP804:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP805:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP804]] release, align 1
// CHECK-NEXT:    [[TMP806:%.*]] = icmp ult i8 [[TMP805]], [[TMP804]]
// CHECK-NEXT:    [[TMP807:%.*]] = select i1 [[TMP806]], i8 [[TMP804]], i8 [[TMP805]]
// CHECK-NEXT:    store i8 [[TMP807]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP808:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP809:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP808]] release, align 1
// CHECK-NEXT:    [[TMP810:%.*]] = icmp ugt i8 [[TMP809]], [[TMP808]]
// CHECK-NEXT:    [[TMP811:%.*]] = select i1 [[TMP810]], i8 [[TMP808]], i8 [[TMP809]]
// CHECK-NEXT:    store i8 [[TMP811]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP812:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP813:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP814:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP812]], i8 [[TMP813]] release monotonic, align 1
// CHECK-NEXT:    [[TMP815:%.*]] = extractvalue { i8, i1 } [[TMP814]], 0
// CHECK-NEXT:    [[TMP816:%.*]] = extractvalue { i8, i1 } [[TMP814]], 1
// CHECK-NEXT:    [[TMP817:%.*]] = select i1 [[TMP816]], i8 [[TMP812]], i8 [[TMP815]]
// CHECK-NEXT:    store i8 [[TMP817]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP818:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP819:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP820:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP818]], i8 [[TMP819]] release monotonic, align 1
// CHECK-NEXT:    [[TMP821:%.*]] = extractvalue { i8, i1 } [[TMP820]], 0
// CHECK-NEXT:    [[TMP822:%.*]] = extractvalue { i8, i1 } [[TMP820]], 1
// CHECK-NEXT:    [[TMP823:%.*]] = select i1 [[TMP822]], i8 [[TMP818]], i8 [[TMP821]]
// CHECK-NEXT:    store i8 [[TMP823]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP824:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP825:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP826:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP824]], i8 [[TMP825]] release monotonic, align 1
// CHECK-NEXT:    [[TMP827:%.*]] = extractvalue { i8, i1 } [[TMP826]], 0
// CHECK-NEXT:    [[TMP828:%.*]] = extractvalue { i8, i1 } [[TMP826]], 1
// CHECK-NEXT:    br i1 [[TMP828]], label [[UCX_ATOMIC_EXIT134:%.*]], label [[UCX_ATOMIC_CONT135:%.*]]
// CHECK:       ucx.atomic.cont135:
// CHECK-NEXT:    store i8 [[TMP827]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT134]]
// CHECK:       ucx.atomic.exit134:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP829:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP830:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP831:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP829]], i8 [[TMP830]] release monotonic, align 1
// CHECK-NEXT:    [[TMP832:%.*]] = extractvalue { i8, i1 } [[TMP831]], 0
// CHECK-NEXT:    [[TMP833:%.*]] = extractvalue { i8, i1 } [[TMP831]], 1
// CHECK-NEXT:    br i1 [[TMP833]], label [[UCX_ATOMIC_EXIT136:%.*]], label [[UCX_ATOMIC_CONT137:%.*]]
// CHECK:       ucx.atomic.cont137:
// CHECK-NEXT:    store i8 [[TMP832]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT136]]
// CHECK:       ucx.atomic.exit136:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP834:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP835:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP836:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP834]], i8 [[TMP835]] release monotonic, align 1
// CHECK-NEXT:    [[TMP837:%.*]] = extractvalue { i8, i1 } [[TMP836]], 1
// CHECK-NEXT:    [[TMP838:%.*]] = zext i1 [[TMP837]] to i8
// CHECK-NEXT:    store i8 [[TMP838]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP839:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP840:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP841:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP839]], i8 [[TMP840]] release monotonic, align 1
// CHECK-NEXT:    [[TMP842:%.*]] = extractvalue { i8, i1 } [[TMP841]], 1
// CHECK-NEXT:    [[TMP843:%.*]] = zext i1 [[TMP842]] to i8
// CHECK-NEXT:    store i8 [[TMP843]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP844:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP845:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP846:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP844]], i8 [[TMP845]] release monotonic, align 1
// CHECK-NEXT:    [[TMP847:%.*]] = extractvalue { i8, i1 } [[TMP846]], 0
// CHECK-NEXT:    [[TMP848:%.*]] = extractvalue { i8, i1 } [[TMP846]], 1
// CHECK-NEXT:    br i1 [[TMP848]], label [[UCX_ATOMIC_EXIT138:%.*]], label [[UCX_ATOMIC_CONT139:%.*]]
// CHECK:       ucx.atomic.cont139:
// CHECK-NEXT:    store i8 [[TMP847]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT138]]
// CHECK:       ucx.atomic.exit138:
// CHECK-NEXT:    [[TMP849:%.*]] = extractvalue { i8, i1 } [[TMP846]], 1
// CHECK-NEXT:    [[TMP850:%.*]] = zext i1 [[TMP849]] to i8
// CHECK-NEXT:    store i8 [[TMP850]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP851:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP852:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP853:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP851]], i8 [[TMP852]] release monotonic, align 1
// CHECK-NEXT:    [[TMP854:%.*]] = extractvalue { i8, i1 } [[TMP853]], 0
// CHECK-NEXT:    [[TMP855:%.*]] = extractvalue { i8, i1 } [[TMP853]], 1
// CHECK-NEXT:    br i1 [[TMP855]], label [[UCX_ATOMIC_EXIT140:%.*]], label [[UCX_ATOMIC_CONT141:%.*]]
// CHECK:       ucx.atomic.cont141:
// CHECK-NEXT:    store i8 [[TMP854]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT140]]
// CHECK:       ucx.atomic.exit140:
// CHECK-NEXT:    [[TMP856:%.*]] = extractvalue { i8, i1 } [[TMP853]], 1
// CHECK-NEXT:    [[TMP857:%.*]] = zext i1 [[TMP856]] to i8
// CHECK-NEXT:    store i8 [[TMP857]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP858:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP859:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP858]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP859]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP860:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP861:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP860]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP861]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP862:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP863:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP862]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP863]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP864:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP865:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP864]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP865]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP866:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP867:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP868:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP866]], i8 [[TMP867]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP869:%.*]] = extractvalue { i8, i1 } [[TMP868]], 0
// CHECK-NEXT:    store i8 [[TMP869]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP870:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP871:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP872:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP870]], i8 [[TMP871]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP873:%.*]] = extractvalue { i8, i1 } [[TMP872]], 0
// CHECK-NEXT:    store i8 [[TMP873]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP874:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP875:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP874]] seq_cst, align 1
// CHECK-NEXT:    [[TMP876:%.*]] = icmp ugt i8 [[TMP875]], [[TMP874]]
// CHECK-NEXT:    [[TMP877:%.*]] = select i1 [[TMP876]], i8 [[TMP874]], i8 [[TMP875]]
// CHECK-NEXT:    store i8 [[TMP877]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP878:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP879:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP878]] seq_cst, align 1
// CHECK-NEXT:    [[TMP880:%.*]] = icmp ult i8 [[TMP879]], [[TMP878]]
// CHECK-NEXT:    [[TMP881:%.*]] = select i1 [[TMP880]], i8 [[TMP878]], i8 [[TMP879]]
// CHECK-NEXT:    store i8 [[TMP881]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP882:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP883:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP882]] seq_cst, align 1
// CHECK-NEXT:    [[TMP884:%.*]] = icmp ult i8 [[TMP883]], [[TMP882]]
// CHECK-NEXT:    [[TMP885:%.*]] = select i1 [[TMP884]], i8 [[TMP882]], i8 [[TMP883]]
// CHECK-NEXT:    store i8 [[TMP885]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP886:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP887:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP886]] seq_cst, align 1
// CHECK-NEXT:    [[TMP888:%.*]] = icmp ugt i8 [[TMP887]], [[TMP886]]
// CHECK-NEXT:    [[TMP889:%.*]] = select i1 [[TMP888]], i8 [[TMP886]], i8 [[TMP887]]
// CHECK-NEXT:    store i8 [[TMP889]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP890:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP891:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP892:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP890]], i8 [[TMP891]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP893:%.*]] = extractvalue { i8, i1 } [[TMP892]], 0
// CHECK-NEXT:    [[TMP894:%.*]] = extractvalue { i8, i1 } [[TMP892]], 1
// CHECK-NEXT:    [[TMP895:%.*]] = select i1 [[TMP894]], i8 [[TMP890]], i8 [[TMP893]]
// CHECK-NEXT:    store i8 [[TMP895]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP896:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP897:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP898:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP896]], i8 [[TMP897]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP899:%.*]] = extractvalue { i8, i1 } [[TMP898]], 0
// CHECK-NEXT:    [[TMP900:%.*]] = extractvalue { i8, i1 } [[TMP898]], 1
// CHECK-NEXT:    [[TMP901:%.*]] = select i1 [[TMP900]], i8 [[TMP896]], i8 [[TMP899]]
// CHECK-NEXT:    store i8 [[TMP901]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP902:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP903:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP904:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP902]], i8 [[TMP903]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP905:%.*]] = extractvalue { i8, i1 } [[TMP904]], 0
// CHECK-NEXT:    [[TMP906:%.*]] = extractvalue { i8, i1 } [[TMP904]], 1
// CHECK-NEXT:    br i1 [[TMP906]], label [[UCX_ATOMIC_EXIT142:%.*]], label [[UCX_ATOMIC_CONT143:%.*]]
// CHECK:       ucx.atomic.cont143:
// CHECK-NEXT:    store i8 [[TMP905]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT142]]
// CHECK:       ucx.atomic.exit142:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP907:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP908:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP909:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP907]], i8 [[TMP908]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP910:%.*]] = extractvalue { i8, i1 } [[TMP909]], 0
// CHECK-NEXT:    [[TMP911:%.*]] = extractvalue { i8, i1 } [[TMP909]], 1
// CHECK-NEXT:    br i1 [[TMP911]], label [[UCX_ATOMIC_EXIT144:%.*]], label [[UCX_ATOMIC_CONT145:%.*]]
// CHECK:       ucx.atomic.cont145:
// CHECK-NEXT:    store i8 [[TMP910]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT144]]
// CHECK:       ucx.atomic.exit144:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP912:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP913:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP914:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP912]], i8 [[TMP913]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP915:%.*]] = extractvalue { i8, i1 } [[TMP914]], 1
// CHECK-NEXT:    [[TMP916:%.*]] = zext i1 [[TMP915]] to i8
// CHECK-NEXT:    store i8 [[TMP916]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP917:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP918:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP919:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP917]], i8 [[TMP918]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP920:%.*]] = extractvalue { i8, i1 } [[TMP919]], 1
// CHECK-NEXT:    [[TMP921:%.*]] = zext i1 [[TMP920]] to i8
// CHECK-NEXT:    store i8 [[TMP921]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP922:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP923:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP924:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP922]], i8 [[TMP923]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP925:%.*]] = extractvalue { i8, i1 } [[TMP924]], 0
// CHECK-NEXT:    [[TMP926:%.*]] = extractvalue { i8, i1 } [[TMP924]], 1
// CHECK-NEXT:    br i1 [[TMP926]], label [[UCX_ATOMIC_EXIT146:%.*]], label [[UCX_ATOMIC_CONT147:%.*]]
// CHECK:       ucx.atomic.cont147:
// CHECK-NEXT:    store i8 [[TMP925]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT146]]
// CHECK:       ucx.atomic.exit146:
// CHECK-NEXT:    [[TMP927:%.*]] = extractvalue { i8, i1 } [[TMP924]], 1
// CHECK-NEXT:    [[TMP928:%.*]] = zext i1 [[TMP927]] to i8
// CHECK-NEXT:    store i8 [[TMP928]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP929:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP930:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP931:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP929]], i8 [[TMP930]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP932:%.*]] = extractvalue { i8, i1 } [[TMP931]], 0
// CHECK-NEXT:    [[TMP933:%.*]] = extractvalue { i8, i1 } [[TMP931]], 1
// CHECK-NEXT:    br i1 [[TMP933]], label [[UCX_ATOMIC_EXIT148:%.*]], label [[UCX_ATOMIC_CONT149:%.*]]
// CHECK:       ucx.atomic.cont149:
// CHECK-NEXT:    store i8 [[TMP932]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT148]]
// CHECK:       ucx.atomic.exit148:
// CHECK-NEXT:    [[TMP934:%.*]] = extractvalue { i8, i1 } [[TMP931]], 1
// CHECK-NEXT:    [[TMP935:%.*]] = zext i1 [[TMP934]] to i8
// CHECK-NEXT:    store i8 [[TMP935]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP936:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP937:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP936]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP937]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP938:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP939:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP938]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP939]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP940:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP941:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP940]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP941]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP942:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP943:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP942]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP943]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP944:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP945:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP946:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP944]], i16 [[TMP945]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP947:%.*]] = extractvalue { i16, i1 } [[TMP946]], 0
// CHECK-NEXT:    store i16 [[TMP947]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP948:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP949:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP950:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP948]], i16 [[TMP949]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP951:%.*]] = extractvalue { i16, i1 } [[TMP950]], 0
// CHECK-NEXT:    store i16 [[TMP951]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP952:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP953:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP952]] monotonic, align 2
// CHECK-NEXT:    [[TMP954:%.*]] = icmp sgt i16 [[TMP953]], [[TMP952]]
// CHECK-NEXT:    [[TMP955:%.*]] = select i1 [[TMP954]], i16 [[TMP952]], i16 [[TMP953]]
// CHECK-NEXT:    store i16 [[TMP955]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP956:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP957:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP956]] monotonic, align 2
// CHECK-NEXT:    [[TMP958:%.*]] = icmp slt i16 [[TMP957]], [[TMP956]]
// CHECK-NEXT:    [[TMP959:%.*]] = select i1 [[TMP958]], i16 [[TMP956]], i16 [[TMP957]]
// CHECK-NEXT:    store i16 [[TMP959]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP960:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP961:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP960]] monotonic, align 2
// CHECK-NEXT:    [[TMP962:%.*]] = icmp slt i16 [[TMP961]], [[TMP960]]
// CHECK-NEXT:    [[TMP963:%.*]] = select i1 [[TMP962]], i16 [[TMP960]], i16 [[TMP961]]
// CHECK-NEXT:    store i16 [[TMP963]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP964:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP965:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP964]] monotonic, align 2
// CHECK-NEXT:    [[TMP966:%.*]] = icmp sgt i16 [[TMP965]], [[TMP964]]
// CHECK-NEXT:    [[TMP967:%.*]] = select i1 [[TMP966]], i16 [[TMP964]], i16 [[TMP965]]
// CHECK-NEXT:    store i16 [[TMP967]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP968:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP969:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP970:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP968]], i16 [[TMP969]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP971:%.*]] = extractvalue { i16, i1 } [[TMP970]], 0
// CHECK-NEXT:    [[TMP972:%.*]] = extractvalue { i16, i1 } [[TMP970]], 1
// CHECK-NEXT:    [[TMP973:%.*]] = select i1 [[TMP972]], i16 [[TMP968]], i16 [[TMP971]]
// CHECK-NEXT:    store i16 [[TMP973]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP974:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP975:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP976:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP974]], i16 [[TMP975]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP977:%.*]] = extractvalue { i16, i1 } [[TMP976]], 0
// CHECK-NEXT:    [[TMP978:%.*]] = extractvalue { i16, i1 } [[TMP976]], 1
// CHECK-NEXT:    [[TMP979:%.*]] = select i1 [[TMP978]], i16 [[TMP974]], i16 [[TMP977]]
// CHECK-NEXT:    store i16 [[TMP979]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP980:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP981:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP982:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP980]], i16 [[TMP981]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP983:%.*]] = extractvalue { i16, i1 } [[TMP982]], 0
// CHECK-NEXT:    [[TMP984:%.*]] = extractvalue { i16, i1 } [[TMP982]], 1
// CHECK-NEXT:    br i1 [[TMP984]], label [[SX_ATOMIC_EXIT:%.*]], label [[SX_ATOMIC_CONT:%.*]]
// CHECK:       sx.atomic.cont:
// CHECK-NEXT:    store i16 [[TMP983]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT]]
// CHECK:       sx.atomic.exit:
// CHECK-NEXT:    [[TMP985:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP986:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP987:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP985]], i16 [[TMP986]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP988:%.*]] = extractvalue { i16, i1 } [[TMP987]], 0
// CHECK-NEXT:    [[TMP989:%.*]] = extractvalue { i16, i1 } [[TMP987]], 1
// CHECK-NEXT:    br i1 [[TMP989]], label [[SX_ATOMIC_EXIT150:%.*]], label [[SX_ATOMIC_CONT151:%.*]]
// CHECK:       sx.atomic.cont151:
// CHECK-NEXT:    store i16 [[TMP988]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT150]]
// CHECK:       sx.atomic.exit150:
// CHECK-NEXT:    [[TMP990:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP991:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP992:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP990]], i16 [[TMP991]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP993:%.*]] = extractvalue { i16, i1 } [[TMP992]], 1
// CHECK-NEXT:    [[TMP994:%.*]] = sext i1 [[TMP993]] to i16
// CHECK-NEXT:    store i16 [[TMP994]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP995:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP996:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP997:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP995]], i16 [[TMP996]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP998:%.*]] = extractvalue { i16, i1 } [[TMP997]], 1
// CHECK-NEXT:    [[TMP999:%.*]] = sext i1 [[TMP998]] to i16
// CHECK-NEXT:    store i16 [[TMP999]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1000:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1001:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1002:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1000]], i16 [[TMP1001]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1003:%.*]] = extractvalue { i16, i1 } [[TMP1002]], 0
// CHECK-NEXT:    [[TMP1004:%.*]] = extractvalue { i16, i1 } [[TMP1002]], 1
// CHECK-NEXT:    br i1 [[TMP1004]], label [[SX_ATOMIC_EXIT152:%.*]], label [[SX_ATOMIC_CONT153:%.*]]
// CHECK:       sx.atomic.cont153:
// CHECK-NEXT:    store i16 [[TMP1003]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT152]]
// CHECK:       sx.atomic.exit152:
// CHECK-NEXT:    [[TMP1005:%.*]] = extractvalue { i16, i1 } [[TMP1002]], 1
// CHECK-NEXT:    [[TMP1006:%.*]] = sext i1 [[TMP1005]] to i16
// CHECK-NEXT:    store i16 [[TMP1006]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1007:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1008:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1009:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1007]], i16 [[TMP1008]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1010:%.*]] = extractvalue { i16, i1 } [[TMP1009]], 0
// CHECK-NEXT:    [[TMP1011:%.*]] = extractvalue { i16, i1 } [[TMP1009]], 1
// CHECK-NEXT:    br i1 [[TMP1011]], label [[SX_ATOMIC_EXIT154:%.*]], label [[SX_ATOMIC_CONT155:%.*]]
// CHECK:       sx.atomic.cont155:
// CHECK-NEXT:    store i16 [[TMP1010]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT154]]
// CHECK:       sx.atomic.exit154:
// CHECK-NEXT:    [[TMP1012:%.*]] = extractvalue { i16, i1 } [[TMP1009]], 1
// CHECK-NEXT:    [[TMP1013:%.*]] = sext i1 [[TMP1012]] to i16
// CHECK-NEXT:    store i16 [[TMP1013]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1014:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1015:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1014]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1015]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1016:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1017:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1016]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1017]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1018:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1019:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1018]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1019]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1020:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1021:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1020]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1021]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1022:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1023:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1024:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1022]], i16 [[TMP1023]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1025:%.*]] = extractvalue { i16, i1 } [[TMP1024]], 0
// CHECK-NEXT:    store i16 [[TMP1025]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1026:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1027:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1028:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1026]], i16 [[TMP1027]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1029:%.*]] = extractvalue { i16, i1 } [[TMP1028]], 0
// CHECK-NEXT:    store i16 [[TMP1029]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1030:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1031:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1030]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1032:%.*]] = icmp sgt i16 [[TMP1031]], [[TMP1030]]
// CHECK-NEXT:    [[TMP1033:%.*]] = select i1 [[TMP1032]], i16 [[TMP1030]], i16 [[TMP1031]]
// CHECK-NEXT:    store i16 [[TMP1033]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1034:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1035:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1034]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1036:%.*]] = icmp slt i16 [[TMP1035]], [[TMP1034]]
// CHECK-NEXT:    [[TMP1037:%.*]] = select i1 [[TMP1036]], i16 [[TMP1034]], i16 [[TMP1035]]
// CHECK-NEXT:    store i16 [[TMP1037]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1038:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1039:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1038]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1040:%.*]] = icmp slt i16 [[TMP1039]], [[TMP1038]]
// CHECK-NEXT:    [[TMP1041:%.*]] = select i1 [[TMP1040]], i16 [[TMP1038]], i16 [[TMP1039]]
// CHECK-NEXT:    store i16 [[TMP1041]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1042:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1043:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1042]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1044:%.*]] = icmp sgt i16 [[TMP1043]], [[TMP1042]]
// CHECK-NEXT:    [[TMP1045:%.*]] = select i1 [[TMP1044]], i16 [[TMP1042]], i16 [[TMP1043]]
// CHECK-NEXT:    store i16 [[TMP1045]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1046:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1047:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1048:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1046]], i16 [[TMP1047]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1049:%.*]] = extractvalue { i16, i1 } [[TMP1048]], 0
// CHECK-NEXT:    [[TMP1050:%.*]] = extractvalue { i16, i1 } [[TMP1048]], 1
// CHECK-NEXT:    [[TMP1051:%.*]] = select i1 [[TMP1050]], i16 [[TMP1046]], i16 [[TMP1049]]
// CHECK-NEXT:    store i16 [[TMP1051]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1052:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1053:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1054:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1052]], i16 [[TMP1053]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1055:%.*]] = extractvalue { i16, i1 } [[TMP1054]], 0
// CHECK-NEXT:    [[TMP1056:%.*]] = extractvalue { i16, i1 } [[TMP1054]], 1
// CHECK-NEXT:    [[TMP1057:%.*]] = select i1 [[TMP1056]], i16 [[TMP1052]], i16 [[TMP1055]]
// CHECK-NEXT:    store i16 [[TMP1057]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1058:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1059:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1060:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1058]], i16 [[TMP1059]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1061:%.*]] = extractvalue { i16, i1 } [[TMP1060]], 0
// CHECK-NEXT:    [[TMP1062:%.*]] = extractvalue { i16, i1 } [[TMP1060]], 1
// CHECK-NEXT:    br i1 [[TMP1062]], label [[SX_ATOMIC_EXIT156:%.*]], label [[SX_ATOMIC_CONT157:%.*]]
// CHECK:       sx.atomic.cont157:
// CHECK-NEXT:    store i16 [[TMP1061]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT156]]
// CHECK:       sx.atomic.exit156:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1063:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1064:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1065:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1063]], i16 [[TMP1064]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1066:%.*]] = extractvalue { i16, i1 } [[TMP1065]], 0
// CHECK-NEXT:    [[TMP1067:%.*]] = extractvalue { i16, i1 } [[TMP1065]], 1
// CHECK-NEXT:    br i1 [[TMP1067]], label [[SX_ATOMIC_EXIT158:%.*]], label [[SX_ATOMIC_CONT159:%.*]]
// CHECK:       sx.atomic.cont159:
// CHECK-NEXT:    store i16 [[TMP1066]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT158]]
// CHECK:       sx.atomic.exit158:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1068:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1069:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1070:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1068]], i16 [[TMP1069]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1071:%.*]] = extractvalue { i16, i1 } [[TMP1070]], 1
// CHECK-NEXT:    [[TMP1072:%.*]] = sext i1 [[TMP1071]] to i16
// CHECK-NEXT:    store i16 [[TMP1072]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1073:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1074:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1075:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1073]], i16 [[TMP1074]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1076:%.*]] = extractvalue { i16, i1 } [[TMP1075]], 1
// CHECK-NEXT:    [[TMP1077:%.*]] = sext i1 [[TMP1076]] to i16
// CHECK-NEXT:    store i16 [[TMP1077]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1078:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1079:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1080:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1078]], i16 [[TMP1079]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1081:%.*]] = extractvalue { i16, i1 } [[TMP1080]], 0
// CHECK-NEXT:    [[TMP1082:%.*]] = extractvalue { i16, i1 } [[TMP1080]], 1
// CHECK-NEXT:    br i1 [[TMP1082]], label [[SX_ATOMIC_EXIT160:%.*]], label [[SX_ATOMIC_CONT161:%.*]]
// CHECK:       sx.atomic.cont161:
// CHECK-NEXT:    store i16 [[TMP1081]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT160]]
// CHECK:       sx.atomic.exit160:
// CHECK-NEXT:    [[TMP1083:%.*]] = extractvalue { i16, i1 } [[TMP1080]], 1
// CHECK-NEXT:    [[TMP1084:%.*]] = sext i1 [[TMP1083]] to i16
// CHECK-NEXT:    store i16 [[TMP1084]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1085:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1086:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1087:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1085]], i16 [[TMP1086]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1088:%.*]] = extractvalue { i16, i1 } [[TMP1087]], 0
// CHECK-NEXT:    [[TMP1089:%.*]] = extractvalue { i16, i1 } [[TMP1087]], 1
// CHECK-NEXT:    br i1 [[TMP1089]], label [[SX_ATOMIC_EXIT162:%.*]], label [[SX_ATOMIC_CONT163:%.*]]
// CHECK:       sx.atomic.cont163:
// CHECK-NEXT:    store i16 [[TMP1088]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT162]]
// CHECK:       sx.atomic.exit162:
// CHECK-NEXT:    [[TMP1090:%.*]] = extractvalue { i16, i1 } [[TMP1087]], 1
// CHECK-NEXT:    [[TMP1091:%.*]] = sext i1 [[TMP1090]] to i16
// CHECK-NEXT:    store i16 [[TMP1091]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1092:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1093:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1092]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1093]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1094:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1095:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1094]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1095]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1096:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1097:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1096]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1097]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1098:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1099:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1098]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1099]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1100:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1101:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1102:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1100]], i16 [[TMP1101]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1103:%.*]] = extractvalue { i16, i1 } [[TMP1102]], 0
// CHECK-NEXT:    store i16 [[TMP1103]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1104:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1105:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1106:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1104]], i16 [[TMP1105]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1107:%.*]] = extractvalue { i16, i1 } [[TMP1106]], 0
// CHECK-NEXT:    store i16 [[TMP1107]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1108:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1109:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1108]] acquire, align 2
// CHECK-NEXT:    [[TMP1110:%.*]] = icmp sgt i16 [[TMP1109]], [[TMP1108]]
// CHECK-NEXT:    [[TMP1111:%.*]] = select i1 [[TMP1110]], i16 [[TMP1108]], i16 [[TMP1109]]
// CHECK-NEXT:    store i16 [[TMP1111]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1112:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1113:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1112]] acquire, align 2
// CHECK-NEXT:    [[TMP1114:%.*]] = icmp slt i16 [[TMP1113]], [[TMP1112]]
// CHECK-NEXT:    [[TMP1115:%.*]] = select i1 [[TMP1114]], i16 [[TMP1112]], i16 [[TMP1113]]
// CHECK-NEXT:    store i16 [[TMP1115]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1116:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1117:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1116]] acquire, align 2
// CHECK-NEXT:    [[TMP1118:%.*]] = icmp slt i16 [[TMP1117]], [[TMP1116]]
// CHECK-NEXT:    [[TMP1119:%.*]] = select i1 [[TMP1118]], i16 [[TMP1116]], i16 [[TMP1117]]
// CHECK-NEXT:    store i16 [[TMP1119]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1120:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1121:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1120]] acquire, align 2
// CHECK-NEXT:    [[TMP1122:%.*]] = icmp sgt i16 [[TMP1121]], [[TMP1120]]
// CHECK-NEXT:    [[TMP1123:%.*]] = select i1 [[TMP1122]], i16 [[TMP1120]], i16 [[TMP1121]]
// CHECK-NEXT:    store i16 [[TMP1123]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1124:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1125:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1126:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1124]], i16 [[TMP1125]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1127:%.*]] = extractvalue { i16, i1 } [[TMP1126]], 0
// CHECK-NEXT:    [[TMP1128:%.*]] = extractvalue { i16, i1 } [[TMP1126]], 1
// CHECK-NEXT:    [[TMP1129:%.*]] = select i1 [[TMP1128]], i16 [[TMP1124]], i16 [[TMP1127]]
// CHECK-NEXT:    store i16 [[TMP1129]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1130:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1131:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1132:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1130]], i16 [[TMP1131]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1133:%.*]] = extractvalue { i16, i1 } [[TMP1132]], 0
// CHECK-NEXT:    [[TMP1134:%.*]] = extractvalue { i16, i1 } [[TMP1132]], 1
// CHECK-NEXT:    [[TMP1135:%.*]] = select i1 [[TMP1134]], i16 [[TMP1130]], i16 [[TMP1133]]
// CHECK-NEXT:    store i16 [[TMP1135]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1136:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1137:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1138:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1136]], i16 [[TMP1137]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1139:%.*]] = extractvalue { i16, i1 } [[TMP1138]], 0
// CHECK-NEXT:    [[TMP1140:%.*]] = extractvalue { i16, i1 } [[TMP1138]], 1
// CHECK-NEXT:    br i1 [[TMP1140]], label [[SX_ATOMIC_EXIT164:%.*]], label [[SX_ATOMIC_CONT165:%.*]]
// CHECK:       sx.atomic.cont165:
// CHECK-NEXT:    store i16 [[TMP1139]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT164]]
// CHECK:       sx.atomic.exit164:
// CHECK-NEXT:    [[TMP1141:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1142:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1143:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1141]], i16 [[TMP1142]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1144:%.*]] = extractvalue { i16, i1 } [[TMP1143]], 0
// CHECK-NEXT:    [[TMP1145:%.*]] = extractvalue { i16, i1 } [[TMP1143]], 1
// CHECK-NEXT:    br i1 [[TMP1145]], label [[SX_ATOMIC_EXIT166:%.*]], label [[SX_ATOMIC_CONT167:%.*]]
// CHECK:       sx.atomic.cont167:
// CHECK-NEXT:    store i16 [[TMP1144]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT166]]
// CHECK:       sx.atomic.exit166:
// CHECK-NEXT:    [[TMP1146:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1147:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1148:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1146]], i16 [[TMP1147]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1149:%.*]] = extractvalue { i16, i1 } [[TMP1148]], 1
// CHECK-NEXT:    [[TMP1150:%.*]] = sext i1 [[TMP1149]] to i16
// CHECK-NEXT:    store i16 [[TMP1150]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1151:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1152:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1153:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1151]], i16 [[TMP1152]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1154:%.*]] = extractvalue { i16, i1 } [[TMP1153]], 1
// CHECK-NEXT:    [[TMP1155:%.*]] = sext i1 [[TMP1154]] to i16
// CHECK-NEXT:    store i16 [[TMP1155]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1156:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1157:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1158:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1156]], i16 [[TMP1157]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1159:%.*]] = extractvalue { i16, i1 } [[TMP1158]], 0
// CHECK-NEXT:    [[TMP1160:%.*]] = extractvalue { i16, i1 } [[TMP1158]], 1
// CHECK-NEXT:    br i1 [[TMP1160]], label [[SX_ATOMIC_EXIT168:%.*]], label [[SX_ATOMIC_CONT169:%.*]]
// CHECK:       sx.atomic.cont169:
// CHECK-NEXT:    store i16 [[TMP1159]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT168]]
// CHECK:       sx.atomic.exit168:
// CHECK-NEXT:    [[TMP1161:%.*]] = extractvalue { i16, i1 } [[TMP1158]], 1
// CHECK-NEXT:    [[TMP1162:%.*]] = sext i1 [[TMP1161]] to i16
// CHECK-NEXT:    store i16 [[TMP1162]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1163:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1164:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1165:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1163]], i16 [[TMP1164]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1166:%.*]] = extractvalue { i16, i1 } [[TMP1165]], 0
// CHECK-NEXT:    [[TMP1167:%.*]] = extractvalue { i16, i1 } [[TMP1165]], 1
// CHECK-NEXT:    br i1 [[TMP1167]], label [[SX_ATOMIC_EXIT170:%.*]], label [[SX_ATOMIC_CONT171:%.*]]
// CHECK:       sx.atomic.cont171:
// CHECK-NEXT:    store i16 [[TMP1166]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT170]]
// CHECK:       sx.atomic.exit170:
// CHECK-NEXT:    [[TMP1168:%.*]] = extractvalue { i16, i1 } [[TMP1165]], 1
// CHECK-NEXT:    [[TMP1169:%.*]] = sext i1 [[TMP1168]] to i16
// CHECK-NEXT:    store i16 [[TMP1169]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1170:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1171:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1170]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1171]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1172:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1173:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1172]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1173]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1174:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1175:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1174]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1175]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1176:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1177:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1176]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1177]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1178:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1179:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1180:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1178]], i16 [[TMP1179]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1181:%.*]] = extractvalue { i16, i1 } [[TMP1180]], 0
// CHECK-NEXT:    store i16 [[TMP1181]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1182:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1183:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1184:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1182]], i16 [[TMP1183]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1185:%.*]] = extractvalue { i16, i1 } [[TMP1184]], 0
// CHECK-NEXT:    store i16 [[TMP1185]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1186:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1187:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1186]] monotonic, align 2
// CHECK-NEXT:    [[TMP1188:%.*]] = icmp sgt i16 [[TMP1187]], [[TMP1186]]
// CHECK-NEXT:    [[TMP1189:%.*]] = select i1 [[TMP1188]], i16 [[TMP1186]], i16 [[TMP1187]]
// CHECK-NEXT:    store i16 [[TMP1189]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1190:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1191:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1190]] monotonic, align 2
// CHECK-NEXT:    [[TMP1192:%.*]] = icmp slt i16 [[TMP1191]], [[TMP1190]]
// CHECK-NEXT:    [[TMP1193:%.*]] = select i1 [[TMP1192]], i16 [[TMP1190]], i16 [[TMP1191]]
// CHECK-NEXT:    store i16 [[TMP1193]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1194:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1195:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1194]] monotonic, align 2
// CHECK-NEXT:    [[TMP1196:%.*]] = icmp slt i16 [[TMP1195]], [[TMP1194]]
// CHECK-NEXT:    [[TMP1197:%.*]] = select i1 [[TMP1196]], i16 [[TMP1194]], i16 [[TMP1195]]
// CHECK-NEXT:    store i16 [[TMP1197]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1198:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1199:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1198]] monotonic, align 2
// CHECK-NEXT:    [[TMP1200:%.*]] = icmp sgt i16 [[TMP1199]], [[TMP1198]]
// CHECK-NEXT:    [[TMP1201:%.*]] = select i1 [[TMP1200]], i16 [[TMP1198]], i16 [[TMP1199]]
// CHECK-NEXT:    store i16 [[TMP1201]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1202:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1203:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1204:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1202]], i16 [[TMP1203]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1205:%.*]] = extractvalue { i16, i1 } [[TMP1204]], 0
// CHECK-NEXT:    [[TMP1206:%.*]] = extractvalue { i16, i1 } [[TMP1204]], 1
// CHECK-NEXT:    [[TMP1207:%.*]] = select i1 [[TMP1206]], i16 [[TMP1202]], i16 [[TMP1205]]
// CHECK-NEXT:    store i16 [[TMP1207]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1208:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1209:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1210:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1208]], i16 [[TMP1209]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1211:%.*]] = extractvalue { i16, i1 } [[TMP1210]], 0
// CHECK-NEXT:    [[TMP1212:%.*]] = extractvalue { i16, i1 } [[TMP1210]], 1
// CHECK-NEXT:    [[TMP1213:%.*]] = select i1 [[TMP1212]], i16 [[TMP1208]], i16 [[TMP1211]]
// CHECK-NEXT:    store i16 [[TMP1213]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1214:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1215:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1216:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1214]], i16 [[TMP1215]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1217:%.*]] = extractvalue { i16, i1 } [[TMP1216]], 0
// CHECK-NEXT:    [[TMP1218:%.*]] = extractvalue { i16, i1 } [[TMP1216]], 1
// CHECK-NEXT:    br i1 [[TMP1218]], label [[SX_ATOMIC_EXIT172:%.*]], label [[SX_ATOMIC_CONT173:%.*]]
// CHECK:       sx.atomic.cont173:
// CHECK-NEXT:    store i16 [[TMP1217]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT172]]
// CHECK:       sx.atomic.exit172:
// CHECK-NEXT:    [[TMP1219:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1220:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1221:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1219]], i16 [[TMP1220]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1222:%.*]] = extractvalue { i16, i1 } [[TMP1221]], 0
// CHECK-NEXT:    [[TMP1223:%.*]] = extractvalue { i16, i1 } [[TMP1221]], 1
// CHECK-NEXT:    br i1 [[TMP1223]], label [[SX_ATOMIC_EXIT174:%.*]], label [[SX_ATOMIC_CONT175:%.*]]
// CHECK:       sx.atomic.cont175:
// CHECK-NEXT:    store i16 [[TMP1222]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT174]]
// CHECK:       sx.atomic.exit174:
// CHECK-NEXT:    [[TMP1224:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1225:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1226:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1224]], i16 [[TMP1225]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1227:%.*]] = extractvalue { i16, i1 } [[TMP1226]], 1
// CHECK-NEXT:    [[TMP1228:%.*]] = sext i1 [[TMP1227]] to i16
// CHECK-NEXT:    store i16 [[TMP1228]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1229:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1230:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1231:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1229]], i16 [[TMP1230]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1232:%.*]] = extractvalue { i16, i1 } [[TMP1231]], 1
// CHECK-NEXT:    [[TMP1233:%.*]] = sext i1 [[TMP1232]] to i16
// CHECK-NEXT:    store i16 [[TMP1233]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1234:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1235:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1236:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1234]], i16 [[TMP1235]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1237:%.*]] = extractvalue { i16, i1 } [[TMP1236]], 0
// CHECK-NEXT:    [[TMP1238:%.*]] = extractvalue { i16, i1 } [[TMP1236]], 1
// CHECK-NEXT:    br i1 [[TMP1238]], label [[SX_ATOMIC_EXIT176:%.*]], label [[SX_ATOMIC_CONT177:%.*]]
// CHECK:       sx.atomic.cont177:
// CHECK-NEXT:    store i16 [[TMP1237]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT176]]
// CHECK:       sx.atomic.exit176:
// CHECK-NEXT:    [[TMP1239:%.*]] = extractvalue { i16, i1 } [[TMP1236]], 1
// CHECK-NEXT:    [[TMP1240:%.*]] = sext i1 [[TMP1239]] to i16
// CHECK-NEXT:    store i16 [[TMP1240]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1241:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1242:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1243:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1241]], i16 [[TMP1242]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1244:%.*]] = extractvalue { i16, i1 } [[TMP1243]], 0
// CHECK-NEXT:    [[TMP1245:%.*]] = extractvalue { i16, i1 } [[TMP1243]], 1
// CHECK-NEXT:    br i1 [[TMP1245]], label [[SX_ATOMIC_EXIT178:%.*]], label [[SX_ATOMIC_CONT179:%.*]]
// CHECK:       sx.atomic.cont179:
// CHECK-NEXT:    store i16 [[TMP1244]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT178]]
// CHECK:       sx.atomic.exit178:
// CHECK-NEXT:    [[TMP1246:%.*]] = extractvalue { i16, i1 } [[TMP1243]], 1
// CHECK-NEXT:    [[TMP1247:%.*]] = sext i1 [[TMP1246]] to i16
// CHECK-NEXT:    store i16 [[TMP1247]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1248:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1249:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1248]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1249]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1250:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1251:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1250]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1251]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1252:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1253:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1252]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1253]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1254:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1255:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1254]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1255]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1256:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1257:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1258:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1256]], i16 [[TMP1257]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1259:%.*]] = extractvalue { i16, i1 } [[TMP1258]], 0
// CHECK-NEXT:    store i16 [[TMP1259]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1260:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1261:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1262:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1260]], i16 [[TMP1261]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1263:%.*]] = extractvalue { i16, i1 } [[TMP1262]], 0
// CHECK-NEXT:    store i16 [[TMP1263]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1264:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1265:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1264]] release, align 2
// CHECK-NEXT:    [[TMP1266:%.*]] = icmp sgt i16 [[TMP1265]], [[TMP1264]]
// CHECK-NEXT:    [[TMP1267:%.*]] = select i1 [[TMP1266]], i16 [[TMP1264]], i16 [[TMP1265]]
// CHECK-NEXT:    store i16 [[TMP1267]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1268:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1269:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1268]] release, align 2
// CHECK-NEXT:    [[TMP1270:%.*]] = icmp slt i16 [[TMP1269]], [[TMP1268]]
// CHECK-NEXT:    [[TMP1271:%.*]] = select i1 [[TMP1270]], i16 [[TMP1268]], i16 [[TMP1269]]
// CHECK-NEXT:    store i16 [[TMP1271]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1272:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1273:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1272]] release, align 2
// CHECK-NEXT:    [[TMP1274:%.*]] = icmp slt i16 [[TMP1273]], [[TMP1272]]
// CHECK-NEXT:    [[TMP1275:%.*]] = select i1 [[TMP1274]], i16 [[TMP1272]], i16 [[TMP1273]]
// CHECK-NEXT:    store i16 [[TMP1275]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1276:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1277:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1276]] release, align 2
// CHECK-NEXT:    [[TMP1278:%.*]] = icmp sgt i16 [[TMP1277]], [[TMP1276]]
// CHECK-NEXT:    [[TMP1279:%.*]] = select i1 [[TMP1278]], i16 [[TMP1276]], i16 [[TMP1277]]
// CHECK-NEXT:    store i16 [[TMP1279]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1280:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1281:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1282:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1280]], i16 [[TMP1281]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1283:%.*]] = extractvalue { i16, i1 } [[TMP1282]], 0
// CHECK-NEXT:    [[TMP1284:%.*]] = extractvalue { i16, i1 } [[TMP1282]], 1
// CHECK-NEXT:    [[TMP1285:%.*]] = select i1 [[TMP1284]], i16 [[TMP1280]], i16 [[TMP1283]]
// CHECK-NEXT:    store i16 [[TMP1285]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1286:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1287:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1288:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1286]], i16 [[TMP1287]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1289:%.*]] = extractvalue { i16, i1 } [[TMP1288]], 0
// CHECK-NEXT:    [[TMP1290:%.*]] = extractvalue { i16, i1 } [[TMP1288]], 1
// CHECK-NEXT:    [[TMP1291:%.*]] = select i1 [[TMP1290]], i16 [[TMP1286]], i16 [[TMP1289]]
// CHECK-NEXT:    store i16 [[TMP1291]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1292:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1293:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1294:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1292]], i16 [[TMP1293]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1295:%.*]] = extractvalue { i16, i1 } [[TMP1294]], 0
// CHECK-NEXT:    [[TMP1296:%.*]] = extractvalue { i16, i1 } [[TMP1294]], 1
// CHECK-NEXT:    br i1 [[TMP1296]], label [[SX_ATOMIC_EXIT180:%.*]], label [[SX_ATOMIC_CONT181:%.*]]
// CHECK:       sx.atomic.cont181:
// CHECK-NEXT:    store i16 [[TMP1295]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT180]]
// CHECK:       sx.atomic.exit180:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1297:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1298:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1299:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1297]], i16 [[TMP1298]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1300:%.*]] = extractvalue { i16, i1 } [[TMP1299]], 0
// CHECK-NEXT:    [[TMP1301:%.*]] = extractvalue { i16, i1 } [[TMP1299]], 1
// CHECK-NEXT:    br i1 [[TMP1301]], label [[SX_ATOMIC_EXIT182:%.*]], label [[SX_ATOMIC_CONT183:%.*]]
// CHECK:       sx.atomic.cont183:
// CHECK-NEXT:    store i16 [[TMP1300]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT182]]
// CHECK:       sx.atomic.exit182:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1302:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1303:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1304:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1302]], i16 [[TMP1303]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1305:%.*]] = extractvalue { i16, i1 } [[TMP1304]], 1
// CHECK-NEXT:    [[TMP1306:%.*]] = sext i1 [[TMP1305]] to i16
// CHECK-NEXT:    store i16 [[TMP1306]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1307:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1308:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1309:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1307]], i16 [[TMP1308]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1310:%.*]] = extractvalue { i16, i1 } [[TMP1309]], 1
// CHECK-NEXT:    [[TMP1311:%.*]] = sext i1 [[TMP1310]] to i16
// CHECK-NEXT:    store i16 [[TMP1311]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1312:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1313:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1314:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1312]], i16 [[TMP1313]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1315:%.*]] = extractvalue { i16, i1 } [[TMP1314]], 0
// CHECK-NEXT:    [[TMP1316:%.*]] = extractvalue { i16, i1 } [[TMP1314]], 1
// CHECK-NEXT:    br i1 [[TMP1316]], label [[SX_ATOMIC_EXIT184:%.*]], label [[SX_ATOMIC_CONT185:%.*]]
// CHECK:       sx.atomic.cont185:
// CHECK-NEXT:    store i16 [[TMP1315]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT184]]
// CHECK:       sx.atomic.exit184:
// CHECK-NEXT:    [[TMP1317:%.*]] = extractvalue { i16, i1 } [[TMP1314]], 1
// CHECK-NEXT:    [[TMP1318:%.*]] = sext i1 [[TMP1317]] to i16
// CHECK-NEXT:    store i16 [[TMP1318]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1319:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1320:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1321:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1319]], i16 [[TMP1320]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1322:%.*]] = extractvalue { i16, i1 } [[TMP1321]], 0
// CHECK-NEXT:    [[TMP1323:%.*]] = extractvalue { i16, i1 } [[TMP1321]], 1
// CHECK-NEXT:    br i1 [[TMP1323]], label [[SX_ATOMIC_EXIT186:%.*]], label [[SX_ATOMIC_CONT187:%.*]]
// CHECK:       sx.atomic.cont187:
// CHECK-NEXT:    store i16 [[TMP1322]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT186]]
// CHECK:       sx.atomic.exit186:
// CHECK-NEXT:    [[TMP1324:%.*]] = extractvalue { i16, i1 } [[TMP1321]], 1
// CHECK-NEXT:    [[TMP1325:%.*]] = sext i1 [[TMP1324]] to i16
// CHECK-NEXT:    store i16 [[TMP1325]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1326:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1327:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1326]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1327]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1328:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1329:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1328]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1329]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1330:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1331:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1330]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1331]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1332:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1333:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1332]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1333]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1334:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1335:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1336:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1334]], i16 [[TMP1335]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1337:%.*]] = extractvalue { i16, i1 } [[TMP1336]], 0
// CHECK-NEXT:    store i16 [[TMP1337]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1338:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1339:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1340:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1338]], i16 [[TMP1339]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1341:%.*]] = extractvalue { i16, i1 } [[TMP1340]], 0
// CHECK-NEXT:    store i16 [[TMP1341]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1342:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1343:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1342]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1344:%.*]] = icmp sgt i16 [[TMP1343]], [[TMP1342]]
// CHECK-NEXT:    [[TMP1345:%.*]] = select i1 [[TMP1344]], i16 [[TMP1342]], i16 [[TMP1343]]
// CHECK-NEXT:    store i16 [[TMP1345]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1346:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1347:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1346]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1348:%.*]] = icmp slt i16 [[TMP1347]], [[TMP1346]]
// CHECK-NEXT:    [[TMP1349:%.*]] = select i1 [[TMP1348]], i16 [[TMP1346]], i16 [[TMP1347]]
// CHECK-NEXT:    store i16 [[TMP1349]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1350:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1351:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1350]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1352:%.*]] = icmp slt i16 [[TMP1351]], [[TMP1350]]
// CHECK-NEXT:    [[TMP1353:%.*]] = select i1 [[TMP1352]], i16 [[TMP1350]], i16 [[TMP1351]]
// CHECK-NEXT:    store i16 [[TMP1353]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1354:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1355:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1354]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1356:%.*]] = icmp sgt i16 [[TMP1355]], [[TMP1354]]
// CHECK-NEXT:    [[TMP1357:%.*]] = select i1 [[TMP1356]], i16 [[TMP1354]], i16 [[TMP1355]]
// CHECK-NEXT:    store i16 [[TMP1357]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1358:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1359:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1360:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1358]], i16 [[TMP1359]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1361:%.*]] = extractvalue { i16, i1 } [[TMP1360]], 0
// CHECK-NEXT:    [[TMP1362:%.*]] = extractvalue { i16, i1 } [[TMP1360]], 1
// CHECK-NEXT:    [[TMP1363:%.*]] = select i1 [[TMP1362]], i16 [[TMP1358]], i16 [[TMP1361]]
// CHECK-NEXT:    store i16 [[TMP1363]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1364:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1365:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1366:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1364]], i16 [[TMP1365]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1367:%.*]] = extractvalue { i16, i1 } [[TMP1366]], 0
// CHECK-NEXT:    [[TMP1368:%.*]] = extractvalue { i16, i1 } [[TMP1366]], 1
// CHECK-NEXT:    [[TMP1369:%.*]] = select i1 [[TMP1368]], i16 [[TMP1364]], i16 [[TMP1367]]
// CHECK-NEXT:    store i16 [[TMP1369]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1370:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1371:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1372:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1370]], i16 [[TMP1371]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1373:%.*]] = extractvalue { i16, i1 } [[TMP1372]], 0
// CHECK-NEXT:    [[TMP1374:%.*]] = extractvalue { i16, i1 } [[TMP1372]], 1
// CHECK-NEXT:    br i1 [[TMP1374]], label [[SX_ATOMIC_EXIT188:%.*]], label [[SX_ATOMIC_CONT189:%.*]]
// CHECK:       sx.atomic.cont189:
// CHECK-NEXT:    store i16 [[TMP1373]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT188]]
// CHECK:       sx.atomic.exit188:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1375:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1376:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1377:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1375]], i16 [[TMP1376]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1378:%.*]] = extractvalue { i16, i1 } [[TMP1377]], 0
// CHECK-NEXT:    [[TMP1379:%.*]] = extractvalue { i16, i1 } [[TMP1377]], 1
// CHECK-NEXT:    br i1 [[TMP1379]], label [[SX_ATOMIC_EXIT190:%.*]], label [[SX_ATOMIC_CONT191:%.*]]
// CHECK:       sx.atomic.cont191:
// CHECK-NEXT:    store i16 [[TMP1378]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT190]]
// CHECK:       sx.atomic.exit190:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1380:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1381:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1382:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1380]], i16 [[TMP1381]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1383:%.*]] = extractvalue { i16, i1 } [[TMP1382]], 1
// CHECK-NEXT:    [[TMP1384:%.*]] = sext i1 [[TMP1383]] to i16
// CHECK-NEXT:    store i16 [[TMP1384]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1385:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1386:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1387:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1385]], i16 [[TMP1386]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1388:%.*]] = extractvalue { i16, i1 } [[TMP1387]], 1
// CHECK-NEXT:    [[TMP1389:%.*]] = sext i1 [[TMP1388]] to i16
// CHECK-NEXT:    store i16 [[TMP1389]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1390:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1391:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1392:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1390]], i16 [[TMP1391]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1393:%.*]] = extractvalue { i16, i1 } [[TMP1392]], 0
// CHECK-NEXT:    [[TMP1394:%.*]] = extractvalue { i16, i1 } [[TMP1392]], 1
// CHECK-NEXT:    br i1 [[TMP1394]], label [[SX_ATOMIC_EXIT192:%.*]], label [[SX_ATOMIC_CONT193:%.*]]
// CHECK:       sx.atomic.cont193:
// CHECK-NEXT:    store i16 [[TMP1393]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT192]]
// CHECK:       sx.atomic.exit192:
// CHECK-NEXT:    [[TMP1395:%.*]] = extractvalue { i16, i1 } [[TMP1392]], 1
// CHECK-NEXT:    [[TMP1396:%.*]] = sext i1 [[TMP1395]] to i16
// CHECK-NEXT:    store i16 [[TMP1396]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1397:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1398:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1399:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1397]], i16 [[TMP1398]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1400:%.*]] = extractvalue { i16, i1 } [[TMP1399]], 0
// CHECK-NEXT:    [[TMP1401:%.*]] = extractvalue { i16, i1 } [[TMP1399]], 1
// CHECK-NEXT:    br i1 [[TMP1401]], label [[SX_ATOMIC_EXIT194:%.*]], label [[SX_ATOMIC_CONT195:%.*]]
// CHECK:       sx.atomic.cont195:
// CHECK-NEXT:    store i16 [[TMP1400]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT194]]
// CHECK:       sx.atomic.exit194:
// CHECK-NEXT:    [[TMP1402:%.*]] = extractvalue { i16, i1 } [[TMP1399]], 1
// CHECK-NEXT:    [[TMP1403:%.*]] = sext i1 [[TMP1402]] to i16
// CHECK-NEXT:    store i16 [[TMP1403]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1404:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1405:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1404]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1405]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1406:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1407:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1406]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1407]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1408:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1409:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1408]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1409]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1410:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1411:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1410]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1411]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1412:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1413:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1414:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1412]], i16 [[TMP1413]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1415:%.*]] = extractvalue { i16, i1 } [[TMP1414]], 0
// CHECK-NEXT:    store i16 [[TMP1415]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1416:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1417:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1418:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1416]], i16 [[TMP1417]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1419:%.*]] = extractvalue { i16, i1 } [[TMP1418]], 0
// CHECK-NEXT:    store i16 [[TMP1419]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1420:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1421:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1420]] monotonic, align 2
// CHECK-NEXT:    [[TMP1422:%.*]] = icmp ugt i16 [[TMP1421]], [[TMP1420]]
// CHECK-NEXT:    [[TMP1423:%.*]] = select i1 [[TMP1422]], i16 [[TMP1420]], i16 [[TMP1421]]
// CHECK-NEXT:    store i16 [[TMP1423]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1424:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1425:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1424]] monotonic, align 2
// CHECK-NEXT:    [[TMP1426:%.*]] = icmp ult i16 [[TMP1425]], [[TMP1424]]
// CHECK-NEXT:    [[TMP1427:%.*]] = select i1 [[TMP1426]], i16 [[TMP1424]], i16 [[TMP1425]]
// CHECK-NEXT:    store i16 [[TMP1427]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1428:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1429:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1428]] monotonic, align 2
// CHECK-NEXT:    [[TMP1430:%.*]] = icmp ult i16 [[TMP1429]], [[TMP1428]]
// CHECK-NEXT:    [[TMP1431:%.*]] = select i1 [[TMP1430]], i16 [[TMP1428]], i16 [[TMP1429]]
// CHECK-NEXT:    store i16 [[TMP1431]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1432:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1433:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1432]] monotonic, align 2
// CHECK-NEXT:    [[TMP1434:%.*]] = icmp ugt i16 [[TMP1433]], [[TMP1432]]
// CHECK-NEXT:    [[TMP1435:%.*]] = select i1 [[TMP1434]], i16 [[TMP1432]], i16 [[TMP1433]]
// CHECK-NEXT:    store i16 [[TMP1435]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1436:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1437:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1438:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1436]], i16 [[TMP1437]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1439:%.*]] = extractvalue { i16, i1 } [[TMP1438]], 0
// CHECK-NEXT:    [[TMP1440:%.*]] = extractvalue { i16, i1 } [[TMP1438]], 1
// CHECK-NEXT:    [[TMP1441:%.*]] = select i1 [[TMP1440]], i16 [[TMP1436]], i16 [[TMP1439]]
// CHECK-NEXT:    store i16 [[TMP1441]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1442:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1443:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1444:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1442]], i16 [[TMP1443]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1445:%.*]] = extractvalue { i16, i1 } [[TMP1444]], 0
// CHECK-NEXT:    [[TMP1446:%.*]] = extractvalue { i16, i1 } [[TMP1444]], 1
// CHECK-NEXT:    [[TMP1447:%.*]] = select i1 [[TMP1446]], i16 [[TMP1442]], i16 [[TMP1445]]
// CHECK-NEXT:    store i16 [[TMP1447]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1448:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1449:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1450:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1448]], i16 [[TMP1449]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1451:%.*]] = extractvalue { i16, i1 } [[TMP1450]], 0
// CHECK-NEXT:    [[TMP1452:%.*]] = extractvalue { i16, i1 } [[TMP1450]], 1
// CHECK-NEXT:    br i1 [[TMP1452]], label [[USX_ATOMIC_EXIT:%.*]], label [[USX_ATOMIC_CONT:%.*]]
// CHECK:       usx.atomic.cont:
// CHECK-NEXT:    store i16 [[TMP1451]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT]]
// CHECK:       usx.atomic.exit:
// CHECK-NEXT:    [[TMP1453:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1454:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1455:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1453]], i16 [[TMP1454]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1456:%.*]] = extractvalue { i16, i1 } [[TMP1455]], 0
// CHECK-NEXT:    [[TMP1457:%.*]] = extractvalue { i16, i1 } [[TMP1455]], 1
// CHECK-NEXT:    br i1 [[TMP1457]], label [[USX_ATOMIC_EXIT196:%.*]], label [[USX_ATOMIC_CONT197:%.*]]
// CHECK:       usx.atomic.cont197:
// CHECK-NEXT:    store i16 [[TMP1456]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT196]]
// CHECK:       usx.atomic.exit196:
// CHECK-NEXT:    [[TMP1458:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1459:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1460:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1458]], i16 [[TMP1459]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1461:%.*]] = extractvalue { i16, i1 } [[TMP1460]], 1
// CHECK-NEXT:    [[TMP1462:%.*]] = zext i1 [[TMP1461]] to i16
// CHECK-NEXT:    store i16 [[TMP1462]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1463:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1464:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1465:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1463]], i16 [[TMP1464]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1466:%.*]] = extractvalue { i16, i1 } [[TMP1465]], 1
// CHECK-NEXT:    [[TMP1467:%.*]] = zext i1 [[TMP1466]] to i16
// CHECK-NEXT:    store i16 [[TMP1467]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1468:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1469:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1470:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1468]], i16 [[TMP1469]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1471:%.*]] = extractvalue { i16, i1 } [[TMP1470]], 0
// CHECK-NEXT:    [[TMP1472:%.*]] = extractvalue { i16, i1 } [[TMP1470]], 1
// CHECK-NEXT:    br i1 [[TMP1472]], label [[USX_ATOMIC_EXIT198:%.*]], label [[USX_ATOMIC_CONT199:%.*]]
// CHECK:       usx.atomic.cont199:
// CHECK-NEXT:    store i16 [[TMP1471]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT198]]
// CHECK:       usx.atomic.exit198:
// CHECK-NEXT:    [[TMP1473:%.*]] = extractvalue { i16, i1 } [[TMP1470]], 1
// CHECK-NEXT:    [[TMP1474:%.*]] = zext i1 [[TMP1473]] to i16
// CHECK-NEXT:    store i16 [[TMP1474]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1475:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1476:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1477:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1475]], i16 [[TMP1476]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1478:%.*]] = extractvalue { i16, i1 } [[TMP1477]], 0
// CHECK-NEXT:    [[TMP1479:%.*]] = extractvalue { i16, i1 } [[TMP1477]], 1
// CHECK-NEXT:    br i1 [[TMP1479]], label [[USX_ATOMIC_EXIT200:%.*]], label [[USX_ATOMIC_CONT201:%.*]]
// CHECK:       usx.atomic.cont201:
// CHECK-NEXT:    store i16 [[TMP1478]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT200]]
// CHECK:       usx.atomic.exit200:
// CHECK-NEXT:    [[TMP1480:%.*]] = extractvalue { i16, i1 } [[TMP1477]], 1
// CHECK-NEXT:    [[TMP1481:%.*]] = zext i1 [[TMP1480]] to i16
// CHECK-NEXT:    store i16 [[TMP1481]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1482:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1483:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1482]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1483]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1484:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1485:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1484]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1485]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1486:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1487:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1486]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1487]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1488:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1489:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1488]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1489]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1490:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1491:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1492:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1490]], i16 [[TMP1491]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1493:%.*]] = extractvalue { i16, i1 } [[TMP1492]], 0
// CHECK-NEXT:    store i16 [[TMP1493]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1494:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1495:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1496:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1494]], i16 [[TMP1495]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1497:%.*]] = extractvalue { i16, i1 } [[TMP1496]], 0
// CHECK-NEXT:    store i16 [[TMP1497]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1498:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1499:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1498]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1500:%.*]] = icmp ugt i16 [[TMP1499]], [[TMP1498]]
// CHECK-NEXT:    [[TMP1501:%.*]] = select i1 [[TMP1500]], i16 [[TMP1498]], i16 [[TMP1499]]
// CHECK-NEXT:    store i16 [[TMP1501]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1502:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1503:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1502]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1504:%.*]] = icmp ult i16 [[TMP1503]], [[TMP1502]]
// CHECK-NEXT:    [[TMP1505:%.*]] = select i1 [[TMP1504]], i16 [[TMP1502]], i16 [[TMP1503]]
// CHECK-NEXT:    store i16 [[TMP1505]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1506:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1507:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1506]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1508:%.*]] = icmp ult i16 [[TMP1507]], [[TMP1506]]
// CHECK-NEXT:    [[TMP1509:%.*]] = select i1 [[TMP1508]], i16 [[TMP1506]], i16 [[TMP1507]]
// CHECK-NEXT:    store i16 [[TMP1509]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1510:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1511:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1510]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1512:%.*]] = icmp ugt i16 [[TMP1511]], [[TMP1510]]
// CHECK-NEXT:    [[TMP1513:%.*]] = select i1 [[TMP1512]], i16 [[TMP1510]], i16 [[TMP1511]]
// CHECK-NEXT:    store i16 [[TMP1513]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1514:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1515:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1516:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1514]], i16 [[TMP1515]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1517:%.*]] = extractvalue { i16, i1 } [[TMP1516]], 0
// CHECK-NEXT:    [[TMP1518:%.*]] = extractvalue { i16, i1 } [[TMP1516]], 1
// CHECK-NEXT:    [[TMP1519:%.*]] = select i1 [[TMP1518]], i16 [[TMP1514]], i16 [[TMP1517]]
// CHECK-NEXT:    store i16 [[TMP1519]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1520:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1521:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1522:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1520]], i16 [[TMP1521]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1523:%.*]] = extractvalue { i16, i1 } [[TMP1522]], 0
// CHECK-NEXT:    [[TMP1524:%.*]] = extractvalue { i16, i1 } [[TMP1522]], 1
// CHECK-NEXT:    [[TMP1525:%.*]] = select i1 [[TMP1524]], i16 [[TMP1520]], i16 [[TMP1523]]
// CHECK-NEXT:    store i16 [[TMP1525]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1526:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1527:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1528:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1526]], i16 [[TMP1527]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1529:%.*]] = extractvalue { i16, i1 } [[TMP1528]], 0
// CHECK-NEXT:    [[TMP1530:%.*]] = extractvalue { i16, i1 } [[TMP1528]], 1
// CHECK-NEXT:    br i1 [[TMP1530]], label [[USX_ATOMIC_EXIT202:%.*]], label [[USX_ATOMIC_CONT203:%.*]]
// CHECK:       usx.atomic.cont203:
// CHECK-NEXT:    store i16 [[TMP1529]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT202]]
// CHECK:       usx.atomic.exit202:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1531:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1532:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1533:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1531]], i16 [[TMP1532]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1534:%.*]] = extractvalue { i16, i1 } [[TMP1533]], 0
// CHECK-NEXT:    [[TMP1535:%.*]] = extractvalue { i16, i1 } [[TMP1533]], 1
// CHECK-NEXT:    br i1 [[TMP1535]], label [[USX_ATOMIC_EXIT204:%.*]], label [[USX_ATOMIC_CONT205:%.*]]
// CHECK:       usx.atomic.cont205:
// CHECK-NEXT:    store i16 [[TMP1534]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT204]]
// CHECK:       usx.atomic.exit204:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1536:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1537:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1538:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1536]], i16 [[TMP1537]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1539:%.*]] = extractvalue { i16, i1 } [[TMP1538]], 1
// CHECK-NEXT:    [[TMP1540:%.*]] = zext i1 [[TMP1539]] to i16
// CHECK-NEXT:    store i16 [[TMP1540]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1541:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1542:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1543:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1541]], i16 [[TMP1542]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1544:%.*]] = extractvalue { i16, i1 } [[TMP1543]], 1
// CHECK-NEXT:    [[TMP1545:%.*]] = zext i1 [[TMP1544]] to i16
// CHECK-NEXT:    store i16 [[TMP1545]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1546:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1547:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1548:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1546]], i16 [[TMP1547]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1549:%.*]] = extractvalue { i16, i1 } [[TMP1548]], 0
// CHECK-NEXT:    [[TMP1550:%.*]] = extractvalue { i16, i1 } [[TMP1548]], 1
// CHECK-NEXT:    br i1 [[TMP1550]], label [[USX_ATOMIC_EXIT206:%.*]], label [[USX_ATOMIC_CONT207:%.*]]
// CHECK:       usx.atomic.cont207:
// CHECK-NEXT:    store i16 [[TMP1549]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT206]]
// CHECK:       usx.atomic.exit206:
// CHECK-NEXT:    [[TMP1551:%.*]] = extractvalue { i16, i1 } [[TMP1548]], 1
// CHECK-NEXT:    [[TMP1552:%.*]] = zext i1 [[TMP1551]] to i16
// CHECK-NEXT:    store i16 [[TMP1552]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1553:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1554:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1555:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1553]], i16 [[TMP1554]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1556:%.*]] = extractvalue { i16, i1 } [[TMP1555]], 0
// CHECK-NEXT:    [[TMP1557:%.*]] = extractvalue { i16, i1 } [[TMP1555]], 1
// CHECK-NEXT:    br i1 [[TMP1557]], label [[USX_ATOMIC_EXIT208:%.*]], label [[USX_ATOMIC_CONT209:%.*]]
// CHECK:       usx.atomic.cont209:
// CHECK-NEXT:    store i16 [[TMP1556]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT208]]
// CHECK:       usx.atomic.exit208:
// CHECK-NEXT:    [[TMP1558:%.*]] = extractvalue { i16, i1 } [[TMP1555]], 1
// CHECK-NEXT:    [[TMP1559:%.*]] = zext i1 [[TMP1558]] to i16
// CHECK-NEXT:    store i16 [[TMP1559]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1560:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1561:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1560]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1561]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1562:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1563:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1562]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1563]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1564:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1565:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1564]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1565]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1566:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1567:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1566]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1567]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1568:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1569:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1570:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1568]], i16 [[TMP1569]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1571:%.*]] = extractvalue { i16, i1 } [[TMP1570]], 0
// CHECK-NEXT:    store i16 [[TMP1571]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1572:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1573:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1574:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1572]], i16 [[TMP1573]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1575:%.*]] = extractvalue { i16, i1 } [[TMP1574]], 0
// CHECK-NEXT:    store i16 [[TMP1575]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1576:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1577:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1576]] acquire, align 2
// CHECK-NEXT:    [[TMP1578:%.*]] = icmp ugt i16 [[TMP1577]], [[TMP1576]]
// CHECK-NEXT:    [[TMP1579:%.*]] = select i1 [[TMP1578]], i16 [[TMP1576]], i16 [[TMP1577]]
// CHECK-NEXT:    store i16 [[TMP1579]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1580:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1581:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1580]] acquire, align 2
// CHECK-NEXT:    [[TMP1582:%.*]] = icmp ult i16 [[TMP1581]], [[TMP1580]]
// CHECK-NEXT:    [[TMP1583:%.*]] = select i1 [[TMP1582]], i16 [[TMP1580]], i16 [[TMP1581]]
// CHECK-NEXT:    store i16 [[TMP1583]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1584:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1585:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1584]] acquire, align 2
// CHECK-NEXT:    [[TMP1586:%.*]] = icmp ult i16 [[TMP1585]], [[TMP1584]]
// CHECK-NEXT:    [[TMP1587:%.*]] = select i1 [[TMP1586]], i16 [[TMP1584]], i16 [[TMP1585]]
// CHECK-NEXT:    store i16 [[TMP1587]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1588:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1589:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1588]] acquire, align 2
// CHECK-NEXT:    [[TMP1590:%.*]] = icmp ugt i16 [[TMP1589]], [[TMP1588]]
// CHECK-NEXT:    [[TMP1591:%.*]] = select i1 [[TMP1590]], i16 [[TMP1588]], i16 [[TMP1589]]
// CHECK-NEXT:    store i16 [[TMP1591]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1592:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1593:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1594:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1592]], i16 [[TMP1593]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1595:%.*]] = extractvalue { i16, i1 } [[TMP1594]], 0
// CHECK-NEXT:    [[TMP1596:%.*]] = extractvalue { i16, i1 } [[TMP1594]], 1
// CHECK-NEXT:    [[TMP1597:%.*]] = select i1 [[TMP1596]], i16 [[TMP1592]], i16 [[TMP1595]]
// CHECK-NEXT:    store i16 [[TMP1597]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1598:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1599:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1600:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1598]], i16 [[TMP1599]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1601:%.*]] = extractvalue { i16, i1 } [[TMP1600]], 0
// CHECK-NEXT:    [[TMP1602:%.*]] = extractvalue { i16, i1 } [[TMP1600]], 1
// CHECK-NEXT:    [[TMP1603:%.*]] = select i1 [[TMP1602]], i16 [[TMP1598]], i16 [[TMP1601]]
// CHECK-NEXT:    store i16 [[TMP1603]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1604:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1605:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1606:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1604]], i16 [[TMP1605]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1607:%.*]] = extractvalue { i16, i1 } [[TMP1606]], 0
// CHECK-NEXT:    [[TMP1608:%.*]] = extractvalue { i16, i1 } [[TMP1606]], 1
// CHECK-NEXT:    br i1 [[TMP1608]], label [[USX_ATOMIC_EXIT210:%.*]], label [[USX_ATOMIC_CONT211:%.*]]
// CHECK:       usx.atomic.cont211:
// CHECK-NEXT:    store i16 [[TMP1607]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT210]]
// CHECK:       usx.atomic.exit210:
// CHECK-NEXT:    [[TMP1609:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1610:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1611:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1609]], i16 [[TMP1610]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1612:%.*]] = extractvalue { i16, i1 } [[TMP1611]], 0
// CHECK-NEXT:    [[TMP1613:%.*]] = extractvalue { i16, i1 } [[TMP1611]], 1
// CHECK-NEXT:    br i1 [[TMP1613]], label [[USX_ATOMIC_EXIT212:%.*]], label [[USX_ATOMIC_CONT213:%.*]]
// CHECK:       usx.atomic.cont213:
// CHECK-NEXT:    store i16 [[TMP1612]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT212]]
// CHECK:       usx.atomic.exit212:
// CHECK-NEXT:    [[TMP1614:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1615:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1616:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1614]], i16 [[TMP1615]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1617:%.*]] = extractvalue { i16, i1 } [[TMP1616]], 1
// CHECK-NEXT:    [[TMP1618:%.*]] = zext i1 [[TMP1617]] to i16
// CHECK-NEXT:    store i16 [[TMP1618]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1619:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1620:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1621:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1619]], i16 [[TMP1620]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1622:%.*]] = extractvalue { i16, i1 } [[TMP1621]], 1
// CHECK-NEXT:    [[TMP1623:%.*]] = zext i1 [[TMP1622]] to i16
// CHECK-NEXT:    store i16 [[TMP1623]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1624:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1625:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1626:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1624]], i16 [[TMP1625]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1627:%.*]] = extractvalue { i16, i1 } [[TMP1626]], 0
// CHECK-NEXT:    [[TMP1628:%.*]] = extractvalue { i16, i1 } [[TMP1626]], 1
// CHECK-NEXT:    br i1 [[TMP1628]], label [[USX_ATOMIC_EXIT214:%.*]], label [[USX_ATOMIC_CONT215:%.*]]
// CHECK:       usx.atomic.cont215:
// CHECK-NEXT:    store i16 [[TMP1627]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT214]]
// CHECK:       usx.atomic.exit214:
// CHECK-NEXT:    [[TMP1629:%.*]] = extractvalue { i16, i1 } [[TMP1626]], 1
// CHECK-NEXT:    [[TMP1630:%.*]] = zext i1 [[TMP1629]] to i16
// CHECK-NEXT:    store i16 [[TMP1630]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1631:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1632:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1633:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1631]], i16 [[TMP1632]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1634:%.*]] = extractvalue { i16, i1 } [[TMP1633]], 0
// CHECK-NEXT:    [[TMP1635:%.*]] = extractvalue { i16, i1 } [[TMP1633]], 1
// CHECK-NEXT:    br i1 [[TMP1635]], label [[USX_ATOMIC_EXIT216:%.*]], label [[USX_ATOMIC_CONT217:%.*]]
// CHECK:       usx.atomic.cont217:
// CHECK-NEXT:    store i16 [[TMP1634]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT216]]
// CHECK:       usx.atomic.exit216:
// CHECK-NEXT:    [[TMP1636:%.*]] = extractvalue { i16, i1 } [[TMP1633]], 1
// CHECK-NEXT:    [[TMP1637:%.*]] = zext i1 [[TMP1636]] to i16
// CHECK-NEXT:    store i16 [[TMP1637]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1638:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1639:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1638]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1639]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1640:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1641:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1640]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1641]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1642:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1643:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1642]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1643]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1644:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1645:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1644]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1645]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1646:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1647:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1648:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1646]], i16 [[TMP1647]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1649:%.*]] = extractvalue { i16, i1 } [[TMP1648]], 0
// CHECK-NEXT:    store i16 [[TMP1649]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1650:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1651:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1652:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1650]], i16 [[TMP1651]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1653:%.*]] = extractvalue { i16, i1 } [[TMP1652]], 0
// CHECK-NEXT:    store i16 [[TMP1653]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1654:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1655:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1654]] monotonic, align 2
// CHECK-NEXT:    [[TMP1656:%.*]] = icmp ugt i16 [[TMP1655]], [[TMP1654]]
// CHECK-NEXT:    [[TMP1657:%.*]] = select i1 [[TMP1656]], i16 [[TMP1654]], i16 [[TMP1655]]
// CHECK-NEXT:    store i16 [[TMP1657]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1658:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1659:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1658]] monotonic, align 2
// CHECK-NEXT:    [[TMP1660:%.*]] = icmp ult i16 [[TMP1659]], [[TMP1658]]
// CHECK-NEXT:    [[TMP1661:%.*]] = select i1 [[TMP1660]], i16 [[TMP1658]], i16 [[TMP1659]]
// CHECK-NEXT:    store i16 [[TMP1661]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1662:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1663:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1662]] monotonic, align 2
// CHECK-NEXT:    [[TMP1664:%.*]] = icmp ult i16 [[TMP1663]], [[TMP1662]]
// CHECK-NEXT:    [[TMP1665:%.*]] = select i1 [[TMP1664]], i16 [[TMP1662]], i16 [[TMP1663]]
// CHECK-NEXT:    store i16 [[TMP1665]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1666:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1667:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1666]] monotonic, align 2
// CHECK-NEXT:    [[TMP1668:%.*]] = icmp ugt i16 [[TMP1667]], [[TMP1666]]
// CHECK-NEXT:    [[TMP1669:%.*]] = select i1 [[TMP1668]], i16 [[TMP1666]], i16 [[TMP1667]]
// CHECK-NEXT:    store i16 [[TMP1669]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1670:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1671:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1672:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1670]], i16 [[TMP1671]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1673:%.*]] = extractvalue { i16, i1 } [[TMP1672]], 0
// CHECK-NEXT:    [[TMP1674:%.*]] = extractvalue { i16, i1 } [[TMP1672]], 1
// CHECK-NEXT:    [[TMP1675:%.*]] = select i1 [[TMP1674]], i16 [[TMP1670]], i16 [[TMP1673]]
// CHECK-NEXT:    store i16 [[TMP1675]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1676:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1677:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1678:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1676]], i16 [[TMP1677]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1679:%.*]] = extractvalue { i16, i1 } [[TMP1678]], 0
// CHECK-NEXT:    [[TMP1680:%.*]] = extractvalue { i16, i1 } [[TMP1678]], 1
// CHECK-NEXT:    [[TMP1681:%.*]] = select i1 [[TMP1680]], i16 [[TMP1676]], i16 [[TMP1679]]
// CHECK-NEXT:    store i16 [[TMP1681]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1682:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1683:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1684:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1682]], i16 [[TMP1683]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1685:%.*]] = extractvalue { i16, i1 } [[TMP1684]], 0
// CHECK-NEXT:    [[TMP1686:%.*]] = extractvalue { i16, i1 } [[TMP1684]], 1
// CHECK-NEXT:    br i1 [[TMP1686]], label [[USX_ATOMIC_EXIT218:%.*]], label [[USX_ATOMIC_CONT219:%.*]]
// CHECK:       usx.atomic.cont219:
// CHECK-NEXT:    store i16 [[TMP1685]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT218]]
// CHECK:       usx.atomic.exit218:
// CHECK-NEXT:    [[TMP1687:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1688:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1689:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1687]], i16 [[TMP1688]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1690:%.*]] = extractvalue { i16, i1 } [[TMP1689]], 0
// CHECK-NEXT:    [[TMP1691:%.*]] = extractvalue { i16, i1 } [[TMP1689]], 1
// CHECK-NEXT:    br i1 [[TMP1691]], label [[USX_ATOMIC_EXIT220:%.*]], label [[USX_ATOMIC_CONT221:%.*]]
// CHECK:       usx.atomic.cont221:
// CHECK-NEXT:    store i16 [[TMP1690]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT220]]
// CHECK:       usx.atomic.exit220:
// CHECK-NEXT:    [[TMP1692:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1693:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1694:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1692]], i16 [[TMP1693]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1695:%.*]] = extractvalue { i16, i1 } [[TMP1694]], 1
// CHECK-NEXT:    [[TMP1696:%.*]] = zext i1 [[TMP1695]] to i16
// CHECK-NEXT:    store i16 [[TMP1696]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1697:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1698:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1699:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1697]], i16 [[TMP1698]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1700:%.*]] = extractvalue { i16, i1 } [[TMP1699]], 1
// CHECK-NEXT:    [[TMP1701:%.*]] = zext i1 [[TMP1700]] to i16
// CHECK-NEXT:    store i16 [[TMP1701]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1702:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1703:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1704:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1702]], i16 [[TMP1703]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1705:%.*]] = extractvalue { i16, i1 } [[TMP1704]], 0
// CHECK-NEXT:    [[TMP1706:%.*]] = extractvalue { i16, i1 } [[TMP1704]], 1
// CHECK-NEXT:    br i1 [[TMP1706]], label [[USX_ATOMIC_EXIT222:%.*]], label [[USX_ATOMIC_CONT223:%.*]]
// CHECK:       usx.atomic.cont223:
// CHECK-NEXT:    store i16 [[TMP1705]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT222]]
// CHECK:       usx.atomic.exit222:
// CHECK-NEXT:    [[TMP1707:%.*]] = extractvalue { i16, i1 } [[TMP1704]], 1
// CHECK-NEXT:    [[TMP1708:%.*]] = zext i1 [[TMP1707]] to i16
// CHECK-NEXT:    store i16 [[TMP1708]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1709:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1710:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1711:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1709]], i16 [[TMP1710]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1712:%.*]] = extractvalue { i16, i1 } [[TMP1711]], 0
// CHECK-NEXT:    [[TMP1713:%.*]] = extractvalue { i16, i1 } [[TMP1711]], 1
// CHECK-NEXT:    br i1 [[TMP1713]], label [[USX_ATOMIC_EXIT224:%.*]], label [[USX_ATOMIC_CONT225:%.*]]
// CHECK:       usx.atomic.cont225:
// CHECK-NEXT:    store i16 [[TMP1712]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT224]]
// CHECK:       usx.atomic.exit224:
// CHECK-NEXT:    [[TMP1714:%.*]] = extractvalue { i16, i1 } [[TMP1711]], 1
// CHECK-NEXT:    [[TMP1715:%.*]] = zext i1 [[TMP1714]] to i16
// CHECK-NEXT:    store i16 [[TMP1715]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1716:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1717:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1716]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1717]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1718:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1719:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1718]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1719]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1720:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1721:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1720]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1721]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1722:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1723:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1722]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1723]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1724:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1725:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1726:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1724]], i16 [[TMP1725]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1727:%.*]] = extractvalue { i16, i1 } [[TMP1726]], 0
// CHECK-NEXT:    store i16 [[TMP1727]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1728:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1729:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1730:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1728]], i16 [[TMP1729]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1731:%.*]] = extractvalue { i16, i1 } [[TMP1730]], 0
// CHECK-NEXT:    store i16 [[TMP1731]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1732:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1733:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1732]] release, align 2
// CHECK-NEXT:    [[TMP1734:%.*]] = icmp ugt i16 [[TMP1733]], [[TMP1732]]
// CHECK-NEXT:    [[TMP1735:%.*]] = select i1 [[TMP1734]], i16 [[TMP1732]], i16 [[TMP1733]]
// CHECK-NEXT:    store i16 [[TMP1735]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1736:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1737:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1736]] release, align 2
// CHECK-NEXT:    [[TMP1738:%.*]] = icmp ult i16 [[TMP1737]], [[TMP1736]]
// CHECK-NEXT:    [[TMP1739:%.*]] = select i1 [[TMP1738]], i16 [[TMP1736]], i16 [[TMP1737]]
// CHECK-NEXT:    store i16 [[TMP1739]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1740:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1741:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1740]] release, align 2
// CHECK-NEXT:    [[TMP1742:%.*]] = icmp ult i16 [[TMP1741]], [[TMP1740]]
// CHECK-NEXT:    [[TMP1743:%.*]] = select i1 [[TMP1742]], i16 [[TMP1740]], i16 [[TMP1741]]
// CHECK-NEXT:    store i16 [[TMP1743]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1744:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1745:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1744]] release, align 2
// CHECK-NEXT:    [[TMP1746:%.*]] = icmp ugt i16 [[TMP1745]], [[TMP1744]]
// CHECK-NEXT:    [[TMP1747:%.*]] = select i1 [[TMP1746]], i16 [[TMP1744]], i16 [[TMP1745]]
// CHECK-NEXT:    store i16 [[TMP1747]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1748:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1749:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1750:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1748]], i16 [[TMP1749]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1751:%.*]] = extractvalue { i16, i1 } [[TMP1750]], 0
// CHECK-NEXT:    [[TMP1752:%.*]] = extractvalue { i16, i1 } [[TMP1750]], 1
// CHECK-NEXT:    [[TMP1753:%.*]] = select i1 [[TMP1752]], i16 [[TMP1748]], i16 [[TMP1751]]
// CHECK-NEXT:    store i16 [[TMP1753]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1754:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1755:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1756:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1754]], i16 [[TMP1755]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1757:%.*]] = extractvalue { i16, i1 } [[TMP1756]], 0
// CHECK-NEXT:    [[TMP1758:%.*]] = extractvalue { i16, i1 } [[TMP1756]], 1
// CHECK-NEXT:    [[TMP1759:%.*]] = select i1 [[TMP1758]], i16 [[TMP1754]], i16 [[TMP1757]]
// CHECK-NEXT:    store i16 [[TMP1759]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1760:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1761:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1762:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1760]], i16 [[TMP1761]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1763:%.*]] = extractvalue { i16, i1 } [[TMP1762]], 0
// CHECK-NEXT:    [[TMP1764:%.*]] = extractvalue { i16, i1 } [[TMP1762]], 1
// CHECK-NEXT:    br i1 [[TMP1764]], label [[USX_ATOMIC_EXIT226:%.*]], label [[USX_ATOMIC_CONT227:%.*]]
// CHECK:       usx.atomic.cont227:
// CHECK-NEXT:    store i16 [[TMP1763]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT226]]
// CHECK:       usx.atomic.exit226:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1765:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1766:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1767:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1765]], i16 [[TMP1766]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1768:%.*]] = extractvalue { i16, i1 } [[TMP1767]], 0
// CHECK-NEXT:    [[TMP1769:%.*]] = extractvalue { i16, i1 } [[TMP1767]], 1
// CHECK-NEXT:    br i1 [[TMP1769]], label [[USX_ATOMIC_EXIT228:%.*]], label [[USX_ATOMIC_CONT229:%.*]]
// CHECK:       usx.atomic.cont229:
// CHECK-NEXT:    store i16 [[TMP1768]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT228]]
// CHECK:       usx.atomic.exit228:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1770:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1771:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1772:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1770]], i16 [[TMP1771]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1773:%.*]] = extractvalue { i16, i1 } [[TMP1772]], 1
// CHECK-NEXT:    [[TMP1774:%.*]] = zext i1 [[TMP1773]] to i16
// CHECK-NEXT:    store i16 [[TMP1774]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1775:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1776:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1777:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1775]], i16 [[TMP1776]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1778:%.*]] = extractvalue { i16, i1 } [[TMP1777]], 1
// CHECK-NEXT:    [[TMP1779:%.*]] = zext i1 [[TMP1778]] to i16
// CHECK-NEXT:    store i16 [[TMP1779]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1780:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1781:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1782:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1780]], i16 [[TMP1781]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1783:%.*]] = extractvalue { i16, i1 } [[TMP1782]], 0
// CHECK-NEXT:    [[TMP1784:%.*]] = extractvalue { i16, i1 } [[TMP1782]], 1
// CHECK-NEXT:    br i1 [[TMP1784]], label [[USX_ATOMIC_EXIT230:%.*]], label [[USX_ATOMIC_CONT231:%.*]]
// CHECK:       usx.atomic.cont231:
// CHECK-NEXT:    store i16 [[TMP1783]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT230]]
// CHECK:       usx.atomic.exit230:
// CHECK-NEXT:    [[TMP1785:%.*]] = extractvalue { i16, i1 } [[TMP1782]], 1
// CHECK-NEXT:    [[TMP1786:%.*]] = zext i1 [[TMP1785]] to i16
// CHECK-NEXT:    store i16 [[TMP1786]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1787:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1788:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1789:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1787]], i16 [[TMP1788]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1790:%.*]] = extractvalue { i16, i1 } [[TMP1789]], 0
// CHECK-NEXT:    [[TMP1791:%.*]] = extractvalue { i16, i1 } [[TMP1789]], 1
// CHECK-NEXT:    br i1 [[TMP1791]], label [[USX_ATOMIC_EXIT232:%.*]], label [[USX_ATOMIC_CONT233:%.*]]
// CHECK:       usx.atomic.cont233:
// CHECK-NEXT:    store i16 [[TMP1790]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT232]]
// CHECK:       usx.atomic.exit232:
// CHECK-NEXT:    [[TMP1792:%.*]] = extractvalue { i16, i1 } [[TMP1789]], 1
// CHECK-NEXT:    [[TMP1793:%.*]] = zext i1 [[TMP1792]] to i16
// CHECK-NEXT:    store i16 [[TMP1793]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1794:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1795:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1794]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1795]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1796:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1797:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1796]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1797]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1798:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1799:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1798]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1799]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1800:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1801:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1800]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1801]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1802:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1803:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1804:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1802]], i16 [[TMP1803]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1805:%.*]] = extractvalue { i16, i1 } [[TMP1804]], 0
// CHECK-NEXT:    store i16 [[TMP1805]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1806:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1807:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1808:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1806]], i16 [[TMP1807]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1809:%.*]] = extractvalue { i16, i1 } [[TMP1808]], 0
// CHECK-NEXT:    store i16 [[TMP1809]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1810:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1811:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1810]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1812:%.*]] = icmp ugt i16 [[TMP1811]], [[TMP1810]]
// CHECK-NEXT:    [[TMP1813:%.*]] = select i1 [[TMP1812]], i16 [[TMP1810]], i16 [[TMP1811]]
// CHECK-NEXT:    store i16 [[TMP1813]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1814:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1815:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1814]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1816:%.*]] = icmp ult i16 [[TMP1815]], [[TMP1814]]
// CHECK-NEXT:    [[TMP1817:%.*]] = select i1 [[TMP1816]], i16 [[TMP1814]], i16 [[TMP1815]]
// CHECK-NEXT:    store i16 [[TMP1817]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1818:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1819:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1818]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1820:%.*]] = icmp ult i16 [[TMP1819]], [[TMP1818]]
// CHECK-NEXT:    [[TMP1821:%.*]] = select i1 [[TMP1820]], i16 [[TMP1818]], i16 [[TMP1819]]
// CHECK-NEXT:    store i16 [[TMP1821]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1822:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1823:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1822]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1824:%.*]] = icmp ugt i16 [[TMP1823]], [[TMP1822]]
// CHECK-NEXT:    [[TMP1825:%.*]] = select i1 [[TMP1824]], i16 [[TMP1822]], i16 [[TMP1823]]
// CHECK-NEXT:    store i16 [[TMP1825]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1826:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1827:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1828:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1826]], i16 [[TMP1827]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1829:%.*]] = extractvalue { i16, i1 } [[TMP1828]], 0
// CHECK-NEXT:    [[TMP1830:%.*]] = extractvalue { i16, i1 } [[TMP1828]], 1
// CHECK-NEXT:    [[TMP1831:%.*]] = select i1 [[TMP1830]], i16 [[TMP1826]], i16 [[TMP1829]]
// CHECK-NEXT:    store i16 [[TMP1831]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1832:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1833:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1834:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1832]], i16 [[TMP1833]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1835:%.*]] = extractvalue { i16, i1 } [[TMP1834]], 0
// CHECK-NEXT:    [[TMP1836:%.*]] = extractvalue { i16, i1 } [[TMP1834]], 1
// CHECK-NEXT:    [[TMP1837:%.*]] = select i1 [[TMP1836]], i16 [[TMP1832]], i16 [[TMP1835]]
// CHECK-NEXT:    store i16 [[TMP1837]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1838:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1839:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1840:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1838]], i16 [[TMP1839]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1841:%.*]] = extractvalue { i16, i1 } [[TMP1840]], 0
// CHECK-NEXT:    [[TMP1842:%.*]] = extractvalue { i16, i1 } [[TMP1840]], 1
// CHECK-NEXT:    br i1 [[TMP1842]], label [[USX_ATOMIC_EXIT234:%.*]], label [[USX_ATOMIC_CONT235:%.*]]
// CHECK:       usx.atomic.cont235:
// CHECK-NEXT:    store i16 [[TMP1841]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT234]]
// CHECK:       usx.atomic.exit234:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1843:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1844:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1845:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1843]], i16 [[TMP1844]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1846:%.*]] = extractvalue { i16, i1 } [[TMP1845]], 0
// CHECK-NEXT:    [[TMP1847:%.*]] = extractvalue { i16, i1 } [[TMP1845]], 1
// CHECK-NEXT:    br i1 [[TMP1847]], label [[USX_ATOMIC_EXIT236:%.*]], label [[USX_ATOMIC_CONT237:%.*]]
// CHECK:       usx.atomic.cont237:
// CHECK-NEXT:    store i16 [[TMP1846]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT236]]
// CHECK:       usx.atomic.exit236:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1848:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1849:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1850:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1848]], i16 [[TMP1849]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1851:%.*]] = extractvalue { i16, i1 } [[TMP1850]], 1
// CHECK-NEXT:    [[TMP1852:%.*]] = zext i1 [[TMP1851]] to i16
// CHECK-NEXT:    store i16 [[TMP1852]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1853:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1854:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1855:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1853]], i16 [[TMP1854]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1856:%.*]] = extractvalue { i16, i1 } [[TMP1855]], 1
// CHECK-NEXT:    [[TMP1857:%.*]] = zext i1 [[TMP1856]] to i16
// CHECK-NEXT:    store i16 [[TMP1857]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1858:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1859:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1860:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1858]], i16 [[TMP1859]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1861:%.*]] = extractvalue { i16, i1 } [[TMP1860]], 0
// CHECK-NEXT:    [[TMP1862:%.*]] = extractvalue { i16, i1 } [[TMP1860]], 1
// CHECK-NEXT:    br i1 [[TMP1862]], label [[USX_ATOMIC_EXIT238:%.*]], label [[USX_ATOMIC_CONT239:%.*]]
// CHECK:       usx.atomic.cont239:
// CHECK-NEXT:    store i16 [[TMP1861]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT238]]
// CHECK:       usx.atomic.exit238:
// CHECK-NEXT:    [[TMP1863:%.*]] = extractvalue { i16, i1 } [[TMP1860]], 1
// CHECK-NEXT:    [[TMP1864:%.*]] = zext i1 [[TMP1863]] to i16
// CHECK-NEXT:    store i16 [[TMP1864]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1865:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1866:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1867:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1865]], i16 [[TMP1866]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1868:%.*]] = extractvalue { i16, i1 } [[TMP1867]], 0
// CHECK-NEXT:    [[TMP1869:%.*]] = extractvalue { i16, i1 } [[TMP1867]], 1
// CHECK-NEXT:    br i1 [[TMP1869]], label [[USX_ATOMIC_EXIT240:%.*]], label [[USX_ATOMIC_CONT241:%.*]]
// CHECK:       usx.atomic.cont241:
// CHECK-NEXT:    store i16 [[TMP1868]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT240]]
// CHECK:       usx.atomic.exit240:
// CHECK-NEXT:    [[TMP1870:%.*]] = extractvalue { i16, i1 } [[TMP1867]], 1
// CHECK-NEXT:    [[TMP1871:%.*]] = zext i1 [[TMP1870]] to i16
// CHECK-NEXT:    store i16 [[TMP1871]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1872:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1873:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP1872]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP1873]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1874:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1875:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP1874]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP1875]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1876:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1877:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP1876]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP1877]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1878:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1879:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP1878]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP1879]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1880:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1881:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1882:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1880]], i32 [[TMP1881]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP1883:%.*]] = extractvalue { i32, i1 } [[TMP1882]], 0
// CHECK-NEXT:    store i32 [[TMP1883]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1884:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1885:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1886:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1884]], i32 [[TMP1885]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP1887:%.*]] = extractvalue { i32, i1 } [[TMP1886]], 0
// CHECK-NEXT:    store i32 [[TMP1887]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1888:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1889:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP1888]] monotonic, align 4
// CHECK-NEXT:    [[TMP1890:%.*]] = icmp sgt i32 [[TMP1889]], [[TMP1888]]
// CHECK-NEXT:    [[TMP1891:%.*]] = select i1 [[TMP1890]], i32 [[TMP1888]], i32 [[TMP1889]]
// CHECK-NEXT:    store i32 [[TMP1891]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1892:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1893:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP1892]] monotonic, align 4
// CHECK-NEXT:    [[TMP1894:%.*]] = icmp slt i32 [[TMP1893]], [[TMP1892]]
// CHECK-NEXT:    [[TMP1895:%.*]] = select i1 [[TMP1894]], i32 [[TMP1892]], i32 [[TMP1893]]
// CHECK-NEXT:    store i32 [[TMP1895]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1896:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1897:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP1896]] monotonic, align 4
// CHECK-NEXT:    [[TMP1898:%.*]] = icmp slt i32 [[TMP1897]], [[TMP1896]]
// CHECK-NEXT:    [[TMP1899:%.*]] = select i1 [[TMP1898]], i32 [[TMP1896]], i32 [[TMP1897]]
// CHECK-NEXT:    store i32 [[TMP1899]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1900:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1901:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP1900]] monotonic, align 4
// CHECK-NEXT:    [[TMP1902:%.*]] = icmp sgt i32 [[TMP1901]], [[TMP1900]]
// CHECK-NEXT:    [[TMP1903:%.*]] = select i1 [[TMP1902]], i32 [[TMP1900]], i32 [[TMP1901]]
// CHECK-NEXT:    store i32 [[TMP1903]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1904:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1905:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1906:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1904]], i32 [[TMP1905]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP1907:%.*]] = extractvalue { i32, i1 } [[TMP1906]], 0
// CHECK-NEXT:    [[TMP1908:%.*]] = extractvalue { i32, i1 } [[TMP1906]], 1
// CHECK-NEXT:    [[TMP1909:%.*]] = select i1 [[TMP1908]], i32 [[TMP1904]], i32 [[TMP1907]]
// CHECK-NEXT:    store i32 [[TMP1909]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1910:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1911:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1912:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1910]], i32 [[TMP1911]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP1913:%.*]] = extractvalue { i32, i1 } [[TMP1912]], 0
// CHECK-NEXT:    [[TMP1914:%.*]] = extractvalue { i32, i1 } [[TMP1912]], 1
// CHECK-NEXT:    [[TMP1915:%.*]] = select i1 [[TMP1914]], i32 [[TMP1910]], i32 [[TMP1913]]
// CHECK-NEXT:    store i32 [[TMP1915]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP1916:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1917:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1918:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1916]], i32 [[TMP1917]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP1919:%.*]] = extractvalue { i32, i1 } [[TMP1918]], 0
// CHECK-NEXT:    [[TMP1920:%.*]] = extractvalue { i32, i1 } [[TMP1918]], 1
// CHECK-NEXT:    br i1 [[TMP1920]], label [[IX_ATOMIC_EXIT:%.*]], label [[IX_ATOMIC_CONT:%.*]]
// CHECK:       ix.atomic.cont:
// CHECK-NEXT:    store i32 [[TMP1919]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT]]
// CHECK:       ix.atomic.exit:
// CHECK-NEXT:    [[TMP1921:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1922:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1923:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1921]], i32 [[TMP1922]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP1924:%.*]] = extractvalue { i32, i1 } [[TMP1923]], 0
// CHECK-NEXT:    [[TMP1925:%.*]] = extractvalue { i32, i1 } [[TMP1923]], 1
// CHECK-NEXT:    br i1 [[TMP1925]], label [[IX_ATOMIC_EXIT242:%.*]], label [[IX_ATOMIC_CONT243:%.*]]
// CHECK:       ix.atomic.cont243:
// CHECK-NEXT:    store i32 [[TMP1924]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT242]]
// CHECK:       ix.atomic.exit242:
// CHECK-NEXT:    [[TMP1926:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1927:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1928:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1926]], i32 [[TMP1927]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP1929:%.*]] = extractvalue { i32, i1 } [[TMP1928]], 1
// CHECK-NEXT:    [[TMP1930:%.*]] = sext i1 [[TMP1929]] to i32
// CHECK-NEXT:    store i32 [[TMP1930]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP1931:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1932:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1933:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1931]], i32 [[TMP1932]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP1934:%.*]] = extractvalue { i32, i1 } [[TMP1933]], 1
// CHECK-NEXT:    [[TMP1935:%.*]] = sext i1 [[TMP1934]] to i32
// CHECK-NEXT:    store i32 [[TMP1935]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP1936:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1937:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1938:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1936]], i32 [[TMP1937]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP1939:%.*]] = extractvalue { i32, i1 } [[TMP1938]], 0
// CHECK-NEXT:    [[TMP1940:%.*]] = extractvalue { i32, i1 } [[TMP1938]], 1
// CHECK-NEXT:    br i1 [[TMP1940]], label [[IX_ATOMIC_EXIT244:%.*]], label [[IX_ATOMIC_CONT245:%.*]]
// CHECK:       ix.atomic.cont245:
// CHECK-NEXT:    store i32 [[TMP1939]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT244]]
// CHECK:       ix.atomic.exit244:
// CHECK-NEXT:    [[TMP1941:%.*]] = extractvalue { i32, i1 } [[TMP1938]], 1
// CHECK-NEXT:    [[TMP1942:%.*]] = sext i1 [[TMP1941]] to i32
// CHECK-NEXT:    store i32 [[TMP1942]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP1943:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1944:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1945:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1943]], i32 [[TMP1944]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP1946:%.*]] = extractvalue { i32, i1 } [[TMP1945]], 0
// CHECK-NEXT:    [[TMP1947:%.*]] = extractvalue { i32, i1 } [[TMP1945]], 1
// CHECK-NEXT:    br i1 [[TMP1947]], label [[IX_ATOMIC_EXIT246:%.*]], label [[IX_ATOMIC_CONT247:%.*]]
// CHECK:       ix.atomic.cont247:
// CHECK-NEXT:    store i32 [[TMP1946]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT246]]
// CHECK:       ix.atomic.exit246:
// CHECK-NEXT:    [[TMP1948:%.*]] = extractvalue { i32, i1 } [[TMP1945]], 1
// CHECK-NEXT:    [[TMP1949:%.*]] = sext i1 [[TMP1948]] to i32
// CHECK-NEXT:    store i32 [[TMP1949]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP1950:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1951:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP1950]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP1951]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1952:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1953:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP1952]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP1953]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1954:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1955:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP1954]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP1955]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1956:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1957:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP1956]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP1957]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1958:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1959:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1960:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1958]], i32 [[TMP1959]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP1961:%.*]] = extractvalue { i32, i1 } [[TMP1960]], 0
// CHECK-NEXT:    store i32 [[TMP1961]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1962:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1963:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1964:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1962]], i32 [[TMP1963]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP1965:%.*]] = extractvalue { i32, i1 } [[TMP1964]], 0
// CHECK-NEXT:    store i32 [[TMP1965]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1966:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1967:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP1966]] acq_rel, align 4
// CHECK-NEXT:    [[TMP1968:%.*]] = icmp sgt i32 [[TMP1967]], [[TMP1966]]
// CHECK-NEXT:    [[TMP1969:%.*]] = select i1 [[TMP1968]], i32 [[TMP1966]], i32 [[TMP1967]]
// CHECK-NEXT:    store i32 [[TMP1969]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1970:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1971:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP1970]] acq_rel, align 4
// CHECK-NEXT:    [[TMP1972:%.*]] = icmp slt i32 [[TMP1971]], [[TMP1970]]
// CHECK-NEXT:    [[TMP1973:%.*]] = select i1 [[TMP1972]], i32 [[TMP1970]], i32 [[TMP1971]]
// CHECK-NEXT:    store i32 [[TMP1973]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1974:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1975:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP1974]] acq_rel, align 4
// CHECK-NEXT:    [[TMP1976:%.*]] = icmp slt i32 [[TMP1975]], [[TMP1974]]
// CHECK-NEXT:    [[TMP1977:%.*]] = select i1 [[TMP1976]], i32 [[TMP1974]], i32 [[TMP1975]]
// CHECK-NEXT:    store i32 [[TMP1977]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1978:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1979:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP1978]] acq_rel, align 4
// CHECK-NEXT:    [[TMP1980:%.*]] = icmp sgt i32 [[TMP1979]], [[TMP1978]]
// CHECK-NEXT:    [[TMP1981:%.*]] = select i1 [[TMP1980]], i32 [[TMP1978]], i32 [[TMP1979]]
// CHECK-NEXT:    store i32 [[TMP1981]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1982:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1983:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1984:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1982]], i32 [[TMP1983]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP1985:%.*]] = extractvalue { i32, i1 } [[TMP1984]], 0
// CHECK-NEXT:    [[TMP1986:%.*]] = extractvalue { i32, i1 } [[TMP1984]], 1
// CHECK-NEXT:    [[TMP1987:%.*]] = select i1 [[TMP1986]], i32 [[TMP1982]], i32 [[TMP1985]]
// CHECK-NEXT:    store i32 [[TMP1987]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1988:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1989:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1990:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1988]], i32 [[TMP1989]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP1991:%.*]] = extractvalue { i32, i1 } [[TMP1990]], 0
// CHECK-NEXT:    [[TMP1992:%.*]] = extractvalue { i32, i1 } [[TMP1990]], 1
// CHECK-NEXT:    [[TMP1993:%.*]] = select i1 [[TMP1992]], i32 [[TMP1988]], i32 [[TMP1991]]
// CHECK-NEXT:    store i32 [[TMP1993]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1994:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1995:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP1996:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1994]], i32 [[TMP1995]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP1997:%.*]] = extractvalue { i32, i1 } [[TMP1996]], 0
// CHECK-NEXT:    [[TMP1998:%.*]] = extractvalue { i32, i1 } [[TMP1996]], 1
// CHECK-NEXT:    br i1 [[TMP1998]], label [[IX_ATOMIC_EXIT248:%.*]], label [[IX_ATOMIC_CONT249:%.*]]
// CHECK:       ix.atomic.cont249:
// CHECK-NEXT:    store i32 [[TMP1997]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT248]]
// CHECK:       ix.atomic.exit248:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1999:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2000:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2001:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP1999]], i32 [[TMP2000]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2002:%.*]] = extractvalue { i32, i1 } [[TMP2001]], 0
// CHECK-NEXT:    [[TMP2003:%.*]] = extractvalue { i32, i1 } [[TMP2001]], 1
// CHECK-NEXT:    br i1 [[TMP2003]], label [[IX_ATOMIC_EXIT250:%.*]], label [[IX_ATOMIC_CONT251:%.*]]
// CHECK:       ix.atomic.cont251:
// CHECK-NEXT:    store i32 [[TMP2002]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT250]]
// CHECK:       ix.atomic.exit250:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2004:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2005:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2006:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2004]], i32 [[TMP2005]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2007:%.*]] = extractvalue { i32, i1 } [[TMP2006]], 1
// CHECK-NEXT:    [[TMP2008:%.*]] = sext i1 [[TMP2007]] to i32
// CHECK-NEXT:    store i32 [[TMP2008]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2009:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2010:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2011:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2009]], i32 [[TMP2010]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2012:%.*]] = extractvalue { i32, i1 } [[TMP2011]], 1
// CHECK-NEXT:    [[TMP2013:%.*]] = sext i1 [[TMP2012]] to i32
// CHECK-NEXT:    store i32 [[TMP2013]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2014:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2015:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2016:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2014]], i32 [[TMP2015]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2017:%.*]] = extractvalue { i32, i1 } [[TMP2016]], 0
// CHECK-NEXT:    [[TMP2018:%.*]] = extractvalue { i32, i1 } [[TMP2016]], 1
// CHECK-NEXT:    br i1 [[TMP2018]], label [[IX_ATOMIC_EXIT252:%.*]], label [[IX_ATOMIC_CONT253:%.*]]
// CHECK:       ix.atomic.cont253:
// CHECK-NEXT:    store i32 [[TMP2017]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT252]]
// CHECK:       ix.atomic.exit252:
// CHECK-NEXT:    [[TMP2019:%.*]] = extractvalue { i32, i1 } [[TMP2016]], 1
// CHECK-NEXT:    [[TMP2020:%.*]] = sext i1 [[TMP2019]] to i32
// CHECK-NEXT:    store i32 [[TMP2020]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2021:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2022:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2023:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2021]], i32 [[TMP2022]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2024:%.*]] = extractvalue { i32, i1 } [[TMP2023]], 0
// CHECK-NEXT:    [[TMP2025:%.*]] = extractvalue { i32, i1 } [[TMP2023]], 1
// CHECK-NEXT:    br i1 [[TMP2025]], label [[IX_ATOMIC_EXIT254:%.*]], label [[IX_ATOMIC_CONT255:%.*]]
// CHECK:       ix.atomic.cont255:
// CHECK-NEXT:    store i32 [[TMP2024]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT254]]
// CHECK:       ix.atomic.exit254:
// CHECK-NEXT:    [[TMP2026:%.*]] = extractvalue { i32, i1 } [[TMP2023]], 1
// CHECK-NEXT:    [[TMP2027:%.*]] = sext i1 [[TMP2026]] to i32
// CHECK-NEXT:    store i32 [[TMP2027]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2028:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2029:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2028]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2029]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2030:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2031:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2030]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2031]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2032:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2033:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2032]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2033]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2034:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2035:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2034]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2035]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2036:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2037:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2038:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2036]], i32 [[TMP2037]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2039:%.*]] = extractvalue { i32, i1 } [[TMP2038]], 0
// CHECK-NEXT:    store i32 [[TMP2039]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2040:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2041:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2042:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2040]], i32 [[TMP2041]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2043:%.*]] = extractvalue { i32, i1 } [[TMP2042]], 0
// CHECK-NEXT:    store i32 [[TMP2043]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2044:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2045:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2044]] acquire, align 4
// CHECK-NEXT:    [[TMP2046:%.*]] = icmp sgt i32 [[TMP2045]], [[TMP2044]]
// CHECK-NEXT:    [[TMP2047:%.*]] = select i1 [[TMP2046]], i32 [[TMP2044]], i32 [[TMP2045]]
// CHECK-NEXT:    store i32 [[TMP2047]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2048:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2049:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2048]] acquire, align 4
// CHECK-NEXT:    [[TMP2050:%.*]] = icmp slt i32 [[TMP2049]], [[TMP2048]]
// CHECK-NEXT:    [[TMP2051:%.*]] = select i1 [[TMP2050]], i32 [[TMP2048]], i32 [[TMP2049]]
// CHECK-NEXT:    store i32 [[TMP2051]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2052:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2053:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2052]] acquire, align 4
// CHECK-NEXT:    [[TMP2054:%.*]] = icmp slt i32 [[TMP2053]], [[TMP2052]]
// CHECK-NEXT:    [[TMP2055:%.*]] = select i1 [[TMP2054]], i32 [[TMP2052]], i32 [[TMP2053]]
// CHECK-NEXT:    store i32 [[TMP2055]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2056:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2057:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2056]] acquire, align 4
// CHECK-NEXT:    [[TMP2058:%.*]] = icmp sgt i32 [[TMP2057]], [[TMP2056]]
// CHECK-NEXT:    [[TMP2059:%.*]] = select i1 [[TMP2058]], i32 [[TMP2056]], i32 [[TMP2057]]
// CHECK-NEXT:    store i32 [[TMP2059]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2060:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2061:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2062:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2060]], i32 [[TMP2061]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2063:%.*]] = extractvalue { i32, i1 } [[TMP2062]], 0
// CHECK-NEXT:    [[TMP2064:%.*]] = extractvalue { i32, i1 } [[TMP2062]], 1
// CHECK-NEXT:    [[TMP2065:%.*]] = select i1 [[TMP2064]], i32 [[TMP2060]], i32 [[TMP2063]]
// CHECK-NEXT:    store i32 [[TMP2065]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2066:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2067:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2068:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2066]], i32 [[TMP2067]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2069:%.*]] = extractvalue { i32, i1 } [[TMP2068]], 0
// CHECK-NEXT:    [[TMP2070:%.*]] = extractvalue { i32, i1 } [[TMP2068]], 1
// CHECK-NEXT:    [[TMP2071:%.*]] = select i1 [[TMP2070]], i32 [[TMP2066]], i32 [[TMP2069]]
// CHECK-NEXT:    store i32 [[TMP2071]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2072:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2073:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2074:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2072]], i32 [[TMP2073]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2075:%.*]] = extractvalue { i32, i1 } [[TMP2074]], 0
// CHECK-NEXT:    [[TMP2076:%.*]] = extractvalue { i32, i1 } [[TMP2074]], 1
// CHECK-NEXT:    br i1 [[TMP2076]], label [[IX_ATOMIC_EXIT256:%.*]], label [[IX_ATOMIC_CONT257:%.*]]
// CHECK:       ix.atomic.cont257:
// CHECK-NEXT:    store i32 [[TMP2075]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT256]]
// CHECK:       ix.atomic.exit256:
// CHECK-NEXT:    [[TMP2077:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2078:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2079:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2077]], i32 [[TMP2078]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2080:%.*]] = extractvalue { i32, i1 } [[TMP2079]], 0
// CHECK-NEXT:    [[TMP2081:%.*]] = extractvalue { i32, i1 } [[TMP2079]], 1
// CHECK-NEXT:    br i1 [[TMP2081]], label [[IX_ATOMIC_EXIT258:%.*]], label [[IX_ATOMIC_CONT259:%.*]]
// CHECK:       ix.atomic.cont259:
// CHECK-NEXT:    store i32 [[TMP2080]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT258]]
// CHECK:       ix.atomic.exit258:
// CHECK-NEXT:    [[TMP2082:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2083:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2084:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2082]], i32 [[TMP2083]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2085:%.*]] = extractvalue { i32, i1 } [[TMP2084]], 1
// CHECK-NEXT:    [[TMP2086:%.*]] = sext i1 [[TMP2085]] to i32
// CHECK-NEXT:    store i32 [[TMP2086]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2087:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2088:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2089:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2087]], i32 [[TMP2088]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2090:%.*]] = extractvalue { i32, i1 } [[TMP2089]], 1
// CHECK-NEXT:    [[TMP2091:%.*]] = sext i1 [[TMP2090]] to i32
// CHECK-NEXT:    store i32 [[TMP2091]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2092:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2093:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2094:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2092]], i32 [[TMP2093]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2095:%.*]] = extractvalue { i32, i1 } [[TMP2094]], 0
// CHECK-NEXT:    [[TMP2096:%.*]] = extractvalue { i32, i1 } [[TMP2094]], 1
// CHECK-NEXT:    br i1 [[TMP2096]], label [[IX_ATOMIC_EXIT260:%.*]], label [[IX_ATOMIC_CONT261:%.*]]
// CHECK:       ix.atomic.cont261:
// CHECK-NEXT:    store i32 [[TMP2095]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT260]]
// CHECK:       ix.atomic.exit260:
// CHECK-NEXT:    [[TMP2097:%.*]] = extractvalue { i32, i1 } [[TMP2094]], 1
// CHECK-NEXT:    [[TMP2098:%.*]] = sext i1 [[TMP2097]] to i32
// CHECK-NEXT:    store i32 [[TMP2098]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2099:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2100:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2101:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2099]], i32 [[TMP2100]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2102:%.*]] = extractvalue { i32, i1 } [[TMP2101]], 0
// CHECK-NEXT:    [[TMP2103:%.*]] = extractvalue { i32, i1 } [[TMP2101]], 1
// CHECK-NEXT:    br i1 [[TMP2103]], label [[IX_ATOMIC_EXIT262:%.*]], label [[IX_ATOMIC_CONT263:%.*]]
// CHECK:       ix.atomic.cont263:
// CHECK-NEXT:    store i32 [[TMP2102]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT262]]
// CHECK:       ix.atomic.exit262:
// CHECK-NEXT:    [[TMP2104:%.*]] = extractvalue { i32, i1 } [[TMP2101]], 1
// CHECK-NEXT:    [[TMP2105:%.*]] = sext i1 [[TMP2104]] to i32
// CHECK-NEXT:    store i32 [[TMP2105]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2106:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2107:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2106]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2107]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2108:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2109:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2108]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2109]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2110:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2111:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2110]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2111]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2112:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2113:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2112]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2113]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2114:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2115:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2116:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2114]], i32 [[TMP2115]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2117:%.*]] = extractvalue { i32, i1 } [[TMP2116]], 0
// CHECK-NEXT:    store i32 [[TMP2117]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2118:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2119:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2120:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2118]], i32 [[TMP2119]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2121:%.*]] = extractvalue { i32, i1 } [[TMP2120]], 0
// CHECK-NEXT:    store i32 [[TMP2121]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2122:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2123:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2122]] monotonic, align 4
// CHECK-NEXT:    [[TMP2124:%.*]] = icmp sgt i32 [[TMP2123]], [[TMP2122]]
// CHECK-NEXT:    [[TMP2125:%.*]] = select i1 [[TMP2124]], i32 [[TMP2122]], i32 [[TMP2123]]
// CHECK-NEXT:    store i32 [[TMP2125]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2126:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2127:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2126]] monotonic, align 4
// CHECK-NEXT:    [[TMP2128:%.*]] = icmp slt i32 [[TMP2127]], [[TMP2126]]
// CHECK-NEXT:    [[TMP2129:%.*]] = select i1 [[TMP2128]], i32 [[TMP2126]], i32 [[TMP2127]]
// CHECK-NEXT:    store i32 [[TMP2129]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2130:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2131:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2130]] monotonic, align 4
// CHECK-NEXT:    [[TMP2132:%.*]] = icmp slt i32 [[TMP2131]], [[TMP2130]]
// CHECK-NEXT:    [[TMP2133:%.*]] = select i1 [[TMP2132]], i32 [[TMP2130]], i32 [[TMP2131]]
// CHECK-NEXT:    store i32 [[TMP2133]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2134:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2135:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2134]] monotonic, align 4
// CHECK-NEXT:    [[TMP2136:%.*]] = icmp sgt i32 [[TMP2135]], [[TMP2134]]
// CHECK-NEXT:    [[TMP2137:%.*]] = select i1 [[TMP2136]], i32 [[TMP2134]], i32 [[TMP2135]]
// CHECK-NEXT:    store i32 [[TMP2137]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2138:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2139:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2140:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2138]], i32 [[TMP2139]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2141:%.*]] = extractvalue { i32, i1 } [[TMP2140]], 0
// CHECK-NEXT:    [[TMP2142:%.*]] = extractvalue { i32, i1 } [[TMP2140]], 1
// CHECK-NEXT:    [[TMP2143:%.*]] = select i1 [[TMP2142]], i32 [[TMP2138]], i32 [[TMP2141]]
// CHECK-NEXT:    store i32 [[TMP2143]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2144:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2145:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2146:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2144]], i32 [[TMP2145]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2147:%.*]] = extractvalue { i32, i1 } [[TMP2146]], 0
// CHECK-NEXT:    [[TMP2148:%.*]] = extractvalue { i32, i1 } [[TMP2146]], 1
// CHECK-NEXT:    [[TMP2149:%.*]] = select i1 [[TMP2148]], i32 [[TMP2144]], i32 [[TMP2147]]
// CHECK-NEXT:    store i32 [[TMP2149]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2150:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2151:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2152:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2150]], i32 [[TMP2151]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2153:%.*]] = extractvalue { i32, i1 } [[TMP2152]], 0
// CHECK-NEXT:    [[TMP2154:%.*]] = extractvalue { i32, i1 } [[TMP2152]], 1
// CHECK-NEXT:    br i1 [[TMP2154]], label [[IX_ATOMIC_EXIT264:%.*]], label [[IX_ATOMIC_CONT265:%.*]]
// CHECK:       ix.atomic.cont265:
// CHECK-NEXT:    store i32 [[TMP2153]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT264]]
// CHECK:       ix.atomic.exit264:
// CHECK-NEXT:    [[TMP2155:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2156:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2157:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2155]], i32 [[TMP2156]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2158:%.*]] = extractvalue { i32, i1 } [[TMP2157]], 0
// CHECK-NEXT:    [[TMP2159:%.*]] = extractvalue { i32, i1 } [[TMP2157]], 1
// CHECK-NEXT:    br i1 [[TMP2159]], label [[IX_ATOMIC_EXIT266:%.*]], label [[IX_ATOMIC_CONT267:%.*]]
// CHECK:       ix.atomic.cont267:
// CHECK-NEXT:    store i32 [[TMP2158]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT266]]
// CHECK:       ix.atomic.exit266:
// CHECK-NEXT:    [[TMP2160:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2161:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2162:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2160]], i32 [[TMP2161]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2163:%.*]] = extractvalue { i32, i1 } [[TMP2162]], 1
// CHECK-NEXT:    [[TMP2164:%.*]] = sext i1 [[TMP2163]] to i32
// CHECK-NEXT:    store i32 [[TMP2164]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2165:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2166:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2167:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2165]], i32 [[TMP2166]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2168:%.*]] = extractvalue { i32, i1 } [[TMP2167]], 1
// CHECK-NEXT:    [[TMP2169:%.*]] = sext i1 [[TMP2168]] to i32
// CHECK-NEXT:    store i32 [[TMP2169]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2170:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2171:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2172:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2170]], i32 [[TMP2171]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2173:%.*]] = extractvalue { i32, i1 } [[TMP2172]], 0
// CHECK-NEXT:    [[TMP2174:%.*]] = extractvalue { i32, i1 } [[TMP2172]], 1
// CHECK-NEXT:    br i1 [[TMP2174]], label [[IX_ATOMIC_EXIT268:%.*]], label [[IX_ATOMIC_CONT269:%.*]]
// CHECK:       ix.atomic.cont269:
// CHECK-NEXT:    store i32 [[TMP2173]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT268]]
// CHECK:       ix.atomic.exit268:
// CHECK-NEXT:    [[TMP2175:%.*]] = extractvalue { i32, i1 } [[TMP2172]], 1
// CHECK-NEXT:    [[TMP2176:%.*]] = sext i1 [[TMP2175]] to i32
// CHECK-NEXT:    store i32 [[TMP2176]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2177:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2178:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2179:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2177]], i32 [[TMP2178]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2180:%.*]] = extractvalue { i32, i1 } [[TMP2179]], 0
// CHECK-NEXT:    [[TMP2181:%.*]] = extractvalue { i32, i1 } [[TMP2179]], 1
// CHECK-NEXT:    br i1 [[TMP2181]], label [[IX_ATOMIC_EXIT270:%.*]], label [[IX_ATOMIC_CONT271:%.*]]
// CHECK:       ix.atomic.cont271:
// CHECK-NEXT:    store i32 [[TMP2180]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT270]]
// CHECK:       ix.atomic.exit270:
// CHECK-NEXT:    [[TMP2182:%.*]] = extractvalue { i32, i1 } [[TMP2179]], 1
// CHECK-NEXT:    [[TMP2183:%.*]] = sext i1 [[TMP2182]] to i32
// CHECK-NEXT:    store i32 [[TMP2183]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2184:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2185:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2184]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2185]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2186:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2187:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2186]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2187]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2188:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2189:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2188]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2189]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2190:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2191:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2190]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2191]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2192:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2193:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2194:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2192]], i32 [[TMP2193]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2195:%.*]] = extractvalue { i32, i1 } [[TMP2194]], 0
// CHECK-NEXT:    store i32 [[TMP2195]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2196:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2197:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2198:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2196]], i32 [[TMP2197]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2199:%.*]] = extractvalue { i32, i1 } [[TMP2198]], 0
// CHECK-NEXT:    store i32 [[TMP2199]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2200:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2201:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2200]] release, align 4
// CHECK-NEXT:    [[TMP2202:%.*]] = icmp sgt i32 [[TMP2201]], [[TMP2200]]
// CHECK-NEXT:    [[TMP2203:%.*]] = select i1 [[TMP2202]], i32 [[TMP2200]], i32 [[TMP2201]]
// CHECK-NEXT:    store i32 [[TMP2203]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2204:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2205:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2204]] release, align 4
// CHECK-NEXT:    [[TMP2206:%.*]] = icmp slt i32 [[TMP2205]], [[TMP2204]]
// CHECK-NEXT:    [[TMP2207:%.*]] = select i1 [[TMP2206]], i32 [[TMP2204]], i32 [[TMP2205]]
// CHECK-NEXT:    store i32 [[TMP2207]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2208:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2209:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2208]] release, align 4
// CHECK-NEXT:    [[TMP2210:%.*]] = icmp slt i32 [[TMP2209]], [[TMP2208]]
// CHECK-NEXT:    [[TMP2211:%.*]] = select i1 [[TMP2210]], i32 [[TMP2208]], i32 [[TMP2209]]
// CHECK-NEXT:    store i32 [[TMP2211]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2212:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2213:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2212]] release, align 4
// CHECK-NEXT:    [[TMP2214:%.*]] = icmp sgt i32 [[TMP2213]], [[TMP2212]]
// CHECK-NEXT:    [[TMP2215:%.*]] = select i1 [[TMP2214]], i32 [[TMP2212]], i32 [[TMP2213]]
// CHECK-NEXT:    store i32 [[TMP2215]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2216:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2217:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2218:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2216]], i32 [[TMP2217]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2219:%.*]] = extractvalue { i32, i1 } [[TMP2218]], 0
// CHECK-NEXT:    [[TMP2220:%.*]] = extractvalue { i32, i1 } [[TMP2218]], 1
// CHECK-NEXT:    [[TMP2221:%.*]] = select i1 [[TMP2220]], i32 [[TMP2216]], i32 [[TMP2219]]
// CHECK-NEXT:    store i32 [[TMP2221]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2222:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2223:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2224:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2222]], i32 [[TMP2223]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2225:%.*]] = extractvalue { i32, i1 } [[TMP2224]], 0
// CHECK-NEXT:    [[TMP2226:%.*]] = extractvalue { i32, i1 } [[TMP2224]], 1
// CHECK-NEXT:    [[TMP2227:%.*]] = select i1 [[TMP2226]], i32 [[TMP2222]], i32 [[TMP2225]]
// CHECK-NEXT:    store i32 [[TMP2227]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2228:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2229:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2230:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2228]], i32 [[TMP2229]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2231:%.*]] = extractvalue { i32, i1 } [[TMP2230]], 0
// CHECK-NEXT:    [[TMP2232:%.*]] = extractvalue { i32, i1 } [[TMP2230]], 1
// CHECK-NEXT:    br i1 [[TMP2232]], label [[IX_ATOMIC_EXIT272:%.*]], label [[IX_ATOMIC_CONT273:%.*]]
// CHECK:       ix.atomic.cont273:
// CHECK-NEXT:    store i32 [[TMP2231]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT272]]
// CHECK:       ix.atomic.exit272:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2233:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2234:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2235:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2233]], i32 [[TMP2234]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2236:%.*]] = extractvalue { i32, i1 } [[TMP2235]], 0
// CHECK-NEXT:    [[TMP2237:%.*]] = extractvalue { i32, i1 } [[TMP2235]], 1
// CHECK-NEXT:    br i1 [[TMP2237]], label [[IX_ATOMIC_EXIT274:%.*]], label [[IX_ATOMIC_CONT275:%.*]]
// CHECK:       ix.atomic.cont275:
// CHECK-NEXT:    store i32 [[TMP2236]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT274]]
// CHECK:       ix.atomic.exit274:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2238:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2239:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2240:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2238]], i32 [[TMP2239]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2241:%.*]] = extractvalue { i32, i1 } [[TMP2240]], 1
// CHECK-NEXT:    [[TMP2242:%.*]] = sext i1 [[TMP2241]] to i32
// CHECK-NEXT:    store i32 [[TMP2242]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2243:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2244:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2245:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2243]], i32 [[TMP2244]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2246:%.*]] = extractvalue { i32, i1 } [[TMP2245]], 1
// CHECK-NEXT:    [[TMP2247:%.*]] = sext i1 [[TMP2246]] to i32
// CHECK-NEXT:    store i32 [[TMP2247]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2248:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2249:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2250:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2248]], i32 [[TMP2249]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2251:%.*]] = extractvalue { i32, i1 } [[TMP2250]], 0
// CHECK-NEXT:    [[TMP2252:%.*]] = extractvalue { i32, i1 } [[TMP2250]], 1
// CHECK-NEXT:    br i1 [[TMP2252]], label [[IX_ATOMIC_EXIT276:%.*]], label [[IX_ATOMIC_CONT277:%.*]]
// CHECK:       ix.atomic.cont277:
// CHECK-NEXT:    store i32 [[TMP2251]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT276]]
// CHECK:       ix.atomic.exit276:
// CHECK-NEXT:    [[TMP2253:%.*]] = extractvalue { i32, i1 } [[TMP2250]], 1
// CHECK-NEXT:    [[TMP2254:%.*]] = sext i1 [[TMP2253]] to i32
// CHECK-NEXT:    store i32 [[TMP2254]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2255:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2256:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2257:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2255]], i32 [[TMP2256]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2258:%.*]] = extractvalue { i32, i1 } [[TMP2257]], 0
// CHECK-NEXT:    [[TMP2259:%.*]] = extractvalue { i32, i1 } [[TMP2257]], 1
// CHECK-NEXT:    br i1 [[TMP2259]], label [[IX_ATOMIC_EXIT278:%.*]], label [[IX_ATOMIC_CONT279:%.*]]
// CHECK:       ix.atomic.cont279:
// CHECK-NEXT:    store i32 [[TMP2258]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT278]]
// CHECK:       ix.atomic.exit278:
// CHECK-NEXT:    [[TMP2260:%.*]] = extractvalue { i32, i1 } [[TMP2257]], 1
// CHECK-NEXT:    [[TMP2261:%.*]] = sext i1 [[TMP2260]] to i32
// CHECK-NEXT:    store i32 [[TMP2261]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2262:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2263:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2262]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2263]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2264:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2265:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2264]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2265]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2266:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2267:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2266]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2267]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2268:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2269:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2268]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2269]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2270:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2271:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2272:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2270]], i32 [[TMP2271]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2273:%.*]] = extractvalue { i32, i1 } [[TMP2272]], 0
// CHECK-NEXT:    store i32 [[TMP2273]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2274:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2275:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2276:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2274]], i32 [[TMP2275]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2277:%.*]] = extractvalue { i32, i1 } [[TMP2276]], 0
// CHECK-NEXT:    store i32 [[TMP2277]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2278:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2279:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2278]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2280:%.*]] = icmp sgt i32 [[TMP2279]], [[TMP2278]]
// CHECK-NEXT:    [[TMP2281:%.*]] = select i1 [[TMP2280]], i32 [[TMP2278]], i32 [[TMP2279]]
// CHECK-NEXT:    store i32 [[TMP2281]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2282:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2283:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2282]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2284:%.*]] = icmp slt i32 [[TMP2283]], [[TMP2282]]
// CHECK-NEXT:    [[TMP2285:%.*]] = select i1 [[TMP2284]], i32 [[TMP2282]], i32 [[TMP2283]]
// CHECK-NEXT:    store i32 [[TMP2285]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2286:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2287:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2286]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2288:%.*]] = icmp slt i32 [[TMP2287]], [[TMP2286]]
// CHECK-NEXT:    [[TMP2289:%.*]] = select i1 [[TMP2288]], i32 [[TMP2286]], i32 [[TMP2287]]
// CHECK-NEXT:    store i32 [[TMP2289]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2290:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2291:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2290]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2292:%.*]] = icmp sgt i32 [[TMP2291]], [[TMP2290]]
// CHECK-NEXT:    [[TMP2293:%.*]] = select i1 [[TMP2292]], i32 [[TMP2290]], i32 [[TMP2291]]
// CHECK-NEXT:    store i32 [[TMP2293]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2294:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2295:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2296:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2294]], i32 [[TMP2295]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2297:%.*]] = extractvalue { i32, i1 } [[TMP2296]], 0
// CHECK-NEXT:    [[TMP2298:%.*]] = extractvalue { i32, i1 } [[TMP2296]], 1
// CHECK-NEXT:    [[TMP2299:%.*]] = select i1 [[TMP2298]], i32 [[TMP2294]], i32 [[TMP2297]]
// CHECK-NEXT:    store i32 [[TMP2299]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2300:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2301:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2302:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2300]], i32 [[TMP2301]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2303:%.*]] = extractvalue { i32, i1 } [[TMP2302]], 0
// CHECK-NEXT:    [[TMP2304:%.*]] = extractvalue { i32, i1 } [[TMP2302]], 1
// CHECK-NEXT:    [[TMP2305:%.*]] = select i1 [[TMP2304]], i32 [[TMP2300]], i32 [[TMP2303]]
// CHECK-NEXT:    store i32 [[TMP2305]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2306:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2307:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2308:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2306]], i32 [[TMP2307]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2309:%.*]] = extractvalue { i32, i1 } [[TMP2308]], 0
// CHECK-NEXT:    [[TMP2310:%.*]] = extractvalue { i32, i1 } [[TMP2308]], 1
// CHECK-NEXT:    br i1 [[TMP2310]], label [[IX_ATOMIC_EXIT280:%.*]], label [[IX_ATOMIC_CONT281:%.*]]
// CHECK:       ix.atomic.cont281:
// CHECK-NEXT:    store i32 [[TMP2309]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT280]]
// CHECK:       ix.atomic.exit280:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2311:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2312:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2313:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2311]], i32 [[TMP2312]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2314:%.*]] = extractvalue { i32, i1 } [[TMP2313]], 0
// CHECK-NEXT:    [[TMP2315:%.*]] = extractvalue { i32, i1 } [[TMP2313]], 1
// CHECK-NEXT:    br i1 [[TMP2315]], label [[IX_ATOMIC_EXIT282:%.*]], label [[IX_ATOMIC_CONT283:%.*]]
// CHECK:       ix.atomic.cont283:
// CHECK-NEXT:    store i32 [[TMP2314]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT282]]
// CHECK:       ix.atomic.exit282:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2316:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2317:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2318:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2316]], i32 [[TMP2317]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2319:%.*]] = extractvalue { i32, i1 } [[TMP2318]], 1
// CHECK-NEXT:    [[TMP2320:%.*]] = sext i1 [[TMP2319]] to i32
// CHECK-NEXT:    store i32 [[TMP2320]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2321:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2322:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2323:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2321]], i32 [[TMP2322]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2324:%.*]] = extractvalue { i32, i1 } [[TMP2323]], 1
// CHECK-NEXT:    [[TMP2325:%.*]] = sext i1 [[TMP2324]] to i32
// CHECK-NEXT:    store i32 [[TMP2325]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2326:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2327:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2328:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2326]], i32 [[TMP2327]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2329:%.*]] = extractvalue { i32, i1 } [[TMP2328]], 0
// CHECK-NEXT:    [[TMP2330:%.*]] = extractvalue { i32, i1 } [[TMP2328]], 1
// CHECK-NEXT:    br i1 [[TMP2330]], label [[IX_ATOMIC_EXIT284:%.*]], label [[IX_ATOMIC_CONT285:%.*]]
// CHECK:       ix.atomic.cont285:
// CHECK-NEXT:    store i32 [[TMP2329]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT284]]
// CHECK:       ix.atomic.exit284:
// CHECK-NEXT:    [[TMP2331:%.*]] = extractvalue { i32, i1 } [[TMP2328]], 1
// CHECK-NEXT:    [[TMP2332:%.*]] = sext i1 [[TMP2331]] to i32
// CHECK-NEXT:    store i32 [[TMP2332]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2333:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2334:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2335:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2333]], i32 [[TMP2334]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2336:%.*]] = extractvalue { i32, i1 } [[TMP2335]], 0
// CHECK-NEXT:    [[TMP2337:%.*]] = extractvalue { i32, i1 } [[TMP2335]], 1
// CHECK-NEXT:    br i1 [[TMP2337]], label [[IX_ATOMIC_EXIT286:%.*]], label [[IX_ATOMIC_CONT287:%.*]]
// CHECK:       ix.atomic.cont287:
// CHECK-NEXT:    store i32 [[TMP2336]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT286]]
// CHECK:       ix.atomic.exit286:
// CHECK-NEXT:    [[TMP2338:%.*]] = extractvalue { i32, i1 } [[TMP2335]], 1
// CHECK-NEXT:    [[TMP2339:%.*]] = sext i1 [[TMP2338]] to i32
// CHECK-NEXT:    store i32 [[TMP2339]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2340:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2341:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2340]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2341]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2342:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2343:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2342]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2343]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2344:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2345:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2344]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2345]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2346:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2347:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2346]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2347]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2348:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2349:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2350:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2348]], i32 [[TMP2349]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2351:%.*]] = extractvalue { i32, i1 } [[TMP2350]], 0
// CHECK-NEXT:    store i32 [[TMP2351]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2352:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2353:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2354:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2352]], i32 [[TMP2353]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2355:%.*]] = extractvalue { i32, i1 } [[TMP2354]], 0
// CHECK-NEXT:    store i32 [[TMP2355]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2356:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2357:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2356]] monotonic, align 4
// CHECK-NEXT:    [[TMP2358:%.*]] = icmp ugt i32 [[TMP2357]], [[TMP2356]]
// CHECK-NEXT:    [[TMP2359:%.*]] = select i1 [[TMP2358]], i32 [[TMP2356]], i32 [[TMP2357]]
// CHECK-NEXT:    store i32 [[TMP2359]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2360:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2361:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2360]] monotonic, align 4
// CHECK-NEXT:    [[TMP2362:%.*]] = icmp ult i32 [[TMP2361]], [[TMP2360]]
// CHECK-NEXT:    [[TMP2363:%.*]] = select i1 [[TMP2362]], i32 [[TMP2360]], i32 [[TMP2361]]
// CHECK-NEXT:    store i32 [[TMP2363]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2364:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2365:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2364]] monotonic, align 4
// CHECK-NEXT:    [[TMP2366:%.*]] = icmp ult i32 [[TMP2365]], [[TMP2364]]
// CHECK-NEXT:    [[TMP2367:%.*]] = select i1 [[TMP2366]], i32 [[TMP2364]], i32 [[TMP2365]]
// CHECK-NEXT:    store i32 [[TMP2367]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2368:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2369:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2368]] monotonic, align 4
// CHECK-NEXT:    [[TMP2370:%.*]] = icmp ugt i32 [[TMP2369]], [[TMP2368]]
// CHECK-NEXT:    [[TMP2371:%.*]] = select i1 [[TMP2370]], i32 [[TMP2368]], i32 [[TMP2369]]
// CHECK-NEXT:    store i32 [[TMP2371]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2372:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2373:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2374:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2372]], i32 [[TMP2373]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2375:%.*]] = extractvalue { i32, i1 } [[TMP2374]], 0
// CHECK-NEXT:    [[TMP2376:%.*]] = extractvalue { i32, i1 } [[TMP2374]], 1
// CHECK-NEXT:    [[TMP2377:%.*]] = select i1 [[TMP2376]], i32 [[TMP2372]], i32 [[TMP2375]]
// CHECK-NEXT:    store i32 [[TMP2377]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2378:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2379:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2380:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2378]], i32 [[TMP2379]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2381:%.*]] = extractvalue { i32, i1 } [[TMP2380]], 0
// CHECK-NEXT:    [[TMP2382:%.*]] = extractvalue { i32, i1 } [[TMP2380]], 1
// CHECK-NEXT:    [[TMP2383:%.*]] = select i1 [[TMP2382]], i32 [[TMP2378]], i32 [[TMP2381]]
// CHECK-NEXT:    store i32 [[TMP2383]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2384:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2385:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2386:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2384]], i32 [[TMP2385]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2387:%.*]] = extractvalue { i32, i1 } [[TMP2386]], 0
// CHECK-NEXT:    [[TMP2388:%.*]] = extractvalue { i32, i1 } [[TMP2386]], 1
// CHECK-NEXT:    br i1 [[TMP2388]], label [[UIX_ATOMIC_EXIT:%.*]], label [[UIX_ATOMIC_CONT:%.*]]
// CHECK:       uix.atomic.cont:
// CHECK-NEXT:    store i32 [[TMP2387]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT]]
// CHECK:       uix.atomic.exit:
// CHECK-NEXT:    [[TMP2389:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2390:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2391:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2389]], i32 [[TMP2390]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2392:%.*]] = extractvalue { i32, i1 } [[TMP2391]], 0
// CHECK-NEXT:    [[TMP2393:%.*]] = extractvalue { i32, i1 } [[TMP2391]], 1
// CHECK-NEXT:    br i1 [[TMP2393]], label [[UIX_ATOMIC_EXIT288:%.*]], label [[UIX_ATOMIC_CONT289:%.*]]
// CHECK:       uix.atomic.cont289:
// CHECK-NEXT:    store i32 [[TMP2392]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT288]]
// CHECK:       uix.atomic.exit288:
// CHECK-NEXT:    [[TMP2394:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2395:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2396:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2394]], i32 [[TMP2395]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2397:%.*]] = extractvalue { i32, i1 } [[TMP2396]], 1
// CHECK-NEXT:    [[TMP2398:%.*]] = zext i1 [[TMP2397]] to i32
// CHECK-NEXT:    store i32 [[TMP2398]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2399:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2400:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2401:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2399]], i32 [[TMP2400]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2402:%.*]] = extractvalue { i32, i1 } [[TMP2401]], 1
// CHECK-NEXT:    [[TMP2403:%.*]] = zext i1 [[TMP2402]] to i32
// CHECK-NEXT:    store i32 [[TMP2403]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2404:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2405:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2406:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2404]], i32 [[TMP2405]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2407:%.*]] = extractvalue { i32, i1 } [[TMP2406]], 0
// CHECK-NEXT:    [[TMP2408:%.*]] = extractvalue { i32, i1 } [[TMP2406]], 1
// CHECK-NEXT:    br i1 [[TMP2408]], label [[UIX_ATOMIC_EXIT290:%.*]], label [[UIX_ATOMIC_CONT291:%.*]]
// CHECK:       uix.atomic.cont291:
// CHECK-NEXT:    store i32 [[TMP2407]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT290]]
// CHECK:       uix.atomic.exit290:
// CHECK-NEXT:    [[TMP2409:%.*]] = extractvalue { i32, i1 } [[TMP2406]], 1
// CHECK-NEXT:    [[TMP2410:%.*]] = zext i1 [[TMP2409]] to i32
// CHECK-NEXT:    store i32 [[TMP2410]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2411:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2412:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2413:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2411]], i32 [[TMP2412]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2414:%.*]] = extractvalue { i32, i1 } [[TMP2413]], 0
// CHECK-NEXT:    [[TMP2415:%.*]] = extractvalue { i32, i1 } [[TMP2413]], 1
// CHECK-NEXT:    br i1 [[TMP2415]], label [[UIX_ATOMIC_EXIT292:%.*]], label [[UIX_ATOMIC_CONT293:%.*]]
// CHECK:       uix.atomic.cont293:
// CHECK-NEXT:    store i32 [[TMP2414]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT292]]
// CHECK:       uix.atomic.exit292:
// CHECK-NEXT:    [[TMP2416:%.*]] = extractvalue { i32, i1 } [[TMP2413]], 1
// CHECK-NEXT:    [[TMP2417:%.*]] = zext i1 [[TMP2416]] to i32
// CHECK-NEXT:    store i32 [[TMP2417]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2418:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2419:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2418]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2419]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2420:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2421:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2420]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2421]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2422:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2423:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2422]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2423]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2424:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2425:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2424]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2425]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2426:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2427:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2428:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2426]], i32 [[TMP2427]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2429:%.*]] = extractvalue { i32, i1 } [[TMP2428]], 0
// CHECK-NEXT:    store i32 [[TMP2429]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2430:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2431:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2432:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2430]], i32 [[TMP2431]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2433:%.*]] = extractvalue { i32, i1 } [[TMP2432]], 0
// CHECK-NEXT:    store i32 [[TMP2433]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2434:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2435:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2434]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2436:%.*]] = icmp ugt i32 [[TMP2435]], [[TMP2434]]
// CHECK-NEXT:    [[TMP2437:%.*]] = select i1 [[TMP2436]], i32 [[TMP2434]], i32 [[TMP2435]]
// CHECK-NEXT:    store i32 [[TMP2437]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2438:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2439:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2438]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2440:%.*]] = icmp ult i32 [[TMP2439]], [[TMP2438]]
// CHECK-NEXT:    [[TMP2441:%.*]] = select i1 [[TMP2440]], i32 [[TMP2438]], i32 [[TMP2439]]
// CHECK-NEXT:    store i32 [[TMP2441]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2442:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2443:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2442]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2444:%.*]] = icmp ult i32 [[TMP2443]], [[TMP2442]]
// CHECK-NEXT:    [[TMP2445:%.*]] = select i1 [[TMP2444]], i32 [[TMP2442]], i32 [[TMP2443]]
// CHECK-NEXT:    store i32 [[TMP2445]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2446:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2447:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2446]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2448:%.*]] = icmp ugt i32 [[TMP2447]], [[TMP2446]]
// CHECK-NEXT:    [[TMP2449:%.*]] = select i1 [[TMP2448]], i32 [[TMP2446]], i32 [[TMP2447]]
// CHECK-NEXT:    store i32 [[TMP2449]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2450:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2451:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2452:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2450]], i32 [[TMP2451]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2453:%.*]] = extractvalue { i32, i1 } [[TMP2452]], 0
// CHECK-NEXT:    [[TMP2454:%.*]] = extractvalue { i32, i1 } [[TMP2452]], 1
// CHECK-NEXT:    [[TMP2455:%.*]] = select i1 [[TMP2454]], i32 [[TMP2450]], i32 [[TMP2453]]
// CHECK-NEXT:    store i32 [[TMP2455]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2456:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2457:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2458:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2456]], i32 [[TMP2457]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2459:%.*]] = extractvalue { i32, i1 } [[TMP2458]], 0
// CHECK-NEXT:    [[TMP2460:%.*]] = extractvalue { i32, i1 } [[TMP2458]], 1
// CHECK-NEXT:    [[TMP2461:%.*]] = select i1 [[TMP2460]], i32 [[TMP2456]], i32 [[TMP2459]]
// CHECK-NEXT:    store i32 [[TMP2461]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2462:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2463:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2464:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2462]], i32 [[TMP2463]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2465:%.*]] = extractvalue { i32, i1 } [[TMP2464]], 0
// CHECK-NEXT:    [[TMP2466:%.*]] = extractvalue { i32, i1 } [[TMP2464]], 1
// CHECK-NEXT:    br i1 [[TMP2466]], label [[UIX_ATOMIC_EXIT294:%.*]], label [[UIX_ATOMIC_CONT295:%.*]]
// CHECK:       uix.atomic.cont295:
// CHECK-NEXT:    store i32 [[TMP2465]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT294]]
// CHECK:       uix.atomic.exit294:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2467:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2468:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2469:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2467]], i32 [[TMP2468]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2470:%.*]] = extractvalue { i32, i1 } [[TMP2469]], 0
// CHECK-NEXT:    [[TMP2471:%.*]] = extractvalue { i32, i1 } [[TMP2469]], 1
// CHECK-NEXT:    br i1 [[TMP2471]], label [[UIX_ATOMIC_EXIT296:%.*]], label [[UIX_ATOMIC_CONT297:%.*]]
// CHECK:       uix.atomic.cont297:
// CHECK-NEXT:    store i32 [[TMP2470]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT296]]
// CHECK:       uix.atomic.exit296:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2472:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2473:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2474:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2472]], i32 [[TMP2473]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2475:%.*]] = extractvalue { i32, i1 } [[TMP2474]], 1
// CHECK-NEXT:    [[TMP2476:%.*]] = zext i1 [[TMP2475]] to i32
// CHECK-NEXT:    store i32 [[TMP2476]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2477:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2478:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2479:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2477]], i32 [[TMP2478]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2480:%.*]] = extractvalue { i32, i1 } [[TMP2479]], 1
// CHECK-NEXT:    [[TMP2481:%.*]] = zext i1 [[TMP2480]] to i32
// CHECK-NEXT:    store i32 [[TMP2481]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2482:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2483:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2484:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2482]], i32 [[TMP2483]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2485:%.*]] = extractvalue { i32, i1 } [[TMP2484]], 0
// CHECK-NEXT:    [[TMP2486:%.*]] = extractvalue { i32, i1 } [[TMP2484]], 1
// CHECK-NEXT:    br i1 [[TMP2486]], label [[UIX_ATOMIC_EXIT298:%.*]], label [[UIX_ATOMIC_CONT299:%.*]]
// CHECK:       uix.atomic.cont299:
// CHECK-NEXT:    store i32 [[TMP2485]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT298]]
// CHECK:       uix.atomic.exit298:
// CHECK-NEXT:    [[TMP2487:%.*]] = extractvalue { i32, i1 } [[TMP2484]], 1
// CHECK-NEXT:    [[TMP2488:%.*]] = zext i1 [[TMP2487]] to i32
// CHECK-NEXT:    store i32 [[TMP2488]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2489:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2490:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2491:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2489]], i32 [[TMP2490]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2492:%.*]] = extractvalue { i32, i1 } [[TMP2491]], 0
// CHECK-NEXT:    [[TMP2493:%.*]] = extractvalue { i32, i1 } [[TMP2491]], 1
// CHECK-NEXT:    br i1 [[TMP2493]], label [[UIX_ATOMIC_EXIT300:%.*]], label [[UIX_ATOMIC_CONT301:%.*]]
// CHECK:       uix.atomic.cont301:
// CHECK-NEXT:    store i32 [[TMP2492]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT300]]
// CHECK:       uix.atomic.exit300:
// CHECK-NEXT:    [[TMP2494:%.*]] = extractvalue { i32, i1 } [[TMP2491]], 1
// CHECK-NEXT:    [[TMP2495:%.*]] = zext i1 [[TMP2494]] to i32
// CHECK-NEXT:    store i32 [[TMP2495]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2496:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2497:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2496]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2497]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2498:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2499:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2498]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2499]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2500:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2501:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2500]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2501]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2502:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2503:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2502]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2503]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2504:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2505:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2506:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2504]], i32 [[TMP2505]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2507:%.*]] = extractvalue { i32, i1 } [[TMP2506]], 0
// CHECK-NEXT:    store i32 [[TMP2507]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2508:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2509:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2510:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2508]], i32 [[TMP2509]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2511:%.*]] = extractvalue { i32, i1 } [[TMP2510]], 0
// CHECK-NEXT:    store i32 [[TMP2511]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2512:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2513:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2512]] acquire, align 4
// CHECK-NEXT:    [[TMP2514:%.*]] = icmp ugt i32 [[TMP2513]], [[TMP2512]]
// CHECK-NEXT:    [[TMP2515:%.*]] = select i1 [[TMP2514]], i32 [[TMP2512]], i32 [[TMP2513]]
// CHECK-NEXT:    store i32 [[TMP2515]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2516:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2517:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2516]] acquire, align 4
// CHECK-NEXT:    [[TMP2518:%.*]] = icmp ult i32 [[TMP2517]], [[TMP2516]]
// CHECK-NEXT:    [[TMP2519:%.*]] = select i1 [[TMP2518]], i32 [[TMP2516]], i32 [[TMP2517]]
// CHECK-NEXT:    store i32 [[TMP2519]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2520:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2521:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2520]] acquire, align 4
// CHECK-NEXT:    [[TMP2522:%.*]] = icmp ult i32 [[TMP2521]], [[TMP2520]]
// CHECK-NEXT:    [[TMP2523:%.*]] = select i1 [[TMP2522]], i32 [[TMP2520]], i32 [[TMP2521]]
// CHECK-NEXT:    store i32 [[TMP2523]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2524:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2525:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2524]] acquire, align 4
// CHECK-NEXT:    [[TMP2526:%.*]] = icmp ugt i32 [[TMP2525]], [[TMP2524]]
// CHECK-NEXT:    [[TMP2527:%.*]] = select i1 [[TMP2526]], i32 [[TMP2524]], i32 [[TMP2525]]
// CHECK-NEXT:    store i32 [[TMP2527]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2528:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2529:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2530:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2528]], i32 [[TMP2529]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2531:%.*]] = extractvalue { i32, i1 } [[TMP2530]], 0
// CHECK-NEXT:    [[TMP2532:%.*]] = extractvalue { i32, i1 } [[TMP2530]], 1
// CHECK-NEXT:    [[TMP2533:%.*]] = select i1 [[TMP2532]], i32 [[TMP2528]], i32 [[TMP2531]]
// CHECK-NEXT:    store i32 [[TMP2533]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2534:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2535:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2536:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2534]], i32 [[TMP2535]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2537:%.*]] = extractvalue { i32, i1 } [[TMP2536]], 0
// CHECK-NEXT:    [[TMP2538:%.*]] = extractvalue { i32, i1 } [[TMP2536]], 1
// CHECK-NEXT:    [[TMP2539:%.*]] = select i1 [[TMP2538]], i32 [[TMP2534]], i32 [[TMP2537]]
// CHECK-NEXT:    store i32 [[TMP2539]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2540:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2541:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2542:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2540]], i32 [[TMP2541]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2543:%.*]] = extractvalue { i32, i1 } [[TMP2542]], 0
// CHECK-NEXT:    [[TMP2544:%.*]] = extractvalue { i32, i1 } [[TMP2542]], 1
// CHECK-NEXT:    br i1 [[TMP2544]], label [[UIX_ATOMIC_EXIT302:%.*]], label [[UIX_ATOMIC_CONT303:%.*]]
// CHECK:       uix.atomic.cont303:
// CHECK-NEXT:    store i32 [[TMP2543]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT302]]
// CHECK:       uix.atomic.exit302:
// CHECK-NEXT:    [[TMP2545:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2546:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2547:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2545]], i32 [[TMP2546]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2548:%.*]] = extractvalue { i32, i1 } [[TMP2547]], 0
// CHECK-NEXT:    [[TMP2549:%.*]] = extractvalue { i32, i1 } [[TMP2547]], 1
// CHECK-NEXT:    br i1 [[TMP2549]], label [[UIX_ATOMIC_EXIT304:%.*]], label [[UIX_ATOMIC_CONT305:%.*]]
// CHECK:       uix.atomic.cont305:
// CHECK-NEXT:    store i32 [[TMP2548]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT304]]
// CHECK:       uix.atomic.exit304:
// CHECK-NEXT:    [[TMP2550:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2551:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2552:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2550]], i32 [[TMP2551]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2553:%.*]] = extractvalue { i32, i1 } [[TMP2552]], 1
// CHECK-NEXT:    [[TMP2554:%.*]] = zext i1 [[TMP2553]] to i32
// CHECK-NEXT:    store i32 [[TMP2554]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2555:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2556:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2557:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2555]], i32 [[TMP2556]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2558:%.*]] = extractvalue { i32, i1 } [[TMP2557]], 1
// CHECK-NEXT:    [[TMP2559:%.*]] = zext i1 [[TMP2558]] to i32
// CHECK-NEXT:    store i32 [[TMP2559]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2560:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2561:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2562:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2560]], i32 [[TMP2561]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2563:%.*]] = extractvalue { i32, i1 } [[TMP2562]], 0
// CHECK-NEXT:    [[TMP2564:%.*]] = extractvalue { i32, i1 } [[TMP2562]], 1
// CHECK-NEXT:    br i1 [[TMP2564]], label [[UIX_ATOMIC_EXIT306:%.*]], label [[UIX_ATOMIC_CONT307:%.*]]
// CHECK:       uix.atomic.cont307:
// CHECK-NEXT:    store i32 [[TMP2563]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT306]]
// CHECK:       uix.atomic.exit306:
// CHECK-NEXT:    [[TMP2565:%.*]] = extractvalue { i32, i1 } [[TMP2562]], 1
// CHECK-NEXT:    [[TMP2566:%.*]] = zext i1 [[TMP2565]] to i32
// CHECK-NEXT:    store i32 [[TMP2566]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2567:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2568:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2569:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2567]], i32 [[TMP2568]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2570:%.*]] = extractvalue { i32, i1 } [[TMP2569]], 0
// CHECK-NEXT:    [[TMP2571:%.*]] = extractvalue { i32, i1 } [[TMP2569]], 1
// CHECK-NEXT:    br i1 [[TMP2571]], label [[UIX_ATOMIC_EXIT308:%.*]], label [[UIX_ATOMIC_CONT309:%.*]]
// CHECK:       uix.atomic.cont309:
// CHECK-NEXT:    store i32 [[TMP2570]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT308]]
// CHECK:       uix.atomic.exit308:
// CHECK-NEXT:    [[TMP2572:%.*]] = extractvalue { i32, i1 } [[TMP2569]], 1
// CHECK-NEXT:    [[TMP2573:%.*]] = zext i1 [[TMP2572]] to i32
// CHECK-NEXT:    store i32 [[TMP2573]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2574:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2575:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2574]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2575]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2576:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2577:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2576]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2577]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2578:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2579:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2578]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2579]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2580:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2581:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2580]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2581]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2582:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2583:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2584:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2582]], i32 [[TMP2583]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2585:%.*]] = extractvalue { i32, i1 } [[TMP2584]], 0
// CHECK-NEXT:    store i32 [[TMP2585]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2586:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2587:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2588:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2586]], i32 [[TMP2587]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2589:%.*]] = extractvalue { i32, i1 } [[TMP2588]], 0
// CHECK-NEXT:    store i32 [[TMP2589]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2590:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2591:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2590]] monotonic, align 4
// CHECK-NEXT:    [[TMP2592:%.*]] = icmp ugt i32 [[TMP2591]], [[TMP2590]]
// CHECK-NEXT:    [[TMP2593:%.*]] = select i1 [[TMP2592]], i32 [[TMP2590]], i32 [[TMP2591]]
// CHECK-NEXT:    store i32 [[TMP2593]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2594:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2595:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2594]] monotonic, align 4
// CHECK-NEXT:    [[TMP2596:%.*]] = icmp ult i32 [[TMP2595]], [[TMP2594]]
// CHECK-NEXT:    [[TMP2597:%.*]] = select i1 [[TMP2596]], i32 [[TMP2594]], i32 [[TMP2595]]
// CHECK-NEXT:    store i32 [[TMP2597]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2598:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2599:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2598]] monotonic, align 4
// CHECK-NEXT:    [[TMP2600:%.*]] = icmp ult i32 [[TMP2599]], [[TMP2598]]
// CHECK-NEXT:    [[TMP2601:%.*]] = select i1 [[TMP2600]], i32 [[TMP2598]], i32 [[TMP2599]]
// CHECK-NEXT:    store i32 [[TMP2601]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2602:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2603:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2602]] monotonic, align 4
// CHECK-NEXT:    [[TMP2604:%.*]] = icmp ugt i32 [[TMP2603]], [[TMP2602]]
// CHECK-NEXT:    [[TMP2605:%.*]] = select i1 [[TMP2604]], i32 [[TMP2602]], i32 [[TMP2603]]
// CHECK-NEXT:    store i32 [[TMP2605]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2606:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2607:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2608:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2606]], i32 [[TMP2607]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2609:%.*]] = extractvalue { i32, i1 } [[TMP2608]], 0
// CHECK-NEXT:    [[TMP2610:%.*]] = extractvalue { i32, i1 } [[TMP2608]], 1
// CHECK-NEXT:    [[TMP2611:%.*]] = select i1 [[TMP2610]], i32 [[TMP2606]], i32 [[TMP2609]]
// CHECK-NEXT:    store i32 [[TMP2611]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2612:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2613:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2614:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2612]], i32 [[TMP2613]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2615:%.*]] = extractvalue { i32, i1 } [[TMP2614]], 0
// CHECK-NEXT:    [[TMP2616:%.*]] = extractvalue { i32, i1 } [[TMP2614]], 1
// CHECK-NEXT:    [[TMP2617:%.*]] = select i1 [[TMP2616]], i32 [[TMP2612]], i32 [[TMP2615]]
// CHECK-NEXT:    store i32 [[TMP2617]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2618:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2619:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2620:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2618]], i32 [[TMP2619]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2621:%.*]] = extractvalue { i32, i1 } [[TMP2620]], 0
// CHECK-NEXT:    [[TMP2622:%.*]] = extractvalue { i32, i1 } [[TMP2620]], 1
// CHECK-NEXT:    br i1 [[TMP2622]], label [[UIX_ATOMIC_EXIT310:%.*]], label [[UIX_ATOMIC_CONT311:%.*]]
// CHECK:       uix.atomic.cont311:
// CHECK-NEXT:    store i32 [[TMP2621]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT310]]
// CHECK:       uix.atomic.exit310:
// CHECK-NEXT:    [[TMP2623:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2624:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2625:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2623]], i32 [[TMP2624]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2626:%.*]] = extractvalue { i32, i1 } [[TMP2625]], 0
// CHECK-NEXT:    [[TMP2627:%.*]] = extractvalue { i32, i1 } [[TMP2625]], 1
// CHECK-NEXT:    br i1 [[TMP2627]], label [[UIX_ATOMIC_EXIT312:%.*]], label [[UIX_ATOMIC_CONT313:%.*]]
// CHECK:       uix.atomic.cont313:
// CHECK-NEXT:    store i32 [[TMP2626]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT312]]
// CHECK:       uix.atomic.exit312:
// CHECK-NEXT:    [[TMP2628:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2629:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2630:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2628]], i32 [[TMP2629]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2631:%.*]] = extractvalue { i32, i1 } [[TMP2630]], 1
// CHECK-NEXT:    [[TMP2632:%.*]] = zext i1 [[TMP2631]] to i32
// CHECK-NEXT:    store i32 [[TMP2632]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2633:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2634:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2635:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2633]], i32 [[TMP2634]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2636:%.*]] = extractvalue { i32, i1 } [[TMP2635]], 1
// CHECK-NEXT:    [[TMP2637:%.*]] = zext i1 [[TMP2636]] to i32
// CHECK-NEXT:    store i32 [[TMP2637]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2638:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2639:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2640:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2638]], i32 [[TMP2639]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2641:%.*]] = extractvalue { i32, i1 } [[TMP2640]], 0
// CHECK-NEXT:    [[TMP2642:%.*]] = extractvalue { i32, i1 } [[TMP2640]], 1
// CHECK-NEXT:    br i1 [[TMP2642]], label [[UIX_ATOMIC_EXIT314:%.*]], label [[UIX_ATOMIC_CONT315:%.*]]
// CHECK:       uix.atomic.cont315:
// CHECK-NEXT:    store i32 [[TMP2641]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT314]]
// CHECK:       uix.atomic.exit314:
// CHECK-NEXT:    [[TMP2643:%.*]] = extractvalue { i32, i1 } [[TMP2640]], 1
// CHECK-NEXT:    [[TMP2644:%.*]] = zext i1 [[TMP2643]] to i32
// CHECK-NEXT:    store i32 [[TMP2644]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2645:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2646:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2647:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2645]], i32 [[TMP2646]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2648:%.*]] = extractvalue { i32, i1 } [[TMP2647]], 0
// CHECK-NEXT:    [[TMP2649:%.*]] = extractvalue { i32, i1 } [[TMP2647]], 1
// CHECK-NEXT:    br i1 [[TMP2649]], label [[UIX_ATOMIC_EXIT316:%.*]], label [[UIX_ATOMIC_CONT317:%.*]]
// CHECK:       uix.atomic.cont317:
// CHECK-NEXT:    store i32 [[TMP2648]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT316]]
// CHECK:       uix.atomic.exit316:
// CHECK-NEXT:    [[TMP2650:%.*]] = extractvalue { i32, i1 } [[TMP2647]], 1
// CHECK-NEXT:    [[TMP2651:%.*]] = zext i1 [[TMP2650]] to i32
// CHECK-NEXT:    store i32 [[TMP2651]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2652:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2653:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2652]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2653]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2654:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2655:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2654]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2655]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2656:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2657:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2656]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2657]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2658:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2659:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2658]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2659]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2660:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2661:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2662:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2660]], i32 [[TMP2661]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2663:%.*]] = extractvalue { i32, i1 } [[TMP2662]], 0
// CHECK-NEXT:    store i32 [[TMP2663]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2664:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2665:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2666:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2664]], i32 [[TMP2665]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2667:%.*]] = extractvalue { i32, i1 } [[TMP2666]], 0
// CHECK-NEXT:    store i32 [[TMP2667]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2668:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2669:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2668]] release, align 4
// CHECK-NEXT:    [[TMP2670:%.*]] = icmp ugt i32 [[TMP2669]], [[TMP2668]]
// CHECK-NEXT:    [[TMP2671:%.*]] = select i1 [[TMP2670]], i32 [[TMP2668]], i32 [[TMP2669]]
// CHECK-NEXT:    store i32 [[TMP2671]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2672:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2673:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2672]] release, align 4
// CHECK-NEXT:    [[TMP2674:%.*]] = icmp ult i32 [[TMP2673]], [[TMP2672]]
// CHECK-NEXT:    [[TMP2675:%.*]] = select i1 [[TMP2674]], i32 [[TMP2672]], i32 [[TMP2673]]
// CHECK-NEXT:    store i32 [[TMP2675]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2676:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2677:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2676]] release, align 4
// CHECK-NEXT:    [[TMP2678:%.*]] = icmp ult i32 [[TMP2677]], [[TMP2676]]
// CHECK-NEXT:    [[TMP2679:%.*]] = select i1 [[TMP2678]], i32 [[TMP2676]], i32 [[TMP2677]]
// CHECK-NEXT:    store i32 [[TMP2679]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2680:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2681:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2680]] release, align 4
// CHECK-NEXT:    [[TMP2682:%.*]] = icmp ugt i32 [[TMP2681]], [[TMP2680]]
// CHECK-NEXT:    [[TMP2683:%.*]] = select i1 [[TMP2682]], i32 [[TMP2680]], i32 [[TMP2681]]
// CHECK-NEXT:    store i32 [[TMP2683]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2684:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2685:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2686:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2684]], i32 [[TMP2685]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2687:%.*]] = extractvalue { i32, i1 } [[TMP2686]], 0
// CHECK-NEXT:    [[TMP2688:%.*]] = extractvalue { i32, i1 } [[TMP2686]], 1
// CHECK-NEXT:    [[TMP2689:%.*]] = select i1 [[TMP2688]], i32 [[TMP2684]], i32 [[TMP2687]]
// CHECK-NEXT:    store i32 [[TMP2689]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2690:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2691:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2692:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2690]], i32 [[TMP2691]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2693:%.*]] = extractvalue { i32, i1 } [[TMP2692]], 0
// CHECK-NEXT:    [[TMP2694:%.*]] = extractvalue { i32, i1 } [[TMP2692]], 1
// CHECK-NEXT:    [[TMP2695:%.*]] = select i1 [[TMP2694]], i32 [[TMP2690]], i32 [[TMP2693]]
// CHECK-NEXT:    store i32 [[TMP2695]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2696:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2697:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2698:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2696]], i32 [[TMP2697]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2699:%.*]] = extractvalue { i32, i1 } [[TMP2698]], 0
// CHECK-NEXT:    [[TMP2700:%.*]] = extractvalue { i32, i1 } [[TMP2698]], 1
// CHECK-NEXT:    br i1 [[TMP2700]], label [[UIX_ATOMIC_EXIT318:%.*]], label [[UIX_ATOMIC_CONT319:%.*]]
// CHECK:       uix.atomic.cont319:
// CHECK-NEXT:    store i32 [[TMP2699]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT318]]
// CHECK:       uix.atomic.exit318:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2701:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2702:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2703:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2701]], i32 [[TMP2702]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2704:%.*]] = extractvalue { i32, i1 } [[TMP2703]], 0
// CHECK-NEXT:    [[TMP2705:%.*]] = extractvalue { i32, i1 } [[TMP2703]], 1
// CHECK-NEXT:    br i1 [[TMP2705]], label [[UIX_ATOMIC_EXIT320:%.*]], label [[UIX_ATOMIC_CONT321:%.*]]
// CHECK:       uix.atomic.cont321:
// CHECK-NEXT:    store i32 [[TMP2704]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT320]]
// CHECK:       uix.atomic.exit320:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2706:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2707:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2708:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2706]], i32 [[TMP2707]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2709:%.*]] = extractvalue { i32, i1 } [[TMP2708]], 1
// CHECK-NEXT:    [[TMP2710:%.*]] = zext i1 [[TMP2709]] to i32
// CHECK-NEXT:    store i32 [[TMP2710]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2711:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2712:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2713:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2711]], i32 [[TMP2712]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2714:%.*]] = extractvalue { i32, i1 } [[TMP2713]], 1
// CHECK-NEXT:    [[TMP2715:%.*]] = zext i1 [[TMP2714]] to i32
// CHECK-NEXT:    store i32 [[TMP2715]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2716:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2717:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2718:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2716]], i32 [[TMP2717]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2719:%.*]] = extractvalue { i32, i1 } [[TMP2718]], 0
// CHECK-NEXT:    [[TMP2720:%.*]] = extractvalue { i32, i1 } [[TMP2718]], 1
// CHECK-NEXT:    br i1 [[TMP2720]], label [[UIX_ATOMIC_EXIT322:%.*]], label [[UIX_ATOMIC_CONT323:%.*]]
// CHECK:       uix.atomic.cont323:
// CHECK-NEXT:    store i32 [[TMP2719]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT322]]
// CHECK:       uix.atomic.exit322:
// CHECK-NEXT:    [[TMP2721:%.*]] = extractvalue { i32, i1 } [[TMP2718]], 1
// CHECK-NEXT:    [[TMP2722:%.*]] = zext i1 [[TMP2721]] to i32
// CHECK-NEXT:    store i32 [[TMP2722]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2723:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2724:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2725:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2723]], i32 [[TMP2724]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2726:%.*]] = extractvalue { i32, i1 } [[TMP2725]], 0
// CHECK-NEXT:    [[TMP2727:%.*]] = extractvalue { i32, i1 } [[TMP2725]], 1
// CHECK-NEXT:    br i1 [[TMP2727]], label [[UIX_ATOMIC_EXIT324:%.*]], label [[UIX_ATOMIC_CONT325:%.*]]
// CHECK:       uix.atomic.cont325:
// CHECK-NEXT:    store i32 [[TMP2726]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT324]]
// CHECK:       uix.atomic.exit324:
// CHECK-NEXT:    [[TMP2728:%.*]] = extractvalue { i32, i1 } [[TMP2725]], 1
// CHECK-NEXT:    [[TMP2729:%.*]] = zext i1 [[TMP2728]] to i32
// CHECK-NEXT:    store i32 [[TMP2729]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2730:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2731:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2730]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2731]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2732:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2733:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2732]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2733]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2734:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2735:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2734]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2735]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2736:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2737:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2736]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2737]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2738:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2739:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2740:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2738]], i32 [[TMP2739]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2741:%.*]] = extractvalue { i32, i1 } [[TMP2740]], 0
// CHECK-NEXT:    store i32 [[TMP2741]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2742:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2743:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2744:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2742]], i32 [[TMP2743]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2745:%.*]] = extractvalue { i32, i1 } [[TMP2744]], 0
// CHECK-NEXT:    store i32 [[TMP2745]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2746:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2747:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2746]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2748:%.*]] = icmp ugt i32 [[TMP2747]], [[TMP2746]]
// CHECK-NEXT:    [[TMP2749:%.*]] = select i1 [[TMP2748]], i32 [[TMP2746]], i32 [[TMP2747]]
// CHECK-NEXT:    store i32 [[TMP2749]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2750:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2751:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2750]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2752:%.*]] = icmp ult i32 [[TMP2751]], [[TMP2750]]
// CHECK-NEXT:    [[TMP2753:%.*]] = select i1 [[TMP2752]], i32 [[TMP2750]], i32 [[TMP2751]]
// CHECK-NEXT:    store i32 [[TMP2753]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2754:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2755:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2754]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2756:%.*]] = icmp ult i32 [[TMP2755]], [[TMP2754]]
// CHECK-NEXT:    [[TMP2757:%.*]] = select i1 [[TMP2756]], i32 [[TMP2754]], i32 [[TMP2755]]
// CHECK-NEXT:    store i32 [[TMP2757]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2758:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2759:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2758]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2760:%.*]] = icmp ugt i32 [[TMP2759]], [[TMP2758]]
// CHECK-NEXT:    [[TMP2761:%.*]] = select i1 [[TMP2760]], i32 [[TMP2758]], i32 [[TMP2759]]
// CHECK-NEXT:    store i32 [[TMP2761]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2762:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2763:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2764:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2762]], i32 [[TMP2763]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2765:%.*]] = extractvalue { i32, i1 } [[TMP2764]], 0
// CHECK-NEXT:    [[TMP2766:%.*]] = extractvalue { i32, i1 } [[TMP2764]], 1
// CHECK-NEXT:    [[TMP2767:%.*]] = select i1 [[TMP2766]], i32 [[TMP2762]], i32 [[TMP2765]]
// CHECK-NEXT:    store i32 [[TMP2767]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2768:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2769:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2770:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2768]], i32 [[TMP2769]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2771:%.*]] = extractvalue { i32, i1 } [[TMP2770]], 0
// CHECK-NEXT:    [[TMP2772:%.*]] = extractvalue { i32, i1 } [[TMP2770]], 1
// CHECK-NEXT:    [[TMP2773:%.*]] = select i1 [[TMP2772]], i32 [[TMP2768]], i32 [[TMP2771]]
// CHECK-NEXT:    store i32 [[TMP2773]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2774:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2775:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2776:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2774]], i32 [[TMP2775]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2777:%.*]] = extractvalue { i32, i1 } [[TMP2776]], 0
// CHECK-NEXT:    [[TMP2778:%.*]] = extractvalue { i32, i1 } [[TMP2776]], 1
// CHECK-NEXT:    br i1 [[TMP2778]], label [[UIX_ATOMIC_EXIT326:%.*]], label [[UIX_ATOMIC_CONT327:%.*]]
// CHECK:       uix.atomic.cont327:
// CHECK-NEXT:    store i32 [[TMP2777]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT326]]
// CHECK:       uix.atomic.exit326:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2779:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2780:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2781:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2779]], i32 [[TMP2780]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2782:%.*]] = extractvalue { i32, i1 } [[TMP2781]], 0
// CHECK-NEXT:    [[TMP2783:%.*]] = extractvalue { i32, i1 } [[TMP2781]], 1
// CHECK-NEXT:    br i1 [[TMP2783]], label [[UIX_ATOMIC_EXIT328:%.*]], label [[UIX_ATOMIC_CONT329:%.*]]
// CHECK:       uix.atomic.cont329:
// CHECK-NEXT:    store i32 [[TMP2782]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT328]]
// CHECK:       uix.atomic.exit328:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2784:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2785:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2786:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2784]], i32 [[TMP2785]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2787:%.*]] = extractvalue { i32, i1 } [[TMP2786]], 1
// CHECK-NEXT:    [[TMP2788:%.*]] = zext i1 [[TMP2787]] to i32
// CHECK-NEXT:    store i32 [[TMP2788]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2789:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2790:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2791:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2789]], i32 [[TMP2790]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2792:%.*]] = extractvalue { i32, i1 } [[TMP2791]], 1
// CHECK-NEXT:    [[TMP2793:%.*]] = zext i1 [[TMP2792]] to i32
// CHECK-NEXT:    store i32 [[TMP2793]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2794:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2795:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2796:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2794]], i32 [[TMP2795]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2797:%.*]] = extractvalue { i32, i1 } [[TMP2796]], 0
// CHECK-NEXT:    [[TMP2798:%.*]] = extractvalue { i32, i1 } [[TMP2796]], 1
// CHECK-NEXT:    br i1 [[TMP2798]], label [[UIX_ATOMIC_EXIT330:%.*]], label [[UIX_ATOMIC_CONT331:%.*]]
// CHECK:       uix.atomic.cont331:
// CHECK-NEXT:    store i32 [[TMP2797]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT330]]
// CHECK:       uix.atomic.exit330:
// CHECK-NEXT:    [[TMP2799:%.*]] = extractvalue { i32, i1 } [[TMP2796]], 1
// CHECK-NEXT:    [[TMP2800:%.*]] = zext i1 [[TMP2799]] to i32
// CHECK-NEXT:    store i32 [[TMP2800]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2801:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2802:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2803:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2801]], i32 [[TMP2802]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2804:%.*]] = extractvalue { i32, i1 } [[TMP2803]], 0
// CHECK-NEXT:    [[TMP2805:%.*]] = extractvalue { i32, i1 } [[TMP2803]], 1
// CHECK-NEXT:    br i1 [[TMP2805]], label [[UIX_ATOMIC_EXIT332:%.*]], label [[UIX_ATOMIC_CONT333:%.*]]
// CHECK:       uix.atomic.cont333:
// CHECK-NEXT:    store i32 [[TMP2804]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT332]]
// CHECK:       uix.atomic.exit332:
// CHECK-NEXT:    [[TMP2806:%.*]] = extractvalue { i32, i1 } [[TMP2803]], 1
// CHECK-NEXT:    [[TMP2807:%.*]] = zext i1 [[TMP2806]] to i32
// CHECK-NEXT:    store i32 [[TMP2807]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2808:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2809:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2808]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP2809]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2810:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2811:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2810]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP2811]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2812:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2813:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2812]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP2813]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2814:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2815:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2814]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP2815]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2816:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2817:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2818:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2816]], i64 [[TMP2817]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2819:%.*]] = extractvalue { i64, i1 } [[TMP2818]], 0
// CHECK-NEXT:    store i64 [[TMP2819]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2820:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2821:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2822:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2820]], i64 [[TMP2821]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2823:%.*]] = extractvalue { i64, i1 } [[TMP2822]], 0
// CHECK-NEXT:    store i64 [[TMP2823]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2824:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2825:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2824]] monotonic, align 8
// CHECK-NEXT:    [[TMP2826:%.*]] = icmp sgt i64 [[TMP2825]], [[TMP2824]]
// CHECK-NEXT:    [[TMP2827:%.*]] = select i1 [[TMP2826]], i64 [[TMP2824]], i64 [[TMP2825]]
// CHECK-NEXT:    store i64 [[TMP2827]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2828:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2829:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2828]] monotonic, align 8
// CHECK-NEXT:    [[TMP2830:%.*]] = icmp slt i64 [[TMP2829]], [[TMP2828]]
// CHECK-NEXT:    [[TMP2831:%.*]] = select i1 [[TMP2830]], i64 [[TMP2828]], i64 [[TMP2829]]
// CHECK-NEXT:    store i64 [[TMP2831]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2832:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2833:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2832]] monotonic, align 8
// CHECK-NEXT:    [[TMP2834:%.*]] = icmp slt i64 [[TMP2833]], [[TMP2832]]
// CHECK-NEXT:    [[TMP2835:%.*]] = select i1 [[TMP2834]], i64 [[TMP2832]], i64 [[TMP2833]]
// CHECK-NEXT:    store i64 [[TMP2835]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2836:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2837:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2836]] monotonic, align 8
// CHECK-NEXT:    [[TMP2838:%.*]] = icmp sgt i64 [[TMP2837]], [[TMP2836]]
// CHECK-NEXT:    [[TMP2839:%.*]] = select i1 [[TMP2838]], i64 [[TMP2836]], i64 [[TMP2837]]
// CHECK-NEXT:    store i64 [[TMP2839]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2840:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2841:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2842:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2840]], i64 [[TMP2841]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2843:%.*]] = extractvalue { i64, i1 } [[TMP2842]], 0
// CHECK-NEXT:    [[TMP2844:%.*]] = extractvalue { i64, i1 } [[TMP2842]], 1
// CHECK-NEXT:    [[TMP2845:%.*]] = select i1 [[TMP2844]], i64 [[TMP2840]], i64 [[TMP2843]]
// CHECK-NEXT:    store i64 [[TMP2845]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2846:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2847:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2848:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2846]], i64 [[TMP2847]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2849:%.*]] = extractvalue { i64, i1 } [[TMP2848]], 0
// CHECK-NEXT:    [[TMP2850:%.*]] = extractvalue { i64, i1 } [[TMP2848]], 1
// CHECK-NEXT:    [[TMP2851:%.*]] = select i1 [[TMP2850]], i64 [[TMP2846]], i64 [[TMP2849]]
// CHECK-NEXT:    store i64 [[TMP2851]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2852:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2853:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2854:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2852]], i64 [[TMP2853]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2855:%.*]] = extractvalue { i64, i1 } [[TMP2854]], 0
// CHECK-NEXT:    [[TMP2856:%.*]] = extractvalue { i64, i1 } [[TMP2854]], 1
// CHECK-NEXT:    br i1 [[TMP2856]], label [[LX_ATOMIC_EXIT:%.*]], label [[LX_ATOMIC_CONT:%.*]]
// CHECK:       lx.atomic.cont:
// CHECK-NEXT:    store i64 [[TMP2855]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT]]
// CHECK:       lx.atomic.exit:
// CHECK-NEXT:    [[TMP2857:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2858:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2859:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2857]], i64 [[TMP2858]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2860:%.*]] = extractvalue { i64, i1 } [[TMP2859]], 0
// CHECK-NEXT:    [[TMP2861:%.*]] = extractvalue { i64, i1 } [[TMP2859]], 1
// CHECK-NEXT:    br i1 [[TMP2861]], label [[LX_ATOMIC_EXIT334:%.*]], label [[LX_ATOMIC_CONT335:%.*]]
// CHECK:       lx.atomic.cont335:
// CHECK-NEXT:    store i64 [[TMP2860]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT334]]
// CHECK:       lx.atomic.exit334:
// CHECK-NEXT:    [[TMP2862:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2863:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2864:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2862]], i64 [[TMP2863]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2865:%.*]] = extractvalue { i64, i1 } [[TMP2864]], 1
// CHECK-NEXT:    [[TMP2866:%.*]] = sext i1 [[TMP2865]] to i64
// CHECK-NEXT:    store i64 [[TMP2866]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP2867:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2868:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2869:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2867]], i64 [[TMP2868]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2870:%.*]] = extractvalue { i64, i1 } [[TMP2869]], 1
// CHECK-NEXT:    [[TMP2871:%.*]] = sext i1 [[TMP2870]] to i64
// CHECK-NEXT:    store i64 [[TMP2871]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP2872:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2873:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2874:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2872]], i64 [[TMP2873]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2875:%.*]] = extractvalue { i64, i1 } [[TMP2874]], 0
// CHECK-NEXT:    [[TMP2876:%.*]] = extractvalue { i64, i1 } [[TMP2874]], 1
// CHECK-NEXT:    br i1 [[TMP2876]], label [[LX_ATOMIC_EXIT336:%.*]], label [[LX_ATOMIC_CONT337:%.*]]
// CHECK:       lx.atomic.cont337:
// CHECK-NEXT:    store i64 [[TMP2875]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT336]]
// CHECK:       lx.atomic.exit336:
// CHECK-NEXT:    [[TMP2877:%.*]] = extractvalue { i64, i1 } [[TMP2874]], 1
// CHECK-NEXT:    [[TMP2878:%.*]] = sext i1 [[TMP2877]] to i64
// CHECK-NEXT:    store i64 [[TMP2878]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP2879:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2880:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2881:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2879]], i64 [[TMP2880]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2882:%.*]] = extractvalue { i64, i1 } [[TMP2881]], 0
// CHECK-NEXT:    [[TMP2883:%.*]] = extractvalue { i64, i1 } [[TMP2881]], 1
// CHECK-NEXT:    br i1 [[TMP2883]], label [[LX_ATOMIC_EXIT338:%.*]], label [[LX_ATOMIC_CONT339:%.*]]
// CHECK:       lx.atomic.cont339:
// CHECK-NEXT:    store i64 [[TMP2882]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT338]]
// CHECK:       lx.atomic.exit338:
// CHECK-NEXT:    [[TMP2884:%.*]] = extractvalue { i64, i1 } [[TMP2881]], 1
// CHECK-NEXT:    [[TMP2885:%.*]] = sext i1 [[TMP2884]] to i64
// CHECK-NEXT:    store i64 [[TMP2885]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP2886:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2887:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2886]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP2887]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2888:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2889:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2888]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP2889]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2890:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2891:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2890]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP2891]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2892:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2893:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2892]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP2893]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2894:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2895:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2896:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2894]], i64 [[TMP2895]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP2897:%.*]] = extractvalue { i64, i1 } [[TMP2896]], 0
// CHECK-NEXT:    store i64 [[TMP2897]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2898:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2899:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2900:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2898]], i64 [[TMP2899]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP2901:%.*]] = extractvalue { i64, i1 } [[TMP2900]], 0
// CHECK-NEXT:    store i64 [[TMP2901]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2902:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2903:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2902]] acq_rel, align 8
// CHECK-NEXT:    [[TMP2904:%.*]] = icmp sgt i64 [[TMP2903]], [[TMP2902]]
// CHECK-NEXT:    [[TMP2905:%.*]] = select i1 [[TMP2904]], i64 [[TMP2902]], i64 [[TMP2903]]
// CHECK-NEXT:    store i64 [[TMP2905]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2906:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2907:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2906]] acq_rel, align 8
// CHECK-NEXT:    [[TMP2908:%.*]] = icmp slt i64 [[TMP2907]], [[TMP2906]]
// CHECK-NEXT:    [[TMP2909:%.*]] = select i1 [[TMP2908]], i64 [[TMP2906]], i64 [[TMP2907]]
// CHECK-NEXT:    store i64 [[TMP2909]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2910:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2911:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2910]] acq_rel, align 8
// CHECK-NEXT:    [[TMP2912:%.*]] = icmp slt i64 [[TMP2911]], [[TMP2910]]
// CHECK-NEXT:    [[TMP2913:%.*]] = select i1 [[TMP2912]], i64 [[TMP2910]], i64 [[TMP2911]]
// CHECK-NEXT:    store i64 [[TMP2913]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2914:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2915:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2914]] acq_rel, align 8
// CHECK-NEXT:    [[TMP2916:%.*]] = icmp sgt i64 [[TMP2915]], [[TMP2914]]
// CHECK-NEXT:    [[TMP2917:%.*]] = select i1 [[TMP2916]], i64 [[TMP2914]], i64 [[TMP2915]]
// CHECK-NEXT:    store i64 [[TMP2917]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2918:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2919:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2920:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2918]], i64 [[TMP2919]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP2921:%.*]] = extractvalue { i64, i1 } [[TMP2920]], 0
// CHECK-NEXT:    [[TMP2922:%.*]] = extractvalue { i64, i1 } [[TMP2920]], 1
// CHECK-NEXT:    [[TMP2923:%.*]] = select i1 [[TMP2922]], i64 [[TMP2918]], i64 [[TMP2921]]
// CHECK-NEXT:    store i64 [[TMP2923]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2924:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2925:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2926:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2924]], i64 [[TMP2925]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP2927:%.*]] = extractvalue { i64, i1 } [[TMP2926]], 0
// CHECK-NEXT:    [[TMP2928:%.*]] = extractvalue { i64, i1 } [[TMP2926]], 1
// CHECK-NEXT:    [[TMP2929:%.*]] = select i1 [[TMP2928]], i64 [[TMP2924]], i64 [[TMP2927]]
// CHECK-NEXT:    store i64 [[TMP2929]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2930:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2931:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2932:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2930]], i64 [[TMP2931]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP2933:%.*]] = extractvalue { i64, i1 } [[TMP2932]], 0
// CHECK-NEXT:    [[TMP2934:%.*]] = extractvalue { i64, i1 } [[TMP2932]], 1
// CHECK-NEXT:    br i1 [[TMP2934]], label [[LX_ATOMIC_EXIT340:%.*]], label [[LX_ATOMIC_CONT341:%.*]]
// CHECK:       lx.atomic.cont341:
// CHECK-NEXT:    store i64 [[TMP2933]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT340]]
// CHECK:       lx.atomic.exit340:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2935:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2936:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2937:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2935]], i64 [[TMP2936]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP2938:%.*]] = extractvalue { i64, i1 } [[TMP2937]], 0
// CHECK-NEXT:    [[TMP2939:%.*]] = extractvalue { i64, i1 } [[TMP2937]], 1
// CHECK-NEXT:    br i1 [[TMP2939]], label [[LX_ATOMIC_EXIT342:%.*]], label [[LX_ATOMIC_CONT343:%.*]]
// CHECK:       lx.atomic.cont343:
// CHECK-NEXT:    store i64 [[TMP2938]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT342]]
// CHECK:       lx.atomic.exit342:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2940:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2941:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2942:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2940]], i64 [[TMP2941]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP2943:%.*]] = extractvalue { i64, i1 } [[TMP2942]], 1
// CHECK-NEXT:    [[TMP2944:%.*]] = sext i1 [[TMP2943]] to i64
// CHECK-NEXT:    store i64 [[TMP2944]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2945:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2946:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2947:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2945]], i64 [[TMP2946]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP2948:%.*]] = extractvalue { i64, i1 } [[TMP2947]], 1
// CHECK-NEXT:    [[TMP2949:%.*]] = sext i1 [[TMP2948]] to i64
// CHECK-NEXT:    store i64 [[TMP2949]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2950:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2951:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2952:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2950]], i64 [[TMP2951]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP2953:%.*]] = extractvalue { i64, i1 } [[TMP2952]], 0
// CHECK-NEXT:    [[TMP2954:%.*]] = extractvalue { i64, i1 } [[TMP2952]], 1
// CHECK-NEXT:    br i1 [[TMP2954]], label [[LX_ATOMIC_EXIT344:%.*]], label [[LX_ATOMIC_CONT345:%.*]]
// CHECK:       lx.atomic.cont345:
// CHECK-NEXT:    store i64 [[TMP2953]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT344]]
// CHECK:       lx.atomic.exit344:
// CHECK-NEXT:    [[TMP2955:%.*]] = extractvalue { i64, i1 } [[TMP2952]], 1
// CHECK-NEXT:    [[TMP2956:%.*]] = sext i1 [[TMP2955]] to i64
// CHECK-NEXT:    store i64 [[TMP2956]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2957:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2958:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2959:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2957]], i64 [[TMP2958]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP2960:%.*]] = extractvalue { i64, i1 } [[TMP2959]], 0
// CHECK-NEXT:    [[TMP2961:%.*]] = extractvalue { i64, i1 } [[TMP2959]], 1
// CHECK-NEXT:    br i1 [[TMP2961]], label [[LX_ATOMIC_EXIT346:%.*]], label [[LX_ATOMIC_CONT347:%.*]]
// CHECK:       lx.atomic.cont347:
// CHECK-NEXT:    store i64 [[TMP2960]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT346]]
// CHECK:       lx.atomic.exit346:
// CHECK-NEXT:    [[TMP2962:%.*]] = extractvalue { i64, i1 } [[TMP2959]], 1
// CHECK-NEXT:    [[TMP2963:%.*]] = sext i1 [[TMP2962]] to i64
// CHECK-NEXT:    store i64 [[TMP2963]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2964:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2965:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2964]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP2965]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2966:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2967:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2966]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP2967]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2968:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2969:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2968]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP2969]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2970:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2971:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2970]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP2971]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2972:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2973:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2974:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2972]], i64 [[TMP2973]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP2975:%.*]] = extractvalue { i64, i1 } [[TMP2974]], 0
// CHECK-NEXT:    store i64 [[TMP2975]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2976:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2977:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2978:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2976]], i64 [[TMP2977]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP2979:%.*]] = extractvalue { i64, i1 } [[TMP2978]], 0
// CHECK-NEXT:    store i64 [[TMP2979]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2980:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2981:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2980]] acquire, align 8
// CHECK-NEXT:    [[TMP2982:%.*]] = icmp sgt i64 [[TMP2981]], [[TMP2980]]
// CHECK-NEXT:    [[TMP2983:%.*]] = select i1 [[TMP2982]], i64 [[TMP2980]], i64 [[TMP2981]]
// CHECK-NEXT:    store i64 [[TMP2983]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2984:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2985:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2984]] acquire, align 8
// CHECK-NEXT:    [[TMP2986:%.*]] = icmp slt i64 [[TMP2985]], [[TMP2984]]
// CHECK-NEXT:    [[TMP2987:%.*]] = select i1 [[TMP2986]], i64 [[TMP2984]], i64 [[TMP2985]]
// CHECK-NEXT:    store i64 [[TMP2987]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2988:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2989:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2988]] acquire, align 8
// CHECK-NEXT:    [[TMP2990:%.*]] = icmp slt i64 [[TMP2989]], [[TMP2988]]
// CHECK-NEXT:    [[TMP2991:%.*]] = select i1 [[TMP2990]], i64 [[TMP2988]], i64 [[TMP2989]]
// CHECK-NEXT:    store i64 [[TMP2991]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2992:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2993:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2992]] acquire, align 8
// CHECK-NEXT:    [[TMP2994:%.*]] = icmp sgt i64 [[TMP2993]], [[TMP2992]]
// CHECK-NEXT:    [[TMP2995:%.*]] = select i1 [[TMP2994]], i64 [[TMP2992]], i64 [[TMP2993]]
// CHECK-NEXT:    store i64 [[TMP2995]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2996:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2997:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2998:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2996]], i64 [[TMP2997]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP2999:%.*]] = extractvalue { i64, i1 } [[TMP2998]], 0
// CHECK-NEXT:    [[TMP3000:%.*]] = extractvalue { i64, i1 } [[TMP2998]], 1
// CHECK-NEXT:    [[TMP3001:%.*]] = select i1 [[TMP3000]], i64 [[TMP2996]], i64 [[TMP2999]]
// CHECK-NEXT:    store i64 [[TMP3001]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3002:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3003:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3004:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3002]], i64 [[TMP3003]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3005:%.*]] = extractvalue { i64, i1 } [[TMP3004]], 0
// CHECK-NEXT:    [[TMP3006:%.*]] = extractvalue { i64, i1 } [[TMP3004]], 1
// CHECK-NEXT:    [[TMP3007:%.*]] = select i1 [[TMP3006]], i64 [[TMP3002]], i64 [[TMP3005]]
// CHECK-NEXT:    store i64 [[TMP3007]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3008:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3009:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3010:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3008]], i64 [[TMP3009]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3011:%.*]] = extractvalue { i64, i1 } [[TMP3010]], 0
// CHECK-NEXT:    [[TMP3012:%.*]] = extractvalue { i64, i1 } [[TMP3010]], 1
// CHECK-NEXT:    br i1 [[TMP3012]], label [[LX_ATOMIC_EXIT348:%.*]], label [[LX_ATOMIC_CONT349:%.*]]
// CHECK:       lx.atomic.cont349:
// CHECK-NEXT:    store i64 [[TMP3011]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT348]]
// CHECK:       lx.atomic.exit348:
// CHECK-NEXT:    [[TMP3013:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3014:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3015:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3013]], i64 [[TMP3014]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3016:%.*]] = extractvalue { i64, i1 } [[TMP3015]], 0
// CHECK-NEXT:    [[TMP3017:%.*]] = extractvalue { i64, i1 } [[TMP3015]], 1
// CHECK-NEXT:    br i1 [[TMP3017]], label [[LX_ATOMIC_EXIT350:%.*]], label [[LX_ATOMIC_CONT351:%.*]]
// CHECK:       lx.atomic.cont351:
// CHECK-NEXT:    store i64 [[TMP3016]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT350]]
// CHECK:       lx.atomic.exit350:
// CHECK-NEXT:    [[TMP3018:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3019:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3020:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3018]], i64 [[TMP3019]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3021:%.*]] = extractvalue { i64, i1 } [[TMP3020]], 1
// CHECK-NEXT:    [[TMP3022:%.*]] = sext i1 [[TMP3021]] to i64
// CHECK-NEXT:    store i64 [[TMP3022]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3023:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3024:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3025:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3023]], i64 [[TMP3024]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3026:%.*]] = extractvalue { i64, i1 } [[TMP3025]], 1
// CHECK-NEXT:    [[TMP3027:%.*]] = sext i1 [[TMP3026]] to i64
// CHECK-NEXT:    store i64 [[TMP3027]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3028:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3029:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3030:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3028]], i64 [[TMP3029]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3031:%.*]] = extractvalue { i64, i1 } [[TMP3030]], 0
// CHECK-NEXT:    [[TMP3032:%.*]] = extractvalue { i64, i1 } [[TMP3030]], 1
// CHECK-NEXT:    br i1 [[TMP3032]], label [[LX_ATOMIC_EXIT352:%.*]], label [[LX_ATOMIC_CONT353:%.*]]
// CHECK:       lx.atomic.cont353:
// CHECK-NEXT:    store i64 [[TMP3031]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT352]]
// CHECK:       lx.atomic.exit352:
// CHECK-NEXT:    [[TMP3033:%.*]] = extractvalue { i64, i1 } [[TMP3030]], 1
// CHECK-NEXT:    [[TMP3034:%.*]] = sext i1 [[TMP3033]] to i64
// CHECK-NEXT:    store i64 [[TMP3034]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3035:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3036:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3037:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3035]], i64 [[TMP3036]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3038:%.*]] = extractvalue { i64, i1 } [[TMP3037]], 0
// CHECK-NEXT:    [[TMP3039:%.*]] = extractvalue { i64, i1 } [[TMP3037]], 1
// CHECK-NEXT:    br i1 [[TMP3039]], label [[LX_ATOMIC_EXIT354:%.*]], label [[LX_ATOMIC_CONT355:%.*]]
// CHECK:       lx.atomic.cont355:
// CHECK-NEXT:    store i64 [[TMP3038]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT354]]
// CHECK:       lx.atomic.exit354:
// CHECK-NEXT:    [[TMP3040:%.*]] = extractvalue { i64, i1 } [[TMP3037]], 1
// CHECK-NEXT:    [[TMP3041:%.*]] = sext i1 [[TMP3040]] to i64
// CHECK-NEXT:    store i64 [[TMP3041]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3042:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3043:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3042]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3043]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3044:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3045:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3044]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3045]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3046:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3047:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3046]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3047]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3048:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3049:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3048]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3049]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3050:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3051:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3052:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3050]], i64 [[TMP3051]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3053:%.*]] = extractvalue { i64, i1 } [[TMP3052]], 0
// CHECK-NEXT:    store i64 [[TMP3053]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3054:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3055:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3056:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3054]], i64 [[TMP3055]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3057:%.*]] = extractvalue { i64, i1 } [[TMP3056]], 0
// CHECK-NEXT:    store i64 [[TMP3057]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3058:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3059:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3058]] monotonic, align 8
// CHECK-NEXT:    [[TMP3060:%.*]] = icmp sgt i64 [[TMP3059]], [[TMP3058]]
// CHECK-NEXT:    [[TMP3061:%.*]] = select i1 [[TMP3060]], i64 [[TMP3058]], i64 [[TMP3059]]
// CHECK-NEXT:    store i64 [[TMP3061]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3062:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3063:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3062]] monotonic, align 8
// CHECK-NEXT:    [[TMP3064:%.*]] = icmp slt i64 [[TMP3063]], [[TMP3062]]
// CHECK-NEXT:    [[TMP3065:%.*]] = select i1 [[TMP3064]], i64 [[TMP3062]], i64 [[TMP3063]]
// CHECK-NEXT:    store i64 [[TMP3065]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3066:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3067:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3066]] monotonic, align 8
// CHECK-NEXT:    [[TMP3068:%.*]] = icmp slt i64 [[TMP3067]], [[TMP3066]]
// CHECK-NEXT:    [[TMP3069:%.*]] = select i1 [[TMP3068]], i64 [[TMP3066]], i64 [[TMP3067]]
// CHECK-NEXT:    store i64 [[TMP3069]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3070:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3071:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3070]] monotonic, align 8
// CHECK-NEXT:    [[TMP3072:%.*]] = icmp sgt i64 [[TMP3071]], [[TMP3070]]
// CHECK-NEXT:    [[TMP3073:%.*]] = select i1 [[TMP3072]], i64 [[TMP3070]], i64 [[TMP3071]]
// CHECK-NEXT:    store i64 [[TMP3073]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3074:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3075:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3076:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3074]], i64 [[TMP3075]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3077:%.*]] = extractvalue { i64, i1 } [[TMP3076]], 0
// CHECK-NEXT:    [[TMP3078:%.*]] = extractvalue { i64, i1 } [[TMP3076]], 1
// CHECK-NEXT:    [[TMP3079:%.*]] = select i1 [[TMP3078]], i64 [[TMP3074]], i64 [[TMP3077]]
// CHECK-NEXT:    store i64 [[TMP3079]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3080:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3081:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3082:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3080]], i64 [[TMP3081]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3083:%.*]] = extractvalue { i64, i1 } [[TMP3082]], 0
// CHECK-NEXT:    [[TMP3084:%.*]] = extractvalue { i64, i1 } [[TMP3082]], 1
// CHECK-NEXT:    [[TMP3085:%.*]] = select i1 [[TMP3084]], i64 [[TMP3080]], i64 [[TMP3083]]
// CHECK-NEXT:    store i64 [[TMP3085]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3086:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3087:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3088:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3086]], i64 [[TMP3087]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3089:%.*]] = extractvalue { i64, i1 } [[TMP3088]], 0
// CHECK-NEXT:    [[TMP3090:%.*]] = extractvalue { i64, i1 } [[TMP3088]], 1
// CHECK-NEXT:    br i1 [[TMP3090]], label [[LX_ATOMIC_EXIT356:%.*]], label [[LX_ATOMIC_CONT357:%.*]]
// CHECK:       lx.atomic.cont357:
// CHECK-NEXT:    store i64 [[TMP3089]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT356]]
// CHECK:       lx.atomic.exit356:
// CHECK-NEXT:    [[TMP3091:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3092:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3093:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3091]], i64 [[TMP3092]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3094:%.*]] = extractvalue { i64, i1 } [[TMP3093]], 0
// CHECK-NEXT:    [[TMP3095:%.*]] = extractvalue { i64, i1 } [[TMP3093]], 1
// CHECK-NEXT:    br i1 [[TMP3095]], label [[LX_ATOMIC_EXIT358:%.*]], label [[LX_ATOMIC_CONT359:%.*]]
// CHECK:       lx.atomic.cont359:
// CHECK-NEXT:    store i64 [[TMP3094]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT358]]
// CHECK:       lx.atomic.exit358:
// CHECK-NEXT:    [[TMP3096:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3097:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3098:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3096]], i64 [[TMP3097]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3099:%.*]] = extractvalue { i64, i1 } [[TMP3098]], 1
// CHECK-NEXT:    [[TMP3100:%.*]] = sext i1 [[TMP3099]] to i64
// CHECK-NEXT:    store i64 [[TMP3100]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3101:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3102:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3103:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3101]], i64 [[TMP3102]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3104:%.*]] = extractvalue { i64, i1 } [[TMP3103]], 1
// CHECK-NEXT:    [[TMP3105:%.*]] = sext i1 [[TMP3104]] to i64
// CHECK-NEXT:    store i64 [[TMP3105]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3106:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3107:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3108:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3106]], i64 [[TMP3107]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3109:%.*]] = extractvalue { i64, i1 } [[TMP3108]], 0
// CHECK-NEXT:    [[TMP3110:%.*]] = extractvalue { i64, i1 } [[TMP3108]], 1
// CHECK-NEXT:    br i1 [[TMP3110]], label [[LX_ATOMIC_EXIT360:%.*]], label [[LX_ATOMIC_CONT361:%.*]]
// CHECK:       lx.atomic.cont361:
// CHECK-NEXT:    store i64 [[TMP3109]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT360]]
// CHECK:       lx.atomic.exit360:
// CHECK-NEXT:    [[TMP3111:%.*]] = extractvalue { i64, i1 } [[TMP3108]], 1
// CHECK-NEXT:    [[TMP3112:%.*]] = sext i1 [[TMP3111]] to i64
// CHECK-NEXT:    store i64 [[TMP3112]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3113:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3114:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3115:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3113]], i64 [[TMP3114]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3116:%.*]] = extractvalue { i64, i1 } [[TMP3115]], 0
// CHECK-NEXT:    [[TMP3117:%.*]] = extractvalue { i64, i1 } [[TMP3115]], 1
// CHECK-NEXT:    br i1 [[TMP3117]], label [[LX_ATOMIC_EXIT362:%.*]], label [[LX_ATOMIC_CONT363:%.*]]
// CHECK:       lx.atomic.cont363:
// CHECK-NEXT:    store i64 [[TMP3116]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT362]]
// CHECK:       lx.atomic.exit362:
// CHECK-NEXT:    [[TMP3118:%.*]] = extractvalue { i64, i1 } [[TMP3115]], 1
// CHECK-NEXT:    [[TMP3119:%.*]] = sext i1 [[TMP3118]] to i64
// CHECK-NEXT:    store i64 [[TMP3119]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3120:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3121:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3120]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3121]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3122:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3123:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3122]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3123]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3124:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3125:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3124]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3125]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3126:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3127:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3126]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3127]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3128:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3129:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3130:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3128]], i64 [[TMP3129]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3131:%.*]] = extractvalue { i64, i1 } [[TMP3130]], 0
// CHECK-NEXT:    store i64 [[TMP3131]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3132:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3133:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3134:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3132]], i64 [[TMP3133]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3135:%.*]] = extractvalue { i64, i1 } [[TMP3134]], 0
// CHECK-NEXT:    store i64 [[TMP3135]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3136:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3137:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3136]] release, align 8
// CHECK-NEXT:    [[TMP3138:%.*]] = icmp sgt i64 [[TMP3137]], [[TMP3136]]
// CHECK-NEXT:    [[TMP3139:%.*]] = select i1 [[TMP3138]], i64 [[TMP3136]], i64 [[TMP3137]]
// CHECK-NEXT:    store i64 [[TMP3139]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3140:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3141:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3140]] release, align 8
// CHECK-NEXT:    [[TMP3142:%.*]] = icmp slt i64 [[TMP3141]], [[TMP3140]]
// CHECK-NEXT:    [[TMP3143:%.*]] = select i1 [[TMP3142]], i64 [[TMP3140]], i64 [[TMP3141]]
// CHECK-NEXT:    store i64 [[TMP3143]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3144:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3145:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3144]] release, align 8
// CHECK-NEXT:    [[TMP3146:%.*]] = icmp slt i64 [[TMP3145]], [[TMP3144]]
// CHECK-NEXT:    [[TMP3147:%.*]] = select i1 [[TMP3146]], i64 [[TMP3144]], i64 [[TMP3145]]
// CHECK-NEXT:    store i64 [[TMP3147]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3148:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3149:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3148]] release, align 8
// CHECK-NEXT:    [[TMP3150:%.*]] = icmp sgt i64 [[TMP3149]], [[TMP3148]]
// CHECK-NEXT:    [[TMP3151:%.*]] = select i1 [[TMP3150]], i64 [[TMP3148]], i64 [[TMP3149]]
// CHECK-NEXT:    store i64 [[TMP3151]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3152:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3153:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3154:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3152]], i64 [[TMP3153]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3155:%.*]] = extractvalue { i64, i1 } [[TMP3154]], 0
// CHECK-NEXT:    [[TMP3156:%.*]] = extractvalue { i64, i1 } [[TMP3154]], 1
// CHECK-NEXT:    [[TMP3157:%.*]] = select i1 [[TMP3156]], i64 [[TMP3152]], i64 [[TMP3155]]
// CHECK-NEXT:    store i64 [[TMP3157]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3158:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3159:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3160:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3158]], i64 [[TMP3159]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3161:%.*]] = extractvalue { i64, i1 } [[TMP3160]], 0
// CHECK-NEXT:    [[TMP3162:%.*]] = extractvalue { i64, i1 } [[TMP3160]], 1
// CHECK-NEXT:    [[TMP3163:%.*]] = select i1 [[TMP3162]], i64 [[TMP3158]], i64 [[TMP3161]]
// CHECK-NEXT:    store i64 [[TMP3163]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3164:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3165:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3166:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3164]], i64 [[TMP3165]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3167:%.*]] = extractvalue { i64, i1 } [[TMP3166]], 0
// CHECK-NEXT:    [[TMP3168:%.*]] = extractvalue { i64, i1 } [[TMP3166]], 1
// CHECK-NEXT:    br i1 [[TMP3168]], label [[LX_ATOMIC_EXIT364:%.*]], label [[LX_ATOMIC_CONT365:%.*]]
// CHECK:       lx.atomic.cont365:
// CHECK-NEXT:    store i64 [[TMP3167]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT364]]
// CHECK:       lx.atomic.exit364:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3169:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3170:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3171:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3169]], i64 [[TMP3170]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3172:%.*]] = extractvalue { i64, i1 } [[TMP3171]], 0
// CHECK-NEXT:    [[TMP3173:%.*]] = extractvalue { i64, i1 } [[TMP3171]], 1
// CHECK-NEXT:    br i1 [[TMP3173]], label [[LX_ATOMIC_EXIT366:%.*]], label [[LX_ATOMIC_CONT367:%.*]]
// CHECK:       lx.atomic.cont367:
// CHECK-NEXT:    store i64 [[TMP3172]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT366]]
// CHECK:       lx.atomic.exit366:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3174:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3175:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3176:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3174]], i64 [[TMP3175]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3177:%.*]] = extractvalue { i64, i1 } [[TMP3176]], 1
// CHECK-NEXT:    [[TMP3178:%.*]] = sext i1 [[TMP3177]] to i64
// CHECK-NEXT:    store i64 [[TMP3178]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3179:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3180:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3181:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3179]], i64 [[TMP3180]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3182:%.*]] = extractvalue { i64, i1 } [[TMP3181]], 1
// CHECK-NEXT:    [[TMP3183:%.*]] = sext i1 [[TMP3182]] to i64
// CHECK-NEXT:    store i64 [[TMP3183]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3184:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3185:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3186:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3184]], i64 [[TMP3185]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3187:%.*]] = extractvalue { i64, i1 } [[TMP3186]], 0
// CHECK-NEXT:    [[TMP3188:%.*]] = extractvalue { i64, i1 } [[TMP3186]], 1
// CHECK-NEXT:    br i1 [[TMP3188]], label [[LX_ATOMIC_EXIT368:%.*]], label [[LX_ATOMIC_CONT369:%.*]]
// CHECK:       lx.atomic.cont369:
// CHECK-NEXT:    store i64 [[TMP3187]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT368]]
// CHECK:       lx.atomic.exit368:
// CHECK-NEXT:    [[TMP3189:%.*]] = extractvalue { i64, i1 } [[TMP3186]], 1
// CHECK-NEXT:    [[TMP3190:%.*]] = sext i1 [[TMP3189]] to i64
// CHECK-NEXT:    store i64 [[TMP3190]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3191:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3192:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3193:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3191]], i64 [[TMP3192]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3194:%.*]] = extractvalue { i64, i1 } [[TMP3193]], 0
// CHECK-NEXT:    [[TMP3195:%.*]] = extractvalue { i64, i1 } [[TMP3193]], 1
// CHECK-NEXT:    br i1 [[TMP3195]], label [[LX_ATOMIC_EXIT370:%.*]], label [[LX_ATOMIC_CONT371:%.*]]
// CHECK:       lx.atomic.cont371:
// CHECK-NEXT:    store i64 [[TMP3194]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT370]]
// CHECK:       lx.atomic.exit370:
// CHECK-NEXT:    [[TMP3196:%.*]] = extractvalue { i64, i1 } [[TMP3193]], 1
// CHECK-NEXT:    [[TMP3197:%.*]] = sext i1 [[TMP3196]] to i64
// CHECK-NEXT:    store i64 [[TMP3197]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3198:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3199:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3198]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3199]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3200:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3201:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3200]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3201]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3202:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3203:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3202]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3203]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3204:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3205:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3204]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3205]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3206:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3207:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3208:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3206]], i64 [[TMP3207]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3209:%.*]] = extractvalue { i64, i1 } [[TMP3208]], 0
// CHECK-NEXT:    store i64 [[TMP3209]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3210:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3211:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3212:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3210]], i64 [[TMP3211]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3213:%.*]] = extractvalue { i64, i1 } [[TMP3212]], 0
// CHECK-NEXT:    store i64 [[TMP3213]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3214:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3215:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3214]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3216:%.*]] = icmp sgt i64 [[TMP3215]], [[TMP3214]]
// CHECK-NEXT:    [[TMP3217:%.*]] = select i1 [[TMP3216]], i64 [[TMP3214]], i64 [[TMP3215]]
// CHECK-NEXT:    store i64 [[TMP3217]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3218:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3219:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3218]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3220:%.*]] = icmp slt i64 [[TMP3219]], [[TMP3218]]
// CHECK-NEXT:    [[TMP3221:%.*]] = select i1 [[TMP3220]], i64 [[TMP3218]], i64 [[TMP3219]]
// CHECK-NEXT:    store i64 [[TMP3221]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3222:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3223:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3222]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3224:%.*]] = icmp slt i64 [[TMP3223]], [[TMP3222]]
// CHECK-NEXT:    [[TMP3225:%.*]] = select i1 [[TMP3224]], i64 [[TMP3222]], i64 [[TMP3223]]
// CHECK-NEXT:    store i64 [[TMP3225]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3226:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3227:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3226]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3228:%.*]] = icmp sgt i64 [[TMP3227]], [[TMP3226]]
// CHECK-NEXT:    [[TMP3229:%.*]] = select i1 [[TMP3228]], i64 [[TMP3226]], i64 [[TMP3227]]
// CHECK-NEXT:    store i64 [[TMP3229]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3230:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3231:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3232:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3230]], i64 [[TMP3231]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3233:%.*]] = extractvalue { i64, i1 } [[TMP3232]], 0
// CHECK-NEXT:    [[TMP3234:%.*]] = extractvalue { i64, i1 } [[TMP3232]], 1
// CHECK-NEXT:    [[TMP3235:%.*]] = select i1 [[TMP3234]], i64 [[TMP3230]], i64 [[TMP3233]]
// CHECK-NEXT:    store i64 [[TMP3235]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3236:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3237:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3238:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3236]], i64 [[TMP3237]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3239:%.*]] = extractvalue { i64, i1 } [[TMP3238]], 0
// CHECK-NEXT:    [[TMP3240:%.*]] = extractvalue { i64, i1 } [[TMP3238]], 1
// CHECK-NEXT:    [[TMP3241:%.*]] = select i1 [[TMP3240]], i64 [[TMP3236]], i64 [[TMP3239]]
// CHECK-NEXT:    store i64 [[TMP3241]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3242:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3243:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3244:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3242]], i64 [[TMP3243]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3245:%.*]] = extractvalue { i64, i1 } [[TMP3244]], 0
// CHECK-NEXT:    [[TMP3246:%.*]] = extractvalue { i64, i1 } [[TMP3244]], 1
// CHECK-NEXT:    br i1 [[TMP3246]], label [[LX_ATOMIC_EXIT372:%.*]], label [[LX_ATOMIC_CONT373:%.*]]
// CHECK:       lx.atomic.cont373:
// CHECK-NEXT:    store i64 [[TMP3245]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT372]]
// CHECK:       lx.atomic.exit372:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3247:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3248:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3249:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3247]], i64 [[TMP3248]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3250:%.*]] = extractvalue { i64, i1 } [[TMP3249]], 0
// CHECK-NEXT:    [[TMP3251:%.*]] = extractvalue { i64, i1 } [[TMP3249]], 1
// CHECK-NEXT:    br i1 [[TMP3251]], label [[LX_ATOMIC_EXIT374:%.*]], label [[LX_ATOMIC_CONT375:%.*]]
// CHECK:       lx.atomic.cont375:
// CHECK-NEXT:    store i64 [[TMP3250]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT374]]
// CHECK:       lx.atomic.exit374:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3252:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3253:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3254:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3252]], i64 [[TMP3253]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3255:%.*]] = extractvalue { i64, i1 } [[TMP3254]], 1
// CHECK-NEXT:    [[TMP3256:%.*]] = sext i1 [[TMP3255]] to i64
// CHECK-NEXT:    store i64 [[TMP3256]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3257:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3258:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3259:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3257]], i64 [[TMP3258]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3260:%.*]] = extractvalue { i64, i1 } [[TMP3259]], 1
// CHECK-NEXT:    [[TMP3261:%.*]] = sext i1 [[TMP3260]] to i64
// CHECK-NEXT:    store i64 [[TMP3261]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3262:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3263:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3264:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3262]], i64 [[TMP3263]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3265:%.*]] = extractvalue { i64, i1 } [[TMP3264]], 0
// CHECK-NEXT:    [[TMP3266:%.*]] = extractvalue { i64, i1 } [[TMP3264]], 1
// CHECK-NEXT:    br i1 [[TMP3266]], label [[LX_ATOMIC_EXIT376:%.*]], label [[LX_ATOMIC_CONT377:%.*]]
// CHECK:       lx.atomic.cont377:
// CHECK-NEXT:    store i64 [[TMP3265]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT376]]
// CHECK:       lx.atomic.exit376:
// CHECK-NEXT:    [[TMP3267:%.*]] = extractvalue { i64, i1 } [[TMP3264]], 1
// CHECK-NEXT:    [[TMP3268:%.*]] = sext i1 [[TMP3267]] to i64
// CHECK-NEXT:    store i64 [[TMP3268]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3269:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3270:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3271:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3269]], i64 [[TMP3270]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3272:%.*]] = extractvalue { i64, i1 } [[TMP3271]], 0
// CHECK-NEXT:    [[TMP3273:%.*]] = extractvalue { i64, i1 } [[TMP3271]], 1
// CHECK-NEXT:    br i1 [[TMP3273]], label [[LX_ATOMIC_EXIT378:%.*]], label [[LX_ATOMIC_CONT379:%.*]]
// CHECK:       lx.atomic.cont379:
// CHECK-NEXT:    store i64 [[TMP3272]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT378]]
// CHECK:       lx.atomic.exit378:
// CHECK-NEXT:    [[TMP3274:%.*]] = extractvalue { i64, i1 } [[TMP3271]], 1
// CHECK-NEXT:    [[TMP3275:%.*]] = sext i1 [[TMP3274]] to i64
// CHECK-NEXT:    store i64 [[TMP3275]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3276:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3277:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3276]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3277]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3278:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3279:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3278]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3279]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3280:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3281:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3280]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3281]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3282:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3283:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3282]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3283]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3284:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3285:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3286:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3284]], i64 [[TMP3285]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3287:%.*]] = extractvalue { i64, i1 } [[TMP3286]], 0
// CHECK-NEXT:    store i64 [[TMP3287]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3288:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3289:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3290:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3288]], i64 [[TMP3289]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3291:%.*]] = extractvalue { i64, i1 } [[TMP3290]], 0
// CHECK-NEXT:    store i64 [[TMP3291]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3292:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3293:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3292]] monotonic, align 8
// CHECK-NEXT:    [[TMP3294:%.*]] = icmp ugt i64 [[TMP3293]], [[TMP3292]]
// CHECK-NEXT:    [[TMP3295:%.*]] = select i1 [[TMP3294]], i64 [[TMP3292]], i64 [[TMP3293]]
// CHECK-NEXT:    store i64 [[TMP3295]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3296:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3297:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3296]] monotonic, align 8
// CHECK-NEXT:    [[TMP3298:%.*]] = icmp ult i64 [[TMP3297]], [[TMP3296]]
// CHECK-NEXT:    [[TMP3299:%.*]] = select i1 [[TMP3298]], i64 [[TMP3296]], i64 [[TMP3297]]
// CHECK-NEXT:    store i64 [[TMP3299]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3300:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3301:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3300]] monotonic, align 8
// CHECK-NEXT:    [[TMP3302:%.*]] = icmp ult i64 [[TMP3301]], [[TMP3300]]
// CHECK-NEXT:    [[TMP3303:%.*]] = select i1 [[TMP3302]], i64 [[TMP3300]], i64 [[TMP3301]]
// CHECK-NEXT:    store i64 [[TMP3303]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3304:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3305:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3304]] monotonic, align 8
// CHECK-NEXT:    [[TMP3306:%.*]] = icmp ugt i64 [[TMP3305]], [[TMP3304]]
// CHECK-NEXT:    [[TMP3307:%.*]] = select i1 [[TMP3306]], i64 [[TMP3304]], i64 [[TMP3305]]
// CHECK-NEXT:    store i64 [[TMP3307]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3308:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3309:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3310:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3308]], i64 [[TMP3309]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3311:%.*]] = extractvalue { i64, i1 } [[TMP3310]], 0
// CHECK-NEXT:    [[TMP3312:%.*]] = extractvalue { i64, i1 } [[TMP3310]], 1
// CHECK-NEXT:    [[TMP3313:%.*]] = select i1 [[TMP3312]], i64 [[TMP3308]], i64 [[TMP3311]]
// CHECK-NEXT:    store i64 [[TMP3313]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3314:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3315:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3316:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3314]], i64 [[TMP3315]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3317:%.*]] = extractvalue { i64, i1 } [[TMP3316]], 0
// CHECK-NEXT:    [[TMP3318:%.*]] = extractvalue { i64, i1 } [[TMP3316]], 1
// CHECK-NEXT:    [[TMP3319:%.*]] = select i1 [[TMP3318]], i64 [[TMP3314]], i64 [[TMP3317]]
// CHECK-NEXT:    store i64 [[TMP3319]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3320:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3321:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3322:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3320]], i64 [[TMP3321]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3323:%.*]] = extractvalue { i64, i1 } [[TMP3322]], 0
// CHECK-NEXT:    [[TMP3324:%.*]] = extractvalue { i64, i1 } [[TMP3322]], 1
// CHECK-NEXT:    br i1 [[TMP3324]], label [[ULX_ATOMIC_EXIT:%.*]], label [[ULX_ATOMIC_CONT:%.*]]
// CHECK:       ulx.atomic.cont:
// CHECK-NEXT:    store i64 [[TMP3323]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT]]
// CHECK:       ulx.atomic.exit:
// CHECK-NEXT:    [[TMP3325:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3326:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3327:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3325]], i64 [[TMP3326]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3328:%.*]] = extractvalue { i64, i1 } [[TMP3327]], 0
// CHECK-NEXT:    [[TMP3329:%.*]] = extractvalue { i64, i1 } [[TMP3327]], 1
// CHECK-NEXT:    br i1 [[TMP3329]], label [[ULX_ATOMIC_EXIT380:%.*]], label [[ULX_ATOMIC_CONT381:%.*]]
// CHECK:       ulx.atomic.cont381:
// CHECK-NEXT:    store i64 [[TMP3328]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT380]]
// CHECK:       ulx.atomic.exit380:
// CHECK-NEXT:    [[TMP3330:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3331:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3332:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3330]], i64 [[TMP3331]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3333:%.*]] = extractvalue { i64, i1 } [[TMP3332]], 1
// CHECK-NEXT:    [[TMP3334:%.*]] = zext i1 [[TMP3333]] to i64
// CHECK-NEXT:    store i64 [[TMP3334]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3335:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3336:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3337:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3335]], i64 [[TMP3336]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3338:%.*]] = extractvalue { i64, i1 } [[TMP3337]], 1
// CHECK-NEXT:    [[TMP3339:%.*]] = zext i1 [[TMP3338]] to i64
// CHECK-NEXT:    store i64 [[TMP3339]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3340:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3341:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3342:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3340]], i64 [[TMP3341]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3343:%.*]] = extractvalue { i64, i1 } [[TMP3342]], 0
// CHECK-NEXT:    [[TMP3344:%.*]] = extractvalue { i64, i1 } [[TMP3342]], 1
// CHECK-NEXT:    br i1 [[TMP3344]], label [[ULX_ATOMIC_EXIT382:%.*]], label [[ULX_ATOMIC_CONT383:%.*]]
// CHECK:       ulx.atomic.cont383:
// CHECK-NEXT:    store i64 [[TMP3343]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT382]]
// CHECK:       ulx.atomic.exit382:
// CHECK-NEXT:    [[TMP3345:%.*]] = extractvalue { i64, i1 } [[TMP3342]], 1
// CHECK-NEXT:    [[TMP3346:%.*]] = zext i1 [[TMP3345]] to i64
// CHECK-NEXT:    store i64 [[TMP3346]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3347:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3348:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3349:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3347]], i64 [[TMP3348]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3350:%.*]] = extractvalue { i64, i1 } [[TMP3349]], 0
// CHECK-NEXT:    [[TMP3351:%.*]] = extractvalue { i64, i1 } [[TMP3349]], 1
// CHECK-NEXT:    br i1 [[TMP3351]], label [[ULX_ATOMIC_EXIT384:%.*]], label [[ULX_ATOMIC_CONT385:%.*]]
// CHECK:       ulx.atomic.cont385:
// CHECK-NEXT:    store i64 [[TMP3350]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT384]]
// CHECK:       ulx.atomic.exit384:
// CHECK-NEXT:    [[TMP3352:%.*]] = extractvalue { i64, i1 } [[TMP3349]], 1
// CHECK-NEXT:    [[TMP3353:%.*]] = zext i1 [[TMP3352]] to i64
// CHECK-NEXT:    store i64 [[TMP3353]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3354:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3355:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3354]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3355]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3356:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3357:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3356]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3357]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3358:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3359:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3358]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3359]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3360:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3361:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3360]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3361]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3362:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3363:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3364:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3362]], i64 [[TMP3363]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3365:%.*]] = extractvalue { i64, i1 } [[TMP3364]], 0
// CHECK-NEXT:    store i64 [[TMP3365]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3366:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3367:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3368:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3366]], i64 [[TMP3367]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3369:%.*]] = extractvalue { i64, i1 } [[TMP3368]], 0
// CHECK-NEXT:    store i64 [[TMP3369]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3370:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3371:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3370]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3372:%.*]] = icmp ugt i64 [[TMP3371]], [[TMP3370]]
// CHECK-NEXT:    [[TMP3373:%.*]] = select i1 [[TMP3372]], i64 [[TMP3370]], i64 [[TMP3371]]
// CHECK-NEXT:    store i64 [[TMP3373]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3374:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3375:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3374]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3376:%.*]] = icmp ult i64 [[TMP3375]], [[TMP3374]]
// CHECK-NEXT:    [[TMP3377:%.*]] = select i1 [[TMP3376]], i64 [[TMP3374]], i64 [[TMP3375]]
// CHECK-NEXT:    store i64 [[TMP3377]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3378:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3379:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3378]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3380:%.*]] = icmp ult i64 [[TMP3379]], [[TMP3378]]
// CHECK-NEXT:    [[TMP3381:%.*]] = select i1 [[TMP3380]], i64 [[TMP3378]], i64 [[TMP3379]]
// CHECK-NEXT:    store i64 [[TMP3381]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3382:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3383:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3382]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3384:%.*]] = icmp ugt i64 [[TMP3383]], [[TMP3382]]
// CHECK-NEXT:    [[TMP3385:%.*]] = select i1 [[TMP3384]], i64 [[TMP3382]], i64 [[TMP3383]]
// CHECK-NEXT:    store i64 [[TMP3385]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3386:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3387:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3388:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3386]], i64 [[TMP3387]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3389:%.*]] = extractvalue { i64, i1 } [[TMP3388]], 0
// CHECK-NEXT:    [[TMP3390:%.*]] = extractvalue { i64, i1 } [[TMP3388]], 1
// CHECK-NEXT:    [[TMP3391:%.*]] = select i1 [[TMP3390]], i64 [[TMP3386]], i64 [[TMP3389]]
// CHECK-NEXT:    store i64 [[TMP3391]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3392:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3393:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3394:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3392]], i64 [[TMP3393]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3395:%.*]] = extractvalue { i64, i1 } [[TMP3394]], 0
// CHECK-NEXT:    [[TMP3396:%.*]] = extractvalue { i64, i1 } [[TMP3394]], 1
// CHECK-NEXT:    [[TMP3397:%.*]] = select i1 [[TMP3396]], i64 [[TMP3392]], i64 [[TMP3395]]
// CHECK-NEXT:    store i64 [[TMP3397]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3398:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3399:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3400:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3398]], i64 [[TMP3399]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3401:%.*]] = extractvalue { i64, i1 } [[TMP3400]], 0
// CHECK-NEXT:    [[TMP3402:%.*]] = extractvalue { i64, i1 } [[TMP3400]], 1
// CHECK-NEXT:    br i1 [[TMP3402]], label [[ULX_ATOMIC_EXIT386:%.*]], label [[ULX_ATOMIC_CONT387:%.*]]
// CHECK:       ulx.atomic.cont387:
// CHECK-NEXT:    store i64 [[TMP3401]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT386]]
// CHECK:       ulx.atomic.exit386:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3403:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3404:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3405:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3403]], i64 [[TMP3404]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3406:%.*]] = extractvalue { i64, i1 } [[TMP3405]], 0
// CHECK-NEXT:    [[TMP3407:%.*]] = extractvalue { i64, i1 } [[TMP3405]], 1
// CHECK-NEXT:    br i1 [[TMP3407]], label [[ULX_ATOMIC_EXIT388:%.*]], label [[ULX_ATOMIC_CONT389:%.*]]
// CHECK:       ulx.atomic.cont389:
// CHECK-NEXT:    store i64 [[TMP3406]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT388]]
// CHECK:       ulx.atomic.exit388:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3408:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3409:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3410:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3408]], i64 [[TMP3409]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3411:%.*]] = extractvalue { i64, i1 } [[TMP3410]], 1
// CHECK-NEXT:    [[TMP3412:%.*]] = zext i1 [[TMP3411]] to i64
// CHECK-NEXT:    store i64 [[TMP3412]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3413:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3414:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3415:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3413]], i64 [[TMP3414]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3416:%.*]] = extractvalue { i64, i1 } [[TMP3415]], 1
// CHECK-NEXT:    [[TMP3417:%.*]] = zext i1 [[TMP3416]] to i64
// CHECK-NEXT:    store i64 [[TMP3417]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3418:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3419:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3420:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3418]], i64 [[TMP3419]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3421:%.*]] = extractvalue { i64, i1 } [[TMP3420]], 0
// CHECK-NEXT:    [[TMP3422:%.*]] = extractvalue { i64, i1 } [[TMP3420]], 1
// CHECK-NEXT:    br i1 [[TMP3422]], label [[ULX_ATOMIC_EXIT390:%.*]], label [[ULX_ATOMIC_CONT391:%.*]]
// CHECK:       ulx.atomic.cont391:
// CHECK-NEXT:    store i64 [[TMP3421]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT390]]
// CHECK:       ulx.atomic.exit390:
// CHECK-NEXT:    [[TMP3423:%.*]] = extractvalue { i64, i1 } [[TMP3420]], 1
// CHECK-NEXT:    [[TMP3424:%.*]] = zext i1 [[TMP3423]] to i64
// CHECK-NEXT:    store i64 [[TMP3424]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3425:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3426:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3427:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3425]], i64 [[TMP3426]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3428:%.*]] = extractvalue { i64, i1 } [[TMP3427]], 0
// CHECK-NEXT:    [[TMP3429:%.*]] = extractvalue { i64, i1 } [[TMP3427]], 1
// CHECK-NEXT:    br i1 [[TMP3429]], label [[ULX_ATOMIC_EXIT392:%.*]], label [[ULX_ATOMIC_CONT393:%.*]]
// CHECK:       ulx.atomic.cont393:
// CHECK-NEXT:    store i64 [[TMP3428]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT392]]
// CHECK:       ulx.atomic.exit392:
// CHECK-NEXT:    [[TMP3430:%.*]] = extractvalue { i64, i1 } [[TMP3427]], 1
// CHECK-NEXT:    [[TMP3431:%.*]] = zext i1 [[TMP3430]] to i64
// CHECK-NEXT:    store i64 [[TMP3431]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3432:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3433:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3432]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3433]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3434:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3435:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3434]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3435]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3436:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3437:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3436]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3437]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3438:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3439:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3438]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3439]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3440:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3441:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3442:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3440]], i64 [[TMP3441]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3443:%.*]] = extractvalue { i64, i1 } [[TMP3442]], 0
// CHECK-NEXT:    store i64 [[TMP3443]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3444:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3445:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3446:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3444]], i64 [[TMP3445]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3447:%.*]] = extractvalue { i64, i1 } [[TMP3446]], 0
// CHECK-NEXT:    store i64 [[TMP3447]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3448:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3449:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3448]] acquire, align 8
// CHECK-NEXT:    [[TMP3450:%.*]] = icmp ugt i64 [[TMP3449]], [[TMP3448]]
// CHECK-NEXT:    [[TMP3451:%.*]] = select i1 [[TMP3450]], i64 [[TMP3448]], i64 [[TMP3449]]
// CHECK-NEXT:    store i64 [[TMP3451]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3452:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3453:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3452]] acquire, align 8
// CHECK-NEXT:    [[TMP3454:%.*]] = icmp ult i64 [[TMP3453]], [[TMP3452]]
// CHECK-NEXT:    [[TMP3455:%.*]] = select i1 [[TMP3454]], i64 [[TMP3452]], i64 [[TMP3453]]
// CHECK-NEXT:    store i64 [[TMP3455]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3456:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3457:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3456]] acquire, align 8
// CHECK-NEXT:    [[TMP3458:%.*]] = icmp ult i64 [[TMP3457]], [[TMP3456]]
// CHECK-NEXT:    [[TMP3459:%.*]] = select i1 [[TMP3458]], i64 [[TMP3456]], i64 [[TMP3457]]
// CHECK-NEXT:    store i64 [[TMP3459]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3460:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3461:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3460]] acquire, align 8
// CHECK-NEXT:    [[TMP3462:%.*]] = icmp ugt i64 [[TMP3461]], [[TMP3460]]
// CHECK-NEXT:    [[TMP3463:%.*]] = select i1 [[TMP3462]], i64 [[TMP3460]], i64 [[TMP3461]]
// CHECK-NEXT:    store i64 [[TMP3463]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3464:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3465:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3466:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3464]], i64 [[TMP3465]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3467:%.*]] = extractvalue { i64, i1 } [[TMP3466]], 0
// CHECK-NEXT:    [[TMP3468:%.*]] = extractvalue { i64, i1 } [[TMP3466]], 1
// CHECK-NEXT:    [[TMP3469:%.*]] = select i1 [[TMP3468]], i64 [[TMP3464]], i64 [[TMP3467]]
// CHECK-NEXT:    store i64 [[TMP3469]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3470:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3471:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3472:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3470]], i64 [[TMP3471]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3473:%.*]] = extractvalue { i64, i1 } [[TMP3472]], 0
// CHECK-NEXT:    [[TMP3474:%.*]] = extractvalue { i64, i1 } [[TMP3472]], 1
// CHECK-NEXT:    [[TMP3475:%.*]] = select i1 [[TMP3474]], i64 [[TMP3470]], i64 [[TMP3473]]
// CHECK-NEXT:    store i64 [[TMP3475]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3476:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3477:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3478:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3476]], i64 [[TMP3477]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3479:%.*]] = extractvalue { i64, i1 } [[TMP3478]], 0
// CHECK-NEXT:    [[TMP3480:%.*]] = extractvalue { i64, i1 } [[TMP3478]], 1
// CHECK-NEXT:    br i1 [[TMP3480]], label [[ULX_ATOMIC_EXIT394:%.*]], label [[ULX_ATOMIC_CONT395:%.*]]
// CHECK:       ulx.atomic.cont395:
// CHECK-NEXT:    store i64 [[TMP3479]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT394]]
// CHECK:       ulx.atomic.exit394:
// CHECK-NEXT:    [[TMP3481:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3482:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3483:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3481]], i64 [[TMP3482]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3484:%.*]] = extractvalue { i64, i1 } [[TMP3483]], 0
// CHECK-NEXT:    [[TMP3485:%.*]] = extractvalue { i64, i1 } [[TMP3483]], 1
// CHECK-NEXT:    br i1 [[TMP3485]], label [[ULX_ATOMIC_EXIT396:%.*]], label [[ULX_ATOMIC_CONT397:%.*]]
// CHECK:       ulx.atomic.cont397:
// CHECK-NEXT:    store i64 [[TMP3484]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT396]]
// CHECK:       ulx.atomic.exit396:
// CHECK-NEXT:    [[TMP3486:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3487:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3488:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3486]], i64 [[TMP3487]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3489:%.*]] = extractvalue { i64, i1 } [[TMP3488]], 1
// CHECK-NEXT:    [[TMP3490:%.*]] = zext i1 [[TMP3489]] to i64
// CHECK-NEXT:    store i64 [[TMP3490]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3491:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3492:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3493:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3491]], i64 [[TMP3492]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3494:%.*]] = extractvalue { i64, i1 } [[TMP3493]], 1
// CHECK-NEXT:    [[TMP3495:%.*]] = zext i1 [[TMP3494]] to i64
// CHECK-NEXT:    store i64 [[TMP3495]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3496:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3497:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3498:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3496]], i64 [[TMP3497]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3499:%.*]] = extractvalue { i64, i1 } [[TMP3498]], 0
// CHECK-NEXT:    [[TMP3500:%.*]] = extractvalue { i64, i1 } [[TMP3498]], 1
// CHECK-NEXT:    br i1 [[TMP3500]], label [[ULX_ATOMIC_EXIT398:%.*]], label [[ULX_ATOMIC_CONT399:%.*]]
// CHECK:       ulx.atomic.cont399:
// CHECK-NEXT:    store i64 [[TMP3499]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT398]]
// CHECK:       ulx.atomic.exit398:
// CHECK-NEXT:    [[TMP3501:%.*]] = extractvalue { i64, i1 } [[TMP3498]], 1
// CHECK-NEXT:    [[TMP3502:%.*]] = zext i1 [[TMP3501]] to i64
// CHECK-NEXT:    store i64 [[TMP3502]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3503:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3504:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3505:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3503]], i64 [[TMP3504]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3506:%.*]] = extractvalue { i64, i1 } [[TMP3505]], 0
// CHECK-NEXT:    [[TMP3507:%.*]] = extractvalue { i64, i1 } [[TMP3505]], 1
// CHECK-NEXT:    br i1 [[TMP3507]], label [[ULX_ATOMIC_EXIT400:%.*]], label [[ULX_ATOMIC_CONT401:%.*]]
// CHECK:       ulx.atomic.cont401:
// CHECK-NEXT:    store i64 [[TMP3506]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT400]]
// CHECK:       ulx.atomic.exit400:
// CHECK-NEXT:    [[TMP3508:%.*]] = extractvalue { i64, i1 } [[TMP3505]], 1
// CHECK-NEXT:    [[TMP3509:%.*]] = zext i1 [[TMP3508]] to i64
// CHECK-NEXT:    store i64 [[TMP3509]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3510:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3511:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3510]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3511]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3512:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3513:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3512]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3513]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3514:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3515:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3514]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3515]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3516:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3517:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3516]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3517]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3518:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3519:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3520:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3518]], i64 [[TMP3519]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3521:%.*]] = extractvalue { i64, i1 } [[TMP3520]], 0
// CHECK-NEXT:    store i64 [[TMP3521]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3522:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3523:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3524:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3522]], i64 [[TMP3523]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3525:%.*]] = extractvalue { i64, i1 } [[TMP3524]], 0
// CHECK-NEXT:    store i64 [[TMP3525]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3526:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3527:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3526]] monotonic, align 8
// CHECK-NEXT:    [[TMP3528:%.*]] = icmp ugt i64 [[TMP3527]], [[TMP3526]]
// CHECK-NEXT:    [[TMP3529:%.*]] = select i1 [[TMP3528]], i64 [[TMP3526]], i64 [[TMP3527]]
// CHECK-NEXT:    store i64 [[TMP3529]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3530:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3531:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3530]] monotonic, align 8
// CHECK-NEXT:    [[TMP3532:%.*]] = icmp ult i64 [[TMP3531]], [[TMP3530]]
// CHECK-NEXT:    [[TMP3533:%.*]] = select i1 [[TMP3532]], i64 [[TMP3530]], i64 [[TMP3531]]
// CHECK-NEXT:    store i64 [[TMP3533]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3534:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3535:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3534]] monotonic, align 8
// CHECK-NEXT:    [[TMP3536:%.*]] = icmp ult i64 [[TMP3535]], [[TMP3534]]
// CHECK-NEXT:    [[TMP3537:%.*]] = select i1 [[TMP3536]], i64 [[TMP3534]], i64 [[TMP3535]]
// CHECK-NEXT:    store i64 [[TMP3537]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3538:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3539:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3538]] monotonic, align 8
// CHECK-NEXT:    [[TMP3540:%.*]] = icmp ugt i64 [[TMP3539]], [[TMP3538]]
// CHECK-NEXT:    [[TMP3541:%.*]] = select i1 [[TMP3540]], i64 [[TMP3538]], i64 [[TMP3539]]
// CHECK-NEXT:    store i64 [[TMP3541]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3542:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3543:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3544:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3542]], i64 [[TMP3543]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3545:%.*]] = extractvalue { i64, i1 } [[TMP3544]], 0
// CHECK-NEXT:    [[TMP3546:%.*]] = extractvalue { i64, i1 } [[TMP3544]], 1
// CHECK-NEXT:    [[TMP3547:%.*]] = select i1 [[TMP3546]], i64 [[TMP3542]], i64 [[TMP3545]]
// CHECK-NEXT:    store i64 [[TMP3547]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3548:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3549:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3550:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3548]], i64 [[TMP3549]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3551:%.*]] = extractvalue { i64, i1 } [[TMP3550]], 0
// CHECK-NEXT:    [[TMP3552:%.*]] = extractvalue { i64, i1 } [[TMP3550]], 1
// CHECK-NEXT:    [[TMP3553:%.*]] = select i1 [[TMP3552]], i64 [[TMP3548]], i64 [[TMP3551]]
// CHECK-NEXT:    store i64 [[TMP3553]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3554:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3555:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3556:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3554]], i64 [[TMP3555]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3557:%.*]] = extractvalue { i64, i1 } [[TMP3556]], 0
// CHECK-NEXT:    [[TMP3558:%.*]] = extractvalue { i64, i1 } [[TMP3556]], 1
// CHECK-NEXT:    br i1 [[TMP3558]], label [[ULX_ATOMIC_EXIT402:%.*]], label [[ULX_ATOMIC_CONT403:%.*]]
// CHECK:       ulx.atomic.cont403:
// CHECK-NEXT:    store i64 [[TMP3557]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT402]]
// CHECK:       ulx.atomic.exit402:
// CHECK-NEXT:    [[TMP3559:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3560:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3561:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3559]], i64 [[TMP3560]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3562:%.*]] = extractvalue { i64, i1 } [[TMP3561]], 0
// CHECK-NEXT:    [[TMP3563:%.*]] = extractvalue { i64, i1 } [[TMP3561]], 1
// CHECK-NEXT:    br i1 [[TMP3563]], label [[ULX_ATOMIC_EXIT404:%.*]], label [[ULX_ATOMIC_CONT405:%.*]]
// CHECK:       ulx.atomic.cont405:
// CHECK-NEXT:    store i64 [[TMP3562]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT404]]
// CHECK:       ulx.atomic.exit404:
// CHECK-NEXT:    [[TMP3564:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3565:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3566:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3564]], i64 [[TMP3565]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3567:%.*]] = extractvalue { i64, i1 } [[TMP3566]], 1
// CHECK-NEXT:    [[TMP3568:%.*]] = zext i1 [[TMP3567]] to i64
// CHECK-NEXT:    store i64 [[TMP3568]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3569:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3570:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3571:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3569]], i64 [[TMP3570]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3572:%.*]] = extractvalue { i64, i1 } [[TMP3571]], 1
// CHECK-NEXT:    [[TMP3573:%.*]] = zext i1 [[TMP3572]] to i64
// CHECK-NEXT:    store i64 [[TMP3573]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3574:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3575:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3576:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3574]], i64 [[TMP3575]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3577:%.*]] = extractvalue { i64, i1 } [[TMP3576]], 0
// CHECK-NEXT:    [[TMP3578:%.*]] = extractvalue { i64, i1 } [[TMP3576]], 1
// CHECK-NEXT:    br i1 [[TMP3578]], label [[ULX_ATOMIC_EXIT406:%.*]], label [[ULX_ATOMIC_CONT407:%.*]]
// CHECK:       ulx.atomic.cont407:
// CHECK-NEXT:    store i64 [[TMP3577]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT406]]
// CHECK:       ulx.atomic.exit406:
// CHECK-NEXT:    [[TMP3579:%.*]] = extractvalue { i64, i1 } [[TMP3576]], 1
// CHECK-NEXT:    [[TMP3580:%.*]] = zext i1 [[TMP3579]] to i64
// CHECK-NEXT:    store i64 [[TMP3580]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3581:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3582:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3583:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3581]], i64 [[TMP3582]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3584:%.*]] = extractvalue { i64, i1 } [[TMP3583]], 0
// CHECK-NEXT:    [[TMP3585:%.*]] = extractvalue { i64, i1 } [[TMP3583]], 1
// CHECK-NEXT:    br i1 [[TMP3585]], label [[ULX_ATOMIC_EXIT408:%.*]], label [[ULX_ATOMIC_CONT409:%.*]]
// CHECK:       ulx.atomic.cont409:
// CHECK-NEXT:    store i64 [[TMP3584]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT408]]
// CHECK:       ulx.atomic.exit408:
// CHECK-NEXT:    [[TMP3586:%.*]] = extractvalue { i64, i1 } [[TMP3583]], 1
// CHECK-NEXT:    [[TMP3587:%.*]] = zext i1 [[TMP3586]] to i64
// CHECK-NEXT:    store i64 [[TMP3587]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3588:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3589:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3588]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3589]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3590:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3591:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3590]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3591]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3592:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3593:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3592]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3593]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3594:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3595:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3594]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3595]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3596:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3597:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3598:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3596]], i64 [[TMP3597]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3599:%.*]] = extractvalue { i64, i1 } [[TMP3598]], 0
// CHECK-NEXT:    store i64 [[TMP3599]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3600:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3601:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3602:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3600]], i64 [[TMP3601]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3603:%.*]] = extractvalue { i64, i1 } [[TMP3602]], 0
// CHECK-NEXT:    store i64 [[TMP3603]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3604:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3605:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3604]] release, align 8
// CHECK-NEXT:    [[TMP3606:%.*]] = icmp ugt i64 [[TMP3605]], [[TMP3604]]
// CHECK-NEXT:    [[TMP3607:%.*]] = select i1 [[TMP3606]], i64 [[TMP3604]], i64 [[TMP3605]]
// CHECK-NEXT:    store i64 [[TMP3607]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3608:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3609:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3608]] release, align 8
// CHECK-NEXT:    [[TMP3610:%.*]] = icmp ult i64 [[TMP3609]], [[TMP3608]]
// CHECK-NEXT:    [[TMP3611:%.*]] = select i1 [[TMP3610]], i64 [[TMP3608]], i64 [[TMP3609]]
// CHECK-NEXT:    store i64 [[TMP3611]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3612:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3613:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3612]] release, align 8
// CHECK-NEXT:    [[TMP3614:%.*]] = icmp ult i64 [[TMP3613]], [[TMP3612]]
// CHECK-NEXT:    [[TMP3615:%.*]] = select i1 [[TMP3614]], i64 [[TMP3612]], i64 [[TMP3613]]
// CHECK-NEXT:    store i64 [[TMP3615]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3616:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3617:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3616]] release, align 8
// CHECK-NEXT:    [[TMP3618:%.*]] = icmp ugt i64 [[TMP3617]], [[TMP3616]]
// CHECK-NEXT:    [[TMP3619:%.*]] = select i1 [[TMP3618]], i64 [[TMP3616]], i64 [[TMP3617]]
// CHECK-NEXT:    store i64 [[TMP3619]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3620:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3621:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3622:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3620]], i64 [[TMP3621]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3623:%.*]] = extractvalue { i64, i1 } [[TMP3622]], 0
// CHECK-NEXT:    [[TMP3624:%.*]] = extractvalue { i64, i1 } [[TMP3622]], 1
// CHECK-NEXT:    [[TMP3625:%.*]] = select i1 [[TMP3624]], i64 [[TMP3620]], i64 [[TMP3623]]
// CHECK-NEXT:    store i64 [[TMP3625]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3626:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3627:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3628:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3626]], i64 [[TMP3627]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3629:%.*]] = extractvalue { i64, i1 } [[TMP3628]], 0
// CHECK-NEXT:    [[TMP3630:%.*]] = extractvalue { i64, i1 } [[TMP3628]], 1
// CHECK-NEXT:    [[TMP3631:%.*]] = select i1 [[TMP3630]], i64 [[TMP3626]], i64 [[TMP3629]]
// CHECK-NEXT:    store i64 [[TMP3631]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3632:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3633:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3634:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3632]], i64 [[TMP3633]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3635:%.*]] = extractvalue { i64, i1 } [[TMP3634]], 0
// CHECK-NEXT:    [[TMP3636:%.*]] = extractvalue { i64, i1 } [[TMP3634]], 1
// CHECK-NEXT:    br i1 [[TMP3636]], label [[ULX_ATOMIC_EXIT410:%.*]], label [[ULX_ATOMIC_CONT411:%.*]]
// CHECK:       ulx.atomic.cont411:
// CHECK-NEXT:    store i64 [[TMP3635]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT410]]
// CHECK:       ulx.atomic.exit410:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3637:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3638:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3639:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3637]], i64 [[TMP3638]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3640:%.*]] = extractvalue { i64, i1 } [[TMP3639]], 0
// CHECK-NEXT:    [[TMP3641:%.*]] = extractvalue { i64, i1 } [[TMP3639]], 1
// CHECK-NEXT:    br i1 [[TMP3641]], label [[ULX_ATOMIC_EXIT412:%.*]], label [[ULX_ATOMIC_CONT413:%.*]]
// CHECK:       ulx.atomic.cont413:
// CHECK-NEXT:    store i64 [[TMP3640]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT412]]
// CHECK:       ulx.atomic.exit412:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3642:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3643:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3644:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3642]], i64 [[TMP3643]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3645:%.*]] = extractvalue { i64, i1 } [[TMP3644]], 1
// CHECK-NEXT:    [[TMP3646:%.*]] = zext i1 [[TMP3645]] to i64
// CHECK-NEXT:    store i64 [[TMP3646]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3647:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3648:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3649:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3647]], i64 [[TMP3648]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3650:%.*]] = extractvalue { i64, i1 } [[TMP3649]], 1
// CHECK-NEXT:    [[TMP3651:%.*]] = zext i1 [[TMP3650]] to i64
// CHECK-NEXT:    store i64 [[TMP3651]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3652:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3653:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3654:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3652]], i64 [[TMP3653]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3655:%.*]] = extractvalue { i64, i1 } [[TMP3654]], 0
// CHECK-NEXT:    [[TMP3656:%.*]] = extractvalue { i64, i1 } [[TMP3654]], 1
// CHECK-NEXT:    br i1 [[TMP3656]], label [[ULX_ATOMIC_EXIT414:%.*]], label [[ULX_ATOMIC_CONT415:%.*]]
// CHECK:       ulx.atomic.cont415:
// CHECK-NEXT:    store i64 [[TMP3655]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT414]]
// CHECK:       ulx.atomic.exit414:
// CHECK-NEXT:    [[TMP3657:%.*]] = extractvalue { i64, i1 } [[TMP3654]], 1
// CHECK-NEXT:    [[TMP3658:%.*]] = zext i1 [[TMP3657]] to i64
// CHECK-NEXT:    store i64 [[TMP3658]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3659:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3660:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3661:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3659]], i64 [[TMP3660]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3662:%.*]] = extractvalue { i64, i1 } [[TMP3661]], 0
// CHECK-NEXT:    [[TMP3663:%.*]] = extractvalue { i64, i1 } [[TMP3661]], 1
// CHECK-NEXT:    br i1 [[TMP3663]], label [[ULX_ATOMIC_EXIT416:%.*]], label [[ULX_ATOMIC_CONT417:%.*]]
// CHECK:       ulx.atomic.cont417:
// CHECK-NEXT:    store i64 [[TMP3662]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT416]]
// CHECK:       ulx.atomic.exit416:
// CHECK-NEXT:    [[TMP3664:%.*]] = extractvalue { i64, i1 } [[TMP3661]], 1
// CHECK-NEXT:    [[TMP3665:%.*]] = zext i1 [[TMP3664]] to i64
// CHECK-NEXT:    store i64 [[TMP3665]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3666:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3667:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3666]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3667]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3668:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3669:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3668]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3669]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3670:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3671:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3670]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3671]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3672:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3673:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3672]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3673]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3674:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3675:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3676:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3674]], i64 [[TMP3675]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3677:%.*]] = extractvalue { i64, i1 } [[TMP3676]], 0
// CHECK-NEXT:    store i64 [[TMP3677]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3678:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3679:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3680:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3678]], i64 [[TMP3679]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3681:%.*]] = extractvalue { i64, i1 } [[TMP3680]], 0
// CHECK-NEXT:    store i64 [[TMP3681]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3682:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3683:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3682]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3684:%.*]] = icmp ugt i64 [[TMP3683]], [[TMP3682]]
// CHECK-NEXT:    [[TMP3685:%.*]] = select i1 [[TMP3684]], i64 [[TMP3682]], i64 [[TMP3683]]
// CHECK-NEXT:    store i64 [[TMP3685]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3686:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3687:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3686]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3688:%.*]] = icmp ult i64 [[TMP3687]], [[TMP3686]]
// CHECK-NEXT:    [[TMP3689:%.*]] = select i1 [[TMP3688]], i64 [[TMP3686]], i64 [[TMP3687]]
// CHECK-NEXT:    store i64 [[TMP3689]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3690:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3691:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3690]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3692:%.*]] = icmp ult i64 [[TMP3691]], [[TMP3690]]
// CHECK-NEXT:    [[TMP3693:%.*]] = select i1 [[TMP3692]], i64 [[TMP3690]], i64 [[TMP3691]]
// CHECK-NEXT:    store i64 [[TMP3693]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3694:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3695:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3694]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3696:%.*]] = icmp ugt i64 [[TMP3695]], [[TMP3694]]
// CHECK-NEXT:    [[TMP3697:%.*]] = select i1 [[TMP3696]], i64 [[TMP3694]], i64 [[TMP3695]]
// CHECK-NEXT:    store i64 [[TMP3697]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3698:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3699:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3700:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3698]], i64 [[TMP3699]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3701:%.*]] = extractvalue { i64, i1 } [[TMP3700]], 0
// CHECK-NEXT:    [[TMP3702:%.*]] = extractvalue { i64, i1 } [[TMP3700]], 1
// CHECK-NEXT:    [[TMP3703:%.*]] = select i1 [[TMP3702]], i64 [[TMP3698]], i64 [[TMP3701]]
// CHECK-NEXT:    store i64 [[TMP3703]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3704:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3705:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3706:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3704]], i64 [[TMP3705]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3707:%.*]] = extractvalue { i64, i1 } [[TMP3706]], 0
// CHECK-NEXT:    [[TMP3708:%.*]] = extractvalue { i64, i1 } [[TMP3706]], 1
// CHECK-NEXT:    [[TMP3709:%.*]] = select i1 [[TMP3708]], i64 [[TMP3704]], i64 [[TMP3707]]
// CHECK-NEXT:    store i64 [[TMP3709]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3710:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3711:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3712:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3710]], i64 [[TMP3711]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3713:%.*]] = extractvalue { i64, i1 } [[TMP3712]], 0
// CHECK-NEXT:    [[TMP3714:%.*]] = extractvalue { i64, i1 } [[TMP3712]], 1
// CHECK-NEXT:    br i1 [[TMP3714]], label [[ULX_ATOMIC_EXIT418:%.*]], label [[ULX_ATOMIC_CONT419:%.*]]
// CHECK:       ulx.atomic.cont419:
// CHECK-NEXT:    store i64 [[TMP3713]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT418]]
// CHECK:       ulx.atomic.exit418:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3715:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3716:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3717:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3715]], i64 [[TMP3716]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3718:%.*]] = extractvalue { i64, i1 } [[TMP3717]], 0
// CHECK-NEXT:    [[TMP3719:%.*]] = extractvalue { i64, i1 } [[TMP3717]], 1
// CHECK-NEXT:    br i1 [[TMP3719]], label [[ULX_ATOMIC_EXIT420:%.*]], label [[ULX_ATOMIC_CONT421:%.*]]
// CHECK:       ulx.atomic.cont421:
// CHECK-NEXT:    store i64 [[TMP3718]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT420]]
// CHECK:       ulx.atomic.exit420:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3720:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3721:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3722:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3720]], i64 [[TMP3721]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3723:%.*]] = extractvalue { i64, i1 } [[TMP3722]], 1
// CHECK-NEXT:    [[TMP3724:%.*]] = zext i1 [[TMP3723]] to i64
// CHECK-NEXT:    store i64 [[TMP3724]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3725:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3726:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3727:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3725]], i64 [[TMP3726]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3728:%.*]] = extractvalue { i64, i1 } [[TMP3727]], 1
// CHECK-NEXT:    [[TMP3729:%.*]] = zext i1 [[TMP3728]] to i64
// CHECK-NEXT:    store i64 [[TMP3729]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3730:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3731:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3732:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3730]], i64 [[TMP3731]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3733:%.*]] = extractvalue { i64, i1 } [[TMP3732]], 0
// CHECK-NEXT:    [[TMP3734:%.*]] = extractvalue { i64, i1 } [[TMP3732]], 1
// CHECK-NEXT:    br i1 [[TMP3734]], label [[ULX_ATOMIC_EXIT422:%.*]], label [[ULX_ATOMIC_CONT423:%.*]]
// CHECK:       ulx.atomic.cont423:
// CHECK-NEXT:    store i64 [[TMP3733]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT422]]
// CHECK:       ulx.atomic.exit422:
// CHECK-NEXT:    [[TMP3735:%.*]] = extractvalue { i64, i1 } [[TMP3732]], 1
// CHECK-NEXT:    [[TMP3736:%.*]] = zext i1 [[TMP3735]] to i64
// CHECK-NEXT:    store i64 [[TMP3736]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3737:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3738:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3739:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3737]], i64 [[TMP3738]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3740:%.*]] = extractvalue { i64, i1 } [[TMP3739]], 0
// CHECK-NEXT:    [[TMP3741:%.*]] = extractvalue { i64, i1 } [[TMP3739]], 1
// CHECK-NEXT:    br i1 [[TMP3741]], label [[ULX_ATOMIC_EXIT424:%.*]], label [[ULX_ATOMIC_CONT425:%.*]]
// CHECK:       ulx.atomic.cont425:
// CHECK-NEXT:    store i64 [[TMP3740]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT424]]
// CHECK:       ulx.atomic.exit424:
// CHECK-NEXT:    [[TMP3742:%.*]] = extractvalue { i64, i1 } [[TMP3739]], 1
// CHECK-NEXT:    [[TMP3743:%.*]] = zext i1 [[TMP3742]] to i64
// CHECK-NEXT:    store i64 [[TMP3743]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3744:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3745:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3744]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3745]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3746:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3747:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3746]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3747]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3748:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3749:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3748]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3749]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3750:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3751:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3750]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3751]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3752:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3753:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3754:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3752]], i64 [[TMP3753]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3755:%.*]] = extractvalue { i64, i1 } [[TMP3754]], 0
// CHECK-NEXT:    store i64 [[TMP3755]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3756:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3757:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3758:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3756]], i64 [[TMP3757]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3759:%.*]] = extractvalue { i64, i1 } [[TMP3758]], 0
// CHECK-NEXT:    store i64 [[TMP3759]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3760:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3761:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3760]] monotonic, align 8
// CHECK-NEXT:    [[TMP3762:%.*]] = icmp sgt i64 [[TMP3761]], [[TMP3760]]
// CHECK-NEXT:    [[TMP3763:%.*]] = select i1 [[TMP3762]], i64 [[TMP3760]], i64 [[TMP3761]]
// CHECK-NEXT:    store i64 [[TMP3763]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3764:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3765:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3764]] monotonic, align 8
// CHECK-NEXT:    [[TMP3766:%.*]] = icmp slt i64 [[TMP3765]], [[TMP3764]]
// CHECK-NEXT:    [[TMP3767:%.*]] = select i1 [[TMP3766]], i64 [[TMP3764]], i64 [[TMP3765]]
// CHECK-NEXT:    store i64 [[TMP3767]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3768:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3769:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3768]] monotonic, align 8
// CHECK-NEXT:    [[TMP3770:%.*]] = icmp slt i64 [[TMP3769]], [[TMP3768]]
// CHECK-NEXT:    [[TMP3771:%.*]] = select i1 [[TMP3770]], i64 [[TMP3768]], i64 [[TMP3769]]
// CHECK-NEXT:    store i64 [[TMP3771]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3772:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3773:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3772]] monotonic, align 8
// CHECK-NEXT:    [[TMP3774:%.*]] = icmp sgt i64 [[TMP3773]], [[TMP3772]]
// CHECK-NEXT:    [[TMP3775:%.*]] = select i1 [[TMP3774]], i64 [[TMP3772]], i64 [[TMP3773]]
// CHECK-NEXT:    store i64 [[TMP3775]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3776:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3777:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3778:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3776]], i64 [[TMP3777]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3779:%.*]] = extractvalue { i64, i1 } [[TMP3778]], 0
// CHECK-NEXT:    [[TMP3780:%.*]] = extractvalue { i64, i1 } [[TMP3778]], 1
// CHECK-NEXT:    [[TMP3781:%.*]] = select i1 [[TMP3780]], i64 [[TMP3776]], i64 [[TMP3779]]
// CHECK-NEXT:    store i64 [[TMP3781]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3782:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3783:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3784:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3782]], i64 [[TMP3783]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3785:%.*]] = extractvalue { i64, i1 } [[TMP3784]], 0
// CHECK-NEXT:    [[TMP3786:%.*]] = extractvalue { i64, i1 } [[TMP3784]], 1
// CHECK-NEXT:    [[TMP3787:%.*]] = select i1 [[TMP3786]], i64 [[TMP3782]], i64 [[TMP3785]]
// CHECK-NEXT:    store i64 [[TMP3787]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3788:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3789:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3790:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3788]], i64 [[TMP3789]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3791:%.*]] = extractvalue { i64, i1 } [[TMP3790]], 0
// CHECK-NEXT:    [[TMP3792:%.*]] = extractvalue { i64, i1 } [[TMP3790]], 1
// CHECK-NEXT:    br i1 [[TMP3792]], label [[LLX_ATOMIC_EXIT:%.*]], label [[LLX_ATOMIC_CONT:%.*]]
// CHECK:       llx.atomic.cont:
// CHECK-NEXT:    store i64 [[TMP3791]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT]]
// CHECK:       llx.atomic.exit:
// CHECK-NEXT:    [[TMP3793:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3794:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3795:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3793]], i64 [[TMP3794]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3796:%.*]] = extractvalue { i64, i1 } [[TMP3795]], 0
// CHECK-NEXT:    [[TMP3797:%.*]] = extractvalue { i64, i1 } [[TMP3795]], 1
// CHECK-NEXT:    br i1 [[TMP3797]], label [[LLX_ATOMIC_EXIT426:%.*]], label [[LLX_ATOMIC_CONT427:%.*]]
// CHECK:       llx.atomic.cont427:
// CHECK-NEXT:    store i64 [[TMP3796]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT426]]
// CHECK:       llx.atomic.exit426:
// CHECK-NEXT:    [[TMP3798:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3799:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3800:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3798]], i64 [[TMP3799]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3801:%.*]] = extractvalue { i64, i1 } [[TMP3800]], 1
// CHECK-NEXT:    [[TMP3802:%.*]] = sext i1 [[TMP3801]] to i64
// CHECK-NEXT:    store i64 [[TMP3802]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3803:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3804:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3805:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3803]], i64 [[TMP3804]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3806:%.*]] = extractvalue { i64, i1 } [[TMP3805]], 1
// CHECK-NEXT:    [[TMP3807:%.*]] = sext i1 [[TMP3806]] to i64
// CHECK-NEXT:    store i64 [[TMP3807]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3808:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3809:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3810:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3808]], i64 [[TMP3809]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3811:%.*]] = extractvalue { i64, i1 } [[TMP3810]], 0
// CHECK-NEXT:    [[TMP3812:%.*]] = extractvalue { i64, i1 } [[TMP3810]], 1
// CHECK-NEXT:    br i1 [[TMP3812]], label [[LLX_ATOMIC_EXIT428:%.*]], label [[LLX_ATOMIC_CONT429:%.*]]
// CHECK:       llx.atomic.cont429:
// CHECK-NEXT:    store i64 [[TMP3811]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT428]]
// CHECK:       llx.atomic.exit428:
// CHECK-NEXT:    [[TMP3813:%.*]] = extractvalue { i64, i1 } [[TMP3810]], 1
// CHECK-NEXT:    [[TMP3814:%.*]] = sext i1 [[TMP3813]] to i64
// CHECK-NEXT:    store i64 [[TMP3814]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3815:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3816:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3817:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3815]], i64 [[TMP3816]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3818:%.*]] = extractvalue { i64, i1 } [[TMP3817]], 0
// CHECK-NEXT:    [[TMP3819:%.*]] = extractvalue { i64, i1 } [[TMP3817]], 1
// CHECK-NEXT:    br i1 [[TMP3819]], label [[LLX_ATOMIC_EXIT430:%.*]], label [[LLX_ATOMIC_CONT431:%.*]]
// CHECK:       llx.atomic.cont431:
// CHECK-NEXT:    store i64 [[TMP3818]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT430]]
// CHECK:       llx.atomic.exit430:
// CHECK-NEXT:    [[TMP3820:%.*]] = extractvalue { i64, i1 } [[TMP3817]], 1
// CHECK-NEXT:    [[TMP3821:%.*]] = sext i1 [[TMP3820]] to i64
// CHECK-NEXT:    store i64 [[TMP3821]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3822:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3823:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3822]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3823]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3824:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3825:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3824]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3825]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3826:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3827:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3826]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3827]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3828:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3829:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3828]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3829]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3830:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3831:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3832:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3830]], i64 [[TMP3831]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3833:%.*]] = extractvalue { i64, i1 } [[TMP3832]], 0
// CHECK-NEXT:    store i64 [[TMP3833]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3834:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3835:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3836:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3834]], i64 [[TMP3835]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3837:%.*]] = extractvalue { i64, i1 } [[TMP3836]], 0
// CHECK-NEXT:    store i64 [[TMP3837]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3838:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3839:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3838]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3840:%.*]] = icmp sgt i64 [[TMP3839]], [[TMP3838]]
// CHECK-NEXT:    [[TMP3841:%.*]] = select i1 [[TMP3840]], i64 [[TMP3838]], i64 [[TMP3839]]
// CHECK-NEXT:    store i64 [[TMP3841]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3842:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3843:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3842]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3844:%.*]] = icmp slt i64 [[TMP3843]], [[TMP3842]]
// CHECK-NEXT:    [[TMP3845:%.*]] = select i1 [[TMP3844]], i64 [[TMP3842]], i64 [[TMP3843]]
// CHECK-NEXT:    store i64 [[TMP3845]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3846:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3847:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3846]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3848:%.*]] = icmp slt i64 [[TMP3847]], [[TMP3846]]
// CHECK-NEXT:    [[TMP3849:%.*]] = select i1 [[TMP3848]], i64 [[TMP3846]], i64 [[TMP3847]]
// CHECK-NEXT:    store i64 [[TMP3849]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3850:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3851:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3850]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3852:%.*]] = icmp sgt i64 [[TMP3851]], [[TMP3850]]
// CHECK-NEXT:    [[TMP3853:%.*]] = select i1 [[TMP3852]], i64 [[TMP3850]], i64 [[TMP3851]]
// CHECK-NEXT:    store i64 [[TMP3853]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3854:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3855:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3856:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3854]], i64 [[TMP3855]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3857:%.*]] = extractvalue { i64, i1 } [[TMP3856]], 0
// CHECK-NEXT:    [[TMP3858:%.*]] = extractvalue { i64, i1 } [[TMP3856]], 1
// CHECK-NEXT:    [[TMP3859:%.*]] = select i1 [[TMP3858]], i64 [[TMP3854]], i64 [[TMP3857]]
// CHECK-NEXT:    store i64 [[TMP3859]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3860:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3861:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3862:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3860]], i64 [[TMP3861]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3863:%.*]] = extractvalue { i64, i1 } [[TMP3862]], 0
// CHECK-NEXT:    [[TMP3864:%.*]] = extractvalue { i64, i1 } [[TMP3862]], 1
// CHECK-NEXT:    [[TMP3865:%.*]] = select i1 [[TMP3864]], i64 [[TMP3860]], i64 [[TMP3863]]
// CHECK-NEXT:    store i64 [[TMP3865]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3866:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3867:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3868:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3866]], i64 [[TMP3867]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3869:%.*]] = extractvalue { i64, i1 } [[TMP3868]], 0
// CHECK-NEXT:    [[TMP3870:%.*]] = extractvalue { i64, i1 } [[TMP3868]], 1
// CHECK-NEXT:    br i1 [[TMP3870]], label [[LLX_ATOMIC_EXIT432:%.*]], label [[LLX_ATOMIC_CONT433:%.*]]
// CHECK:       llx.atomic.cont433:
// CHECK-NEXT:    store i64 [[TMP3869]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT432]]
// CHECK:       llx.atomic.exit432:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3871:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3872:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3873:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3871]], i64 [[TMP3872]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3874:%.*]] = extractvalue { i64, i1 } [[TMP3873]], 0
// CHECK-NEXT:    [[TMP3875:%.*]] = extractvalue { i64, i1 } [[TMP3873]], 1
// CHECK-NEXT:    br i1 [[TMP3875]], label [[LLX_ATOMIC_EXIT434:%.*]], label [[LLX_ATOMIC_CONT435:%.*]]
// CHECK:       llx.atomic.cont435:
// CHECK-NEXT:    store i64 [[TMP3874]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT434]]
// CHECK:       llx.atomic.exit434:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3876:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3877:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3878:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3876]], i64 [[TMP3877]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3879:%.*]] = extractvalue { i64, i1 } [[TMP3878]], 1
// CHECK-NEXT:    [[TMP3880:%.*]] = sext i1 [[TMP3879]] to i64
// CHECK-NEXT:    store i64 [[TMP3880]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3881:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3882:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3883:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3881]], i64 [[TMP3882]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3884:%.*]] = extractvalue { i64, i1 } [[TMP3883]], 1
// CHECK-NEXT:    [[TMP3885:%.*]] = sext i1 [[TMP3884]] to i64
// CHECK-NEXT:    store i64 [[TMP3885]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3886:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3887:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3888:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3886]], i64 [[TMP3887]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3889:%.*]] = extractvalue { i64, i1 } [[TMP3888]], 0
// CHECK-NEXT:    [[TMP3890:%.*]] = extractvalue { i64, i1 } [[TMP3888]], 1
// CHECK-NEXT:    br i1 [[TMP3890]], label [[LLX_ATOMIC_EXIT436:%.*]], label [[LLX_ATOMIC_CONT437:%.*]]
// CHECK:       llx.atomic.cont437:
// CHECK-NEXT:    store i64 [[TMP3889]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT436]]
// CHECK:       llx.atomic.exit436:
// CHECK-NEXT:    [[TMP3891:%.*]] = extractvalue { i64, i1 } [[TMP3888]], 1
// CHECK-NEXT:    [[TMP3892:%.*]] = sext i1 [[TMP3891]] to i64
// CHECK-NEXT:    store i64 [[TMP3892]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3893:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3894:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3895:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3893]], i64 [[TMP3894]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3896:%.*]] = extractvalue { i64, i1 } [[TMP3895]], 0
// CHECK-NEXT:    [[TMP3897:%.*]] = extractvalue { i64, i1 } [[TMP3895]], 1
// CHECK-NEXT:    br i1 [[TMP3897]], label [[LLX_ATOMIC_EXIT438:%.*]], label [[LLX_ATOMIC_CONT439:%.*]]
// CHECK:       llx.atomic.cont439:
// CHECK-NEXT:    store i64 [[TMP3896]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT438]]
// CHECK:       llx.atomic.exit438:
// CHECK-NEXT:    [[TMP3898:%.*]] = extractvalue { i64, i1 } [[TMP3895]], 1
// CHECK-NEXT:    [[TMP3899:%.*]] = sext i1 [[TMP3898]] to i64
// CHECK-NEXT:    store i64 [[TMP3899]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3900:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3901:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3900]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3901]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3902:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3903:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3902]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3903]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3904:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3905:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3904]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3905]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3906:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3907:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3906]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3907]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3908:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3909:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3910:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3908]], i64 [[TMP3909]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3911:%.*]] = extractvalue { i64, i1 } [[TMP3910]], 0
// CHECK-NEXT:    store i64 [[TMP3911]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3912:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3913:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3914:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3912]], i64 [[TMP3913]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3915:%.*]] = extractvalue { i64, i1 } [[TMP3914]], 0
// CHECK-NEXT:    store i64 [[TMP3915]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3916:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3917:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3916]] acquire, align 8
// CHECK-NEXT:    [[TMP3918:%.*]] = icmp sgt i64 [[TMP3917]], [[TMP3916]]
// CHECK-NEXT:    [[TMP3919:%.*]] = select i1 [[TMP3918]], i64 [[TMP3916]], i64 [[TMP3917]]
// CHECK-NEXT:    store i64 [[TMP3919]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3920:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3921:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3920]] acquire, align 8
// CHECK-NEXT:    [[TMP3922:%.*]] = icmp slt i64 [[TMP3921]], [[TMP3920]]
// CHECK-NEXT:    [[TMP3923:%.*]] = select i1 [[TMP3922]], i64 [[TMP3920]], i64 [[TMP3921]]
// CHECK-NEXT:    store i64 [[TMP3923]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3924:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3925:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3924]] acquire, align 8
// CHECK-NEXT:    [[TMP3926:%.*]] = icmp slt i64 [[TMP3925]], [[TMP3924]]
// CHECK-NEXT:    [[TMP3927:%.*]] = select i1 [[TMP3926]], i64 [[TMP3924]], i64 [[TMP3925]]
// CHECK-NEXT:    store i64 [[TMP3927]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3928:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3929:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3928]] acquire, align 8
// CHECK-NEXT:    [[TMP3930:%.*]] = icmp sgt i64 [[TMP3929]], [[TMP3928]]
// CHECK-NEXT:    [[TMP3931:%.*]] = select i1 [[TMP3930]], i64 [[TMP3928]], i64 [[TMP3929]]
// CHECK-NEXT:    store i64 [[TMP3931]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3932:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3933:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3934:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3932]], i64 [[TMP3933]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3935:%.*]] = extractvalue { i64, i1 } [[TMP3934]], 0
// CHECK-NEXT:    [[TMP3936:%.*]] = extractvalue { i64, i1 } [[TMP3934]], 1
// CHECK-NEXT:    [[TMP3937:%.*]] = select i1 [[TMP3936]], i64 [[TMP3932]], i64 [[TMP3935]]
// CHECK-NEXT:    store i64 [[TMP3937]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3938:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3939:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3940:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3938]], i64 [[TMP3939]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3941:%.*]] = extractvalue { i64, i1 } [[TMP3940]], 0
// CHECK-NEXT:    [[TMP3942:%.*]] = extractvalue { i64, i1 } [[TMP3940]], 1
// CHECK-NEXT:    [[TMP3943:%.*]] = select i1 [[TMP3942]], i64 [[TMP3938]], i64 [[TMP3941]]
// CHECK-NEXT:    store i64 [[TMP3943]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3944:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3945:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3946:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3944]], i64 [[TMP3945]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3947:%.*]] = extractvalue { i64, i1 } [[TMP3946]], 0
// CHECK-NEXT:    [[TMP3948:%.*]] = extractvalue { i64, i1 } [[TMP3946]], 1
// CHECK-NEXT:    br i1 [[TMP3948]], label [[LLX_ATOMIC_EXIT440:%.*]], label [[LLX_ATOMIC_CONT441:%.*]]
// CHECK:       llx.atomic.cont441:
// CHECK-NEXT:    store i64 [[TMP3947]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT440]]
// CHECK:       llx.atomic.exit440:
// CHECK-NEXT:    [[TMP3949:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3950:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3951:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3949]], i64 [[TMP3950]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3952:%.*]] = extractvalue { i64, i1 } [[TMP3951]], 0
// CHECK-NEXT:    [[TMP3953:%.*]] = extractvalue { i64, i1 } [[TMP3951]], 1
// CHECK-NEXT:    br i1 [[TMP3953]], label [[LLX_ATOMIC_EXIT442:%.*]], label [[LLX_ATOMIC_CONT443:%.*]]
// CHECK:       llx.atomic.cont443:
// CHECK-NEXT:    store i64 [[TMP3952]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT442]]
// CHECK:       llx.atomic.exit442:
// CHECK-NEXT:    [[TMP3954:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3955:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3956:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3954]], i64 [[TMP3955]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3957:%.*]] = extractvalue { i64, i1 } [[TMP3956]], 1
// CHECK-NEXT:    [[TMP3958:%.*]] = sext i1 [[TMP3957]] to i64
// CHECK-NEXT:    store i64 [[TMP3958]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3959:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3960:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3961:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3959]], i64 [[TMP3960]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3962:%.*]] = extractvalue { i64, i1 } [[TMP3961]], 1
// CHECK-NEXT:    [[TMP3963:%.*]] = sext i1 [[TMP3962]] to i64
// CHECK-NEXT:    store i64 [[TMP3963]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3964:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3965:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3966:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3964]], i64 [[TMP3965]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3967:%.*]] = extractvalue { i64, i1 } [[TMP3966]], 0
// CHECK-NEXT:    [[TMP3968:%.*]] = extractvalue { i64, i1 } [[TMP3966]], 1
// CHECK-NEXT:    br i1 [[TMP3968]], label [[LLX_ATOMIC_EXIT444:%.*]], label [[LLX_ATOMIC_CONT445:%.*]]
// CHECK:       llx.atomic.cont445:
// CHECK-NEXT:    store i64 [[TMP3967]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT444]]
// CHECK:       llx.atomic.exit444:
// CHECK-NEXT:    [[TMP3969:%.*]] = extractvalue { i64, i1 } [[TMP3966]], 1
// CHECK-NEXT:    [[TMP3970:%.*]] = sext i1 [[TMP3969]] to i64
// CHECK-NEXT:    store i64 [[TMP3970]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3971:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3972:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3973:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3971]], i64 [[TMP3972]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3974:%.*]] = extractvalue { i64, i1 } [[TMP3973]], 0
// CHECK-NEXT:    [[TMP3975:%.*]] = extractvalue { i64, i1 } [[TMP3973]], 1
// CHECK-NEXT:    br i1 [[TMP3975]], label [[LLX_ATOMIC_EXIT446:%.*]], label [[LLX_ATOMIC_CONT447:%.*]]
// CHECK:       llx.atomic.cont447:
// CHECK-NEXT:    store i64 [[TMP3974]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT446]]
// CHECK:       llx.atomic.exit446:
// CHECK-NEXT:    [[TMP3976:%.*]] = extractvalue { i64, i1 } [[TMP3973]], 1
// CHECK-NEXT:    [[TMP3977:%.*]] = sext i1 [[TMP3976]] to i64
// CHECK-NEXT:    store i64 [[TMP3977]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3978:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3979:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3978]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3979]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3980:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3981:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3980]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3981]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3982:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3983:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3982]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3983]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3984:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3985:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3984]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3985]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3986:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3987:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3988:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3986]], i64 [[TMP3987]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3989:%.*]] = extractvalue { i64, i1 } [[TMP3988]], 0
// CHECK-NEXT:    store i64 [[TMP3989]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3990:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3991:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3992:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3990]], i64 [[TMP3991]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3993:%.*]] = extractvalue { i64, i1 } [[TMP3992]], 0
// CHECK-NEXT:    store i64 [[TMP3993]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3994:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3995:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3994]] monotonic, align 8
// CHECK-NEXT:    [[TMP3996:%.*]] = icmp sgt i64 [[TMP3995]], [[TMP3994]]
// CHECK-NEXT:    [[TMP3997:%.*]] = select i1 [[TMP3996]], i64 [[TMP3994]], i64 [[TMP3995]]
// CHECK-NEXT:    store i64 [[TMP3997]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3998:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3999:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3998]] monotonic, align 8
// CHECK-NEXT:    [[TMP4000:%.*]] = icmp slt i64 [[TMP3999]], [[TMP3998]]
// CHECK-NEXT:    [[TMP4001:%.*]] = select i1 [[TMP4000]], i64 [[TMP3998]], i64 [[TMP3999]]
// CHECK-NEXT:    store i64 [[TMP4001]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4002:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4003:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4002]] monotonic, align 8
// CHECK-NEXT:    [[TMP4004:%.*]] = icmp slt i64 [[TMP4003]], [[TMP4002]]
// CHECK-NEXT:    [[TMP4005:%.*]] = select i1 [[TMP4004]], i64 [[TMP4002]], i64 [[TMP4003]]
// CHECK-NEXT:    store i64 [[TMP4005]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4006:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4007:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4006]] monotonic, align 8
// CHECK-NEXT:    [[TMP4008:%.*]] = icmp sgt i64 [[TMP4007]], [[TMP4006]]
// CHECK-NEXT:    [[TMP4009:%.*]] = select i1 [[TMP4008]], i64 [[TMP4006]], i64 [[TMP4007]]
// CHECK-NEXT:    store i64 [[TMP4009]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4010:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4011:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4012:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4010]], i64 [[TMP4011]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4013:%.*]] = extractvalue { i64, i1 } [[TMP4012]], 0
// CHECK-NEXT:    [[TMP4014:%.*]] = extractvalue { i64, i1 } [[TMP4012]], 1
// CHECK-NEXT:    [[TMP4015:%.*]] = select i1 [[TMP4014]], i64 [[TMP4010]], i64 [[TMP4013]]
// CHECK-NEXT:    store i64 [[TMP4015]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4016:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4017:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4018:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4016]], i64 [[TMP4017]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4019:%.*]] = extractvalue { i64, i1 } [[TMP4018]], 0
// CHECK-NEXT:    [[TMP4020:%.*]] = extractvalue { i64, i1 } [[TMP4018]], 1
// CHECK-NEXT:    [[TMP4021:%.*]] = select i1 [[TMP4020]], i64 [[TMP4016]], i64 [[TMP4019]]
// CHECK-NEXT:    store i64 [[TMP4021]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4022:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4023:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4024:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4022]], i64 [[TMP4023]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4025:%.*]] = extractvalue { i64, i1 } [[TMP4024]], 0
// CHECK-NEXT:    [[TMP4026:%.*]] = extractvalue { i64, i1 } [[TMP4024]], 1
// CHECK-NEXT:    br i1 [[TMP4026]], label [[LLX_ATOMIC_EXIT448:%.*]], label [[LLX_ATOMIC_CONT449:%.*]]
// CHECK:       llx.atomic.cont449:
// CHECK-NEXT:    store i64 [[TMP4025]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT448]]
// CHECK:       llx.atomic.exit448:
// CHECK-NEXT:    [[TMP4027:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4028:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4029:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4027]], i64 [[TMP4028]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4030:%.*]] = extractvalue { i64, i1 } [[TMP4029]], 0
// CHECK-NEXT:    [[TMP4031:%.*]] = extractvalue { i64, i1 } [[TMP4029]], 1
// CHECK-NEXT:    br i1 [[TMP4031]], label [[LLX_ATOMIC_EXIT450:%.*]], label [[LLX_ATOMIC_CONT451:%.*]]
// CHECK:       llx.atomic.cont451:
// CHECK-NEXT:    store i64 [[TMP4030]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT450]]
// CHECK:       llx.atomic.exit450:
// CHECK-NEXT:    [[TMP4032:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4033:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4034:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4032]], i64 [[TMP4033]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4035:%.*]] = extractvalue { i64, i1 } [[TMP4034]], 1
// CHECK-NEXT:    [[TMP4036:%.*]] = sext i1 [[TMP4035]] to i64
// CHECK-NEXT:    store i64 [[TMP4036]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4037:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4038:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4039:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4037]], i64 [[TMP4038]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4040:%.*]] = extractvalue { i64, i1 } [[TMP4039]], 1
// CHECK-NEXT:    [[TMP4041:%.*]] = sext i1 [[TMP4040]] to i64
// CHECK-NEXT:    store i64 [[TMP4041]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4042:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4043:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4044:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4042]], i64 [[TMP4043]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4045:%.*]] = extractvalue { i64, i1 } [[TMP4044]], 0
// CHECK-NEXT:    [[TMP4046:%.*]] = extractvalue { i64, i1 } [[TMP4044]], 1
// CHECK-NEXT:    br i1 [[TMP4046]], label [[LLX_ATOMIC_EXIT452:%.*]], label [[LLX_ATOMIC_CONT453:%.*]]
// CHECK:       llx.atomic.cont453:
// CHECK-NEXT:    store i64 [[TMP4045]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT452]]
// CHECK:       llx.atomic.exit452:
// CHECK-NEXT:    [[TMP4047:%.*]] = extractvalue { i64, i1 } [[TMP4044]], 1
// CHECK-NEXT:    [[TMP4048:%.*]] = sext i1 [[TMP4047]] to i64
// CHECK-NEXT:    store i64 [[TMP4048]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4049:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4050:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4051:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4049]], i64 [[TMP4050]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4052:%.*]] = extractvalue { i64, i1 } [[TMP4051]], 0
// CHECK-NEXT:    [[TMP4053:%.*]] = extractvalue { i64, i1 } [[TMP4051]], 1
// CHECK-NEXT:    br i1 [[TMP4053]], label [[LLX_ATOMIC_EXIT454:%.*]], label [[LLX_ATOMIC_CONT455:%.*]]
// CHECK:       llx.atomic.cont455:
// CHECK-NEXT:    store i64 [[TMP4052]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT454]]
// CHECK:       llx.atomic.exit454:
// CHECK-NEXT:    [[TMP4054:%.*]] = extractvalue { i64, i1 } [[TMP4051]], 1
// CHECK-NEXT:    [[TMP4055:%.*]] = sext i1 [[TMP4054]] to i64
// CHECK-NEXT:    store i64 [[TMP4055]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4056:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4057:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4056]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4057]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4058:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4059:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4058]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4059]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4060:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4061:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4060]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4061]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4062:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4063:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4062]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4063]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4064:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4065:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4066:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4064]], i64 [[TMP4065]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4067:%.*]] = extractvalue { i64, i1 } [[TMP4066]], 0
// CHECK-NEXT:    store i64 [[TMP4067]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4068:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4069:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4070:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4068]], i64 [[TMP4069]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4071:%.*]] = extractvalue { i64, i1 } [[TMP4070]], 0
// CHECK-NEXT:    store i64 [[TMP4071]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4072:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4073:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4072]] release, align 8
// CHECK-NEXT:    [[TMP4074:%.*]] = icmp sgt i64 [[TMP4073]], [[TMP4072]]
// CHECK-NEXT:    [[TMP4075:%.*]] = select i1 [[TMP4074]], i64 [[TMP4072]], i64 [[TMP4073]]
// CHECK-NEXT:    store i64 [[TMP4075]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4076:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4077:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4076]] release, align 8
// CHECK-NEXT:    [[TMP4078:%.*]] = icmp slt i64 [[TMP4077]], [[TMP4076]]
// CHECK-NEXT:    [[TMP4079:%.*]] = select i1 [[TMP4078]], i64 [[TMP4076]], i64 [[TMP4077]]
// CHECK-NEXT:    store i64 [[TMP4079]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4080:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4081:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4080]] release, align 8
// CHECK-NEXT:    [[TMP4082:%.*]] = icmp slt i64 [[TMP4081]], [[TMP4080]]
// CHECK-NEXT:    [[TMP4083:%.*]] = select i1 [[TMP4082]], i64 [[TMP4080]], i64 [[TMP4081]]
// CHECK-NEXT:    store i64 [[TMP4083]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4084:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4085:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4084]] release, align 8
// CHECK-NEXT:    [[TMP4086:%.*]] = icmp sgt i64 [[TMP4085]], [[TMP4084]]
// CHECK-NEXT:    [[TMP4087:%.*]] = select i1 [[TMP4086]], i64 [[TMP4084]], i64 [[TMP4085]]
// CHECK-NEXT:    store i64 [[TMP4087]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4088:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4089:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4090:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4088]], i64 [[TMP4089]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4091:%.*]] = extractvalue { i64, i1 } [[TMP4090]], 0
// CHECK-NEXT:    [[TMP4092:%.*]] = extractvalue { i64, i1 } [[TMP4090]], 1
// CHECK-NEXT:    [[TMP4093:%.*]] = select i1 [[TMP4092]], i64 [[TMP4088]], i64 [[TMP4091]]
// CHECK-NEXT:    store i64 [[TMP4093]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4094:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4095:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4096:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4094]], i64 [[TMP4095]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4097:%.*]] = extractvalue { i64, i1 } [[TMP4096]], 0
// CHECK-NEXT:    [[TMP4098:%.*]] = extractvalue { i64, i1 } [[TMP4096]], 1
// CHECK-NEXT:    [[TMP4099:%.*]] = select i1 [[TMP4098]], i64 [[TMP4094]], i64 [[TMP4097]]
// CHECK-NEXT:    store i64 [[TMP4099]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4100:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4101:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4102:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4100]], i64 [[TMP4101]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4103:%.*]] = extractvalue { i64, i1 } [[TMP4102]], 0
// CHECK-NEXT:    [[TMP4104:%.*]] = extractvalue { i64, i1 } [[TMP4102]], 1
// CHECK-NEXT:    br i1 [[TMP4104]], label [[LLX_ATOMIC_EXIT456:%.*]], label [[LLX_ATOMIC_CONT457:%.*]]
// CHECK:       llx.atomic.cont457:
// CHECK-NEXT:    store i64 [[TMP4103]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT456]]
// CHECK:       llx.atomic.exit456:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4105:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4106:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4107:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4105]], i64 [[TMP4106]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4108:%.*]] = extractvalue { i64, i1 } [[TMP4107]], 0
// CHECK-NEXT:    [[TMP4109:%.*]] = extractvalue { i64, i1 } [[TMP4107]], 1
// CHECK-NEXT:    br i1 [[TMP4109]], label [[LLX_ATOMIC_EXIT458:%.*]], label [[LLX_ATOMIC_CONT459:%.*]]
// CHECK:       llx.atomic.cont459:
// CHECK-NEXT:    store i64 [[TMP4108]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT458]]
// CHECK:       llx.atomic.exit458:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4110:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4111:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4112:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4110]], i64 [[TMP4111]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4113:%.*]] = extractvalue { i64, i1 } [[TMP4112]], 1
// CHECK-NEXT:    [[TMP4114:%.*]] = sext i1 [[TMP4113]] to i64
// CHECK-NEXT:    store i64 [[TMP4114]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4115:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4116:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4117:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4115]], i64 [[TMP4116]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4118:%.*]] = extractvalue { i64, i1 } [[TMP4117]], 1
// CHECK-NEXT:    [[TMP4119:%.*]] = sext i1 [[TMP4118]] to i64
// CHECK-NEXT:    store i64 [[TMP4119]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4120:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4121:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4122:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4120]], i64 [[TMP4121]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4123:%.*]] = extractvalue { i64, i1 } [[TMP4122]], 0
// CHECK-NEXT:    [[TMP4124:%.*]] = extractvalue { i64, i1 } [[TMP4122]], 1
// CHECK-NEXT:    br i1 [[TMP4124]], label [[LLX_ATOMIC_EXIT460:%.*]], label [[LLX_ATOMIC_CONT461:%.*]]
// CHECK:       llx.atomic.cont461:
// CHECK-NEXT:    store i64 [[TMP4123]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT460]]
// CHECK:       llx.atomic.exit460:
// CHECK-NEXT:    [[TMP4125:%.*]] = extractvalue { i64, i1 } [[TMP4122]], 1
// CHECK-NEXT:    [[TMP4126:%.*]] = sext i1 [[TMP4125]] to i64
// CHECK-NEXT:    store i64 [[TMP4126]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4127:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4128:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4129:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4127]], i64 [[TMP4128]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4130:%.*]] = extractvalue { i64, i1 } [[TMP4129]], 0
// CHECK-NEXT:    [[TMP4131:%.*]] = extractvalue { i64, i1 } [[TMP4129]], 1
// CHECK-NEXT:    br i1 [[TMP4131]], label [[LLX_ATOMIC_EXIT462:%.*]], label [[LLX_ATOMIC_CONT463:%.*]]
// CHECK:       llx.atomic.cont463:
// CHECK-NEXT:    store i64 [[TMP4130]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT462]]
// CHECK:       llx.atomic.exit462:
// CHECK-NEXT:    [[TMP4132:%.*]] = extractvalue { i64, i1 } [[TMP4129]], 1
// CHECK-NEXT:    [[TMP4133:%.*]] = sext i1 [[TMP4132]] to i64
// CHECK-NEXT:    store i64 [[TMP4133]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4134:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4135:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4134]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4135]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4136:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4137:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4136]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4137]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4138:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4139:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4138]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4139]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4140:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4141:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4140]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4141]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4142:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4143:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4144:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4142]], i64 [[TMP4143]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4145:%.*]] = extractvalue { i64, i1 } [[TMP4144]], 0
// CHECK-NEXT:    store i64 [[TMP4145]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4146:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4147:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4148:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4146]], i64 [[TMP4147]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4149:%.*]] = extractvalue { i64, i1 } [[TMP4148]], 0
// CHECK-NEXT:    store i64 [[TMP4149]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4150:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4151:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4150]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4152:%.*]] = icmp sgt i64 [[TMP4151]], [[TMP4150]]
// CHECK-NEXT:    [[TMP4153:%.*]] = select i1 [[TMP4152]], i64 [[TMP4150]], i64 [[TMP4151]]
// CHECK-NEXT:    store i64 [[TMP4153]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4154:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4155:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4154]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4156:%.*]] = icmp slt i64 [[TMP4155]], [[TMP4154]]
// CHECK-NEXT:    [[TMP4157:%.*]] = select i1 [[TMP4156]], i64 [[TMP4154]], i64 [[TMP4155]]
// CHECK-NEXT:    store i64 [[TMP4157]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4158:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4159:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4158]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4160:%.*]] = icmp slt i64 [[TMP4159]], [[TMP4158]]
// CHECK-NEXT:    [[TMP4161:%.*]] = select i1 [[TMP4160]], i64 [[TMP4158]], i64 [[TMP4159]]
// CHECK-NEXT:    store i64 [[TMP4161]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4162:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4163:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4162]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4164:%.*]] = icmp sgt i64 [[TMP4163]], [[TMP4162]]
// CHECK-NEXT:    [[TMP4165:%.*]] = select i1 [[TMP4164]], i64 [[TMP4162]], i64 [[TMP4163]]
// CHECK-NEXT:    store i64 [[TMP4165]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4166:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4167:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4168:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4166]], i64 [[TMP4167]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4169:%.*]] = extractvalue { i64, i1 } [[TMP4168]], 0
// CHECK-NEXT:    [[TMP4170:%.*]] = extractvalue { i64, i1 } [[TMP4168]], 1
// CHECK-NEXT:    [[TMP4171:%.*]] = select i1 [[TMP4170]], i64 [[TMP4166]], i64 [[TMP4169]]
// CHECK-NEXT:    store i64 [[TMP4171]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4172:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4173:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4174:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4172]], i64 [[TMP4173]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4175:%.*]] = extractvalue { i64, i1 } [[TMP4174]], 0
// CHECK-NEXT:    [[TMP4176:%.*]] = extractvalue { i64, i1 } [[TMP4174]], 1
// CHECK-NEXT:    [[TMP4177:%.*]] = select i1 [[TMP4176]], i64 [[TMP4172]], i64 [[TMP4175]]
// CHECK-NEXT:    store i64 [[TMP4177]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4178:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4179:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4180:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4178]], i64 [[TMP4179]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4181:%.*]] = extractvalue { i64, i1 } [[TMP4180]], 0
// CHECK-NEXT:    [[TMP4182:%.*]] = extractvalue { i64, i1 } [[TMP4180]], 1
// CHECK-NEXT:    br i1 [[TMP4182]], label [[LLX_ATOMIC_EXIT464:%.*]], label [[LLX_ATOMIC_CONT465:%.*]]
// CHECK:       llx.atomic.cont465:
// CHECK-NEXT:    store i64 [[TMP4181]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT464]]
// CHECK:       llx.atomic.exit464:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4183:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4184:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4185:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4183]], i64 [[TMP4184]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4186:%.*]] = extractvalue { i64, i1 } [[TMP4185]], 0
// CHECK-NEXT:    [[TMP4187:%.*]] = extractvalue { i64, i1 } [[TMP4185]], 1
// CHECK-NEXT:    br i1 [[TMP4187]], label [[LLX_ATOMIC_EXIT466:%.*]], label [[LLX_ATOMIC_CONT467:%.*]]
// CHECK:       llx.atomic.cont467:
// CHECK-NEXT:    store i64 [[TMP4186]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT466]]
// CHECK:       llx.atomic.exit466:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4188:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4189:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4190:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4188]], i64 [[TMP4189]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4191:%.*]] = extractvalue { i64, i1 } [[TMP4190]], 1
// CHECK-NEXT:    [[TMP4192:%.*]] = sext i1 [[TMP4191]] to i64
// CHECK-NEXT:    store i64 [[TMP4192]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4193:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4194:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4195:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4193]], i64 [[TMP4194]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4196:%.*]] = extractvalue { i64, i1 } [[TMP4195]], 1
// CHECK-NEXT:    [[TMP4197:%.*]] = sext i1 [[TMP4196]] to i64
// CHECK-NEXT:    store i64 [[TMP4197]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4198:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4199:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4200:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4198]], i64 [[TMP4199]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4201:%.*]] = extractvalue { i64, i1 } [[TMP4200]], 0
// CHECK-NEXT:    [[TMP4202:%.*]] = extractvalue { i64, i1 } [[TMP4200]], 1
// CHECK-NEXT:    br i1 [[TMP4202]], label [[LLX_ATOMIC_EXIT468:%.*]], label [[LLX_ATOMIC_CONT469:%.*]]
// CHECK:       llx.atomic.cont469:
// CHECK-NEXT:    store i64 [[TMP4201]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT468]]
// CHECK:       llx.atomic.exit468:
// CHECK-NEXT:    [[TMP4203:%.*]] = extractvalue { i64, i1 } [[TMP4200]], 1
// CHECK-NEXT:    [[TMP4204:%.*]] = sext i1 [[TMP4203]] to i64
// CHECK-NEXT:    store i64 [[TMP4204]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4205:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4206:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4207:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4205]], i64 [[TMP4206]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4208:%.*]] = extractvalue { i64, i1 } [[TMP4207]], 0
// CHECK-NEXT:    [[TMP4209:%.*]] = extractvalue { i64, i1 } [[TMP4207]], 1
// CHECK-NEXT:    br i1 [[TMP4209]], label [[LLX_ATOMIC_EXIT470:%.*]], label [[LLX_ATOMIC_CONT471:%.*]]
// CHECK:       llx.atomic.cont471:
// CHECK-NEXT:    store i64 [[TMP4208]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT470]]
// CHECK:       llx.atomic.exit470:
// CHECK-NEXT:    [[TMP4210:%.*]] = extractvalue { i64, i1 } [[TMP4207]], 1
// CHECK-NEXT:    [[TMP4211:%.*]] = sext i1 [[TMP4210]] to i64
// CHECK-NEXT:    store i64 [[TMP4211]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4212:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4213:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4212]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4213]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4214:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4215:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4214]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4215]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4216:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4217:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4216]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4217]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4218:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4219:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4218]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4219]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4220:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4221:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4222:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4220]], i64 [[TMP4221]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4223:%.*]] = extractvalue { i64, i1 } [[TMP4222]], 0
// CHECK-NEXT:    store i64 [[TMP4223]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4224:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4225:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4226:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4224]], i64 [[TMP4225]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4227:%.*]] = extractvalue { i64, i1 } [[TMP4226]], 0
// CHECK-NEXT:    store i64 [[TMP4227]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4228:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4229:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4228]] monotonic, align 8
// CHECK-NEXT:    [[TMP4230:%.*]] = icmp ugt i64 [[TMP4229]], [[TMP4228]]
// CHECK-NEXT:    [[TMP4231:%.*]] = select i1 [[TMP4230]], i64 [[TMP4228]], i64 [[TMP4229]]
// CHECK-NEXT:    store i64 [[TMP4231]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4232:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4233:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4232]] monotonic, align 8
// CHECK-NEXT:    [[TMP4234:%.*]] = icmp ult i64 [[TMP4233]], [[TMP4232]]
// CHECK-NEXT:    [[TMP4235:%.*]] = select i1 [[TMP4234]], i64 [[TMP4232]], i64 [[TMP4233]]
// CHECK-NEXT:    store i64 [[TMP4235]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4236:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4237:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4236]] monotonic, align 8
// CHECK-NEXT:    [[TMP4238:%.*]] = icmp ult i64 [[TMP4237]], [[TMP4236]]
// CHECK-NEXT:    [[TMP4239:%.*]] = select i1 [[TMP4238]], i64 [[TMP4236]], i64 [[TMP4237]]
// CHECK-NEXT:    store i64 [[TMP4239]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4240:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4241:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4240]] monotonic, align 8
// CHECK-NEXT:    [[TMP4242:%.*]] = icmp ugt i64 [[TMP4241]], [[TMP4240]]
// CHECK-NEXT:    [[TMP4243:%.*]] = select i1 [[TMP4242]], i64 [[TMP4240]], i64 [[TMP4241]]
// CHECK-NEXT:    store i64 [[TMP4243]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4244:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4245:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4246:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4244]], i64 [[TMP4245]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4247:%.*]] = extractvalue { i64, i1 } [[TMP4246]], 0
// CHECK-NEXT:    [[TMP4248:%.*]] = extractvalue { i64, i1 } [[TMP4246]], 1
// CHECK-NEXT:    [[TMP4249:%.*]] = select i1 [[TMP4248]], i64 [[TMP4244]], i64 [[TMP4247]]
// CHECK-NEXT:    store i64 [[TMP4249]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4250:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4251:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4252:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4250]], i64 [[TMP4251]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4253:%.*]] = extractvalue { i64, i1 } [[TMP4252]], 0
// CHECK-NEXT:    [[TMP4254:%.*]] = extractvalue { i64, i1 } [[TMP4252]], 1
// CHECK-NEXT:    [[TMP4255:%.*]] = select i1 [[TMP4254]], i64 [[TMP4250]], i64 [[TMP4253]]
// CHECK-NEXT:    store i64 [[TMP4255]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4256:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4257:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4258:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4256]], i64 [[TMP4257]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4259:%.*]] = extractvalue { i64, i1 } [[TMP4258]], 0
// CHECK-NEXT:    [[TMP4260:%.*]] = extractvalue { i64, i1 } [[TMP4258]], 1
// CHECK-NEXT:    br i1 [[TMP4260]], label [[ULLX_ATOMIC_EXIT:%.*]], label [[ULLX_ATOMIC_CONT:%.*]]
// CHECK:       ullx.atomic.cont:
// CHECK-NEXT:    store i64 [[TMP4259]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT]]
// CHECK:       ullx.atomic.exit:
// CHECK-NEXT:    [[TMP4261:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4262:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4263:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4261]], i64 [[TMP4262]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4264:%.*]] = extractvalue { i64, i1 } [[TMP4263]], 0
// CHECK-NEXT:    [[TMP4265:%.*]] = extractvalue { i64, i1 } [[TMP4263]], 1
// CHECK-NEXT:    br i1 [[TMP4265]], label [[ULLX_ATOMIC_EXIT472:%.*]], label [[ULLX_ATOMIC_CONT473:%.*]]
// CHECK:       ullx.atomic.cont473:
// CHECK-NEXT:    store i64 [[TMP4264]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT472]]
// CHECK:       ullx.atomic.exit472:
// CHECK-NEXT:    [[TMP4266:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4267:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4268:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4266]], i64 [[TMP4267]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4269:%.*]] = extractvalue { i64, i1 } [[TMP4268]], 1
// CHECK-NEXT:    [[TMP4270:%.*]] = zext i1 [[TMP4269]] to i64
// CHECK-NEXT:    store i64 [[TMP4270]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4271:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4272:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4273:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4271]], i64 [[TMP4272]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4274:%.*]] = extractvalue { i64, i1 } [[TMP4273]], 1
// CHECK-NEXT:    [[TMP4275:%.*]] = zext i1 [[TMP4274]] to i64
// CHECK-NEXT:    store i64 [[TMP4275]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4276:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4277:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4278:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4276]], i64 [[TMP4277]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4279:%.*]] = extractvalue { i64, i1 } [[TMP4278]], 0
// CHECK-NEXT:    [[TMP4280:%.*]] = extractvalue { i64, i1 } [[TMP4278]], 1
// CHECK-NEXT:    br i1 [[TMP4280]], label [[ULLX_ATOMIC_EXIT474:%.*]], label [[ULLX_ATOMIC_CONT475:%.*]]
// CHECK:       ullx.atomic.cont475:
// CHECK-NEXT:    store i64 [[TMP4279]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT474]]
// CHECK:       ullx.atomic.exit474:
// CHECK-NEXT:    [[TMP4281:%.*]] = extractvalue { i64, i1 } [[TMP4278]], 1
// CHECK-NEXT:    [[TMP4282:%.*]] = zext i1 [[TMP4281]] to i64
// CHECK-NEXT:    store i64 [[TMP4282]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4283:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4284:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4285:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4283]], i64 [[TMP4284]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4286:%.*]] = extractvalue { i64, i1 } [[TMP4285]], 0
// CHECK-NEXT:    [[TMP4287:%.*]] = extractvalue { i64, i1 } [[TMP4285]], 1
// CHECK-NEXT:    br i1 [[TMP4287]], label [[ULLX_ATOMIC_EXIT476:%.*]], label [[ULLX_ATOMIC_CONT477:%.*]]
// CHECK:       ullx.atomic.cont477:
// CHECK-NEXT:    store i64 [[TMP4286]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT476]]
// CHECK:       ullx.atomic.exit476:
// CHECK-NEXT:    [[TMP4288:%.*]] = extractvalue { i64, i1 } [[TMP4285]], 1
// CHECK-NEXT:    [[TMP4289:%.*]] = zext i1 [[TMP4288]] to i64
// CHECK-NEXT:    store i64 [[TMP4289]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4290:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4291:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4290]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP4291]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4292:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4293:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4292]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP4293]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4294:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4295:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4294]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP4295]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4296:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4297:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4296]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP4297]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4298:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4299:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4300:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4298]], i64 [[TMP4299]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4301:%.*]] = extractvalue { i64, i1 } [[TMP4300]], 0
// CHECK-NEXT:    store i64 [[TMP4301]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4302:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4303:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4304:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4302]], i64 [[TMP4303]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4305:%.*]] = extractvalue { i64, i1 } [[TMP4304]], 0
// CHECK-NEXT:    store i64 [[TMP4305]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4306:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4307:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4306]] acq_rel, align 8
// CHECK-NEXT:    [[TMP4308:%.*]] = icmp ugt i64 [[TMP4307]], [[TMP4306]]
// CHECK-NEXT:    [[TMP4309:%.*]] = select i1 [[TMP4308]], i64 [[TMP4306]], i64 [[TMP4307]]
// CHECK-NEXT:    store i64 [[TMP4309]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4310:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4311:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4310]] acq_rel, align 8
// CHECK-NEXT:    [[TMP4312:%.*]] = icmp ult i64 [[TMP4311]], [[TMP4310]]
// CHECK-NEXT:    [[TMP4313:%.*]] = select i1 [[TMP4312]], i64 [[TMP4310]], i64 [[TMP4311]]
// CHECK-NEXT:    store i64 [[TMP4313]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4314:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4315:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4314]] acq_rel, align 8
// CHECK-NEXT:    [[TMP4316:%.*]] = icmp ult i64 [[TMP4315]], [[TMP4314]]
// CHECK-NEXT:    [[TMP4317:%.*]] = select i1 [[TMP4316]], i64 [[TMP4314]], i64 [[TMP4315]]
// CHECK-NEXT:    store i64 [[TMP4317]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4318:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4319:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4318]] acq_rel, align 8
// CHECK-NEXT:    [[TMP4320:%.*]] = icmp ugt i64 [[TMP4319]], [[TMP4318]]
// CHECK-NEXT:    [[TMP4321:%.*]] = select i1 [[TMP4320]], i64 [[TMP4318]], i64 [[TMP4319]]
// CHECK-NEXT:    store i64 [[TMP4321]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4322:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4323:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4324:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4322]], i64 [[TMP4323]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4325:%.*]] = extractvalue { i64, i1 } [[TMP4324]], 0
// CHECK-NEXT:    [[TMP4326:%.*]] = extractvalue { i64, i1 } [[TMP4324]], 1
// CHECK-NEXT:    [[TMP4327:%.*]] = select i1 [[TMP4326]], i64 [[TMP4322]], i64 [[TMP4325]]
// CHECK-NEXT:    store i64 [[TMP4327]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4328:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4329:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4330:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4328]], i64 [[TMP4329]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4331:%.*]] = extractvalue { i64, i1 } [[TMP4330]], 0
// CHECK-NEXT:    [[TMP4332:%.*]] = extractvalue { i64, i1 } [[TMP4330]], 1
// CHECK-NEXT:    [[TMP4333:%.*]] = select i1 [[TMP4332]], i64 [[TMP4328]], i64 [[TMP4331]]
// CHECK-NEXT:    store i64 [[TMP4333]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4334:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4335:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4336:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4334]], i64 [[TMP4335]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4337:%.*]] = extractvalue { i64, i1 } [[TMP4336]], 0
// CHECK-NEXT:    [[TMP4338:%.*]] = extractvalue { i64, i1 } [[TMP4336]], 1
// CHECK-NEXT:    br i1 [[TMP4338]], label [[ULLX_ATOMIC_EXIT478:%.*]], label [[ULLX_ATOMIC_CONT479:%.*]]
// CHECK:       ullx.atomic.cont479:
// CHECK-NEXT:    store i64 [[TMP4337]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT478]]
// CHECK:       ullx.atomic.exit478:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4339:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4340:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4341:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4339]], i64 [[TMP4340]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4342:%.*]] = extractvalue { i64, i1 } [[TMP4341]], 0
// CHECK-NEXT:    [[TMP4343:%.*]] = extractvalue { i64, i1 } [[TMP4341]], 1
// CHECK-NEXT:    br i1 [[TMP4343]], label [[ULLX_ATOMIC_EXIT480:%.*]], label [[ULLX_ATOMIC_CONT481:%.*]]
// CHECK:       ullx.atomic.cont481:
// CHECK-NEXT:    store i64 [[TMP4342]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT480]]
// CHECK:       ullx.atomic.exit480:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4344:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4345:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4346:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4344]], i64 [[TMP4345]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4347:%.*]] = extractvalue { i64, i1 } [[TMP4346]], 1
// CHECK-NEXT:    [[TMP4348:%.*]] = zext i1 [[TMP4347]] to i64
// CHECK-NEXT:    store i64 [[TMP4348]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4349:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4350:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4351:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4349]], i64 [[TMP4350]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4352:%.*]] = extractvalue { i64, i1 } [[TMP4351]], 1
// CHECK-NEXT:    [[TMP4353:%.*]] = zext i1 [[TMP4352]] to i64
// CHECK-NEXT:    store i64 [[TMP4353]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4354:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4355:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4356:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4354]], i64 [[TMP4355]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4357:%.*]] = extractvalue { i64, i1 } [[TMP4356]], 0
// CHECK-NEXT:    [[TMP4358:%.*]] = extractvalue { i64, i1 } [[TMP4356]], 1
// CHECK-NEXT:    br i1 [[TMP4358]], label [[ULLX_ATOMIC_EXIT482:%.*]], label [[ULLX_ATOMIC_CONT483:%.*]]
// CHECK:       ullx.atomic.cont483:
// CHECK-NEXT:    store i64 [[TMP4357]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT482]]
// CHECK:       ullx.atomic.exit482:
// CHECK-NEXT:    [[TMP4359:%.*]] = extractvalue { i64, i1 } [[TMP4356]], 1
// CHECK-NEXT:    [[TMP4360:%.*]] = zext i1 [[TMP4359]] to i64
// CHECK-NEXT:    store i64 [[TMP4360]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4361:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4362:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4363:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4361]], i64 [[TMP4362]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4364:%.*]] = extractvalue { i64, i1 } [[TMP4363]], 0
// CHECK-NEXT:    [[TMP4365:%.*]] = extractvalue { i64, i1 } [[TMP4363]], 1
// CHECK-NEXT:    br i1 [[TMP4365]], label [[ULLX_ATOMIC_EXIT484:%.*]], label [[ULLX_ATOMIC_CONT485:%.*]]
// CHECK:       ullx.atomic.cont485:
// CHECK-NEXT:    store i64 [[TMP4364]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT484]]
// CHECK:       ullx.atomic.exit484:
// CHECK-NEXT:    [[TMP4366:%.*]] = extractvalue { i64, i1 } [[TMP4363]], 1
// CHECK-NEXT:    [[TMP4367:%.*]] = zext i1 [[TMP4366]] to i64
// CHECK-NEXT:    store i64 [[TMP4367]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4368:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4369:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4368]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4369]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4370:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4371:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4370]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4371]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4372:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4373:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4372]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4373]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4374:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4375:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4374]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4375]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4376:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4377:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4378:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4376]], i64 [[TMP4377]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4379:%.*]] = extractvalue { i64, i1 } [[TMP4378]], 0
// CHECK-NEXT:    store i64 [[TMP4379]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4380:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4381:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4382:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4380]], i64 [[TMP4381]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4383:%.*]] = extractvalue { i64, i1 } [[TMP4382]], 0
// CHECK-NEXT:    store i64 [[TMP4383]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4384:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4385:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4384]] acquire, align 8
// CHECK-NEXT:    [[TMP4386:%.*]] = icmp ugt i64 [[TMP4385]], [[TMP4384]]
// CHECK-NEXT:    [[TMP4387:%.*]] = select i1 [[TMP4386]], i64 [[TMP4384]], i64 [[TMP4385]]
// CHECK-NEXT:    store i64 [[TMP4387]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4388:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4389:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4388]] acquire, align 8
// CHECK-NEXT:    [[TMP4390:%.*]] = icmp ult i64 [[TMP4389]], [[TMP4388]]
// CHECK-NEXT:    [[TMP4391:%.*]] = select i1 [[TMP4390]], i64 [[TMP4388]], i64 [[TMP4389]]
// CHECK-NEXT:    store i64 [[TMP4391]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4392:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4393:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4392]] acquire, align 8
// CHECK-NEXT:    [[TMP4394:%.*]] = icmp ult i64 [[TMP4393]], [[TMP4392]]
// CHECK-NEXT:    [[TMP4395:%.*]] = select i1 [[TMP4394]], i64 [[TMP4392]], i64 [[TMP4393]]
// CHECK-NEXT:    store i64 [[TMP4395]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4396:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4397:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4396]] acquire, align 8
// CHECK-NEXT:    [[TMP4398:%.*]] = icmp ugt i64 [[TMP4397]], [[TMP4396]]
// CHECK-NEXT:    [[TMP4399:%.*]] = select i1 [[TMP4398]], i64 [[TMP4396]], i64 [[TMP4397]]
// CHECK-NEXT:    store i64 [[TMP4399]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4400:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4401:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4402:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4400]], i64 [[TMP4401]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4403:%.*]] = extractvalue { i64, i1 } [[TMP4402]], 0
// CHECK-NEXT:    [[TMP4404:%.*]] = extractvalue { i64, i1 } [[TMP4402]], 1
// CHECK-NEXT:    [[TMP4405:%.*]] = select i1 [[TMP4404]], i64 [[TMP4400]], i64 [[TMP4403]]
// CHECK-NEXT:    store i64 [[TMP4405]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4406:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4407:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4408:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4406]], i64 [[TMP4407]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4409:%.*]] = extractvalue { i64, i1 } [[TMP4408]], 0
// CHECK-NEXT:    [[TMP4410:%.*]] = extractvalue { i64, i1 } [[TMP4408]], 1
// CHECK-NEXT:    [[TMP4411:%.*]] = select i1 [[TMP4410]], i64 [[TMP4406]], i64 [[TMP4409]]
// CHECK-NEXT:    store i64 [[TMP4411]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4412:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4413:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4414:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4412]], i64 [[TMP4413]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4415:%.*]] = extractvalue { i64, i1 } [[TMP4414]], 0
// CHECK-NEXT:    [[TMP4416:%.*]] = extractvalue { i64, i1 } [[TMP4414]], 1
// CHECK-NEXT:    br i1 [[TMP4416]], label [[ULLX_ATOMIC_EXIT486:%.*]], label [[ULLX_ATOMIC_CONT487:%.*]]
// CHECK:       ullx.atomic.cont487:
// CHECK-NEXT:    store i64 [[TMP4415]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT486]]
// CHECK:       ullx.atomic.exit486:
// CHECK-NEXT:    [[TMP4417:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4418:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4419:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4417]], i64 [[TMP4418]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4420:%.*]] = extractvalue { i64, i1 } [[TMP4419]], 0
// CHECK-NEXT:    [[TMP4421:%.*]] = extractvalue { i64, i1 } [[TMP4419]], 1
// CHECK-NEXT:    br i1 [[TMP4421]], label [[ULLX_ATOMIC_EXIT488:%.*]], label [[ULLX_ATOMIC_CONT489:%.*]]
// CHECK:       ullx.atomic.cont489:
// CHECK-NEXT:    store i64 [[TMP4420]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT488]]
// CHECK:       ullx.atomic.exit488:
// CHECK-NEXT:    [[TMP4422:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4423:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4424:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4422]], i64 [[TMP4423]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4425:%.*]] = extractvalue { i64, i1 } [[TMP4424]], 1
// CHECK-NEXT:    [[TMP4426:%.*]] = zext i1 [[TMP4425]] to i64
// CHECK-NEXT:    store i64 [[TMP4426]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4427:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4428:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4429:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4427]], i64 [[TMP4428]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4430:%.*]] = extractvalue { i64, i1 } [[TMP4429]], 1
// CHECK-NEXT:    [[TMP4431:%.*]] = zext i1 [[TMP4430]] to i64
// CHECK-NEXT:    store i64 [[TMP4431]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4432:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4433:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4434:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4432]], i64 [[TMP4433]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4435:%.*]] = extractvalue { i64, i1 } [[TMP4434]], 0
// CHECK-NEXT:    [[TMP4436:%.*]] = extractvalue { i64, i1 } [[TMP4434]], 1
// CHECK-NEXT:    br i1 [[TMP4436]], label [[ULLX_ATOMIC_EXIT490:%.*]], label [[ULLX_ATOMIC_CONT491:%.*]]
// CHECK:       ullx.atomic.cont491:
// CHECK-NEXT:    store i64 [[TMP4435]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT490]]
// CHECK:       ullx.atomic.exit490:
// CHECK-NEXT:    [[TMP4437:%.*]] = extractvalue { i64, i1 } [[TMP4434]], 1
// CHECK-NEXT:    [[TMP4438:%.*]] = zext i1 [[TMP4437]] to i64
// CHECK-NEXT:    store i64 [[TMP4438]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4439:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4440:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4441:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4439]], i64 [[TMP4440]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4442:%.*]] = extractvalue { i64, i1 } [[TMP4441]], 0
// CHECK-NEXT:    [[TMP4443:%.*]] = extractvalue { i64, i1 } [[TMP4441]], 1
// CHECK-NEXT:    br i1 [[TMP4443]], label [[ULLX_ATOMIC_EXIT492:%.*]], label [[ULLX_ATOMIC_CONT493:%.*]]
// CHECK:       ullx.atomic.cont493:
// CHECK-NEXT:    store i64 [[TMP4442]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT492]]
// CHECK:       ullx.atomic.exit492:
// CHECK-NEXT:    [[TMP4444:%.*]] = extractvalue { i64, i1 } [[TMP4441]], 1
// CHECK-NEXT:    [[TMP4445:%.*]] = zext i1 [[TMP4444]] to i64
// CHECK-NEXT:    store i64 [[TMP4445]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4446:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4447:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4446]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4447]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4448:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4449:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4448]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4449]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4450:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4451:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4450]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4451]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4452:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4453:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4452]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4453]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4454:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4455:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4456:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4454]], i64 [[TMP4455]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4457:%.*]] = extractvalue { i64, i1 } [[TMP4456]], 0
// CHECK-NEXT:    store i64 [[TMP4457]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4458:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4459:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4460:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4458]], i64 [[TMP4459]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4461:%.*]] = extractvalue { i64, i1 } [[TMP4460]], 0
// CHECK-NEXT:    store i64 [[TMP4461]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4462:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4463:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4462]] monotonic, align 8
// CHECK-NEXT:    [[TMP4464:%.*]] = icmp ugt i64 [[TMP4463]], [[TMP4462]]
// CHECK-NEXT:    [[TMP4465:%.*]] = select i1 [[TMP4464]], i64 [[TMP4462]], i64 [[TMP4463]]
// CHECK-NEXT:    store i64 [[TMP4465]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4466:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4467:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4466]] monotonic, align 8
// CHECK-NEXT:    [[TMP4468:%.*]] = icmp ult i64 [[TMP4467]], [[TMP4466]]
// CHECK-NEXT:    [[TMP4469:%.*]] = select i1 [[TMP4468]], i64 [[TMP4466]], i64 [[TMP4467]]
// CHECK-NEXT:    store i64 [[TMP4469]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4470:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4471:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4470]] monotonic, align 8
// CHECK-NEXT:    [[TMP4472:%.*]] = icmp ult i64 [[TMP4471]], [[TMP4470]]
// CHECK-NEXT:    [[TMP4473:%.*]] = select i1 [[TMP4472]], i64 [[TMP4470]], i64 [[TMP4471]]
// CHECK-NEXT:    store i64 [[TMP4473]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4474:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4475:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4474]] monotonic, align 8
// CHECK-NEXT:    [[TMP4476:%.*]] = icmp ugt i64 [[TMP4475]], [[TMP4474]]
// CHECK-NEXT:    [[TMP4477:%.*]] = select i1 [[TMP4476]], i64 [[TMP4474]], i64 [[TMP4475]]
// CHECK-NEXT:    store i64 [[TMP4477]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4478:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4479:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4480:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4478]], i64 [[TMP4479]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4481:%.*]] = extractvalue { i64, i1 } [[TMP4480]], 0
// CHECK-NEXT:    [[TMP4482:%.*]] = extractvalue { i64, i1 } [[TMP4480]], 1
// CHECK-NEXT:    [[TMP4483:%.*]] = select i1 [[TMP4482]], i64 [[TMP4478]], i64 [[TMP4481]]
// CHECK-NEXT:    store i64 [[TMP4483]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4484:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4485:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4486:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4484]], i64 [[TMP4485]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4487:%.*]] = extractvalue { i64, i1 } [[TMP4486]], 0
// CHECK-NEXT:    [[TMP4488:%.*]] = extractvalue { i64, i1 } [[TMP4486]], 1
// CHECK-NEXT:    [[TMP4489:%.*]] = select i1 [[TMP4488]], i64 [[TMP4484]], i64 [[TMP4487]]
// CHECK-NEXT:    store i64 [[TMP4489]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4490:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4491:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4492:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4490]], i64 [[TMP4491]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4493:%.*]] = extractvalue { i64, i1 } [[TMP4492]], 0
// CHECK-NEXT:    [[TMP4494:%.*]] = extractvalue { i64, i1 } [[TMP4492]], 1
// CHECK-NEXT:    br i1 [[TMP4494]], label [[ULLX_ATOMIC_EXIT494:%.*]], label [[ULLX_ATOMIC_CONT495:%.*]]
// CHECK:       ullx.atomic.cont495:
// CHECK-NEXT:    store i64 [[TMP4493]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT494]]
// CHECK:       ullx.atomic.exit494:
// CHECK-NEXT:    [[TMP4495:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4496:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4497:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4495]], i64 [[TMP4496]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4498:%.*]] = extractvalue { i64, i1 } [[TMP4497]], 0
// CHECK-NEXT:    [[TMP4499:%.*]] = extractvalue { i64, i1 } [[TMP4497]], 1
// CHECK-NEXT:    br i1 [[TMP4499]], label [[ULLX_ATOMIC_EXIT496:%.*]], label [[ULLX_ATOMIC_CONT497:%.*]]
// CHECK:       ullx.atomic.cont497:
// CHECK-NEXT:    store i64 [[TMP4498]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT496]]
// CHECK:       ullx.atomic.exit496:
// CHECK-NEXT:    [[TMP4500:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4501:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4502:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4500]], i64 [[TMP4501]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4503:%.*]] = extractvalue { i64, i1 } [[TMP4502]], 1
// CHECK-NEXT:    [[TMP4504:%.*]] = zext i1 [[TMP4503]] to i64
// CHECK-NEXT:    store i64 [[TMP4504]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4505:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4506:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4507:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4505]], i64 [[TMP4506]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4508:%.*]] = extractvalue { i64, i1 } [[TMP4507]], 1
// CHECK-NEXT:    [[TMP4509:%.*]] = zext i1 [[TMP4508]] to i64
// CHECK-NEXT:    store i64 [[TMP4509]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4510:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4511:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4512:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4510]], i64 [[TMP4511]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4513:%.*]] = extractvalue { i64, i1 } [[TMP4512]], 0
// CHECK-NEXT:    [[TMP4514:%.*]] = extractvalue { i64, i1 } [[TMP4512]], 1
// CHECK-NEXT:    br i1 [[TMP4514]], label [[ULLX_ATOMIC_EXIT498:%.*]], label [[ULLX_ATOMIC_CONT499:%.*]]
// CHECK:       ullx.atomic.cont499:
// CHECK-NEXT:    store i64 [[TMP4513]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT498]]
// CHECK:       ullx.atomic.exit498:
// CHECK-NEXT:    [[TMP4515:%.*]] = extractvalue { i64, i1 } [[TMP4512]], 1
// CHECK-NEXT:    [[TMP4516:%.*]] = zext i1 [[TMP4515]] to i64
// CHECK-NEXT:    store i64 [[TMP4516]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4517:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4518:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4519:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4517]], i64 [[TMP4518]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4520:%.*]] = extractvalue { i64, i1 } [[TMP4519]], 0
// CHECK-NEXT:    [[TMP4521:%.*]] = extractvalue { i64, i1 } [[TMP4519]], 1
// CHECK-NEXT:    br i1 [[TMP4521]], label [[ULLX_ATOMIC_EXIT500:%.*]], label [[ULLX_ATOMIC_CONT501:%.*]]
// CHECK:       ullx.atomic.cont501:
// CHECK-NEXT:    store i64 [[TMP4520]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT500]]
// CHECK:       ullx.atomic.exit500:
// CHECK-NEXT:    [[TMP4522:%.*]] = extractvalue { i64, i1 } [[TMP4519]], 1
// CHECK-NEXT:    [[TMP4523:%.*]] = zext i1 [[TMP4522]] to i64
// CHECK-NEXT:    store i64 [[TMP4523]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4524:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4525:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4524]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4525]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4526:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4527:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4526]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4527]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4528:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4529:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4528]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4529]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4530:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4531:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4530]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4531]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4532:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4533:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4534:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4532]], i64 [[TMP4533]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4535:%.*]] = extractvalue { i64, i1 } [[TMP4534]], 0
// CHECK-NEXT:    store i64 [[TMP4535]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4536:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4537:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4538:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4536]], i64 [[TMP4537]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4539:%.*]] = extractvalue { i64, i1 } [[TMP4538]], 0
// CHECK-NEXT:    store i64 [[TMP4539]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4540:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4541:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4540]] release, align 8
// CHECK-NEXT:    [[TMP4542:%.*]] = icmp ugt i64 [[TMP4541]], [[TMP4540]]
// CHECK-NEXT:    [[TMP4543:%.*]] = select i1 [[TMP4542]], i64 [[TMP4540]], i64 [[TMP4541]]
// CHECK-NEXT:    store i64 [[TMP4543]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4544:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4545:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4544]] release, align 8
// CHECK-NEXT:    [[TMP4546:%.*]] = icmp ult i64 [[TMP4545]], [[TMP4544]]
// CHECK-NEXT:    [[TMP4547:%.*]] = select i1 [[TMP4546]], i64 [[TMP4544]], i64 [[TMP4545]]
// CHECK-NEXT:    store i64 [[TMP4547]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4548:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4549:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4548]] release, align 8
// CHECK-NEXT:    [[TMP4550:%.*]] = icmp ult i64 [[TMP4549]], [[TMP4548]]
// CHECK-NEXT:    [[TMP4551:%.*]] = select i1 [[TMP4550]], i64 [[TMP4548]], i64 [[TMP4549]]
// CHECK-NEXT:    store i64 [[TMP4551]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4552:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4553:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4552]] release, align 8
// CHECK-NEXT:    [[TMP4554:%.*]] = icmp ugt i64 [[TMP4553]], [[TMP4552]]
// CHECK-NEXT:    [[TMP4555:%.*]] = select i1 [[TMP4554]], i64 [[TMP4552]], i64 [[TMP4553]]
// CHECK-NEXT:    store i64 [[TMP4555]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4556:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4557:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4558:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4556]], i64 [[TMP4557]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4559:%.*]] = extractvalue { i64, i1 } [[TMP4558]], 0
// CHECK-NEXT:    [[TMP4560:%.*]] = extractvalue { i64, i1 } [[TMP4558]], 1
// CHECK-NEXT:    [[TMP4561:%.*]] = select i1 [[TMP4560]], i64 [[TMP4556]], i64 [[TMP4559]]
// CHECK-NEXT:    store i64 [[TMP4561]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4562:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4563:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4564:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4562]], i64 [[TMP4563]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4565:%.*]] = extractvalue { i64, i1 } [[TMP4564]], 0
// CHECK-NEXT:    [[TMP4566:%.*]] = extractvalue { i64, i1 } [[TMP4564]], 1
// CHECK-NEXT:    [[TMP4567:%.*]] = select i1 [[TMP4566]], i64 [[TMP4562]], i64 [[TMP4565]]
// CHECK-NEXT:    store i64 [[TMP4567]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4568:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4569:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4570:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4568]], i64 [[TMP4569]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4571:%.*]] = extractvalue { i64, i1 } [[TMP4570]], 0
// CHECK-NEXT:    [[TMP4572:%.*]] = extractvalue { i64, i1 } [[TMP4570]], 1
// CHECK-NEXT:    br i1 [[TMP4572]], label [[ULLX_ATOMIC_EXIT502:%.*]], label [[ULLX_ATOMIC_CONT503:%.*]]
// CHECK:       ullx.atomic.cont503:
// CHECK-NEXT:    store i64 [[TMP4571]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT502]]
// CHECK:       ullx.atomic.exit502:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4573:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4574:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4575:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4573]], i64 [[TMP4574]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4576:%.*]] = extractvalue { i64, i1 } [[TMP4575]], 0
// CHECK-NEXT:    [[TMP4577:%.*]] = extractvalue { i64, i1 } [[TMP4575]], 1
// CHECK-NEXT:    br i1 [[TMP4577]], label [[ULLX_ATOMIC_EXIT504:%.*]], label [[ULLX_ATOMIC_CONT505:%.*]]
// CHECK:       ullx.atomic.cont505:
// CHECK-NEXT:    store i64 [[TMP4576]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT504]]
// CHECK:       ullx.atomic.exit504:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4578:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4579:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4580:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4578]], i64 [[TMP4579]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4581:%.*]] = extractvalue { i64, i1 } [[TMP4580]], 1
// CHECK-NEXT:    [[TMP4582:%.*]] = zext i1 [[TMP4581]] to i64
// CHECK-NEXT:    store i64 [[TMP4582]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4583:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4584:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4585:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4583]], i64 [[TMP4584]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4586:%.*]] = extractvalue { i64, i1 } [[TMP4585]], 1
// CHECK-NEXT:    [[TMP4587:%.*]] = zext i1 [[TMP4586]] to i64
// CHECK-NEXT:    store i64 [[TMP4587]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4588:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4589:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4590:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4588]], i64 [[TMP4589]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4591:%.*]] = extractvalue { i64, i1 } [[TMP4590]], 0
// CHECK-NEXT:    [[TMP4592:%.*]] = extractvalue { i64, i1 } [[TMP4590]], 1
// CHECK-NEXT:    br i1 [[TMP4592]], label [[ULLX_ATOMIC_EXIT506:%.*]], label [[ULLX_ATOMIC_CONT507:%.*]]
// CHECK:       ullx.atomic.cont507:
// CHECK-NEXT:    store i64 [[TMP4591]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT506]]
// CHECK:       ullx.atomic.exit506:
// CHECK-NEXT:    [[TMP4593:%.*]] = extractvalue { i64, i1 } [[TMP4590]], 1
// CHECK-NEXT:    [[TMP4594:%.*]] = zext i1 [[TMP4593]] to i64
// CHECK-NEXT:    store i64 [[TMP4594]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4595:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4596:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4597:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4595]], i64 [[TMP4596]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4598:%.*]] = extractvalue { i64, i1 } [[TMP4597]], 0
// CHECK-NEXT:    [[TMP4599:%.*]] = extractvalue { i64, i1 } [[TMP4597]], 1
// CHECK-NEXT:    br i1 [[TMP4599]], label [[ULLX_ATOMIC_EXIT508:%.*]], label [[ULLX_ATOMIC_CONT509:%.*]]
// CHECK:       ullx.atomic.cont509:
// CHECK-NEXT:    store i64 [[TMP4598]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT508]]
// CHECK:       ullx.atomic.exit508:
// CHECK-NEXT:    [[TMP4600:%.*]] = extractvalue { i64, i1 } [[TMP4597]], 1
// CHECK-NEXT:    [[TMP4601:%.*]] = zext i1 [[TMP4600]] to i64
// CHECK-NEXT:    store i64 [[TMP4601]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4602:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4603:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4602]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4603]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4604:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4605:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4604]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4605]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4606:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4607:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4606]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4607]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4608:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4609:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4608]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4609]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4610:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4611:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4612:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4610]], i64 [[TMP4611]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4613:%.*]] = extractvalue { i64, i1 } [[TMP4612]], 0
// CHECK-NEXT:    store i64 [[TMP4613]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4614:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4615:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4616:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4614]], i64 [[TMP4615]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4617:%.*]] = extractvalue { i64, i1 } [[TMP4616]], 0
// CHECK-NEXT:    store i64 [[TMP4617]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4618:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4619:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4618]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4620:%.*]] = icmp ugt i64 [[TMP4619]], [[TMP4618]]
// CHECK-NEXT:    [[TMP4621:%.*]] = select i1 [[TMP4620]], i64 [[TMP4618]], i64 [[TMP4619]]
// CHECK-NEXT:    store i64 [[TMP4621]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4622:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4623:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4622]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4624:%.*]] = icmp ult i64 [[TMP4623]], [[TMP4622]]
// CHECK-NEXT:    [[TMP4625:%.*]] = select i1 [[TMP4624]], i64 [[TMP4622]], i64 [[TMP4623]]
// CHECK-NEXT:    store i64 [[TMP4625]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4626:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4627:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4626]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4628:%.*]] = icmp ult i64 [[TMP4627]], [[TMP4626]]
// CHECK-NEXT:    [[TMP4629:%.*]] = select i1 [[TMP4628]], i64 [[TMP4626]], i64 [[TMP4627]]
// CHECK-NEXT:    store i64 [[TMP4629]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4630:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4631:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4630]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4632:%.*]] = icmp ugt i64 [[TMP4631]], [[TMP4630]]
// CHECK-NEXT:    [[TMP4633:%.*]] = select i1 [[TMP4632]], i64 [[TMP4630]], i64 [[TMP4631]]
// CHECK-NEXT:    store i64 [[TMP4633]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4634:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4635:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4636:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4634]], i64 [[TMP4635]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4637:%.*]] = extractvalue { i64, i1 } [[TMP4636]], 0
// CHECK-NEXT:    [[TMP4638:%.*]] = extractvalue { i64, i1 } [[TMP4636]], 1
// CHECK-NEXT:    [[TMP4639:%.*]] = select i1 [[TMP4638]], i64 [[TMP4634]], i64 [[TMP4637]]
// CHECK-NEXT:    store i64 [[TMP4639]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4640:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4641:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4642:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4640]], i64 [[TMP4641]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4643:%.*]] = extractvalue { i64, i1 } [[TMP4642]], 0
// CHECK-NEXT:    [[TMP4644:%.*]] = extractvalue { i64, i1 } [[TMP4642]], 1
// CHECK-NEXT:    [[TMP4645:%.*]] = select i1 [[TMP4644]], i64 [[TMP4640]], i64 [[TMP4643]]
// CHECK-NEXT:    store i64 [[TMP4645]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4646:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4647:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4648:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4646]], i64 [[TMP4647]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4649:%.*]] = extractvalue { i64, i1 } [[TMP4648]], 0
// CHECK-NEXT:    [[TMP4650:%.*]] = extractvalue { i64, i1 } [[TMP4648]], 1
// CHECK-NEXT:    br i1 [[TMP4650]], label [[ULLX_ATOMIC_EXIT510:%.*]], label [[ULLX_ATOMIC_CONT511:%.*]]
// CHECK:       ullx.atomic.cont511:
// CHECK-NEXT:    store i64 [[TMP4649]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT510]]
// CHECK:       ullx.atomic.exit510:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4651:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4652:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4653:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4651]], i64 [[TMP4652]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4654:%.*]] = extractvalue { i64, i1 } [[TMP4653]], 0
// CHECK-NEXT:    [[TMP4655:%.*]] = extractvalue { i64, i1 } [[TMP4653]], 1
// CHECK-NEXT:    br i1 [[TMP4655]], label [[ULLX_ATOMIC_EXIT512:%.*]], label [[ULLX_ATOMIC_CONT513:%.*]]
// CHECK:       ullx.atomic.cont513:
// CHECK-NEXT:    store i64 [[TMP4654]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT512]]
// CHECK:       ullx.atomic.exit512:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4656:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4657:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4658:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4656]], i64 [[TMP4657]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4659:%.*]] = extractvalue { i64, i1 } [[TMP4658]], 1
// CHECK-NEXT:    [[TMP4660:%.*]] = zext i1 [[TMP4659]] to i64
// CHECK-NEXT:    store i64 [[TMP4660]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4661:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4662:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4663:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4661]], i64 [[TMP4662]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4664:%.*]] = extractvalue { i64, i1 } [[TMP4663]], 1
// CHECK-NEXT:    [[TMP4665:%.*]] = zext i1 [[TMP4664]] to i64
// CHECK-NEXT:    store i64 [[TMP4665]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4666:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4667:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4668:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4666]], i64 [[TMP4667]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4669:%.*]] = extractvalue { i64, i1 } [[TMP4668]], 0
// CHECK-NEXT:    [[TMP4670:%.*]] = extractvalue { i64, i1 } [[TMP4668]], 1
// CHECK-NEXT:    br i1 [[TMP4670]], label [[ULLX_ATOMIC_EXIT514:%.*]], label [[ULLX_ATOMIC_CONT515:%.*]]
// CHECK:       ullx.atomic.cont515:
// CHECK-NEXT:    store i64 [[TMP4669]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT514]]
// CHECK:       ullx.atomic.exit514:
// CHECK-NEXT:    [[TMP4671:%.*]] = extractvalue { i64, i1 } [[TMP4668]], 1
// CHECK-NEXT:    [[TMP4672:%.*]] = zext i1 [[TMP4671]] to i64
// CHECK-NEXT:    store i64 [[TMP4672]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4673:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4674:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4675:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4673]], i64 [[TMP4674]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4676:%.*]] = extractvalue { i64, i1 } [[TMP4675]], 0
// CHECK-NEXT:    [[TMP4677:%.*]] = extractvalue { i64, i1 } [[TMP4675]], 1
// CHECK-NEXT:    br i1 [[TMP4677]], label [[ULLX_ATOMIC_EXIT516:%.*]], label [[ULLX_ATOMIC_CONT517:%.*]]
// CHECK:       ullx.atomic.cont517:
// CHECK-NEXT:    store i64 [[TMP4676]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT516]]
// CHECK:       ullx.atomic.exit516:
// CHECK-NEXT:    [[TMP4678:%.*]] = extractvalue { i64, i1 } [[TMP4675]], 1
// CHECK-NEXT:    [[TMP4679:%.*]] = zext i1 [[TMP4678]] to i64
// CHECK-NEXT:    store i64 [[TMP4679]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4680:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4681:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4680]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP4681]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4682:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4683:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4682]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP4683]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4684:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4685:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4684]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP4685]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4686:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4687:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4686]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP4687]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4688:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4689:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4690:%.*]] = bitcast float [[TMP4688]] to i32
// CHECK-NEXT:    [[TMP4691:%.*]] = bitcast float [[TMP4689]] to i32
// CHECK-NEXT:    [[TMP4692:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4690]], i32 [[TMP4691]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4693:%.*]] = extractvalue { i32, i1 } [[TMP4692]], 0
// CHECK-NEXT:    [[TMP4694:%.*]] = bitcast i32 [[TMP4693]] to float
// CHECK-NEXT:    store float [[TMP4694]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4695:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4696:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4697:%.*]] = bitcast float [[TMP4695]] to i32
// CHECK-NEXT:    [[TMP4698:%.*]] = bitcast float [[TMP4696]] to i32
// CHECK-NEXT:    [[TMP4699:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4697]], i32 [[TMP4698]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4700:%.*]] = extractvalue { i32, i1 } [[TMP4699]], 0
// CHECK-NEXT:    [[TMP4701:%.*]] = bitcast i32 [[TMP4700]] to float
// CHECK-NEXT:    store float [[TMP4701]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4702:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4703:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4702]] monotonic, align 4
// CHECK-NEXT:    [[TMP4704:%.*]] = fcmp ogt float [[TMP4703]], [[TMP4702]]
// CHECK-NEXT:    [[TMP4705:%.*]] = select i1 [[TMP4704]], float [[TMP4702]], float [[TMP4703]]
// CHECK-NEXT:    store float [[TMP4705]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4706:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4707:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4706]] monotonic, align 4
// CHECK-NEXT:    [[TMP4708:%.*]] = fcmp olt float [[TMP4707]], [[TMP4706]]
// CHECK-NEXT:    [[TMP4709:%.*]] = select i1 [[TMP4708]], float [[TMP4706]], float [[TMP4707]]
// CHECK-NEXT:    store float [[TMP4709]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4710:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4711:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4710]] monotonic, align 4
// CHECK-NEXT:    [[TMP4712:%.*]] = fcmp olt float [[TMP4711]], [[TMP4710]]
// CHECK-NEXT:    [[TMP4713:%.*]] = select i1 [[TMP4712]], float [[TMP4710]], float [[TMP4711]]
// CHECK-NEXT:    store float [[TMP4713]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4714:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4715:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4714]] monotonic, align 4
// CHECK-NEXT:    [[TMP4716:%.*]] = fcmp ogt float [[TMP4715]], [[TMP4714]]
// CHECK-NEXT:    [[TMP4717:%.*]] = select i1 [[TMP4716]], float [[TMP4714]], float [[TMP4715]]
// CHECK-NEXT:    store float [[TMP4717]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4718:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4719:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4720:%.*]] = bitcast float [[TMP4718]] to i32
// CHECK-NEXT:    [[TMP4721:%.*]] = bitcast float [[TMP4719]] to i32
// CHECK-NEXT:    [[TMP4722:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4720]], i32 [[TMP4721]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4723:%.*]] = extractvalue { i32, i1 } [[TMP4722]], 0
// CHECK-NEXT:    [[TMP4724:%.*]] = bitcast i32 [[TMP4723]] to float
// CHECK-NEXT:    [[TMP4725:%.*]] = extractvalue { i32, i1 } [[TMP4722]], 1
// CHECK-NEXT:    [[TMP4726:%.*]] = select i1 [[TMP4725]], float [[TMP4718]], float [[TMP4724]]
// CHECK-NEXT:    store float [[TMP4726]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4727:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4728:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4729:%.*]] = bitcast float [[TMP4727]] to i32
// CHECK-NEXT:    [[TMP4730:%.*]] = bitcast float [[TMP4728]] to i32
// CHECK-NEXT:    [[TMP4731:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4729]], i32 [[TMP4730]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4732:%.*]] = extractvalue { i32, i1 } [[TMP4731]], 0
// CHECK-NEXT:    [[TMP4733:%.*]] = bitcast i32 [[TMP4732]] to float
// CHECK-NEXT:    [[TMP4734:%.*]] = extractvalue { i32, i1 } [[TMP4731]], 1
// CHECK-NEXT:    [[TMP4735:%.*]] = select i1 [[TMP4734]], float [[TMP4727]], float [[TMP4733]]
// CHECK-NEXT:    store float [[TMP4735]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4736:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4737:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4738:%.*]] = bitcast float [[TMP4736]] to i32
// CHECK-NEXT:    [[TMP4739:%.*]] = bitcast float [[TMP4737]] to i32
// CHECK-NEXT:    [[TMP4740:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4738]], i32 [[TMP4739]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4741:%.*]] = extractvalue { i32, i1 } [[TMP4740]], 0
// CHECK-NEXT:    [[TMP4742:%.*]] = bitcast i32 [[TMP4741]] to float
// CHECK-NEXT:    [[TMP4743:%.*]] = extractvalue { i32, i1 } [[TMP4740]], 1
// CHECK-NEXT:    br i1 [[TMP4743]], label [[FX_ATOMIC_EXIT:%.*]], label [[FX_ATOMIC_CONT:%.*]]
// CHECK:       fx.atomic.cont:
// CHECK-NEXT:    store float [[TMP4742]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT]]
// CHECK:       fx.atomic.exit:
// CHECK-NEXT:    [[TMP4744:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4745:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4746:%.*]] = bitcast float [[TMP4744]] to i32
// CHECK-NEXT:    [[TMP4747:%.*]] = bitcast float [[TMP4745]] to i32
// CHECK-NEXT:    [[TMP4748:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4746]], i32 [[TMP4747]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4749:%.*]] = extractvalue { i32, i1 } [[TMP4748]], 0
// CHECK-NEXT:    [[TMP4750:%.*]] = bitcast i32 [[TMP4749]] to float
// CHECK-NEXT:    [[TMP4751:%.*]] = extractvalue { i32, i1 } [[TMP4748]], 1
// CHECK-NEXT:    br i1 [[TMP4751]], label [[FX_ATOMIC_EXIT518:%.*]], label [[FX_ATOMIC_CONT519:%.*]]
// CHECK:       fx.atomic.cont519:
// CHECK-NEXT:    store float [[TMP4750]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT518]]
// CHECK:       fx.atomic.exit518:
// CHECK-NEXT:    [[TMP4752:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4753:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4754:%.*]] = bitcast float [[TMP4752]] to i32
// CHECK-NEXT:    [[TMP4755:%.*]] = bitcast float [[TMP4753]] to i32
// CHECK-NEXT:    [[TMP4756:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4754]], i32 [[TMP4755]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4757:%.*]] = extractvalue { i32, i1 } [[TMP4756]], 1
// CHECK-NEXT:    [[TMP4758:%.*]] = sext i1 [[TMP4757]] to i32
// CHECK-NEXT:    store i32 [[TMP4758]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4759:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4760:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4761:%.*]] = bitcast float [[TMP4759]] to i32
// CHECK-NEXT:    [[TMP4762:%.*]] = bitcast float [[TMP4760]] to i32
// CHECK-NEXT:    [[TMP4763:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4761]], i32 [[TMP4762]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4764:%.*]] = extractvalue { i32, i1 } [[TMP4763]], 1
// CHECK-NEXT:    [[TMP4765:%.*]] = sext i1 [[TMP4764]] to i32
// CHECK-NEXT:    store i32 [[TMP4765]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4766:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4767:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4768:%.*]] = bitcast float [[TMP4766]] to i32
// CHECK-NEXT:    [[TMP4769:%.*]] = bitcast float [[TMP4767]] to i32
// CHECK-NEXT:    [[TMP4770:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4768]], i32 [[TMP4769]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4771:%.*]] = extractvalue { i32, i1 } [[TMP4770]], 0
// CHECK-NEXT:    [[TMP4772:%.*]] = bitcast i32 [[TMP4771]] to float
// CHECK-NEXT:    [[TMP4773:%.*]] = extractvalue { i32, i1 } [[TMP4770]], 1
// CHECK-NEXT:    br i1 [[TMP4773]], label [[FX_ATOMIC_EXIT520:%.*]], label [[FX_ATOMIC_CONT521:%.*]]
// CHECK:       fx.atomic.cont521:
// CHECK-NEXT:    store float [[TMP4772]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT520]]
// CHECK:       fx.atomic.exit520:
// CHECK-NEXT:    [[TMP4774:%.*]] = extractvalue { i32, i1 } [[TMP4770]], 1
// CHECK-NEXT:    [[TMP4775:%.*]] = sext i1 [[TMP4774]] to i32
// CHECK-NEXT:    store i32 [[TMP4775]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4776:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4777:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4778:%.*]] = bitcast float [[TMP4776]] to i32
// CHECK-NEXT:    [[TMP4779:%.*]] = bitcast float [[TMP4777]] to i32
// CHECK-NEXT:    [[TMP4780:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4778]], i32 [[TMP4779]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4781:%.*]] = extractvalue { i32, i1 } [[TMP4780]], 0
// CHECK-NEXT:    [[TMP4782:%.*]] = bitcast i32 [[TMP4781]] to float
// CHECK-NEXT:    [[TMP4783:%.*]] = extractvalue { i32, i1 } [[TMP4780]], 1
// CHECK-NEXT:    br i1 [[TMP4783]], label [[FX_ATOMIC_EXIT522:%.*]], label [[FX_ATOMIC_CONT523:%.*]]
// CHECK:       fx.atomic.cont523:
// CHECK-NEXT:    store float [[TMP4782]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT522]]
// CHECK:       fx.atomic.exit522:
// CHECK-NEXT:    [[TMP4784:%.*]] = extractvalue { i32, i1 } [[TMP4780]], 1
// CHECK-NEXT:    [[TMP4785:%.*]] = sext i1 [[TMP4784]] to i32
// CHECK-NEXT:    store i32 [[TMP4785]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4786:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4787:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4786]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP4787]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4788:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4789:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4788]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP4789]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4790:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4791:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4790]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP4791]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4792:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4793:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4792]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP4793]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4794:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4795:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4796:%.*]] = bitcast float [[TMP4794]] to i32
// CHECK-NEXT:    [[TMP4797:%.*]] = bitcast float [[TMP4795]] to i32
// CHECK-NEXT:    [[TMP4798:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4796]], i32 [[TMP4797]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4799:%.*]] = extractvalue { i32, i1 } [[TMP4798]], 0
// CHECK-NEXT:    [[TMP4800:%.*]] = bitcast i32 [[TMP4799]] to float
// CHECK-NEXT:    store float [[TMP4800]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4801:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4802:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4803:%.*]] = bitcast float [[TMP4801]] to i32
// CHECK-NEXT:    [[TMP4804:%.*]] = bitcast float [[TMP4802]] to i32
// CHECK-NEXT:    [[TMP4805:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4803]], i32 [[TMP4804]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4806:%.*]] = extractvalue { i32, i1 } [[TMP4805]], 0
// CHECK-NEXT:    [[TMP4807:%.*]] = bitcast i32 [[TMP4806]] to float
// CHECK-NEXT:    store float [[TMP4807]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4808:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4809:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4808]] acq_rel, align 4
// CHECK-NEXT:    [[TMP4810:%.*]] = fcmp ogt float [[TMP4809]], [[TMP4808]]
// CHECK-NEXT:    [[TMP4811:%.*]] = select i1 [[TMP4810]], float [[TMP4808]], float [[TMP4809]]
// CHECK-NEXT:    store float [[TMP4811]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4812:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4813:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4812]] acq_rel, align 4
// CHECK-NEXT:    [[TMP4814:%.*]] = fcmp olt float [[TMP4813]], [[TMP4812]]
// CHECK-NEXT:    [[TMP4815:%.*]] = select i1 [[TMP4814]], float [[TMP4812]], float [[TMP4813]]
// CHECK-NEXT:    store float [[TMP4815]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4816:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4817:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4816]] acq_rel, align 4
// CHECK-NEXT:    [[TMP4818:%.*]] = fcmp olt float [[TMP4817]], [[TMP4816]]
// CHECK-NEXT:    [[TMP4819:%.*]] = select i1 [[TMP4818]], float [[TMP4816]], float [[TMP4817]]
// CHECK-NEXT:    store float [[TMP4819]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4820:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4821:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4820]] acq_rel, align 4
// CHECK-NEXT:    [[TMP4822:%.*]] = fcmp ogt float [[TMP4821]], [[TMP4820]]
// CHECK-NEXT:    [[TMP4823:%.*]] = select i1 [[TMP4822]], float [[TMP4820]], float [[TMP4821]]
// CHECK-NEXT:    store float [[TMP4823]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4824:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4825:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4826:%.*]] = bitcast float [[TMP4824]] to i32
// CHECK-NEXT:    [[TMP4827:%.*]] = bitcast float [[TMP4825]] to i32
// CHECK-NEXT:    [[TMP4828:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4826]], i32 [[TMP4827]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4829:%.*]] = extractvalue { i32, i1 } [[TMP4828]], 0
// CHECK-NEXT:    [[TMP4830:%.*]] = bitcast i32 [[TMP4829]] to float
// CHECK-NEXT:    [[TMP4831:%.*]] = extractvalue { i32, i1 } [[TMP4828]], 1
// CHECK-NEXT:    [[TMP4832:%.*]] = select i1 [[TMP4831]], float [[TMP4824]], float [[TMP4830]]
// CHECK-NEXT:    store float [[TMP4832]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4833:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4834:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4835:%.*]] = bitcast float [[TMP4833]] to i32
// CHECK-NEXT:    [[TMP4836:%.*]] = bitcast float [[TMP4834]] to i32
// CHECK-NEXT:    [[TMP4837:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4835]], i32 [[TMP4836]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4838:%.*]] = extractvalue { i32, i1 } [[TMP4837]], 0
// CHECK-NEXT:    [[TMP4839:%.*]] = bitcast i32 [[TMP4838]] to float
// CHECK-NEXT:    [[TMP4840:%.*]] = extractvalue { i32, i1 } [[TMP4837]], 1
// CHECK-NEXT:    [[TMP4841:%.*]] = select i1 [[TMP4840]], float [[TMP4833]], float [[TMP4839]]
// CHECK-NEXT:    store float [[TMP4841]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4842:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4843:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4844:%.*]] = bitcast float [[TMP4842]] to i32
// CHECK-NEXT:    [[TMP4845:%.*]] = bitcast float [[TMP4843]] to i32
// CHECK-NEXT:    [[TMP4846:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4844]], i32 [[TMP4845]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4847:%.*]] = extractvalue { i32, i1 } [[TMP4846]], 0
// CHECK-NEXT:    [[TMP4848:%.*]] = bitcast i32 [[TMP4847]] to float
// CHECK-NEXT:    [[TMP4849:%.*]] = extractvalue { i32, i1 } [[TMP4846]], 1
// CHECK-NEXT:    br i1 [[TMP4849]], label [[FX_ATOMIC_EXIT524:%.*]], label [[FX_ATOMIC_CONT525:%.*]]
// CHECK:       fx.atomic.cont525:
// CHECK-NEXT:    store float [[TMP4848]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT524]]
// CHECK:       fx.atomic.exit524:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4850:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4851:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4852:%.*]] = bitcast float [[TMP4850]] to i32
// CHECK-NEXT:    [[TMP4853:%.*]] = bitcast float [[TMP4851]] to i32
// CHECK-NEXT:    [[TMP4854:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4852]], i32 [[TMP4853]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4855:%.*]] = extractvalue { i32, i1 } [[TMP4854]], 0
// CHECK-NEXT:    [[TMP4856:%.*]] = bitcast i32 [[TMP4855]] to float
// CHECK-NEXT:    [[TMP4857:%.*]] = extractvalue { i32, i1 } [[TMP4854]], 1
// CHECK-NEXT:    br i1 [[TMP4857]], label [[FX_ATOMIC_EXIT526:%.*]], label [[FX_ATOMIC_CONT527:%.*]]
// CHECK:       fx.atomic.cont527:
// CHECK-NEXT:    store float [[TMP4856]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT526]]
// CHECK:       fx.atomic.exit526:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4858:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4859:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4860:%.*]] = bitcast float [[TMP4858]] to i32
// CHECK-NEXT:    [[TMP4861:%.*]] = bitcast float [[TMP4859]] to i32
// CHECK-NEXT:    [[TMP4862:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4860]], i32 [[TMP4861]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4863:%.*]] = extractvalue { i32, i1 } [[TMP4862]], 1
// CHECK-NEXT:    [[TMP4864:%.*]] = sext i1 [[TMP4863]] to i32
// CHECK-NEXT:    store i32 [[TMP4864]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4865:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4866:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4867:%.*]] = bitcast float [[TMP4865]] to i32
// CHECK-NEXT:    [[TMP4868:%.*]] = bitcast float [[TMP4866]] to i32
// CHECK-NEXT:    [[TMP4869:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4867]], i32 [[TMP4868]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4870:%.*]] = extractvalue { i32, i1 } [[TMP4869]], 1
// CHECK-NEXT:    [[TMP4871:%.*]] = sext i1 [[TMP4870]] to i32
// CHECK-NEXT:    store i32 [[TMP4871]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4872:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4873:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4874:%.*]] = bitcast float [[TMP4872]] to i32
// CHECK-NEXT:    [[TMP4875:%.*]] = bitcast float [[TMP4873]] to i32
// CHECK-NEXT:    [[TMP4876:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4874]], i32 [[TMP4875]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4877:%.*]] = extractvalue { i32, i1 } [[TMP4876]], 0
// CHECK-NEXT:    [[TMP4878:%.*]] = bitcast i32 [[TMP4877]] to float
// CHECK-NEXT:    [[TMP4879:%.*]] = extractvalue { i32, i1 } [[TMP4876]], 1
// CHECK-NEXT:    br i1 [[TMP4879]], label [[FX_ATOMIC_EXIT528:%.*]], label [[FX_ATOMIC_CONT529:%.*]]
// CHECK:       fx.atomic.cont529:
// CHECK-NEXT:    store float [[TMP4878]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT528]]
// CHECK:       fx.atomic.exit528:
// CHECK-NEXT:    [[TMP4880:%.*]] = extractvalue { i32, i1 } [[TMP4876]], 1
// CHECK-NEXT:    [[TMP4881:%.*]] = sext i1 [[TMP4880]] to i32
// CHECK-NEXT:    store i32 [[TMP4881]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4882:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4883:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4884:%.*]] = bitcast float [[TMP4882]] to i32
// CHECK-NEXT:    [[TMP4885:%.*]] = bitcast float [[TMP4883]] to i32
// CHECK-NEXT:    [[TMP4886:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4884]], i32 [[TMP4885]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4887:%.*]] = extractvalue { i32, i1 } [[TMP4886]], 0
// CHECK-NEXT:    [[TMP4888:%.*]] = bitcast i32 [[TMP4887]] to float
// CHECK-NEXT:    [[TMP4889:%.*]] = extractvalue { i32, i1 } [[TMP4886]], 1
// CHECK-NEXT:    br i1 [[TMP4889]], label [[FX_ATOMIC_EXIT530:%.*]], label [[FX_ATOMIC_CONT531:%.*]]
// CHECK:       fx.atomic.cont531:
// CHECK-NEXT:    store float [[TMP4888]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT530]]
// CHECK:       fx.atomic.exit530:
// CHECK-NEXT:    [[TMP4890:%.*]] = extractvalue { i32, i1 } [[TMP4886]], 1
// CHECK-NEXT:    [[TMP4891:%.*]] = sext i1 [[TMP4890]] to i32
// CHECK-NEXT:    store i32 [[TMP4891]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4892:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4893:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4892]] acquire, align 4
// CHECK-NEXT:    store float [[TMP4893]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4894:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4895:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4894]] acquire, align 4
// CHECK-NEXT:    store float [[TMP4895]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4896:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4897:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4896]] acquire, align 4
// CHECK-NEXT:    store float [[TMP4897]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4898:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4899:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4898]] acquire, align 4
// CHECK-NEXT:    store float [[TMP4899]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4900:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4901:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4902:%.*]] = bitcast float [[TMP4900]] to i32
// CHECK-NEXT:    [[TMP4903:%.*]] = bitcast float [[TMP4901]] to i32
// CHECK-NEXT:    [[TMP4904:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4902]], i32 [[TMP4903]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP4905:%.*]] = extractvalue { i32, i1 } [[TMP4904]], 0
// CHECK-NEXT:    [[TMP4906:%.*]] = bitcast i32 [[TMP4905]] to float
// CHECK-NEXT:    store float [[TMP4906]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4907:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4908:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4909:%.*]] = bitcast float [[TMP4907]] to i32
// CHECK-NEXT:    [[TMP4910:%.*]] = bitcast float [[TMP4908]] to i32
// CHECK-NEXT:    [[TMP4911:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4909]], i32 [[TMP4910]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP4912:%.*]] = extractvalue { i32, i1 } [[TMP4911]], 0
// CHECK-NEXT:    [[TMP4913:%.*]] = bitcast i32 [[TMP4912]] to float
// CHECK-NEXT:    store float [[TMP4913]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4914:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4915:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4914]] acquire, align 4
// CHECK-NEXT:    [[TMP4916:%.*]] = fcmp ogt float [[TMP4915]], [[TMP4914]]
// CHECK-NEXT:    [[TMP4917:%.*]] = select i1 [[TMP4916]], float [[TMP4914]], float [[TMP4915]]
// CHECK-NEXT:    store float [[TMP4917]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4918:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4919:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4918]] acquire, align 4
// CHECK-NEXT:    [[TMP4920:%.*]] = fcmp olt float [[TMP4919]], [[TMP4918]]
// CHECK-NEXT:    [[TMP4921:%.*]] = select i1 [[TMP4920]], float [[TMP4918]], float [[TMP4919]]
// CHECK-NEXT:    store float [[TMP4921]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4922:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4923:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4922]] acquire, align 4
// CHECK-NEXT:    [[TMP4924:%.*]] = fcmp olt float [[TMP4923]], [[TMP4922]]
// CHECK-NEXT:    [[TMP4925:%.*]] = select i1 [[TMP4924]], float [[TMP4922]], float [[TMP4923]]
// CHECK-NEXT:    store float [[TMP4925]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4926:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4927:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4926]] acquire, align 4
// CHECK-NEXT:    [[TMP4928:%.*]] = fcmp ogt float [[TMP4927]], [[TMP4926]]
// CHECK-NEXT:    [[TMP4929:%.*]] = select i1 [[TMP4928]], float [[TMP4926]], float [[TMP4927]]
// CHECK-NEXT:    store float [[TMP4929]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4930:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4931:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4932:%.*]] = bitcast float [[TMP4930]] to i32
// CHECK-NEXT:    [[TMP4933:%.*]] = bitcast float [[TMP4931]] to i32
// CHECK-NEXT:    [[TMP4934:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4932]], i32 [[TMP4933]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP4935:%.*]] = extractvalue { i32, i1 } [[TMP4934]], 0
// CHECK-NEXT:    [[TMP4936:%.*]] = bitcast i32 [[TMP4935]] to float
// CHECK-NEXT:    [[TMP4937:%.*]] = extractvalue { i32, i1 } [[TMP4934]], 1
// CHECK-NEXT:    [[TMP4938:%.*]] = select i1 [[TMP4937]], float [[TMP4930]], float [[TMP4936]]
// CHECK-NEXT:    store float [[TMP4938]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4939:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4940:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4941:%.*]] = bitcast float [[TMP4939]] to i32
// CHECK-NEXT:    [[TMP4942:%.*]] = bitcast float [[TMP4940]] to i32
// CHECK-NEXT:    [[TMP4943:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4941]], i32 [[TMP4942]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP4944:%.*]] = extractvalue { i32, i1 } [[TMP4943]], 0
// CHECK-NEXT:    [[TMP4945:%.*]] = bitcast i32 [[TMP4944]] to float
// CHECK-NEXT:    [[TMP4946:%.*]] = extractvalue { i32, i1 } [[TMP4943]], 1
// CHECK-NEXT:    [[TMP4947:%.*]] = select i1 [[TMP4946]], float [[TMP4939]], float [[TMP4945]]
// CHECK-NEXT:    store float [[TMP4947]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4948:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4949:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4950:%.*]] = bitcast float [[TMP4948]] to i32
// CHECK-NEXT:    [[TMP4951:%.*]] = bitcast float [[TMP4949]] to i32
// CHECK-NEXT:    [[TMP4952:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4950]], i32 [[TMP4951]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP4953:%.*]] = extractvalue { i32, i1 } [[TMP4952]], 0
// CHECK-NEXT:    [[TMP4954:%.*]] = bitcast i32 [[TMP4953]] to float
// CHECK-NEXT:    [[TMP4955:%.*]] = extractvalue { i32, i1 } [[TMP4952]], 1
// CHECK-NEXT:    br i1 [[TMP4955]], label [[FX_ATOMIC_EXIT532:%.*]], label [[FX_ATOMIC_CONT533:%.*]]
// CHECK:       fx.atomic.cont533:
// CHECK-NEXT:    store float [[TMP4954]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT532]]
// CHECK:       fx.atomic.exit532:
// CHECK-NEXT:    [[TMP4956:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4957:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4958:%.*]] = bitcast float [[TMP4956]] to i32
// CHECK-NEXT:    [[TMP4959:%.*]] = bitcast float [[TMP4957]] to i32
// CHECK-NEXT:    [[TMP4960:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4958]], i32 [[TMP4959]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP4961:%.*]] = extractvalue { i32, i1 } [[TMP4960]], 0
// CHECK-NEXT:    [[TMP4962:%.*]] = bitcast i32 [[TMP4961]] to float
// CHECK-NEXT:    [[TMP4963:%.*]] = extractvalue { i32, i1 } [[TMP4960]], 1
// CHECK-NEXT:    br i1 [[TMP4963]], label [[FX_ATOMIC_EXIT534:%.*]], label [[FX_ATOMIC_CONT535:%.*]]
// CHECK:       fx.atomic.cont535:
// CHECK-NEXT:    store float [[TMP4962]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT534]]
// CHECK:       fx.atomic.exit534:
// CHECK-NEXT:    [[TMP4964:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4965:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4966:%.*]] = bitcast float [[TMP4964]] to i32
// CHECK-NEXT:    [[TMP4967:%.*]] = bitcast float [[TMP4965]] to i32
// CHECK-NEXT:    [[TMP4968:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4966]], i32 [[TMP4967]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP4969:%.*]] = extractvalue { i32, i1 } [[TMP4968]], 1
// CHECK-NEXT:    [[TMP4970:%.*]] = sext i1 [[TMP4969]] to i32
// CHECK-NEXT:    store i32 [[TMP4970]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4971:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4972:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4973:%.*]] = bitcast float [[TMP4971]] to i32
// CHECK-NEXT:    [[TMP4974:%.*]] = bitcast float [[TMP4972]] to i32
// CHECK-NEXT:    [[TMP4975:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4973]], i32 [[TMP4974]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP4976:%.*]] = extractvalue { i32, i1 } [[TMP4975]], 1
// CHECK-NEXT:    [[TMP4977:%.*]] = sext i1 [[TMP4976]] to i32
// CHECK-NEXT:    store i32 [[TMP4977]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4978:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4979:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4980:%.*]] = bitcast float [[TMP4978]] to i32
// CHECK-NEXT:    [[TMP4981:%.*]] = bitcast float [[TMP4979]] to i32
// CHECK-NEXT:    [[TMP4982:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4980]], i32 [[TMP4981]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP4983:%.*]] = extractvalue { i32, i1 } [[TMP4982]], 0
// CHECK-NEXT:    [[TMP4984:%.*]] = bitcast i32 [[TMP4983]] to float
// CHECK-NEXT:    [[TMP4985:%.*]] = extractvalue { i32, i1 } [[TMP4982]], 1
// CHECK-NEXT:    br i1 [[TMP4985]], label [[FX_ATOMIC_EXIT536:%.*]], label [[FX_ATOMIC_CONT537:%.*]]
// CHECK:       fx.atomic.cont537:
// CHECK-NEXT:    store float [[TMP4984]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT536]]
// CHECK:       fx.atomic.exit536:
// CHECK-NEXT:    [[TMP4986:%.*]] = extractvalue { i32, i1 } [[TMP4982]], 1
// CHECK-NEXT:    [[TMP4987:%.*]] = sext i1 [[TMP4986]] to i32
// CHECK-NEXT:    store i32 [[TMP4987]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4988:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4989:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4990:%.*]] = bitcast float [[TMP4988]] to i32
// CHECK-NEXT:    [[TMP4991:%.*]] = bitcast float [[TMP4989]] to i32
// CHECK-NEXT:    [[TMP4992:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4990]], i32 [[TMP4991]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP4993:%.*]] = extractvalue { i32, i1 } [[TMP4992]], 0
// CHECK-NEXT:    [[TMP4994:%.*]] = bitcast i32 [[TMP4993]] to float
// CHECK-NEXT:    [[TMP4995:%.*]] = extractvalue { i32, i1 } [[TMP4992]], 1
// CHECK-NEXT:    br i1 [[TMP4995]], label [[FX_ATOMIC_EXIT538:%.*]], label [[FX_ATOMIC_CONT539:%.*]]
// CHECK:       fx.atomic.cont539:
// CHECK-NEXT:    store float [[TMP4994]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT538]]
// CHECK:       fx.atomic.exit538:
// CHECK-NEXT:    [[TMP4996:%.*]] = extractvalue { i32, i1 } [[TMP4992]], 1
// CHECK-NEXT:    [[TMP4997:%.*]] = sext i1 [[TMP4996]] to i32
// CHECK-NEXT:    store i32 [[TMP4997]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4998:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4999:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4998]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP4999]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5000:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5001:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5000]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP5001]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5002:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5003:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5002]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP5003]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5004:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5005:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5004]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP5005]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5006:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5007:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5008:%.*]] = bitcast float [[TMP5006]] to i32
// CHECK-NEXT:    [[TMP5009:%.*]] = bitcast float [[TMP5007]] to i32
// CHECK-NEXT:    [[TMP5010:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5008]], i32 [[TMP5009]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5011:%.*]] = extractvalue { i32, i1 } [[TMP5010]], 0
// CHECK-NEXT:    [[TMP5012:%.*]] = bitcast i32 [[TMP5011]] to float
// CHECK-NEXT:    store float [[TMP5012]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5013:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5014:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5015:%.*]] = bitcast float [[TMP5013]] to i32
// CHECK-NEXT:    [[TMP5016:%.*]] = bitcast float [[TMP5014]] to i32
// CHECK-NEXT:    [[TMP5017:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5015]], i32 [[TMP5016]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5018:%.*]] = extractvalue { i32, i1 } [[TMP5017]], 0
// CHECK-NEXT:    [[TMP5019:%.*]] = bitcast i32 [[TMP5018]] to float
// CHECK-NEXT:    store float [[TMP5019]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5020:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5021:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5020]] monotonic, align 4
// CHECK-NEXT:    [[TMP5022:%.*]] = fcmp ogt float [[TMP5021]], [[TMP5020]]
// CHECK-NEXT:    [[TMP5023:%.*]] = select i1 [[TMP5022]], float [[TMP5020]], float [[TMP5021]]
// CHECK-NEXT:    store float [[TMP5023]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5024:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5025:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5024]] monotonic, align 4
// CHECK-NEXT:    [[TMP5026:%.*]] = fcmp olt float [[TMP5025]], [[TMP5024]]
// CHECK-NEXT:    [[TMP5027:%.*]] = select i1 [[TMP5026]], float [[TMP5024]], float [[TMP5025]]
// CHECK-NEXT:    store float [[TMP5027]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5028:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5029:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5028]] monotonic, align 4
// CHECK-NEXT:    [[TMP5030:%.*]] = fcmp olt float [[TMP5029]], [[TMP5028]]
// CHECK-NEXT:    [[TMP5031:%.*]] = select i1 [[TMP5030]], float [[TMP5028]], float [[TMP5029]]
// CHECK-NEXT:    store float [[TMP5031]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5032:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5033:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5032]] monotonic, align 4
// CHECK-NEXT:    [[TMP5034:%.*]] = fcmp ogt float [[TMP5033]], [[TMP5032]]
// CHECK-NEXT:    [[TMP5035:%.*]] = select i1 [[TMP5034]], float [[TMP5032]], float [[TMP5033]]
// CHECK-NEXT:    store float [[TMP5035]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5036:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5037:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5038:%.*]] = bitcast float [[TMP5036]] to i32
// CHECK-NEXT:    [[TMP5039:%.*]] = bitcast float [[TMP5037]] to i32
// CHECK-NEXT:    [[TMP5040:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5038]], i32 [[TMP5039]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5041:%.*]] = extractvalue { i32, i1 } [[TMP5040]], 0
// CHECK-NEXT:    [[TMP5042:%.*]] = bitcast i32 [[TMP5041]] to float
// CHECK-NEXT:    [[TMP5043:%.*]] = extractvalue { i32, i1 } [[TMP5040]], 1
// CHECK-NEXT:    [[TMP5044:%.*]] = select i1 [[TMP5043]], float [[TMP5036]], float [[TMP5042]]
// CHECK-NEXT:    store float [[TMP5044]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5045:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5046:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5047:%.*]] = bitcast float [[TMP5045]] to i32
// CHECK-NEXT:    [[TMP5048:%.*]] = bitcast float [[TMP5046]] to i32
// CHECK-NEXT:    [[TMP5049:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5047]], i32 [[TMP5048]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5050:%.*]] = extractvalue { i32, i1 } [[TMP5049]], 0
// CHECK-NEXT:    [[TMP5051:%.*]] = bitcast i32 [[TMP5050]] to float
// CHECK-NEXT:    [[TMP5052:%.*]] = extractvalue { i32, i1 } [[TMP5049]], 1
// CHECK-NEXT:    [[TMP5053:%.*]] = select i1 [[TMP5052]], float [[TMP5045]], float [[TMP5051]]
// CHECK-NEXT:    store float [[TMP5053]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5054:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5055:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5056:%.*]] = bitcast float [[TMP5054]] to i32
// CHECK-NEXT:    [[TMP5057:%.*]] = bitcast float [[TMP5055]] to i32
// CHECK-NEXT:    [[TMP5058:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5056]], i32 [[TMP5057]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5059:%.*]] = extractvalue { i32, i1 } [[TMP5058]], 0
// CHECK-NEXT:    [[TMP5060:%.*]] = bitcast i32 [[TMP5059]] to float
// CHECK-NEXT:    [[TMP5061:%.*]] = extractvalue { i32, i1 } [[TMP5058]], 1
// CHECK-NEXT:    br i1 [[TMP5061]], label [[FX_ATOMIC_EXIT540:%.*]], label [[FX_ATOMIC_CONT541:%.*]]
// CHECK:       fx.atomic.cont541:
// CHECK-NEXT:    store float [[TMP5060]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT540]]
// CHECK:       fx.atomic.exit540:
// CHECK-NEXT:    [[TMP5062:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5063:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5064:%.*]] = bitcast float [[TMP5062]] to i32
// CHECK-NEXT:    [[TMP5065:%.*]] = bitcast float [[TMP5063]] to i32
// CHECK-NEXT:    [[TMP5066:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5064]], i32 [[TMP5065]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5067:%.*]] = extractvalue { i32, i1 } [[TMP5066]], 0
// CHECK-NEXT:    [[TMP5068:%.*]] = bitcast i32 [[TMP5067]] to float
// CHECK-NEXT:    [[TMP5069:%.*]] = extractvalue { i32, i1 } [[TMP5066]], 1
// CHECK-NEXT:    br i1 [[TMP5069]], label [[FX_ATOMIC_EXIT542:%.*]], label [[FX_ATOMIC_CONT543:%.*]]
// CHECK:       fx.atomic.cont543:
// CHECK-NEXT:    store float [[TMP5068]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT542]]
// CHECK:       fx.atomic.exit542:
// CHECK-NEXT:    [[TMP5070:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5071:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5072:%.*]] = bitcast float [[TMP5070]] to i32
// CHECK-NEXT:    [[TMP5073:%.*]] = bitcast float [[TMP5071]] to i32
// CHECK-NEXT:    [[TMP5074:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5072]], i32 [[TMP5073]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5075:%.*]] = extractvalue { i32, i1 } [[TMP5074]], 1
// CHECK-NEXT:    [[TMP5076:%.*]] = sext i1 [[TMP5075]] to i32
// CHECK-NEXT:    store i32 [[TMP5076]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5077:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5078:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5079:%.*]] = bitcast float [[TMP5077]] to i32
// CHECK-NEXT:    [[TMP5080:%.*]] = bitcast float [[TMP5078]] to i32
// CHECK-NEXT:    [[TMP5081:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5079]], i32 [[TMP5080]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5082:%.*]] = extractvalue { i32, i1 } [[TMP5081]], 1
// CHECK-NEXT:    [[TMP5083:%.*]] = sext i1 [[TMP5082]] to i32
// CHECK-NEXT:    store i32 [[TMP5083]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5084:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5085:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5086:%.*]] = bitcast float [[TMP5084]] to i32
// CHECK-NEXT:    [[TMP5087:%.*]] = bitcast float [[TMP5085]] to i32
// CHECK-NEXT:    [[TMP5088:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5086]], i32 [[TMP5087]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5089:%.*]] = extractvalue { i32, i1 } [[TMP5088]], 0
// CHECK-NEXT:    [[TMP5090:%.*]] = bitcast i32 [[TMP5089]] to float
// CHECK-NEXT:    [[TMP5091:%.*]] = extractvalue { i32, i1 } [[TMP5088]], 1
// CHECK-NEXT:    br i1 [[TMP5091]], label [[FX_ATOMIC_EXIT544:%.*]], label [[FX_ATOMIC_CONT545:%.*]]
// CHECK:       fx.atomic.cont545:
// CHECK-NEXT:    store float [[TMP5090]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT544]]
// CHECK:       fx.atomic.exit544:
// CHECK-NEXT:    [[TMP5092:%.*]] = extractvalue { i32, i1 } [[TMP5088]], 1
// CHECK-NEXT:    [[TMP5093:%.*]] = sext i1 [[TMP5092]] to i32
// CHECK-NEXT:    store i32 [[TMP5093]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5094:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5095:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5096:%.*]] = bitcast float [[TMP5094]] to i32
// CHECK-NEXT:    [[TMP5097:%.*]] = bitcast float [[TMP5095]] to i32
// CHECK-NEXT:    [[TMP5098:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5096]], i32 [[TMP5097]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5099:%.*]] = extractvalue { i32, i1 } [[TMP5098]], 0
// CHECK-NEXT:    [[TMP5100:%.*]] = bitcast i32 [[TMP5099]] to float
// CHECK-NEXT:    [[TMP5101:%.*]] = extractvalue { i32, i1 } [[TMP5098]], 1
// CHECK-NEXT:    br i1 [[TMP5101]], label [[FX_ATOMIC_EXIT546:%.*]], label [[FX_ATOMIC_CONT547:%.*]]
// CHECK:       fx.atomic.cont547:
// CHECK-NEXT:    store float [[TMP5100]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT546]]
// CHECK:       fx.atomic.exit546:
// CHECK-NEXT:    [[TMP5102:%.*]] = extractvalue { i32, i1 } [[TMP5098]], 1
// CHECK-NEXT:    [[TMP5103:%.*]] = sext i1 [[TMP5102]] to i32
// CHECK-NEXT:    store i32 [[TMP5103]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5104:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5105:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5104]] release, align 4
// CHECK-NEXT:    store float [[TMP5105]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5106:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5107:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5106]] release, align 4
// CHECK-NEXT:    store float [[TMP5107]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5108:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5109:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5108]] release, align 4
// CHECK-NEXT:    store float [[TMP5109]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5110:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5111:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5110]] release, align 4
// CHECK-NEXT:    store float [[TMP5111]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5112:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5113:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5114:%.*]] = bitcast float [[TMP5112]] to i32
// CHECK-NEXT:    [[TMP5115:%.*]] = bitcast float [[TMP5113]] to i32
// CHECK-NEXT:    [[TMP5116:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5114]], i32 [[TMP5115]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5117:%.*]] = extractvalue { i32, i1 } [[TMP5116]], 0
// CHECK-NEXT:    [[TMP5118:%.*]] = bitcast i32 [[TMP5117]] to float
// CHECK-NEXT:    store float [[TMP5118]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5119:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5120:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5121:%.*]] = bitcast float [[TMP5119]] to i32
// CHECK-NEXT:    [[TMP5122:%.*]] = bitcast float [[TMP5120]] to i32
// CHECK-NEXT:    [[TMP5123:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5121]], i32 [[TMP5122]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5124:%.*]] = extractvalue { i32, i1 } [[TMP5123]], 0
// CHECK-NEXT:    [[TMP5125:%.*]] = bitcast i32 [[TMP5124]] to float
// CHECK-NEXT:    store float [[TMP5125]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5126:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5127:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5126]] release, align 4
// CHECK-NEXT:    [[TMP5128:%.*]] = fcmp ogt float [[TMP5127]], [[TMP5126]]
// CHECK-NEXT:    [[TMP5129:%.*]] = select i1 [[TMP5128]], float [[TMP5126]], float [[TMP5127]]
// CHECK-NEXT:    store float [[TMP5129]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5130:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5131:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5130]] release, align 4
// CHECK-NEXT:    [[TMP5132:%.*]] = fcmp olt float [[TMP5131]], [[TMP5130]]
// CHECK-NEXT:    [[TMP5133:%.*]] = select i1 [[TMP5132]], float [[TMP5130]], float [[TMP5131]]
// CHECK-NEXT:    store float [[TMP5133]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5134:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5135:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5134]] release, align 4
// CHECK-NEXT:    [[TMP5136:%.*]] = fcmp olt float [[TMP5135]], [[TMP5134]]
// CHECK-NEXT:    [[TMP5137:%.*]] = select i1 [[TMP5136]], float [[TMP5134]], float [[TMP5135]]
// CHECK-NEXT:    store float [[TMP5137]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5138:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5139:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5138]] release, align 4
// CHECK-NEXT:    [[TMP5140:%.*]] = fcmp ogt float [[TMP5139]], [[TMP5138]]
// CHECK-NEXT:    [[TMP5141:%.*]] = select i1 [[TMP5140]], float [[TMP5138]], float [[TMP5139]]
// CHECK-NEXT:    store float [[TMP5141]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5142:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5143:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5144:%.*]] = bitcast float [[TMP5142]] to i32
// CHECK-NEXT:    [[TMP5145:%.*]] = bitcast float [[TMP5143]] to i32
// CHECK-NEXT:    [[TMP5146:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5144]], i32 [[TMP5145]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5147:%.*]] = extractvalue { i32, i1 } [[TMP5146]], 0
// CHECK-NEXT:    [[TMP5148:%.*]] = bitcast i32 [[TMP5147]] to float
// CHECK-NEXT:    [[TMP5149:%.*]] = extractvalue { i32, i1 } [[TMP5146]], 1
// CHECK-NEXT:    [[TMP5150:%.*]] = select i1 [[TMP5149]], float [[TMP5142]], float [[TMP5148]]
// CHECK-NEXT:    store float [[TMP5150]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5151:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5152:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5153:%.*]] = bitcast float [[TMP5151]] to i32
// CHECK-NEXT:    [[TMP5154:%.*]] = bitcast float [[TMP5152]] to i32
// CHECK-NEXT:    [[TMP5155:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5153]], i32 [[TMP5154]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5156:%.*]] = extractvalue { i32, i1 } [[TMP5155]], 0
// CHECK-NEXT:    [[TMP5157:%.*]] = bitcast i32 [[TMP5156]] to float
// CHECK-NEXT:    [[TMP5158:%.*]] = extractvalue { i32, i1 } [[TMP5155]], 1
// CHECK-NEXT:    [[TMP5159:%.*]] = select i1 [[TMP5158]], float [[TMP5151]], float [[TMP5157]]
// CHECK-NEXT:    store float [[TMP5159]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5160:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5161:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5162:%.*]] = bitcast float [[TMP5160]] to i32
// CHECK-NEXT:    [[TMP5163:%.*]] = bitcast float [[TMP5161]] to i32
// CHECK-NEXT:    [[TMP5164:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5162]], i32 [[TMP5163]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5165:%.*]] = extractvalue { i32, i1 } [[TMP5164]], 0
// CHECK-NEXT:    [[TMP5166:%.*]] = bitcast i32 [[TMP5165]] to float
// CHECK-NEXT:    [[TMP5167:%.*]] = extractvalue { i32, i1 } [[TMP5164]], 1
// CHECK-NEXT:    br i1 [[TMP5167]], label [[FX_ATOMIC_EXIT548:%.*]], label [[FX_ATOMIC_CONT549:%.*]]
// CHECK:       fx.atomic.cont549:
// CHECK-NEXT:    store float [[TMP5166]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT548]]
// CHECK:       fx.atomic.exit548:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5168:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5169:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5170:%.*]] = bitcast float [[TMP5168]] to i32
// CHECK-NEXT:    [[TMP5171:%.*]] = bitcast float [[TMP5169]] to i32
// CHECK-NEXT:    [[TMP5172:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5170]], i32 [[TMP5171]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5173:%.*]] = extractvalue { i32, i1 } [[TMP5172]], 0
// CHECK-NEXT:    [[TMP5174:%.*]] = bitcast i32 [[TMP5173]] to float
// CHECK-NEXT:    [[TMP5175:%.*]] = extractvalue { i32, i1 } [[TMP5172]], 1
// CHECK-NEXT:    br i1 [[TMP5175]], label [[FX_ATOMIC_EXIT550:%.*]], label [[FX_ATOMIC_CONT551:%.*]]
// CHECK:       fx.atomic.cont551:
// CHECK-NEXT:    store float [[TMP5174]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT550]]
// CHECK:       fx.atomic.exit550:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5176:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5177:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5178:%.*]] = bitcast float [[TMP5176]] to i32
// CHECK-NEXT:    [[TMP5179:%.*]] = bitcast float [[TMP5177]] to i32
// CHECK-NEXT:    [[TMP5180:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5178]], i32 [[TMP5179]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5181:%.*]] = extractvalue { i32, i1 } [[TMP5180]], 1
// CHECK-NEXT:    [[TMP5182:%.*]] = sext i1 [[TMP5181]] to i32
// CHECK-NEXT:    store i32 [[TMP5182]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5183:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5184:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5185:%.*]] = bitcast float [[TMP5183]] to i32
// CHECK-NEXT:    [[TMP5186:%.*]] = bitcast float [[TMP5184]] to i32
// CHECK-NEXT:    [[TMP5187:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5185]], i32 [[TMP5186]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5188:%.*]] = extractvalue { i32, i1 } [[TMP5187]], 1
// CHECK-NEXT:    [[TMP5189:%.*]] = sext i1 [[TMP5188]] to i32
// CHECK-NEXT:    store i32 [[TMP5189]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5190:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5191:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5192:%.*]] = bitcast float [[TMP5190]] to i32
// CHECK-NEXT:    [[TMP5193:%.*]] = bitcast float [[TMP5191]] to i32
// CHECK-NEXT:    [[TMP5194:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5192]], i32 [[TMP5193]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5195:%.*]] = extractvalue { i32, i1 } [[TMP5194]], 0
// CHECK-NEXT:    [[TMP5196:%.*]] = bitcast i32 [[TMP5195]] to float
// CHECK-NEXT:    [[TMP5197:%.*]] = extractvalue { i32, i1 } [[TMP5194]], 1
// CHECK-NEXT:    br i1 [[TMP5197]], label [[FX_ATOMIC_EXIT552:%.*]], label [[FX_ATOMIC_CONT553:%.*]]
// CHECK:       fx.atomic.cont553:
// CHECK-NEXT:    store float [[TMP5196]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT552]]
// CHECK:       fx.atomic.exit552:
// CHECK-NEXT:    [[TMP5198:%.*]] = extractvalue { i32, i1 } [[TMP5194]], 1
// CHECK-NEXT:    [[TMP5199:%.*]] = sext i1 [[TMP5198]] to i32
// CHECK-NEXT:    store i32 [[TMP5199]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5200:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5201:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5202:%.*]] = bitcast float [[TMP5200]] to i32
// CHECK-NEXT:    [[TMP5203:%.*]] = bitcast float [[TMP5201]] to i32
// CHECK-NEXT:    [[TMP5204:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5202]], i32 [[TMP5203]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5205:%.*]] = extractvalue { i32, i1 } [[TMP5204]], 0
// CHECK-NEXT:    [[TMP5206:%.*]] = bitcast i32 [[TMP5205]] to float
// CHECK-NEXT:    [[TMP5207:%.*]] = extractvalue { i32, i1 } [[TMP5204]], 1
// CHECK-NEXT:    br i1 [[TMP5207]], label [[FX_ATOMIC_EXIT554:%.*]], label [[FX_ATOMIC_CONT555:%.*]]
// CHECK:       fx.atomic.cont555:
// CHECK-NEXT:    store float [[TMP5206]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT554]]
// CHECK:       fx.atomic.exit554:
// CHECK-NEXT:    [[TMP5208:%.*]] = extractvalue { i32, i1 } [[TMP5204]], 1
// CHECK-NEXT:    [[TMP5209:%.*]] = sext i1 [[TMP5208]] to i32
// CHECK-NEXT:    store i32 [[TMP5209]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5210:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5211:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5210]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP5211]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5212:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5213:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5212]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP5213]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5214:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5215:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5214]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP5215]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5216:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5217:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5216]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP5217]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5218:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5219:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5220:%.*]] = bitcast float [[TMP5218]] to i32
// CHECK-NEXT:    [[TMP5221:%.*]] = bitcast float [[TMP5219]] to i32
// CHECK-NEXT:    [[TMP5222:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5220]], i32 [[TMP5221]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5223:%.*]] = extractvalue { i32, i1 } [[TMP5222]], 0
// CHECK-NEXT:    [[TMP5224:%.*]] = bitcast i32 [[TMP5223]] to float
// CHECK-NEXT:    store float [[TMP5224]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5225:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5226:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5227:%.*]] = bitcast float [[TMP5225]] to i32
// CHECK-NEXT:    [[TMP5228:%.*]] = bitcast float [[TMP5226]] to i32
// CHECK-NEXT:    [[TMP5229:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5227]], i32 [[TMP5228]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5230:%.*]] = extractvalue { i32, i1 } [[TMP5229]], 0
// CHECK-NEXT:    [[TMP5231:%.*]] = bitcast i32 [[TMP5230]] to float
// CHECK-NEXT:    store float [[TMP5231]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5232:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5233:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5232]] seq_cst, align 4
// CHECK-NEXT:    [[TMP5234:%.*]] = fcmp ogt float [[TMP5233]], [[TMP5232]]
// CHECK-NEXT:    [[TMP5235:%.*]] = select i1 [[TMP5234]], float [[TMP5232]], float [[TMP5233]]
// CHECK-NEXT:    store float [[TMP5235]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5236:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5237:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5236]] seq_cst, align 4
// CHECK-NEXT:    [[TMP5238:%.*]] = fcmp olt float [[TMP5237]], [[TMP5236]]
// CHECK-NEXT:    [[TMP5239:%.*]] = select i1 [[TMP5238]], float [[TMP5236]], float [[TMP5237]]
// CHECK-NEXT:    store float [[TMP5239]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5240:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5241:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5240]] seq_cst, align 4
// CHECK-NEXT:    [[TMP5242:%.*]] = fcmp olt float [[TMP5241]], [[TMP5240]]
// CHECK-NEXT:    [[TMP5243:%.*]] = select i1 [[TMP5242]], float [[TMP5240]], float [[TMP5241]]
// CHECK-NEXT:    store float [[TMP5243]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5244:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5245:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5244]] seq_cst, align 4
// CHECK-NEXT:    [[TMP5246:%.*]] = fcmp ogt float [[TMP5245]], [[TMP5244]]
// CHECK-NEXT:    [[TMP5247:%.*]] = select i1 [[TMP5246]], float [[TMP5244]], float [[TMP5245]]
// CHECK-NEXT:    store float [[TMP5247]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5248:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5249:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5250:%.*]] = bitcast float [[TMP5248]] to i32
// CHECK-NEXT:    [[TMP5251:%.*]] = bitcast float [[TMP5249]] to i32
// CHECK-NEXT:    [[TMP5252:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5250]], i32 [[TMP5251]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5253:%.*]] = extractvalue { i32, i1 } [[TMP5252]], 0
// CHECK-NEXT:    [[TMP5254:%.*]] = bitcast i32 [[TMP5253]] to float
// CHECK-NEXT:    [[TMP5255:%.*]] = extractvalue { i32, i1 } [[TMP5252]], 1
// CHECK-NEXT:    [[TMP5256:%.*]] = select i1 [[TMP5255]], float [[TMP5248]], float [[TMP5254]]
// CHECK-NEXT:    store float [[TMP5256]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5257:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5258:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5259:%.*]] = bitcast float [[TMP5257]] to i32
// CHECK-NEXT:    [[TMP5260:%.*]] = bitcast float [[TMP5258]] to i32
// CHECK-NEXT:    [[TMP5261:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5259]], i32 [[TMP5260]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5262:%.*]] = extractvalue { i32, i1 } [[TMP5261]], 0
// CHECK-NEXT:    [[TMP5263:%.*]] = bitcast i32 [[TMP5262]] to float
// CHECK-NEXT:    [[TMP5264:%.*]] = extractvalue { i32, i1 } [[TMP5261]], 1
// CHECK-NEXT:    [[TMP5265:%.*]] = select i1 [[TMP5264]], float [[TMP5257]], float [[TMP5263]]
// CHECK-NEXT:    store float [[TMP5265]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5266:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5267:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5268:%.*]] = bitcast float [[TMP5266]] to i32
// CHECK-NEXT:    [[TMP5269:%.*]] = bitcast float [[TMP5267]] to i32
// CHECK-NEXT:    [[TMP5270:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5268]], i32 [[TMP5269]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5271:%.*]] = extractvalue { i32, i1 } [[TMP5270]], 0
// CHECK-NEXT:    [[TMP5272:%.*]] = bitcast i32 [[TMP5271]] to float
// CHECK-NEXT:    [[TMP5273:%.*]] = extractvalue { i32, i1 } [[TMP5270]], 1
// CHECK-NEXT:    br i1 [[TMP5273]], label [[FX_ATOMIC_EXIT556:%.*]], label [[FX_ATOMIC_CONT557:%.*]]
// CHECK:       fx.atomic.cont557:
// CHECK-NEXT:    store float [[TMP5272]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT556]]
// CHECK:       fx.atomic.exit556:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5274:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5275:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5276:%.*]] = bitcast float [[TMP5274]] to i32
// CHECK-NEXT:    [[TMP5277:%.*]] = bitcast float [[TMP5275]] to i32
// CHECK-NEXT:    [[TMP5278:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5276]], i32 [[TMP5277]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5279:%.*]] = extractvalue { i32, i1 } [[TMP5278]], 0
// CHECK-NEXT:    [[TMP5280:%.*]] = bitcast i32 [[TMP5279]] to float
// CHECK-NEXT:    [[TMP5281:%.*]] = extractvalue { i32, i1 } [[TMP5278]], 1
// CHECK-NEXT:    br i1 [[TMP5281]], label [[FX_ATOMIC_EXIT558:%.*]], label [[FX_ATOMIC_CONT559:%.*]]
// CHECK:       fx.atomic.cont559:
// CHECK-NEXT:    store float [[TMP5280]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT558]]
// CHECK:       fx.atomic.exit558:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5282:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5283:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5284:%.*]] = bitcast float [[TMP5282]] to i32
// CHECK-NEXT:    [[TMP5285:%.*]] = bitcast float [[TMP5283]] to i32
// CHECK-NEXT:    [[TMP5286:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5284]], i32 [[TMP5285]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5287:%.*]] = extractvalue { i32, i1 } [[TMP5286]], 1
// CHECK-NEXT:    [[TMP5288:%.*]] = sext i1 [[TMP5287]] to i32
// CHECK-NEXT:    store i32 [[TMP5288]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5289:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5290:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5291:%.*]] = bitcast float [[TMP5289]] to i32
// CHECK-NEXT:    [[TMP5292:%.*]] = bitcast float [[TMP5290]] to i32
// CHECK-NEXT:    [[TMP5293:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5291]], i32 [[TMP5292]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5294:%.*]] = extractvalue { i32, i1 } [[TMP5293]], 1
// CHECK-NEXT:    [[TMP5295:%.*]] = sext i1 [[TMP5294]] to i32
// CHECK-NEXT:    store i32 [[TMP5295]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5296:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5297:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5298:%.*]] = bitcast float [[TMP5296]] to i32
// CHECK-NEXT:    [[TMP5299:%.*]] = bitcast float [[TMP5297]] to i32
// CHECK-NEXT:    [[TMP5300:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5298]], i32 [[TMP5299]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5301:%.*]] = extractvalue { i32, i1 } [[TMP5300]], 0
// CHECK-NEXT:    [[TMP5302:%.*]] = bitcast i32 [[TMP5301]] to float
// CHECK-NEXT:    [[TMP5303:%.*]] = extractvalue { i32, i1 } [[TMP5300]], 1
// CHECK-NEXT:    br i1 [[TMP5303]], label [[FX_ATOMIC_EXIT560:%.*]], label [[FX_ATOMIC_CONT561:%.*]]
// CHECK:       fx.atomic.cont561:
// CHECK-NEXT:    store float [[TMP5302]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT560]]
// CHECK:       fx.atomic.exit560:
// CHECK-NEXT:    [[TMP5304:%.*]] = extractvalue { i32, i1 } [[TMP5300]], 1
// CHECK-NEXT:    [[TMP5305:%.*]] = sext i1 [[TMP5304]] to i32
// CHECK-NEXT:    store i32 [[TMP5305]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5306:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5307:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5308:%.*]] = bitcast float [[TMP5306]] to i32
// CHECK-NEXT:    [[TMP5309:%.*]] = bitcast float [[TMP5307]] to i32
// CHECK-NEXT:    [[TMP5310:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5308]], i32 [[TMP5309]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5311:%.*]] = extractvalue { i32, i1 } [[TMP5310]], 0
// CHECK-NEXT:    [[TMP5312:%.*]] = bitcast i32 [[TMP5311]] to float
// CHECK-NEXT:    [[TMP5313:%.*]] = extractvalue { i32, i1 } [[TMP5310]], 1
// CHECK-NEXT:    br i1 [[TMP5313]], label [[FX_ATOMIC_EXIT562:%.*]], label [[FX_ATOMIC_CONT563:%.*]]
// CHECK:       fx.atomic.cont563:
// CHECK-NEXT:    store float [[TMP5312]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT562]]
// CHECK:       fx.atomic.exit562:
// CHECK-NEXT:    [[TMP5314:%.*]] = extractvalue { i32, i1 } [[TMP5310]], 1
// CHECK-NEXT:    [[TMP5315:%.*]] = sext i1 [[TMP5314]] to i32
// CHECK-NEXT:    store i32 [[TMP5315]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5316:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5317:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5316]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5317]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5318:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5319:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5318]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5319]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5320:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5321:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5320]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5321]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5322:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5323:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5322]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5323]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5324:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5325:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5326:%.*]] = bitcast double [[TMP5324]] to i64
// CHECK-NEXT:    [[TMP5327:%.*]] = bitcast double [[TMP5325]] to i64
// CHECK-NEXT:    [[TMP5328:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5326]], i64 [[TMP5327]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5329:%.*]] = extractvalue { i64, i1 } [[TMP5328]], 0
// CHECK-NEXT:    [[TMP5330:%.*]] = bitcast i64 [[TMP5329]] to double
// CHECK-NEXT:    store double [[TMP5330]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5331:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5332:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5333:%.*]] = bitcast double [[TMP5331]] to i64
// CHECK-NEXT:    [[TMP5334:%.*]] = bitcast double [[TMP5332]] to i64
// CHECK-NEXT:    [[TMP5335:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5333]], i64 [[TMP5334]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5336:%.*]] = extractvalue { i64, i1 } [[TMP5335]], 0
// CHECK-NEXT:    [[TMP5337:%.*]] = bitcast i64 [[TMP5336]] to double
// CHECK-NEXT:    store double [[TMP5337]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5338:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5339:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5338]] monotonic, align 8
// CHECK-NEXT:    [[TMP5340:%.*]] = fcmp ogt double [[TMP5339]], [[TMP5338]]
// CHECK-NEXT:    [[TMP5341:%.*]] = select i1 [[TMP5340]], double [[TMP5338]], double [[TMP5339]]
// CHECK-NEXT:    store double [[TMP5341]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5342:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5343:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5342]] monotonic, align 8
// CHECK-NEXT:    [[TMP5344:%.*]] = fcmp olt double [[TMP5343]], [[TMP5342]]
// CHECK-NEXT:    [[TMP5345:%.*]] = select i1 [[TMP5344]], double [[TMP5342]], double [[TMP5343]]
// CHECK-NEXT:    store double [[TMP5345]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5346:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5347:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5346]] monotonic, align 8
// CHECK-NEXT:    [[TMP5348:%.*]] = fcmp olt double [[TMP5347]], [[TMP5346]]
// CHECK-NEXT:    [[TMP5349:%.*]] = select i1 [[TMP5348]], double [[TMP5346]], double [[TMP5347]]
// CHECK-NEXT:    store double [[TMP5349]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5350:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5351:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5350]] monotonic, align 8
// CHECK-NEXT:    [[TMP5352:%.*]] = fcmp ogt double [[TMP5351]], [[TMP5350]]
// CHECK-NEXT:    [[TMP5353:%.*]] = select i1 [[TMP5352]], double [[TMP5350]], double [[TMP5351]]
// CHECK-NEXT:    store double [[TMP5353]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5354:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5355:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5356:%.*]] = bitcast double [[TMP5354]] to i64
// CHECK-NEXT:    [[TMP5357:%.*]] = bitcast double [[TMP5355]] to i64
// CHECK-NEXT:    [[TMP5358:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5356]], i64 [[TMP5357]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5359:%.*]] = extractvalue { i64, i1 } [[TMP5358]], 0
// CHECK-NEXT:    [[TMP5360:%.*]] = bitcast i64 [[TMP5359]] to double
// CHECK-NEXT:    [[TMP5361:%.*]] = extractvalue { i64, i1 } [[TMP5358]], 1
// CHECK-NEXT:    [[TMP5362:%.*]] = select i1 [[TMP5361]], double [[TMP5354]], double [[TMP5360]]
// CHECK-NEXT:    store double [[TMP5362]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5363:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5364:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5365:%.*]] = bitcast double [[TMP5363]] to i64
// CHECK-NEXT:    [[TMP5366:%.*]] = bitcast double [[TMP5364]] to i64
// CHECK-NEXT:    [[TMP5367:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5365]], i64 [[TMP5366]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5368:%.*]] = extractvalue { i64, i1 } [[TMP5367]], 0
// CHECK-NEXT:    [[TMP5369:%.*]] = bitcast i64 [[TMP5368]] to double
// CHECK-NEXT:    [[TMP5370:%.*]] = extractvalue { i64, i1 } [[TMP5367]], 1
// CHECK-NEXT:    [[TMP5371:%.*]] = select i1 [[TMP5370]], double [[TMP5363]], double [[TMP5369]]
// CHECK-NEXT:    store double [[TMP5371]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5372:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5373:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5374:%.*]] = bitcast double [[TMP5372]] to i64
// CHECK-NEXT:    [[TMP5375:%.*]] = bitcast double [[TMP5373]] to i64
// CHECK-NEXT:    [[TMP5376:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5374]], i64 [[TMP5375]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5377:%.*]] = extractvalue { i64, i1 } [[TMP5376]], 0
// CHECK-NEXT:    [[TMP5378:%.*]] = bitcast i64 [[TMP5377]] to double
// CHECK-NEXT:    [[TMP5379:%.*]] = extractvalue { i64, i1 } [[TMP5376]], 1
// CHECK-NEXT:    br i1 [[TMP5379]], label [[DX_ATOMIC_EXIT:%.*]], label [[DX_ATOMIC_CONT:%.*]]
// CHECK:       dx.atomic.cont:
// CHECK-NEXT:    store double [[TMP5378]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT]]
// CHECK:       dx.atomic.exit:
// CHECK-NEXT:    [[TMP5380:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5381:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5382:%.*]] = bitcast double [[TMP5380]] to i64
// CHECK-NEXT:    [[TMP5383:%.*]] = bitcast double [[TMP5381]] to i64
// CHECK-NEXT:    [[TMP5384:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5382]], i64 [[TMP5383]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5385:%.*]] = extractvalue { i64, i1 } [[TMP5384]], 0
// CHECK-NEXT:    [[TMP5386:%.*]] = bitcast i64 [[TMP5385]] to double
// CHECK-NEXT:    [[TMP5387:%.*]] = extractvalue { i64, i1 } [[TMP5384]], 1
// CHECK-NEXT:    br i1 [[TMP5387]], label [[DX_ATOMIC_EXIT564:%.*]], label [[DX_ATOMIC_CONT565:%.*]]
// CHECK:       dx.atomic.cont565:
// CHECK-NEXT:    store double [[TMP5386]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT564]]
// CHECK:       dx.atomic.exit564:
// CHECK-NEXT:    [[TMP5388:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5389:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5390:%.*]] = bitcast double [[TMP5388]] to i64
// CHECK-NEXT:    [[TMP5391:%.*]] = bitcast double [[TMP5389]] to i64
// CHECK-NEXT:    [[TMP5392:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5390]], i64 [[TMP5391]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5393:%.*]] = extractvalue { i64, i1 } [[TMP5392]], 1
// CHECK-NEXT:    [[TMP5394:%.*]] = sext i1 [[TMP5393]] to i32
// CHECK-NEXT:    store i32 [[TMP5394]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5395:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5396:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5397:%.*]] = bitcast double [[TMP5395]] to i64
// CHECK-NEXT:    [[TMP5398:%.*]] = bitcast double [[TMP5396]] to i64
// CHECK-NEXT:    [[TMP5399:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5397]], i64 [[TMP5398]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5400:%.*]] = extractvalue { i64, i1 } [[TMP5399]], 1
// CHECK-NEXT:    [[TMP5401:%.*]] = sext i1 [[TMP5400]] to i32
// CHECK-NEXT:    store i32 [[TMP5401]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5402:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5403:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5404:%.*]] = bitcast double [[TMP5402]] to i64
// CHECK-NEXT:    [[TMP5405:%.*]] = bitcast double [[TMP5403]] to i64
// CHECK-NEXT:    [[TMP5406:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5404]], i64 [[TMP5405]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5407:%.*]] = extractvalue { i64, i1 } [[TMP5406]], 0
// CHECK-NEXT:    [[TMP5408:%.*]] = bitcast i64 [[TMP5407]] to double
// CHECK-NEXT:    [[TMP5409:%.*]] = extractvalue { i64, i1 } [[TMP5406]], 1
// CHECK-NEXT:    br i1 [[TMP5409]], label [[DX_ATOMIC_EXIT566:%.*]], label [[DX_ATOMIC_CONT567:%.*]]
// CHECK:       dx.atomic.cont567:
// CHECK-NEXT:    store double [[TMP5408]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT566]]
// CHECK:       dx.atomic.exit566:
// CHECK-NEXT:    [[TMP5410:%.*]] = extractvalue { i64, i1 } [[TMP5406]], 1
// CHECK-NEXT:    [[TMP5411:%.*]] = sext i1 [[TMP5410]] to i32
// CHECK-NEXT:    store i32 [[TMP5411]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5412:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5413:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5414:%.*]] = bitcast double [[TMP5412]] to i64
// CHECK-NEXT:    [[TMP5415:%.*]] = bitcast double [[TMP5413]] to i64
// CHECK-NEXT:    [[TMP5416:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5414]], i64 [[TMP5415]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5417:%.*]] = extractvalue { i64, i1 } [[TMP5416]], 0
// CHECK-NEXT:    [[TMP5418:%.*]] = bitcast i64 [[TMP5417]] to double
// CHECK-NEXT:    [[TMP5419:%.*]] = extractvalue { i64, i1 } [[TMP5416]], 1
// CHECK-NEXT:    br i1 [[TMP5419]], label [[DX_ATOMIC_EXIT568:%.*]], label [[DX_ATOMIC_CONT569:%.*]]
// CHECK:       dx.atomic.cont569:
// CHECK-NEXT:    store double [[TMP5418]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT568]]
// CHECK:       dx.atomic.exit568:
// CHECK-NEXT:    [[TMP5420:%.*]] = extractvalue { i64, i1 } [[TMP5416]], 1
// CHECK-NEXT:    [[TMP5421:%.*]] = sext i1 [[TMP5420]] to i32
// CHECK-NEXT:    store i32 [[TMP5421]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5422:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5423:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5422]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP5423]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5424:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5425:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5424]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP5425]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5426:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5427:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5426]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP5427]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5428:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5429:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5428]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP5429]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5430:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5431:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5432:%.*]] = bitcast double [[TMP5430]] to i64
// CHECK-NEXT:    [[TMP5433:%.*]] = bitcast double [[TMP5431]] to i64
// CHECK-NEXT:    [[TMP5434:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5432]], i64 [[TMP5433]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5435:%.*]] = extractvalue { i64, i1 } [[TMP5434]], 0
// CHECK-NEXT:    [[TMP5436:%.*]] = bitcast i64 [[TMP5435]] to double
// CHECK-NEXT:    store double [[TMP5436]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5437:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5438:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5439:%.*]] = bitcast double [[TMP5437]] to i64
// CHECK-NEXT:    [[TMP5440:%.*]] = bitcast double [[TMP5438]] to i64
// CHECK-NEXT:    [[TMP5441:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5439]], i64 [[TMP5440]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5442:%.*]] = extractvalue { i64, i1 } [[TMP5441]], 0
// CHECK-NEXT:    [[TMP5443:%.*]] = bitcast i64 [[TMP5442]] to double
// CHECK-NEXT:    store double [[TMP5443]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5444:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5445:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5444]] acq_rel, align 8
// CHECK-NEXT:    [[TMP5446:%.*]] = fcmp ogt double [[TMP5445]], [[TMP5444]]
// CHECK-NEXT:    [[TMP5447:%.*]] = select i1 [[TMP5446]], double [[TMP5444]], double [[TMP5445]]
// CHECK-NEXT:    store double [[TMP5447]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5448:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5449:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5448]] acq_rel, align 8
// CHECK-NEXT:    [[TMP5450:%.*]] = fcmp olt double [[TMP5449]], [[TMP5448]]
// CHECK-NEXT:    [[TMP5451:%.*]] = select i1 [[TMP5450]], double [[TMP5448]], double [[TMP5449]]
// CHECK-NEXT:    store double [[TMP5451]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5452:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5453:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5452]] acq_rel, align 8
// CHECK-NEXT:    [[TMP5454:%.*]] = fcmp olt double [[TMP5453]], [[TMP5452]]
// CHECK-NEXT:    [[TMP5455:%.*]] = select i1 [[TMP5454]], double [[TMP5452]], double [[TMP5453]]
// CHECK-NEXT:    store double [[TMP5455]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5456:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5457:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5456]] acq_rel, align 8
// CHECK-NEXT:    [[TMP5458:%.*]] = fcmp ogt double [[TMP5457]], [[TMP5456]]
// CHECK-NEXT:    [[TMP5459:%.*]] = select i1 [[TMP5458]], double [[TMP5456]], double [[TMP5457]]
// CHECK-NEXT:    store double [[TMP5459]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5460:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5461:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5462:%.*]] = bitcast double [[TMP5460]] to i64
// CHECK-NEXT:    [[TMP5463:%.*]] = bitcast double [[TMP5461]] to i64
// CHECK-NEXT:    [[TMP5464:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5462]], i64 [[TMP5463]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5465:%.*]] = extractvalue { i64, i1 } [[TMP5464]], 0
// CHECK-NEXT:    [[TMP5466:%.*]] = bitcast i64 [[TMP5465]] to double
// CHECK-NEXT:    [[TMP5467:%.*]] = extractvalue { i64, i1 } [[TMP5464]], 1
// CHECK-NEXT:    [[TMP5468:%.*]] = select i1 [[TMP5467]], double [[TMP5460]], double [[TMP5466]]
// CHECK-NEXT:    store double [[TMP5468]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5469:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5470:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5471:%.*]] = bitcast double [[TMP5469]] to i64
// CHECK-NEXT:    [[TMP5472:%.*]] = bitcast double [[TMP5470]] to i64
// CHECK-NEXT:    [[TMP5473:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5471]], i64 [[TMP5472]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5474:%.*]] = extractvalue { i64, i1 } [[TMP5473]], 0
// CHECK-NEXT:    [[TMP5475:%.*]] = bitcast i64 [[TMP5474]] to double
// CHECK-NEXT:    [[TMP5476:%.*]] = extractvalue { i64, i1 } [[TMP5473]], 1
// CHECK-NEXT:    [[TMP5477:%.*]] = select i1 [[TMP5476]], double [[TMP5469]], double [[TMP5475]]
// CHECK-NEXT:    store double [[TMP5477]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5478:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5479:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5480:%.*]] = bitcast double [[TMP5478]] to i64
// CHECK-NEXT:    [[TMP5481:%.*]] = bitcast double [[TMP5479]] to i64
// CHECK-NEXT:    [[TMP5482:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5480]], i64 [[TMP5481]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5483:%.*]] = extractvalue { i64, i1 } [[TMP5482]], 0
// CHECK-NEXT:    [[TMP5484:%.*]] = bitcast i64 [[TMP5483]] to double
// CHECK-NEXT:    [[TMP5485:%.*]] = extractvalue { i64, i1 } [[TMP5482]], 1
// CHECK-NEXT:    br i1 [[TMP5485]], label [[DX_ATOMIC_EXIT570:%.*]], label [[DX_ATOMIC_CONT571:%.*]]
// CHECK:       dx.atomic.cont571:
// CHECK-NEXT:    store double [[TMP5484]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT570]]
// CHECK:       dx.atomic.exit570:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5486:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5487:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5488:%.*]] = bitcast double [[TMP5486]] to i64
// CHECK-NEXT:    [[TMP5489:%.*]] = bitcast double [[TMP5487]] to i64
// CHECK-NEXT:    [[TMP5490:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5488]], i64 [[TMP5489]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5491:%.*]] = extractvalue { i64, i1 } [[TMP5490]], 0
// CHECK-NEXT:    [[TMP5492:%.*]] = bitcast i64 [[TMP5491]] to double
// CHECK-NEXT:    [[TMP5493:%.*]] = extractvalue { i64, i1 } [[TMP5490]], 1
// CHECK-NEXT:    br i1 [[TMP5493]], label [[DX_ATOMIC_EXIT572:%.*]], label [[DX_ATOMIC_CONT573:%.*]]
// CHECK:       dx.atomic.cont573:
// CHECK-NEXT:    store double [[TMP5492]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT572]]
// CHECK:       dx.atomic.exit572:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5494:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5495:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5496:%.*]] = bitcast double [[TMP5494]] to i64
// CHECK-NEXT:    [[TMP5497:%.*]] = bitcast double [[TMP5495]] to i64
// CHECK-NEXT:    [[TMP5498:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5496]], i64 [[TMP5497]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5499:%.*]] = extractvalue { i64, i1 } [[TMP5498]], 1
// CHECK-NEXT:    [[TMP5500:%.*]] = sext i1 [[TMP5499]] to i32
// CHECK-NEXT:    store i32 [[TMP5500]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5501:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5502:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5503:%.*]] = bitcast double [[TMP5501]] to i64
// CHECK-NEXT:    [[TMP5504:%.*]] = bitcast double [[TMP5502]] to i64
// CHECK-NEXT:    [[TMP5505:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5503]], i64 [[TMP5504]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5506:%.*]] = extractvalue { i64, i1 } [[TMP5505]], 1
// CHECK-NEXT:    [[TMP5507:%.*]] = sext i1 [[TMP5506]] to i32
// CHECK-NEXT:    store i32 [[TMP5507]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5508:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5509:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5510:%.*]] = bitcast double [[TMP5508]] to i64
// CHECK-NEXT:    [[TMP5511:%.*]] = bitcast double [[TMP5509]] to i64
// CHECK-NEXT:    [[TMP5512:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5510]], i64 [[TMP5511]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5513:%.*]] = extractvalue { i64, i1 } [[TMP5512]], 0
// CHECK-NEXT:    [[TMP5514:%.*]] = bitcast i64 [[TMP5513]] to double
// CHECK-NEXT:    [[TMP5515:%.*]] = extractvalue { i64, i1 } [[TMP5512]], 1
// CHECK-NEXT:    br i1 [[TMP5515]], label [[DX_ATOMIC_EXIT574:%.*]], label [[DX_ATOMIC_CONT575:%.*]]
// CHECK:       dx.atomic.cont575:
// CHECK-NEXT:    store double [[TMP5514]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT574]]
// CHECK:       dx.atomic.exit574:
// CHECK-NEXT:    [[TMP5516:%.*]] = extractvalue { i64, i1 } [[TMP5512]], 1
// CHECK-NEXT:    [[TMP5517:%.*]] = sext i1 [[TMP5516]] to i32
// CHECK-NEXT:    store i32 [[TMP5517]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5518:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5519:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5520:%.*]] = bitcast double [[TMP5518]] to i64
// CHECK-NEXT:    [[TMP5521:%.*]] = bitcast double [[TMP5519]] to i64
// CHECK-NEXT:    [[TMP5522:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5520]], i64 [[TMP5521]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5523:%.*]] = extractvalue { i64, i1 } [[TMP5522]], 0
// CHECK-NEXT:    [[TMP5524:%.*]] = bitcast i64 [[TMP5523]] to double
// CHECK-NEXT:    [[TMP5525:%.*]] = extractvalue { i64, i1 } [[TMP5522]], 1
// CHECK-NEXT:    br i1 [[TMP5525]], label [[DX_ATOMIC_EXIT576:%.*]], label [[DX_ATOMIC_CONT577:%.*]]
// CHECK:       dx.atomic.cont577:
// CHECK-NEXT:    store double [[TMP5524]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT576]]
// CHECK:       dx.atomic.exit576:
// CHECK-NEXT:    [[TMP5526:%.*]] = extractvalue { i64, i1 } [[TMP5522]], 1
// CHECK-NEXT:    [[TMP5527:%.*]] = sext i1 [[TMP5526]] to i32
// CHECK-NEXT:    store i32 [[TMP5527]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5528:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5529:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5528]] acquire, align 8
// CHECK-NEXT:    store double [[TMP5529]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5530:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5531:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5530]] acquire, align 8
// CHECK-NEXT:    store double [[TMP5531]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5532:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5533:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5532]] acquire, align 8
// CHECK-NEXT:    store double [[TMP5533]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5534:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5535:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5534]] acquire, align 8
// CHECK-NEXT:    store double [[TMP5535]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5536:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5537:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5538:%.*]] = bitcast double [[TMP5536]] to i64
// CHECK-NEXT:    [[TMP5539:%.*]] = bitcast double [[TMP5537]] to i64
// CHECK-NEXT:    [[TMP5540:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5538]], i64 [[TMP5539]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5541:%.*]] = extractvalue { i64, i1 } [[TMP5540]], 0
// CHECK-NEXT:    [[TMP5542:%.*]] = bitcast i64 [[TMP5541]] to double
// CHECK-NEXT:    store double [[TMP5542]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5543:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5544:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5545:%.*]] = bitcast double [[TMP5543]] to i64
// CHECK-NEXT:    [[TMP5546:%.*]] = bitcast double [[TMP5544]] to i64
// CHECK-NEXT:    [[TMP5547:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5545]], i64 [[TMP5546]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5548:%.*]] = extractvalue { i64, i1 } [[TMP5547]], 0
// CHECK-NEXT:    [[TMP5549:%.*]] = bitcast i64 [[TMP5548]] to double
// CHECK-NEXT:    store double [[TMP5549]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5550:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5551:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5550]] acquire, align 8
// CHECK-NEXT:    [[TMP5552:%.*]] = fcmp ogt double [[TMP5551]], [[TMP5550]]
// CHECK-NEXT:    [[TMP5553:%.*]] = select i1 [[TMP5552]], double [[TMP5550]], double [[TMP5551]]
// CHECK-NEXT:    store double [[TMP5553]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5554:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5555:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5554]] acquire, align 8
// CHECK-NEXT:    [[TMP5556:%.*]] = fcmp olt double [[TMP5555]], [[TMP5554]]
// CHECK-NEXT:    [[TMP5557:%.*]] = select i1 [[TMP5556]], double [[TMP5554]], double [[TMP5555]]
// CHECK-NEXT:    store double [[TMP5557]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5558:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5559:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5558]] acquire, align 8
// CHECK-NEXT:    [[TMP5560:%.*]] = fcmp olt double [[TMP5559]], [[TMP5558]]
// CHECK-NEXT:    [[TMP5561:%.*]] = select i1 [[TMP5560]], double [[TMP5558]], double [[TMP5559]]
// CHECK-NEXT:    store double [[TMP5561]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5562:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5563:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5562]] acquire, align 8
// CHECK-NEXT:    [[TMP5564:%.*]] = fcmp ogt double [[TMP5563]], [[TMP5562]]
// CHECK-NEXT:    [[TMP5565:%.*]] = select i1 [[TMP5564]], double [[TMP5562]], double [[TMP5563]]
// CHECK-NEXT:    store double [[TMP5565]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5566:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5567:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5568:%.*]] = bitcast double [[TMP5566]] to i64
// CHECK-NEXT:    [[TMP5569:%.*]] = bitcast double [[TMP5567]] to i64
// CHECK-NEXT:    [[TMP5570:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5568]], i64 [[TMP5569]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5571:%.*]] = extractvalue { i64, i1 } [[TMP5570]], 0
// CHECK-NEXT:    [[TMP5572:%.*]] = bitcast i64 [[TMP5571]] to double
// CHECK-NEXT:    [[TMP5573:%.*]] = extractvalue { i64, i1 } [[TMP5570]], 1
// CHECK-NEXT:    [[TMP5574:%.*]] = select i1 [[TMP5573]], double [[TMP5566]], double [[TMP5572]]
// CHECK-NEXT:    store double [[TMP5574]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5575:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5576:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5577:%.*]] = bitcast double [[TMP5575]] to i64
// CHECK-NEXT:    [[TMP5578:%.*]] = bitcast double [[TMP5576]] to i64
// CHECK-NEXT:    [[TMP5579:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5577]], i64 [[TMP5578]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5580:%.*]] = extractvalue { i64, i1 } [[TMP5579]], 0
// CHECK-NEXT:    [[TMP5581:%.*]] = bitcast i64 [[TMP5580]] to double
// CHECK-NEXT:    [[TMP5582:%.*]] = extractvalue { i64, i1 } [[TMP5579]], 1
// CHECK-NEXT:    [[TMP5583:%.*]] = select i1 [[TMP5582]], double [[TMP5575]], double [[TMP5581]]
// CHECK-NEXT:    store double [[TMP5583]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5584:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5585:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5586:%.*]] = bitcast double [[TMP5584]] to i64
// CHECK-NEXT:    [[TMP5587:%.*]] = bitcast double [[TMP5585]] to i64
// CHECK-NEXT:    [[TMP5588:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5586]], i64 [[TMP5587]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5589:%.*]] = extractvalue { i64, i1 } [[TMP5588]], 0
// CHECK-NEXT:    [[TMP5590:%.*]] = bitcast i64 [[TMP5589]] to double
// CHECK-NEXT:    [[TMP5591:%.*]] = extractvalue { i64, i1 } [[TMP5588]], 1
// CHECK-NEXT:    br i1 [[TMP5591]], label [[DX_ATOMIC_EXIT578:%.*]], label [[DX_ATOMIC_CONT579:%.*]]
// CHECK:       dx.atomic.cont579:
// CHECK-NEXT:    store double [[TMP5590]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT578]]
// CHECK:       dx.atomic.exit578:
// CHECK-NEXT:    [[TMP5592:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5593:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5594:%.*]] = bitcast double [[TMP5592]] to i64
// CHECK-NEXT:    [[TMP5595:%.*]] = bitcast double [[TMP5593]] to i64
// CHECK-NEXT:    [[TMP5596:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5594]], i64 [[TMP5595]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5597:%.*]] = extractvalue { i64, i1 } [[TMP5596]], 0
// CHECK-NEXT:    [[TMP5598:%.*]] = bitcast i64 [[TMP5597]] to double
// CHECK-NEXT:    [[TMP5599:%.*]] = extractvalue { i64, i1 } [[TMP5596]], 1
// CHECK-NEXT:    br i1 [[TMP5599]], label [[DX_ATOMIC_EXIT580:%.*]], label [[DX_ATOMIC_CONT581:%.*]]
// CHECK:       dx.atomic.cont581:
// CHECK-NEXT:    store double [[TMP5598]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT580]]
// CHECK:       dx.atomic.exit580:
// CHECK-NEXT:    [[TMP5600:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5601:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5602:%.*]] = bitcast double [[TMP5600]] to i64
// CHECK-NEXT:    [[TMP5603:%.*]] = bitcast double [[TMP5601]] to i64
// CHECK-NEXT:    [[TMP5604:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5602]], i64 [[TMP5603]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5605:%.*]] = extractvalue { i64, i1 } [[TMP5604]], 1
// CHECK-NEXT:    [[TMP5606:%.*]] = sext i1 [[TMP5605]] to i32
// CHECK-NEXT:    store i32 [[TMP5606]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5607:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5608:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5609:%.*]] = bitcast double [[TMP5607]] to i64
// CHECK-NEXT:    [[TMP5610:%.*]] = bitcast double [[TMP5608]] to i64
// CHECK-NEXT:    [[TMP5611:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5609]], i64 [[TMP5610]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5612:%.*]] = extractvalue { i64, i1 } [[TMP5611]], 1
// CHECK-NEXT:    [[TMP5613:%.*]] = sext i1 [[TMP5612]] to i32
// CHECK-NEXT:    store i32 [[TMP5613]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5614:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5615:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5616:%.*]] = bitcast double [[TMP5614]] to i64
// CHECK-NEXT:    [[TMP5617:%.*]] = bitcast double [[TMP5615]] to i64
// CHECK-NEXT:    [[TMP5618:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5616]], i64 [[TMP5617]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5619:%.*]] = extractvalue { i64, i1 } [[TMP5618]], 0
// CHECK-NEXT:    [[TMP5620:%.*]] = bitcast i64 [[TMP5619]] to double
// CHECK-NEXT:    [[TMP5621:%.*]] = extractvalue { i64, i1 } [[TMP5618]], 1
// CHECK-NEXT:    br i1 [[TMP5621]], label [[DX_ATOMIC_EXIT582:%.*]], label [[DX_ATOMIC_CONT583:%.*]]
// CHECK:       dx.atomic.cont583:
// CHECK-NEXT:    store double [[TMP5620]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT582]]
// CHECK:       dx.atomic.exit582:
// CHECK-NEXT:    [[TMP5622:%.*]] = extractvalue { i64, i1 } [[TMP5618]], 1
// CHECK-NEXT:    [[TMP5623:%.*]] = sext i1 [[TMP5622]] to i32
// CHECK-NEXT:    store i32 [[TMP5623]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5624:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5625:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5626:%.*]] = bitcast double [[TMP5624]] to i64
// CHECK-NEXT:    [[TMP5627:%.*]] = bitcast double [[TMP5625]] to i64
// CHECK-NEXT:    [[TMP5628:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5626]], i64 [[TMP5627]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5629:%.*]] = extractvalue { i64, i1 } [[TMP5628]], 0
// CHECK-NEXT:    [[TMP5630:%.*]] = bitcast i64 [[TMP5629]] to double
// CHECK-NEXT:    [[TMP5631:%.*]] = extractvalue { i64, i1 } [[TMP5628]], 1
// CHECK-NEXT:    br i1 [[TMP5631]], label [[DX_ATOMIC_EXIT584:%.*]], label [[DX_ATOMIC_CONT585:%.*]]
// CHECK:       dx.atomic.cont585:
// CHECK-NEXT:    store double [[TMP5630]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT584]]
// CHECK:       dx.atomic.exit584:
// CHECK-NEXT:    [[TMP5632:%.*]] = extractvalue { i64, i1 } [[TMP5628]], 1
// CHECK-NEXT:    [[TMP5633:%.*]] = sext i1 [[TMP5632]] to i32
// CHECK-NEXT:    store i32 [[TMP5633]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5634:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5635:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5634]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5635]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5636:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5637:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5636]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5637]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5638:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5639:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5638]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5639]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5640:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5641:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5640]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5641]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5642:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5643:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5644:%.*]] = bitcast double [[TMP5642]] to i64
// CHECK-NEXT:    [[TMP5645:%.*]] = bitcast double [[TMP5643]] to i64
// CHECK-NEXT:    [[TMP5646:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5644]], i64 [[TMP5645]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5647:%.*]] = extractvalue { i64, i1 } [[TMP5646]], 0
// CHECK-NEXT:    [[TMP5648:%.*]] = bitcast i64 [[TMP5647]] to double
// CHECK-NEXT:    store double [[TMP5648]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5649:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5650:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5651:%.*]] = bitcast double [[TMP5649]] to i64
// CHECK-NEXT:    [[TMP5652:%.*]] = bitcast double [[TMP5650]] to i64
// CHECK-NEXT:    [[TMP5653:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5651]], i64 [[TMP5652]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5654:%.*]] = extractvalue { i64, i1 } [[TMP5653]], 0
// CHECK-NEXT:    [[TMP5655:%.*]] = bitcast i64 [[TMP5654]] to double
// CHECK-NEXT:    store double [[TMP5655]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5656:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5657:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5656]] monotonic, align 8
// CHECK-NEXT:    [[TMP5658:%.*]] = fcmp ogt double [[TMP5657]], [[TMP5656]]
// CHECK-NEXT:    [[TMP5659:%.*]] = select i1 [[TMP5658]], double [[TMP5656]], double [[TMP5657]]
// CHECK-NEXT:    store double [[TMP5659]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5660:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5661:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5660]] monotonic, align 8
// CHECK-NEXT:    [[TMP5662:%.*]] = fcmp olt double [[TMP5661]], [[TMP5660]]
// CHECK-NEXT:    [[TMP5663:%.*]] = select i1 [[TMP5662]], double [[TMP5660]], double [[TMP5661]]
// CHECK-NEXT:    store double [[TMP5663]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5664:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5665:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5664]] monotonic, align 8
// CHECK-NEXT:    [[TMP5666:%.*]] = fcmp olt double [[TMP5665]], [[TMP5664]]
// CHECK-NEXT:    [[TMP5667:%.*]] = select i1 [[TMP5666]], double [[TMP5664]], double [[TMP5665]]
// CHECK-NEXT:    store double [[TMP5667]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5668:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5669:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5668]] monotonic, align 8
// CHECK-NEXT:    [[TMP5670:%.*]] = fcmp ogt double [[TMP5669]], [[TMP5668]]
// CHECK-NEXT:    [[TMP5671:%.*]] = select i1 [[TMP5670]], double [[TMP5668]], double [[TMP5669]]
// CHECK-NEXT:    store double [[TMP5671]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5672:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5673:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5674:%.*]] = bitcast double [[TMP5672]] to i64
// CHECK-NEXT:    [[TMP5675:%.*]] = bitcast double [[TMP5673]] to i64
// CHECK-NEXT:    [[TMP5676:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5674]], i64 [[TMP5675]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5677:%.*]] = extractvalue { i64, i1 } [[TMP5676]], 0
// CHECK-NEXT:    [[TMP5678:%.*]] = bitcast i64 [[TMP5677]] to double
// CHECK-NEXT:    [[TMP5679:%.*]] = extractvalue { i64, i1 } [[TMP5676]], 1
// CHECK-NEXT:    [[TMP5680:%.*]] = select i1 [[TMP5679]], double [[TMP5672]], double [[TMP5678]]
// CHECK-NEXT:    store double [[TMP5680]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5681:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5682:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5683:%.*]] = bitcast double [[TMP5681]] to i64
// CHECK-NEXT:    [[TMP5684:%.*]] = bitcast double [[TMP5682]] to i64
// CHECK-NEXT:    [[TMP5685:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5683]], i64 [[TMP5684]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5686:%.*]] = extractvalue { i64, i1 } [[TMP5685]], 0
// CHECK-NEXT:    [[TMP5687:%.*]] = bitcast i64 [[TMP5686]] to double
// CHECK-NEXT:    [[TMP5688:%.*]] = extractvalue { i64, i1 } [[TMP5685]], 1
// CHECK-NEXT:    [[TMP5689:%.*]] = select i1 [[TMP5688]], double [[TMP5681]], double [[TMP5687]]
// CHECK-NEXT:    store double [[TMP5689]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5690:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5691:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5692:%.*]] = bitcast double [[TMP5690]] to i64
// CHECK-NEXT:    [[TMP5693:%.*]] = bitcast double [[TMP5691]] to i64
// CHECK-NEXT:    [[TMP5694:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5692]], i64 [[TMP5693]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5695:%.*]] = extractvalue { i64, i1 } [[TMP5694]], 0
// CHECK-NEXT:    [[TMP5696:%.*]] = bitcast i64 [[TMP5695]] to double
// CHECK-NEXT:    [[TMP5697:%.*]] = extractvalue { i64, i1 } [[TMP5694]], 1
// CHECK-NEXT:    br i1 [[TMP5697]], label [[DX_ATOMIC_EXIT586:%.*]], label [[DX_ATOMIC_CONT587:%.*]]
// CHECK:       dx.atomic.cont587:
// CHECK-NEXT:    store double [[TMP5696]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT586]]
// CHECK:       dx.atomic.exit586:
// CHECK-NEXT:    [[TMP5698:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5699:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5700:%.*]] = bitcast double [[TMP5698]] to i64
// CHECK-NEXT:    [[TMP5701:%.*]] = bitcast double [[TMP5699]] to i64
// CHECK-NEXT:    [[TMP5702:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5700]], i64 [[TMP5701]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5703:%.*]] = extractvalue { i64, i1 } [[TMP5702]], 0
// CHECK-NEXT:    [[TMP5704:%.*]] = bitcast i64 [[TMP5703]] to double
// CHECK-NEXT:    [[TMP5705:%.*]] = extractvalue { i64, i1 } [[TMP5702]], 1
// CHECK-NEXT:    br i1 [[TMP5705]], label [[DX_ATOMIC_EXIT588:%.*]], label [[DX_ATOMIC_CONT589:%.*]]
// CHECK:       dx.atomic.cont589:
// CHECK-NEXT:    store double [[TMP5704]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT588]]
// CHECK:       dx.atomic.exit588:
// CHECK-NEXT:    [[TMP5706:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5707:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5708:%.*]] = bitcast double [[TMP5706]] to i64
// CHECK-NEXT:    [[TMP5709:%.*]] = bitcast double [[TMP5707]] to i64
// CHECK-NEXT:    [[TMP5710:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5708]], i64 [[TMP5709]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5711:%.*]] = extractvalue { i64, i1 } [[TMP5710]], 1
// CHECK-NEXT:    [[TMP5712:%.*]] = sext i1 [[TMP5711]] to i32
// CHECK-NEXT:    store i32 [[TMP5712]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5713:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5714:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5715:%.*]] = bitcast double [[TMP5713]] to i64
// CHECK-NEXT:    [[TMP5716:%.*]] = bitcast double [[TMP5714]] to i64
// CHECK-NEXT:    [[TMP5717:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5715]], i64 [[TMP5716]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5718:%.*]] = extractvalue { i64, i1 } [[TMP5717]], 1
// CHECK-NEXT:    [[TMP5719:%.*]] = sext i1 [[TMP5718]] to i32
// CHECK-NEXT:    store i32 [[TMP5719]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5720:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5721:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5722:%.*]] = bitcast double [[TMP5720]] to i64
// CHECK-NEXT:    [[TMP5723:%.*]] = bitcast double [[TMP5721]] to i64
// CHECK-NEXT:    [[TMP5724:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5722]], i64 [[TMP5723]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5725:%.*]] = extractvalue { i64, i1 } [[TMP5724]], 0
// CHECK-NEXT:    [[TMP5726:%.*]] = bitcast i64 [[TMP5725]] to double
// CHECK-NEXT:    [[TMP5727:%.*]] = extractvalue { i64, i1 } [[TMP5724]], 1
// CHECK-NEXT:    br i1 [[TMP5727]], label [[DX_ATOMIC_EXIT590:%.*]], label [[DX_ATOMIC_CONT591:%.*]]
// CHECK:       dx.atomic.cont591:
// CHECK-NEXT:    store double [[TMP5726]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT590]]
// CHECK:       dx.atomic.exit590:
// CHECK-NEXT:    [[TMP5728:%.*]] = extractvalue { i64, i1 } [[TMP5724]], 1
// CHECK-NEXT:    [[TMP5729:%.*]] = sext i1 [[TMP5728]] to i32
// CHECK-NEXT:    store i32 [[TMP5729]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5730:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5731:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5732:%.*]] = bitcast double [[TMP5730]] to i64
// CHECK-NEXT:    [[TMP5733:%.*]] = bitcast double [[TMP5731]] to i64
// CHECK-NEXT:    [[TMP5734:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5732]], i64 [[TMP5733]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5735:%.*]] = extractvalue { i64, i1 } [[TMP5734]], 0
// CHECK-NEXT:    [[TMP5736:%.*]] = bitcast i64 [[TMP5735]] to double
// CHECK-NEXT:    [[TMP5737:%.*]] = extractvalue { i64, i1 } [[TMP5734]], 1
// CHECK-NEXT:    br i1 [[TMP5737]], label [[DX_ATOMIC_EXIT592:%.*]], label [[DX_ATOMIC_CONT593:%.*]]
// CHECK:       dx.atomic.cont593:
// CHECK-NEXT:    store double [[TMP5736]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT592]]
// CHECK:       dx.atomic.exit592:
// CHECK-NEXT:    [[TMP5738:%.*]] = extractvalue { i64, i1 } [[TMP5734]], 1
// CHECK-NEXT:    [[TMP5739:%.*]] = sext i1 [[TMP5738]] to i32
// CHECK-NEXT:    store i32 [[TMP5739]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5740:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5741:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5740]] release, align 8
// CHECK-NEXT:    store double [[TMP5741]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5742:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5743:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5742]] release, align 8
// CHECK-NEXT:    store double [[TMP5743]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5744:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5745:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5744]] release, align 8
// CHECK-NEXT:    store double [[TMP5745]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5746:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5747:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5746]] release, align 8
// CHECK-NEXT:    store double [[TMP5747]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5748:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5749:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5750:%.*]] = bitcast double [[TMP5748]] to i64
// CHECK-NEXT:    [[TMP5751:%.*]] = bitcast double [[TMP5749]] to i64
// CHECK-NEXT:    [[TMP5752:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5750]], i64 [[TMP5751]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5753:%.*]] = extractvalue { i64, i1 } [[TMP5752]], 0
// CHECK-NEXT:    [[TMP5754:%.*]] = bitcast i64 [[TMP5753]] to double
// CHECK-NEXT:    store double [[TMP5754]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5755:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5756:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5757:%.*]] = bitcast double [[TMP5755]] to i64
// CHECK-NEXT:    [[TMP5758:%.*]] = bitcast double [[TMP5756]] to i64
// CHECK-NEXT:    [[TMP5759:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5757]], i64 [[TMP5758]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5760:%.*]] = extractvalue { i64, i1 } [[TMP5759]], 0
// CHECK-NEXT:    [[TMP5761:%.*]] = bitcast i64 [[TMP5760]] to double
// CHECK-NEXT:    store double [[TMP5761]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5762:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5763:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5762]] release, align 8
// CHECK-NEXT:    [[TMP5764:%.*]] = fcmp ogt double [[TMP5763]], [[TMP5762]]
// CHECK-NEXT:    [[TMP5765:%.*]] = select i1 [[TMP5764]], double [[TMP5762]], double [[TMP5763]]
// CHECK-NEXT:    store double [[TMP5765]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5766:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5767:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5766]] release, align 8
// CHECK-NEXT:    [[TMP5768:%.*]] = fcmp olt double [[TMP5767]], [[TMP5766]]
// CHECK-NEXT:    [[TMP5769:%.*]] = select i1 [[TMP5768]], double [[TMP5766]], double [[TMP5767]]
// CHECK-NEXT:    store double [[TMP5769]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5770:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5771:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5770]] release, align 8
// CHECK-NEXT:    [[TMP5772:%.*]] = fcmp olt double [[TMP5771]], [[TMP5770]]
// CHECK-NEXT:    [[TMP5773:%.*]] = select i1 [[TMP5772]], double [[TMP5770]], double [[TMP5771]]
// CHECK-NEXT:    store double [[TMP5773]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5774:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5775:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5774]] release, align 8
// CHECK-NEXT:    [[TMP5776:%.*]] = fcmp ogt double [[TMP5775]], [[TMP5774]]
// CHECK-NEXT:    [[TMP5777:%.*]] = select i1 [[TMP5776]], double [[TMP5774]], double [[TMP5775]]
// CHECK-NEXT:    store double [[TMP5777]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5778:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5779:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5780:%.*]] = bitcast double [[TMP5778]] to i64
// CHECK-NEXT:    [[TMP5781:%.*]] = bitcast double [[TMP5779]] to i64
// CHECK-NEXT:    [[TMP5782:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5780]], i64 [[TMP5781]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5783:%.*]] = extractvalue { i64, i1 } [[TMP5782]], 0
// CHECK-NEXT:    [[TMP5784:%.*]] = bitcast i64 [[TMP5783]] to double
// CHECK-NEXT:    [[TMP5785:%.*]] = extractvalue { i64, i1 } [[TMP5782]], 1
// CHECK-NEXT:    [[TMP5786:%.*]] = select i1 [[TMP5785]], double [[TMP5778]], double [[TMP5784]]
// CHECK-NEXT:    store double [[TMP5786]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5787:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5788:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5789:%.*]] = bitcast double [[TMP5787]] to i64
// CHECK-NEXT:    [[TMP5790:%.*]] = bitcast double [[TMP5788]] to i64
// CHECK-NEXT:    [[TMP5791:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5789]], i64 [[TMP5790]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5792:%.*]] = extractvalue { i64, i1 } [[TMP5791]], 0
// CHECK-NEXT:    [[TMP5793:%.*]] = bitcast i64 [[TMP5792]] to double
// CHECK-NEXT:    [[TMP5794:%.*]] = extractvalue { i64, i1 } [[TMP5791]], 1
// CHECK-NEXT:    [[TMP5795:%.*]] = select i1 [[TMP5794]], double [[TMP5787]], double [[TMP5793]]
// CHECK-NEXT:    store double [[TMP5795]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5796:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5797:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5798:%.*]] = bitcast double [[TMP5796]] to i64
// CHECK-NEXT:    [[TMP5799:%.*]] = bitcast double [[TMP5797]] to i64
// CHECK-NEXT:    [[TMP5800:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5798]], i64 [[TMP5799]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5801:%.*]] = extractvalue { i64, i1 } [[TMP5800]], 0
// CHECK-NEXT:    [[TMP5802:%.*]] = bitcast i64 [[TMP5801]] to double
// CHECK-NEXT:    [[TMP5803:%.*]] = extractvalue { i64, i1 } [[TMP5800]], 1
// CHECK-NEXT:    br i1 [[TMP5803]], label [[DX_ATOMIC_EXIT594:%.*]], label [[DX_ATOMIC_CONT595:%.*]]
// CHECK:       dx.atomic.cont595:
// CHECK-NEXT:    store double [[TMP5802]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT594]]
// CHECK:       dx.atomic.exit594:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5804:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5805:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5806:%.*]] = bitcast double [[TMP5804]] to i64
// CHECK-NEXT:    [[TMP5807:%.*]] = bitcast double [[TMP5805]] to i64
// CHECK-NEXT:    [[TMP5808:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5806]], i64 [[TMP5807]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5809:%.*]] = extractvalue { i64, i1 } [[TMP5808]], 0
// CHECK-NEXT:    [[TMP5810:%.*]] = bitcast i64 [[TMP5809]] to double
// CHECK-NEXT:    [[TMP5811:%.*]] = extractvalue { i64, i1 } [[TMP5808]], 1
// CHECK-NEXT:    br i1 [[TMP5811]], label [[DX_ATOMIC_EXIT596:%.*]], label [[DX_ATOMIC_CONT597:%.*]]
// CHECK:       dx.atomic.cont597:
// CHECK-NEXT:    store double [[TMP5810]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT596]]
// CHECK:       dx.atomic.exit596:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5812:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5813:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5814:%.*]] = bitcast double [[TMP5812]] to i64
// CHECK-NEXT:    [[TMP5815:%.*]] = bitcast double [[TMP5813]] to i64
// CHECK-NEXT:    [[TMP5816:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5814]], i64 [[TMP5815]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5817:%.*]] = extractvalue { i64, i1 } [[TMP5816]], 1
// CHECK-NEXT:    [[TMP5818:%.*]] = sext i1 [[TMP5817]] to i32
// CHECK-NEXT:    store i32 [[TMP5818]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5819:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5820:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5821:%.*]] = bitcast double [[TMP5819]] to i64
// CHECK-NEXT:    [[TMP5822:%.*]] = bitcast double [[TMP5820]] to i64
// CHECK-NEXT:    [[TMP5823:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5821]], i64 [[TMP5822]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5824:%.*]] = extractvalue { i64, i1 } [[TMP5823]], 1
// CHECK-NEXT:    [[TMP5825:%.*]] = sext i1 [[TMP5824]] to i32
// CHECK-NEXT:    store i32 [[TMP5825]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5826:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5827:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5828:%.*]] = bitcast double [[TMP5826]] to i64
// CHECK-NEXT:    [[TMP5829:%.*]] = bitcast double [[TMP5827]] to i64
// CHECK-NEXT:    [[TMP5830:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5828]], i64 [[TMP5829]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5831:%.*]] = extractvalue { i64, i1 } [[TMP5830]], 0
// CHECK-NEXT:    [[TMP5832:%.*]] = bitcast i64 [[TMP5831]] to double
// CHECK-NEXT:    [[TMP5833:%.*]] = extractvalue { i64, i1 } [[TMP5830]], 1
// CHECK-NEXT:    br i1 [[TMP5833]], label [[DX_ATOMIC_EXIT598:%.*]], label [[DX_ATOMIC_CONT599:%.*]]
// CHECK:       dx.atomic.cont599:
// CHECK-NEXT:    store double [[TMP5832]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT598]]
// CHECK:       dx.atomic.exit598:
// CHECK-NEXT:    [[TMP5834:%.*]] = extractvalue { i64, i1 } [[TMP5830]], 1
// CHECK-NEXT:    [[TMP5835:%.*]] = sext i1 [[TMP5834]] to i32
// CHECK-NEXT:    store i32 [[TMP5835]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5836:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5837:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5838:%.*]] = bitcast double [[TMP5836]] to i64
// CHECK-NEXT:    [[TMP5839:%.*]] = bitcast double [[TMP5837]] to i64
// CHECK-NEXT:    [[TMP5840:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5838]], i64 [[TMP5839]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5841:%.*]] = extractvalue { i64, i1 } [[TMP5840]], 0
// CHECK-NEXT:    [[TMP5842:%.*]] = bitcast i64 [[TMP5841]] to double
// CHECK-NEXT:    [[TMP5843:%.*]] = extractvalue { i64, i1 } [[TMP5840]], 1
// CHECK-NEXT:    br i1 [[TMP5843]], label [[DX_ATOMIC_EXIT600:%.*]], label [[DX_ATOMIC_CONT601:%.*]]
// CHECK:       dx.atomic.cont601:
// CHECK-NEXT:    store double [[TMP5842]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT600]]
// CHECK:       dx.atomic.exit600:
// CHECK-NEXT:    [[TMP5844:%.*]] = extractvalue { i64, i1 } [[TMP5840]], 1
// CHECK-NEXT:    [[TMP5845:%.*]] = sext i1 [[TMP5844]] to i32
// CHECK-NEXT:    store i32 [[TMP5845]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5846:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5847:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5846]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP5847]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5848:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5849:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5848]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP5849]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5850:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5851:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5850]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP5851]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5852:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5853:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5852]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP5853]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5854:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5855:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5856:%.*]] = bitcast double [[TMP5854]] to i64
// CHECK-NEXT:    [[TMP5857:%.*]] = bitcast double [[TMP5855]] to i64
// CHECK-NEXT:    [[TMP5858:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5856]], i64 [[TMP5857]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP5859:%.*]] = extractvalue { i64, i1 } [[TMP5858]], 0
// CHECK-NEXT:    [[TMP5860:%.*]] = bitcast i64 [[TMP5859]] to double
// CHECK-NEXT:    store double [[TMP5860]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5861:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5862:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5863:%.*]] = bitcast double [[TMP5861]] to i64
// CHECK-NEXT:    [[TMP5864:%.*]] = bitcast double [[TMP5862]] to i64
// CHECK-NEXT:    [[TMP5865:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5863]], i64 [[TMP5864]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP5866:%.*]] = extractvalue { i64, i1 } [[TMP5865]], 0
// CHECK-NEXT:    [[TMP5867:%.*]] = bitcast i64 [[TMP5866]] to double
// CHECK-NEXT:    store double [[TMP5867]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5868:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5869:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5868]] seq_cst, align 8
// CHECK-NEXT:    [[TMP5870:%.*]] = fcmp ogt double [[TMP5869]], [[TMP5868]]
// CHECK-NEXT:    [[TMP5871:%.*]] = select i1 [[TMP5870]], double [[TMP5868]], double [[TMP5869]]
// CHECK-NEXT:    store double [[TMP5871]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5872:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5873:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5872]] seq_cst, align 8
// CHECK-NEXT:    [[TMP5874:%.*]] = fcmp olt double [[TMP5873]], [[TMP5872]]
// CHECK-NEXT:    [[TMP5875:%.*]] = select i1 [[TMP5874]], double [[TMP5872]], double [[TMP5873]]
// CHECK-NEXT:    store double [[TMP5875]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5876:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5877:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5876]] seq_cst, align 8
// CHECK-NEXT:    [[TMP5878:%.*]] = fcmp olt double [[TMP5877]], [[TMP5876]]
// CHECK-NEXT:    [[TMP5879:%.*]] = select i1 [[TMP5878]], double [[TMP5876]], double [[TMP5877]]
// CHECK-NEXT:    store double [[TMP5879]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5880:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5881:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5880]] seq_cst, align 8
// CHECK-NEXT:    [[TMP5882:%.*]] = fcmp ogt double [[TMP5881]], [[TMP5880]]
// CHECK-NEXT:    [[TMP5883:%.*]] = select i1 [[TMP5882]], double [[TMP5880]], double [[TMP5881]]
// CHECK-NEXT:    store double [[TMP5883]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5884:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5885:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5886:%.*]] = bitcast double [[TMP5884]] to i64
// CHECK-NEXT:    [[TMP5887:%.*]] = bitcast double [[TMP5885]] to i64
// CHECK-NEXT:    [[TMP5888:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5886]], i64 [[TMP5887]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP5889:%.*]] = extractvalue { i64, i1 } [[TMP5888]], 0
// CHECK-NEXT:    [[TMP5890:%.*]] = bitcast i64 [[TMP5889]] to double
// CHECK-NEXT:    [[TMP5891:%.*]] = extractvalue { i64, i1 } [[TMP5888]], 1
// CHECK-NEXT:    [[TMP5892:%.*]] = select i1 [[TMP5891]], double [[TMP5884]], double [[TMP5890]]
// CHECK-NEXT:    store double [[TMP5892]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5893:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5894:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5895:%.*]] = bitcast double [[TMP5893]] to i64
// CHECK-NEXT:    [[TMP5896:%.*]] = bitcast double [[TMP5894]] to i64
// CHECK-NEXT:    [[TMP5897:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5895]], i64 [[TMP5896]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP5898:%.*]] = extractvalue { i64, i1 } [[TMP5897]], 0
// CHECK-NEXT:    [[TMP5899:%.*]] = bitcast i64 [[TMP5898]] to double
// CHECK-NEXT:    [[TMP5900:%.*]] = extractvalue { i64, i1 } [[TMP5897]], 1
// CHECK-NEXT:    [[TMP5901:%.*]] = select i1 [[TMP5900]], double [[TMP5893]], double [[TMP5899]]
// CHECK-NEXT:    store double [[TMP5901]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5902:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5903:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5904:%.*]] = bitcast double [[TMP5902]] to i64
// CHECK-NEXT:    [[TMP5905:%.*]] = bitcast double [[TMP5903]] to i64
// CHECK-NEXT:    [[TMP5906:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5904]], i64 [[TMP5905]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP5907:%.*]] = extractvalue { i64, i1 } [[TMP5906]], 0
// CHECK-NEXT:    [[TMP5908:%.*]] = bitcast i64 [[TMP5907]] to double
// CHECK-NEXT:    [[TMP5909:%.*]] = extractvalue { i64, i1 } [[TMP5906]], 1
// CHECK-NEXT:    br i1 [[TMP5909]], label [[DX_ATOMIC_EXIT602:%.*]], label [[DX_ATOMIC_CONT603:%.*]]
// CHECK:       dx.atomic.cont603:
// CHECK-NEXT:    store double [[TMP5908]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT602]]
// CHECK:       dx.atomic.exit602:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5910:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5911:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5912:%.*]] = bitcast double [[TMP5910]] to i64
// CHECK-NEXT:    [[TMP5913:%.*]] = bitcast double [[TMP5911]] to i64
// CHECK-NEXT:    [[TMP5914:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5912]], i64 [[TMP5913]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP5915:%.*]] = extractvalue { i64, i1 } [[TMP5914]], 0
// CHECK-NEXT:    [[TMP5916:%.*]] = bitcast i64 [[TMP5915]] to double
// CHECK-NEXT:    [[TMP5917:%.*]] = extractvalue { i64, i1 } [[TMP5914]], 1
// CHECK-NEXT:    br i1 [[TMP5917]], label [[DX_ATOMIC_EXIT604:%.*]], label [[DX_ATOMIC_CONT605:%.*]]
// CHECK:       dx.atomic.cont605:
// CHECK-NEXT:    store double [[TMP5916]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT604]]
// CHECK:       dx.atomic.exit604:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5918:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5919:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5920:%.*]] = bitcast double [[TMP5918]] to i64
// CHECK-NEXT:    [[TMP5921:%.*]] = bitcast double [[TMP5919]] to i64
// CHECK-NEXT:    [[TMP5922:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5920]], i64 [[TMP5921]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP5923:%.*]] = extractvalue { i64, i1 } [[TMP5922]], 1
// CHECK-NEXT:    [[TMP5924:%.*]] = sext i1 [[TMP5923]] to i32
// CHECK-NEXT:    store i32 [[TMP5924]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5925:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5926:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5927:%.*]] = bitcast double [[TMP5925]] to i64
// CHECK-NEXT:    [[TMP5928:%.*]] = bitcast double [[TMP5926]] to i64
// CHECK-NEXT:    [[TMP5929:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5927]], i64 [[TMP5928]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP5930:%.*]] = extractvalue { i64, i1 } [[TMP5929]], 1
// CHECK-NEXT:    [[TMP5931:%.*]] = sext i1 [[TMP5930]] to i32
// CHECK-NEXT:    store i32 [[TMP5931]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5932:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5933:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5934:%.*]] = bitcast double [[TMP5932]] to i64
// CHECK-NEXT:    [[TMP5935:%.*]] = bitcast double [[TMP5933]] to i64
// CHECK-NEXT:    [[TMP5936:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5934]], i64 [[TMP5935]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP5937:%.*]] = extractvalue { i64, i1 } [[TMP5936]], 0
// CHECK-NEXT:    [[TMP5938:%.*]] = bitcast i64 [[TMP5937]] to double
// CHECK-NEXT:    [[TMP5939:%.*]] = extractvalue { i64, i1 } [[TMP5936]], 1
// CHECK-NEXT:    br i1 [[TMP5939]], label [[DX_ATOMIC_EXIT606:%.*]], label [[DX_ATOMIC_CONT607:%.*]]
// CHECK:       dx.atomic.cont607:
// CHECK-NEXT:    store double [[TMP5938]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT606]]
// CHECK:       dx.atomic.exit606:
// CHECK-NEXT:    [[TMP5940:%.*]] = extractvalue { i64, i1 } [[TMP5936]], 1
// CHECK-NEXT:    [[TMP5941:%.*]] = sext i1 [[TMP5940]] to i32
// CHECK-NEXT:    store i32 [[TMP5941]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5942:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5943:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5944:%.*]] = bitcast double [[TMP5942]] to i64
// CHECK-NEXT:    [[TMP5945:%.*]] = bitcast double [[TMP5943]] to i64
// CHECK-NEXT:    [[TMP5946:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5944]], i64 [[TMP5945]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP5947:%.*]] = extractvalue { i64, i1 } [[TMP5946]], 0
// CHECK-NEXT:    [[TMP5948:%.*]] = bitcast i64 [[TMP5947]] to double
// CHECK-NEXT:    [[TMP5949:%.*]] = extractvalue { i64, i1 } [[TMP5946]], 1
// CHECK-NEXT:    br i1 [[TMP5949]], label [[DX_ATOMIC_EXIT608:%.*]], label [[DX_ATOMIC_CONT609:%.*]]
// CHECK:       dx.atomic.cont609:
// CHECK-NEXT:    store double [[TMP5948]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT608]]
// CHECK:       dx.atomic.exit608:
// CHECK-NEXT:    [[TMP5950:%.*]] = extractvalue { i64, i1 } [[TMP5946]], 1
// CHECK-NEXT:    [[TMP5951:%.*]] = sext i1 [[TMP5950]] to i32
// CHECK-NEXT:    store i32 [[TMP5951]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @cxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CX:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[CV:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[CE:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[CD:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON]], ptr [[CX]], align 1
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON1]], ptr [[CV]], align 1
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON2]], ptr [[CE]], align 1
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON3]], ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP0]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP1]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP2]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP3]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP4]], i8 [[TMP5]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i8, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i8 [[TMP7]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP8]] monotonic, align 1
// CHECK-NEXT:    [[TMP10:%.*]] = icmp slt i8 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i8 [[TMP8]], i8 [[TMP9]]
// CHECK-NEXT:    store i8 [[TMP11]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP12:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP12]] monotonic, align 1
// CHECK-NEXT:    [[TMP14:%.*]] = icmp sgt i8 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i8 [[TMP12]], i8 [[TMP13]]
// CHECK-NEXT:    store i8 [[TMP15]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP16:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP17:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP16]], i8 [[TMP17]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i8, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i8, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i8 [[TMP16]], i8 [[TMP19]]
// CHECK-NEXT:    store i8 [[TMP21]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP22:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP22]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP23]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP24]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP25]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP27:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP26]], i8 [[TMP27]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i8, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i8 [[TMP29]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP30]] acq_rel, align 1
// CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i8 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i8 [[TMP30]], i8 [[TMP31]]
// CHECK-NEXT:    store i8 [[TMP33]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP34]] acq_rel, align 1
// CHECK-NEXT:    [[TMP36:%.*]] = icmp sgt i8 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i8 [[TMP34]], i8 [[TMP35]]
// CHECK-NEXT:    store i8 [[TMP37]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP39:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP38]], i8 [[TMP39]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i8, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i8, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i8 [[TMP38]], i8 [[TMP41]]
// CHECK-NEXT:    store i8 [[TMP43]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP44]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP45]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP46:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP46]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP47]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP48:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP49:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP48]], i8 [[TMP49]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i8, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i8 [[TMP51]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP52:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP52]] acquire, align 1
// CHECK-NEXT:    [[TMP54:%.*]] = icmp slt i8 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i8 [[TMP52]], i8 [[TMP53]]
// CHECK-NEXT:    store i8 [[TMP55]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP56:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP56]] acquire, align 1
// CHECK-NEXT:    [[TMP58:%.*]] = icmp sgt i8 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i8 [[TMP56]], i8 [[TMP57]]
// CHECK-NEXT:    store i8 [[TMP59]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP60:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP61:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP60]], i8 [[TMP61]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i8, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i8, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i8 [[TMP60]], i8 [[TMP63]]
// CHECK-NEXT:    store i8 [[TMP65]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP66:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP66]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP67]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP68:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP68]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP69]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP70:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP71:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP70]], i8 [[TMP71]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i8, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i8 [[TMP73]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP74:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP74]] monotonic, align 1
// CHECK-NEXT:    [[TMP76:%.*]] = icmp slt i8 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i8 [[TMP74]], i8 [[TMP75]]
// CHECK-NEXT:    store i8 [[TMP77]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP78:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP78]] monotonic, align 1
// CHECK-NEXT:    [[TMP80:%.*]] = icmp sgt i8 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i8 [[TMP78]], i8 [[TMP79]]
// CHECK-NEXT:    store i8 [[TMP81]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP82:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP83:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP82]], i8 [[TMP83]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i8, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i8, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i8 [[TMP82]], i8 [[TMP85]]
// CHECK-NEXT:    store i8 [[TMP87]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP88:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP88]] release, align 1
// CHECK-NEXT:    store i8 [[TMP89]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP90]] release, align 1
// CHECK-NEXT:    store i8 [[TMP91]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP93:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP92]], i8 [[TMP93]] release monotonic, align 1
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i8, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i8 [[TMP95]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP96]] release, align 1
// CHECK-NEXT:    [[TMP98:%.*]] = icmp slt i8 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i8 [[TMP96]], i8 [[TMP97]]
// CHECK-NEXT:    store i8 [[TMP99]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP100]] release, align 1
// CHECK-NEXT:    [[TMP102:%.*]] = icmp sgt i8 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i8 [[TMP100]], i8 [[TMP101]]
// CHECK-NEXT:    store i8 [[TMP103]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP105:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP104]], i8 [[TMP105]] release monotonic, align 1
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i8, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i8, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i8 [[TMP104]], i8 [[TMP107]]
// CHECK-NEXT:    store i8 [[TMP109]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP110]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP111]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP112]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP113]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP115:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP114]], i8 [[TMP115]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i8, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i8 [[TMP117]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[CX]], i8 [[TMP118]] seq_cst, align 1
// CHECK-NEXT:    [[TMP120:%.*]] = icmp slt i8 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i8 [[TMP118]], i8 [[TMP119]]
// CHECK-NEXT:    store i8 [[TMP121]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[CX]], i8 [[TMP122]] seq_cst, align 1
// CHECK-NEXT:    [[TMP124:%.*]] = icmp sgt i8 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i8 [[TMP122]], i8 [[TMP123]]
// CHECK-NEXT:    store i8 [[TMP125]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP127:%.*]] = load i8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[CX]], i8 [[TMP126]], i8 [[TMP127]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i8, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i8, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i8 [[TMP126]], i8 [[TMP129]]
// CHECK-NEXT:    store i8 [[TMP131]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i8, ptr [[CV]], align 1
// CHECK-NEXT:    ret i8 [[TMP132]]
//
//
// CHECK-LABEL: @ucxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[UCX:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCV:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCE:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[UCD:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON]], ptr [[UCX]], align 1
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON1]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON2]], ptr [[UCE]], align 1
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i8 poison
// CHECK-NEXT:    store i8 [[FREEZE_POISON3]], ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP0]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP1]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP2]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP3]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP4]], i8 [[TMP5]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i8, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i8 [[TMP7]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP8]] monotonic, align 1
// CHECK-NEXT:    [[TMP10:%.*]] = icmp ult i8 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i8 [[TMP8]], i8 [[TMP9]]
// CHECK-NEXT:    store i8 [[TMP11]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP12:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP12]] monotonic, align 1
// CHECK-NEXT:    [[TMP14:%.*]] = icmp ugt i8 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i8 [[TMP12]], i8 [[TMP13]]
// CHECK-NEXT:    store i8 [[TMP15]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP16:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP17:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP16]], i8 [[TMP17]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i8, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i8, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i8 [[TMP16]], i8 [[TMP19]]
// CHECK-NEXT:    store i8 [[TMP21]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP22:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP22]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP23]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP24]] acq_rel, align 1
// CHECK-NEXT:    store i8 [[TMP25]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP27:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP26]], i8 [[TMP27]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i8, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i8 [[TMP29]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP30]] acq_rel, align 1
// CHECK-NEXT:    [[TMP32:%.*]] = icmp ult i8 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i8 [[TMP30]], i8 [[TMP31]]
// CHECK-NEXT:    store i8 [[TMP33]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP34]] acq_rel, align 1
// CHECK-NEXT:    [[TMP36:%.*]] = icmp ugt i8 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i8 [[TMP34]], i8 [[TMP35]]
// CHECK-NEXT:    store i8 [[TMP37]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP39:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP38]], i8 [[TMP39]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i8, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i8, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i8 [[TMP38]], i8 [[TMP41]]
// CHECK-NEXT:    store i8 [[TMP43]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP44]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP45]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP46:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP46]] acquire, align 1
// CHECK-NEXT:    store i8 [[TMP47]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP48:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP49:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP48]], i8 [[TMP49]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i8, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i8 [[TMP51]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP52:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP52]] acquire, align 1
// CHECK-NEXT:    [[TMP54:%.*]] = icmp ult i8 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i8 [[TMP52]], i8 [[TMP53]]
// CHECK-NEXT:    store i8 [[TMP55]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP56:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP56]] acquire, align 1
// CHECK-NEXT:    [[TMP58:%.*]] = icmp ugt i8 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i8 [[TMP56]], i8 [[TMP57]]
// CHECK-NEXT:    store i8 [[TMP59]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP60:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP61:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP60]], i8 [[TMP61]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i8, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i8, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i8 [[TMP60]], i8 [[TMP63]]
// CHECK-NEXT:    store i8 [[TMP65]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP66:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP66]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP67]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP68:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP68]] monotonic, align 1
// CHECK-NEXT:    store i8 [[TMP69]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP70:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP71:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP70]], i8 [[TMP71]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i8, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i8 [[TMP73]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP74:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP74]] monotonic, align 1
// CHECK-NEXT:    [[TMP76:%.*]] = icmp ult i8 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i8 [[TMP74]], i8 [[TMP75]]
// CHECK-NEXT:    store i8 [[TMP77]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP78:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP78]] monotonic, align 1
// CHECK-NEXT:    [[TMP80:%.*]] = icmp ugt i8 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i8 [[TMP78]], i8 [[TMP79]]
// CHECK-NEXT:    store i8 [[TMP81]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP82:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP83:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP82]], i8 [[TMP83]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i8, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i8, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i8 [[TMP82]], i8 [[TMP85]]
// CHECK-NEXT:    store i8 [[TMP87]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP88:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP88]] release, align 1
// CHECK-NEXT:    store i8 [[TMP89]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP90]] release, align 1
// CHECK-NEXT:    store i8 [[TMP91]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP93:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP92]], i8 [[TMP93]] release monotonic, align 1
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i8, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i8 [[TMP95]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP96]] release, align 1
// CHECK-NEXT:    [[TMP98:%.*]] = icmp ult i8 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i8 [[TMP96]], i8 [[TMP97]]
// CHECK-NEXT:    store i8 [[TMP99]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP100]] release, align 1
// CHECK-NEXT:    [[TMP102:%.*]] = icmp ugt i8 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i8 [[TMP100]], i8 [[TMP101]]
// CHECK-NEXT:    store i8 [[TMP103]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP105:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP104]], i8 [[TMP105]] release monotonic, align 1
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i8, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i8, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i8 [[TMP104]], i8 [[TMP107]]
// CHECK-NEXT:    store i8 [[TMP109]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP110]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP111]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP112]] seq_cst, align 1
// CHECK-NEXT:    store i8 [[TMP113]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP115:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP114]], i8 [[TMP115]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i8, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i8 [[TMP117]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw umin ptr [[UCX]], i8 [[TMP118]] seq_cst, align 1
// CHECK-NEXT:    [[TMP120:%.*]] = icmp ult i8 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i8 [[TMP118]], i8 [[TMP119]]
// CHECK-NEXT:    store i8 [[TMP121]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw umax ptr [[UCX]], i8 [[TMP122]] seq_cst, align 1
// CHECK-NEXT:    [[TMP124:%.*]] = icmp ugt i8 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i8 [[TMP122]], i8 [[TMP123]]
// CHECK-NEXT:    store i8 [[TMP125]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP127:%.*]] = load i8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[UCX]], i8 [[TMP126]], i8 [[TMP127]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i8, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i8, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i8 [[TMP126]], i8 [[TMP129]]
// CHECK-NEXT:    store i8 [[TMP131]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i8, ptr [[UCV]], align 1
// CHECK-NEXT:    ret i8 [[TMP132]]
//
//
// CHECK-LABEL: @sxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SV:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON]], ptr [[SX]], align 2
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON1]], ptr [[SV]], align 2
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON2]], ptr [[SE]], align 2
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON3]], ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP0]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP2]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP3]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP4]], i16 [[TMP5]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i16, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i16 [[TMP7]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP8]] monotonic, align 2
// CHECK-NEXT:    [[TMP10:%.*]] = icmp slt i16 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i16 [[TMP8]], i16 [[TMP9]]
// CHECK-NEXT:    store i16 [[TMP11]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP12:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP12]] monotonic, align 2
// CHECK-NEXT:    [[TMP14:%.*]] = icmp sgt i16 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i16 [[TMP12]], i16 [[TMP13]]
// CHECK-NEXT:    store i16 [[TMP15]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP16:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP17:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP16]], i16 [[TMP17]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i16, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i16, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i16 [[TMP16]], i16 [[TMP19]]
// CHECK-NEXT:    store i16 [[TMP21]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP22:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP22]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP23]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP24]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP25]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP27:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP26]], i16 [[TMP27]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i16, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i16 [[TMP29]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP30]] acq_rel, align 2
// CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i16 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i16 [[TMP30]], i16 [[TMP31]]
// CHECK-NEXT:    store i16 [[TMP33]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP34]] acq_rel, align 2
// CHECK-NEXT:    [[TMP36:%.*]] = icmp sgt i16 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i16 [[TMP34]], i16 [[TMP35]]
// CHECK-NEXT:    store i16 [[TMP37]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP39:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP38]], i16 [[TMP39]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i16, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i16, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i16 [[TMP38]], i16 [[TMP41]]
// CHECK-NEXT:    store i16 [[TMP43]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP44]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP45]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP46:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP46]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP47]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP48:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP49:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP48]], i16 [[TMP49]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i16, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i16 [[TMP51]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP52:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP52]] acquire, align 2
// CHECK-NEXT:    [[TMP54:%.*]] = icmp slt i16 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i16 [[TMP52]], i16 [[TMP53]]
// CHECK-NEXT:    store i16 [[TMP55]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP56:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP56]] acquire, align 2
// CHECK-NEXT:    [[TMP58:%.*]] = icmp sgt i16 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i16 [[TMP56]], i16 [[TMP57]]
// CHECK-NEXT:    store i16 [[TMP59]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP60:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP61:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP60]], i16 [[TMP61]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i16, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i16, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i16 [[TMP60]], i16 [[TMP63]]
// CHECK-NEXT:    store i16 [[TMP65]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP66:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP66]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP67]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP68:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP68]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP69]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP70:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP71:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP70]], i16 [[TMP71]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i16, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i16 [[TMP73]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP74:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP74]] monotonic, align 2
// CHECK-NEXT:    [[TMP76:%.*]] = icmp slt i16 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i16 [[TMP74]], i16 [[TMP75]]
// CHECK-NEXT:    store i16 [[TMP77]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP78:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP78]] monotonic, align 2
// CHECK-NEXT:    [[TMP80:%.*]] = icmp sgt i16 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i16 [[TMP78]], i16 [[TMP79]]
// CHECK-NEXT:    store i16 [[TMP81]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP82:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP83:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP82]], i16 [[TMP83]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i16, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i16, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i16 [[TMP82]], i16 [[TMP85]]
// CHECK-NEXT:    store i16 [[TMP87]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP88:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP88]] release, align 2
// CHECK-NEXT:    store i16 [[TMP89]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP90]] release, align 2
// CHECK-NEXT:    store i16 [[TMP91]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP93:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP92]], i16 [[TMP93]] release monotonic, align 2
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i16, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i16 [[TMP95]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP96]] release, align 2
// CHECK-NEXT:    [[TMP98:%.*]] = icmp slt i16 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i16 [[TMP96]], i16 [[TMP97]]
// CHECK-NEXT:    store i16 [[TMP99]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP100]] release, align 2
// CHECK-NEXT:    [[TMP102:%.*]] = icmp sgt i16 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i16 [[TMP100]], i16 [[TMP101]]
// CHECK-NEXT:    store i16 [[TMP103]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP105:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP104]], i16 [[TMP105]] release monotonic, align 2
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i16, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i16, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i16 [[TMP104]], i16 [[TMP107]]
// CHECK-NEXT:    store i16 [[TMP109]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP110]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP111]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP112]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP113]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP115:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP114]], i16 [[TMP115]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i16, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i16 [[TMP117]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP118]] seq_cst, align 2
// CHECK-NEXT:    [[TMP120:%.*]] = icmp slt i16 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i16 [[TMP118]], i16 [[TMP119]]
// CHECK-NEXT:    store i16 [[TMP121]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP122]] seq_cst, align 2
// CHECK-NEXT:    [[TMP124:%.*]] = icmp sgt i16 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i16 [[TMP122]], i16 [[TMP123]]
// CHECK-NEXT:    store i16 [[TMP125]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP127:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP126]], i16 [[TMP127]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i16, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i16, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i16 [[TMP126]], i16 [[TMP129]]
// CHECK-NEXT:    store i16 [[TMP131]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i16, ptr [[SV]], align 2
// CHECK-NEXT:    ret i16 [[TMP132]]
//
//
// CHECK-LABEL: @usxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[USX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USV:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON]], ptr [[USX]], align 2
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON1]], ptr [[USV]], align 2
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON2]], ptr [[USE]], align 2
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i16 poison
// CHECK-NEXT:    store i16 [[FREEZE_POISON3]], ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP0]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP2]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP3]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP4]], i16 [[TMP5]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i16, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i16 [[TMP7]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP8]] monotonic, align 2
// CHECK-NEXT:    [[TMP10:%.*]] = icmp ult i16 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i16 [[TMP8]], i16 [[TMP9]]
// CHECK-NEXT:    store i16 [[TMP11]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP12:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP12]] monotonic, align 2
// CHECK-NEXT:    [[TMP14:%.*]] = icmp ugt i16 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i16 [[TMP12]], i16 [[TMP13]]
// CHECK-NEXT:    store i16 [[TMP15]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP16:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP17:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP16]], i16 [[TMP17]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i16, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i16, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i16 [[TMP16]], i16 [[TMP19]]
// CHECK-NEXT:    store i16 [[TMP21]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP22:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP22]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP23]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP24]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP25]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP27:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP26]], i16 [[TMP27]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i16, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i16 [[TMP29]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP30]] acq_rel, align 2
// CHECK-NEXT:    [[TMP32:%.*]] = icmp ult i16 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i16 [[TMP30]], i16 [[TMP31]]
// CHECK-NEXT:    store i16 [[TMP33]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP34]] acq_rel, align 2
// CHECK-NEXT:    [[TMP36:%.*]] = icmp ugt i16 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i16 [[TMP34]], i16 [[TMP35]]
// CHECK-NEXT:    store i16 [[TMP37]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP39:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP38]], i16 [[TMP39]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i16, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i16, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i16 [[TMP38]], i16 [[TMP41]]
// CHECK-NEXT:    store i16 [[TMP43]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP44]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP45]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP46:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP46]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP47]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP48:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP49:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP48]], i16 [[TMP49]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i16, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i16 [[TMP51]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP52:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP52]] acquire, align 2
// CHECK-NEXT:    [[TMP54:%.*]] = icmp ult i16 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i16 [[TMP52]], i16 [[TMP53]]
// CHECK-NEXT:    store i16 [[TMP55]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP56:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP56]] acquire, align 2
// CHECK-NEXT:    [[TMP58:%.*]] = icmp ugt i16 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i16 [[TMP56]], i16 [[TMP57]]
// CHECK-NEXT:    store i16 [[TMP59]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP60:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP61:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP60]], i16 [[TMP61]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i16, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i16, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i16 [[TMP60]], i16 [[TMP63]]
// CHECK-NEXT:    store i16 [[TMP65]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP66:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP66]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP67]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP68:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP68]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP69]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP70:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP71:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP70]], i16 [[TMP71]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i16, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i16 [[TMP73]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP74:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP74]] monotonic, align 2
// CHECK-NEXT:    [[TMP76:%.*]] = icmp ult i16 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i16 [[TMP74]], i16 [[TMP75]]
// CHECK-NEXT:    store i16 [[TMP77]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP78:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP78]] monotonic, align 2
// CHECK-NEXT:    [[TMP80:%.*]] = icmp ugt i16 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i16 [[TMP78]], i16 [[TMP79]]
// CHECK-NEXT:    store i16 [[TMP81]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP82:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP83:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP82]], i16 [[TMP83]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i16, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i16, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i16 [[TMP82]], i16 [[TMP85]]
// CHECK-NEXT:    store i16 [[TMP87]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP88:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP88]] release, align 2
// CHECK-NEXT:    store i16 [[TMP89]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP90]] release, align 2
// CHECK-NEXT:    store i16 [[TMP91]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP93:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP92]], i16 [[TMP93]] release monotonic, align 2
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i16, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i16 [[TMP95]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP96]] release, align 2
// CHECK-NEXT:    [[TMP98:%.*]] = icmp ult i16 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i16 [[TMP96]], i16 [[TMP97]]
// CHECK-NEXT:    store i16 [[TMP99]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP100]] release, align 2
// CHECK-NEXT:    [[TMP102:%.*]] = icmp ugt i16 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i16 [[TMP100]], i16 [[TMP101]]
// CHECK-NEXT:    store i16 [[TMP103]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP105:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP104]], i16 [[TMP105]] release monotonic, align 2
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i16, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i16, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i16 [[TMP104]], i16 [[TMP107]]
// CHECK-NEXT:    store i16 [[TMP109]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP110]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP111]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP112]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP113]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP115:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP114]], i16 [[TMP115]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i16, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i16 [[TMP117]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP118]] seq_cst, align 2
// CHECK-NEXT:    [[TMP120:%.*]] = icmp ult i16 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i16 [[TMP118]], i16 [[TMP119]]
// CHECK-NEXT:    store i16 [[TMP121]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP122]] seq_cst, align 2
// CHECK-NEXT:    [[TMP124:%.*]] = icmp ugt i16 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i16 [[TMP122]], i16 [[TMP123]]
// CHECK-NEXT:    store i16 [[TMP125]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP127:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP126]], i16 [[TMP127]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i16, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i16, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i16 [[TMP126]], i16 [[TMP129]]
// CHECK-NEXT:    store i16 [[TMP131]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i16, ptr [[USV]], align 2
// CHECK-NEXT:    ret i16 [[TMP132]]
//
//
// CHECK-LABEL: @ixevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[IX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IV:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON]], ptr [[IX]], align 4
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON1]], ptr [[IV]], align 4
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON2]], ptr [[IE]], align 4
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON3]], ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP0]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP4]], i32 [[TMP5]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i32, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP8]] monotonic, align 4
// CHECK-NEXT:    [[TMP10:%.*]] = icmp slt i32 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i32 [[TMP8]], i32 [[TMP9]]
// CHECK-NEXT:    store i32 [[TMP11]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP12]] monotonic, align 4
// CHECK-NEXT:    [[TMP14:%.*]] = icmp sgt i32 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i32 [[TMP12]], i32 [[TMP13]]
// CHECK-NEXT:    store i32 [[TMP15]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP16]], i32 [[TMP17]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i32, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i32 [[TMP16]], i32 [[TMP19]]
// CHECK-NEXT:    store i32 [[TMP21]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP22:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP22]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP23]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP24]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP25]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP26]], i32 [[TMP27]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i32 [[TMP29]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP30]] acq_rel, align 4
// CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i32 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i32 [[TMP30]], i32 [[TMP31]]
// CHECK-NEXT:    store i32 [[TMP33]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP34]] acq_rel, align 4
// CHECK-NEXT:    [[TMP36:%.*]] = icmp sgt i32 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i32 [[TMP34]], i32 [[TMP35]]
// CHECK-NEXT:    store i32 [[TMP37]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP39:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP38]], i32 [[TMP39]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i32, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i32 [[TMP38]], i32 [[TMP41]]
// CHECK-NEXT:    store i32 [[TMP43]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP44]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP45]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP46:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP46]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP47]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP49:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP48]], i32 [[TMP49]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i32 [[TMP51]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP52:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP52]] acquire, align 4
// CHECK-NEXT:    [[TMP54:%.*]] = icmp slt i32 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i32 [[TMP52]], i32 [[TMP53]]
// CHECK-NEXT:    store i32 [[TMP55]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP56:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP56]] acquire, align 4
// CHECK-NEXT:    [[TMP58:%.*]] = icmp sgt i32 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i32 [[TMP56]], i32 [[TMP57]]
// CHECK-NEXT:    store i32 [[TMP59]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP60:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP61:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP60]], i32 [[TMP61]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i32, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i32 [[TMP60]], i32 [[TMP63]]
// CHECK-NEXT:    store i32 [[TMP65]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP66:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP66]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP67]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP68:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP68]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP69]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP70:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP71:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP70]], i32 [[TMP71]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i32, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i32 [[TMP73]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP74:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP74]] monotonic, align 4
// CHECK-NEXT:    [[TMP76:%.*]] = icmp slt i32 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i32 [[TMP74]], i32 [[TMP75]]
// CHECK-NEXT:    store i32 [[TMP77]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP78:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP78]] monotonic, align 4
// CHECK-NEXT:    [[TMP80:%.*]] = icmp sgt i32 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i32 [[TMP78]], i32 [[TMP79]]
// CHECK-NEXT:    store i32 [[TMP81]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP82:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP83:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP82]], i32 [[TMP83]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i32, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i32, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i32 [[TMP82]], i32 [[TMP85]]
// CHECK-NEXT:    store i32 [[TMP87]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP88:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP88]] release, align 4
// CHECK-NEXT:    store i32 [[TMP89]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP90]] release, align 4
// CHECK-NEXT:    store i32 [[TMP91]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP93:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP92]], i32 [[TMP93]] release monotonic, align 4
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i32, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i32 [[TMP95]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP96]] release, align 4
// CHECK-NEXT:    [[TMP98:%.*]] = icmp slt i32 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i32 [[TMP96]], i32 [[TMP97]]
// CHECK-NEXT:    store i32 [[TMP99]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP100]] release, align 4
// CHECK-NEXT:    [[TMP102:%.*]] = icmp sgt i32 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i32 [[TMP100]], i32 [[TMP101]]
// CHECK-NEXT:    store i32 [[TMP103]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP105:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP104]], i32 [[TMP105]] release monotonic, align 4
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i32, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i32, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i32 [[TMP104]], i32 [[TMP107]]
// CHECK-NEXT:    store i32 [[TMP109]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP110]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP111]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP112]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP113]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP115:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP114]], i32 [[TMP115]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i32, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i32 [[TMP117]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP118]] seq_cst, align 4
// CHECK-NEXT:    [[TMP120:%.*]] = icmp slt i32 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i32 [[TMP118]], i32 [[TMP119]]
// CHECK-NEXT:    store i32 [[TMP121]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP122]] seq_cst, align 4
// CHECK-NEXT:    [[TMP124:%.*]] = icmp sgt i32 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i32 [[TMP122]], i32 [[TMP123]]
// CHECK-NEXT:    store i32 [[TMP125]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP127:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP126]], i32 [[TMP127]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i32, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i32, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i32 [[TMP126]], i32 [[TMP129]]
// CHECK-NEXT:    store i32 [[TMP131]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i32, ptr [[IV]], align 4
// CHECK-NEXT:    ret i32 [[TMP132]]
//
//
// CHECK-LABEL: @uixevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIV:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON]], ptr [[UIX]], align 4
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON1]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON2]], ptr [[UIE]], align 4
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i32 poison
// CHECK-NEXT:    store i32 [[FREEZE_POISON3]], ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP0]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP4]], i32 [[TMP5]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i32, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP8]] monotonic, align 4
// CHECK-NEXT:    [[TMP10:%.*]] = icmp ult i32 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i32 [[TMP8]], i32 [[TMP9]]
// CHECK-NEXT:    store i32 [[TMP11]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP12]] monotonic, align 4
// CHECK-NEXT:    [[TMP14:%.*]] = icmp ugt i32 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i32 [[TMP12]], i32 [[TMP13]]
// CHECK-NEXT:    store i32 [[TMP15]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP16]], i32 [[TMP17]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i32, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i32 [[TMP16]], i32 [[TMP19]]
// CHECK-NEXT:    store i32 [[TMP21]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP22:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP22]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP23]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP24]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP25]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP26]], i32 [[TMP27]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i32 [[TMP29]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP30]] acq_rel, align 4
// CHECK-NEXT:    [[TMP32:%.*]] = icmp ult i32 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i32 [[TMP30]], i32 [[TMP31]]
// CHECK-NEXT:    store i32 [[TMP33]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP34]] acq_rel, align 4
// CHECK-NEXT:    [[TMP36:%.*]] = icmp ugt i32 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i32 [[TMP34]], i32 [[TMP35]]
// CHECK-NEXT:    store i32 [[TMP37]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP39:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP38]], i32 [[TMP39]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i32, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i32 [[TMP38]], i32 [[TMP41]]
// CHECK-NEXT:    store i32 [[TMP43]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP44]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP45]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP46:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP46]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP47]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP49:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP48]], i32 [[TMP49]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i32 [[TMP51]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP52:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP52]] acquire, align 4
// CHECK-NEXT:    [[TMP54:%.*]] = icmp ult i32 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i32 [[TMP52]], i32 [[TMP53]]
// CHECK-NEXT:    store i32 [[TMP55]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP56:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP56]] acquire, align 4
// CHECK-NEXT:    [[TMP58:%.*]] = icmp ugt i32 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i32 [[TMP56]], i32 [[TMP57]]
// CHECK-NEXT:    store i32 [[TMP59]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP60:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP61:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP60]], i32 [[TMP61]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i32, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i32 [[TMP60]], i32 [[TMP63]]
// CHECK-NEXT:    store i32 [[TMP65]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP66:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP66]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP67]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP68:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP68]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP69]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP70:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP71:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP70]], i32 [[TMP71]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i32, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i32 [[TMP73]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP74:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP74]] monotonic, align 4
// CHECK-NEXT:    [[TMP76:%.*]] = icmp ult i32 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i32 [[TMP74]], i32 [[TMP75]]
// CHECK-NEXT:    store i32 [[TMP77]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP78:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP78]] monotonic, align 4
// CHECK-NEXT:    [[TMP80:%.*]] = icmp ugt i32 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i32 [[TMP78]], i32 [[TMP79]]
// CHECK-NEXT:    store i32 [[TMP81]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP82:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP83:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP82]], i32 [[TMP83]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i32, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i32, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i32 [[TMP82]], i32 [[TMP85]]
// CHECK-NEXT:    store i32 [[TMP87]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP88:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP88]] release, align 4
// CHECK-NEXT:    store i32 [[TMP89]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP90]] release, align 4
// CHECK-NEXT:    store i32 [[TMP91]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP93:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP92]], i32 [[TMP93]] release monotonic, align 4
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i32, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i32 [[TMP95]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP96]] release, align 4
// CHECK-NEXT:    [[TMP98:%.*]] = icmp ult i32 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i32 [[TMP96]], i32 [[TMP97]]
// CHECK-NEXT:    store i32 [[TMP99]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP100]] release, align 4
// CHECK-NEXT:    [[TMP102:%.*]] = icmp ugt i32 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i32 [[TMP100]], i32 [[TMP101]]
// CHECK-NEXT:    store i32 [[TMP103]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP105:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP104]], i32 [[TMP105]] release monotonic, align 4
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i32, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i32, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i32 [[TMP104]], i32 [[TMP107]]
// CHECK-NEXT:    store i32 [[TMP109]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP110]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP111]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP112]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP113]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP115:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP114]], i32 [[TMP115]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i32, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i32 [[TMP117]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP118]] seq_cst, align 4
// CHECK-NEXT:    [[TMP120:%.*]] = icmp ult i32 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i32 [[TMP118]], i32 [[TMP119]]
// CHECK-NEXT:    store i32 [[TMP121]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP122]] seq_cst, align 4
// CHECK-NEXT:    [[TMP124:%.*]] = icmp ugt i32 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i32 [[TMP122]], i32 [[TMP123]]
// CHECK-NEXT:    store i32 [[TMP125]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP127:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP126]], i32 [[TMP127]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i32, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i32, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i32 [[TMP126]], i32 [[TMP129]]
// CHECK-NEXT:    store i32 [[TMP131]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i32, ptr [[UIV]], align 4
// CHECK-NEXT:    ret i32 [[TMP132]]
//
//
// CHECK-LABEL: @lxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[LX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON]], ptr [[LX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON1]], ptr [[LV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON2]], ptr [[LE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON3]], ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP0]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP4]], i64 [[TMP5]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP8]] monotonic, align 8
// CHECK-NEXT:    [[TMP10:%.*]] = icmp slt i64 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP8]], i64 [[TMP9]]
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP12]] monotonic, align 8
// CHECK-NEXT:    [[TMP14:%.*]] = icmp sgt i64 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i64 [[TMP12]], i64 [[TMP13]]
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP16]], i64 [[TMP17]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i64 [[TMP16]], i64 [[TMP19]]
// CHECK-NEXT:    store i64 [[TMP21]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP22]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP23]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP24]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP26]], i64 [[TMP27]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP30]] acq_rel, align 8
// CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i64 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i64 [[TMP30]], i64 [[TMP31]]
// CHECK-NEXT:    store i64 [[TMP33]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP34]] acq_rel, align 8
// CHECK-NEXT:    [[TMP36:%.*]] = icmp sgt i64 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i64 [[TMP34]], i64 [[TMP35]]
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP38]], i64 [[TMP39]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i64, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i64 [[TMP38]], i64 [[TMP41]]
// CHECK-NEXT:    store i64 [[TMP43]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP44]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP46]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP48]], i64 [[TMP49]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i64 [[TMP51]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP52]] acquire, align 8
// CHECK-NEXT:    [[TMP54:%.*]] = icmp slt i64 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i64 [[TMP52]], i64 [[TMP53]]
// CHECK-NEXT:    store i64 [[TMP55]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP56:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP56]] acquire, align 8
// CHECK-NEXT:    [[TMP58:%.*]] = icmp sgt i64 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i64 [[TMP56]], i64 [[TMP57]]
// CHECK-NEXT:    store i64 [[TMP59]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP60:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP61:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP60]], i64 [[TMP61]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i64, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i64, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i64 [[TMP60]], i64 [[TMP63]]
// CHECK-NEXT:    store i64 [[TMP65]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP66:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP66]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP67]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP68]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP69]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP70:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP71:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP70]], i64 [[TMP71]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i64 [[TMP73]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP74]] monotonic, align 8
// CHECK-NEXT:    [[TMP76:%.*]] = icmp slt i64 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i64 [[TMP74]], i64 [[TMP75]]
// CHECK-NEXT:    store i64 [[TMP77]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP78:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP78]] monotonic, align 8
// CHECK-NEXT:    [[TMP80:%.*]] = icmp sgt i64 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i64 [[TMP78]], i64 [[TMP79]]
// CHECK-NEXT:    store i64 [[TMP81]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP82:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP83:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP82]], i64 [[TMP83]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i64 [[TMP82]], i64 [[TMP85]]
// CHECK-NEXT:    store i64 [[TMP87]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP88]] release, align 8
// CHECK-NEXT:    store i64 [[TMP89]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP90]] release, align 8
// CHECK-NEXT:    store i64 [[TMP91]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP93:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP92]], i64 [[TMP93]] release monotonic, align 8
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i64 [[TMP95]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP96]] release, align 8
// CHECK-NEXT:    [[TMP98:%.*]] = icmp slt i64 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i64 [[TMP96]], i64 [[TMP97]]
// CHECK-NEXT:    store i64 [[TMP99]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP100]] release, align 8
// CHECK-NEXT:    [[TMP102:%.*]] = icmp sgt i64 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i64 [[TMP100]], i64 [[TMP101]]
// CHECK-NEXT:    store i64 [[TMP103]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP104]], i64 [[TMP105]] release monotonic, align 8
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i64, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i64, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i64 [[TMP104]], i64 [[TMP107]]
// CHECK-NEXT:    store i64 [[TMP109]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP110]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP111]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP112]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP113]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP114]], i64 [[TMP115]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i64 [[TMP117]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP118]] seq_cst, align 8
// CHECK-NEXT:    [[TMP120:%.*]] = icmp slt i64 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i64 [[TMP118]], i64 [[TMP119]]
// CHECK-NEXT:    store i64 [[TMP121]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP122]] seq_cst, align 8
// CHECK-NEXT:    [[TMP124:%.*]] = icmp sgt i64 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i64 [[TMP122]], i64 [[TMP123]]
// CHECK-NEXT:    store i64 [[TMP125]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP127:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP126]], i64 [[TMP127]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i64, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i64, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i64 [[TMP126]], i64 [[TMP129]]
// CHECK-NEXT:    store i64 [[TMP131]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i64, ptr [[LV]], align 8
// CHECK-NEXT:    ret i64 [[TMP132]]
//
//
// CHECK-LABEL: @ulxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON]], ptr [[ULX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON1]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON2]], ptr [[ULE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON3]], ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP0]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP2]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP4]], i64 [[TMP5]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP8]] monotonic, align 8
// CHECK-NEXT:    [[TMP10:%.*]] = icmp ult i64 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP8]], i64 [[TMP9]]
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP12]] monotonic, align 8
// CHECK-NEXT:    [[TMP14:%.*]] = icmp ugt i64 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i64 [[TMP12]], i64 [[TMP13]]
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP16]], i64 [[TMP17]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i64 [[TMP16]], i64 [[TMP19]]
// CHECK-NEXT:    store i64 [[TMP21]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP22]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP23]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP24]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP26]], i64 [[TMP27]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP30]] acq_rel, align 8
// CHECK-NEXT:    [[TMP32:%.*]] = icmp ult i64 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i64 [[TMP30]], i64 [[TMP31]]
// CHECK-NEXT:    store i64 [[TMP33]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP34]] acq_rel, align 8
// CHECK-NEXT:    [[TMP36:%.*]] = icmp ugt i64 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i64 [[TMP34]], i64 [[TMP35]]
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP38]], i64 [[TMP39]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i64, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i64 [[TMP38]], i64 [[TMP41]]
// CHECK-NEXT:    store i64 [[TMP43]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP44]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP46]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP48]], i64 [[TMP49]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i64 [[TMP51]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP52]] acquire, align 8
// CHECK-NEXT:    [[TMP54:%.*]] = icmp ult i64 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i64 [[TMP52]], i64 [[TMP53]]
// CHECK-NEXT:    store i64 [[TMP55]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP56:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP56]] acquire, align 8
// CHECK-NEXT:    [[TMP58:%.*]] = icmp ugt i64 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i64 [[TMP56]], i64 [[TMP57]]
// CHECK-NEXT:    store i64 [[TMP59]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP60:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP61:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP60]], i64 [[TMP61]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i64, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i64, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i64 [[TMP60]], i64 [[TMP63]]
// CHECK-NEXT:    store i64 [[TMP65]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP66:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP66]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP67]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP68]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP69]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP71:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP70]], i64 [[TMP71]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i64 [[TMP73]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP74]] monotonic, align 8
// CHECK-NEXT:    [[TMP76:%.*]] = icmp ult i64 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i64 [[TMP74]], i64 [[TMP75]]
// CHECK-NEXT:    store i64 [[TMP77]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP78:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP78]] monotonic, align 8
// CHECK-NEXT:    [[TMP80:%.*]] = icmp ugt i64 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i64 [[TMP78]], i64 [[TMP79]]
// CHECK-NEXT:    store i64 [[TMP81]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP83:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP82]], i64 [[TMP83]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i64 [[TMP82]], i64 [[TMP85]]
// CHECK-NEXT:    store i64 [[TMP87]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP88]] release, align 8
// CHECK-NEXT:    store i64 [[TMP89]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP90]] release, align 8
// CHECK-NEXT:    store i64 [[TMP91]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP93:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP92]], i64 [[TMP93]] release monotonic, align 8
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i64 [[TMP95]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP96]] release, align 8
// CHECK-NEXT:    [[TMP98:%.*]] = icmp ult i64 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i64 [[TMP96]], i64 [[TMP97]]
// CHECK-NEXT:    store i64 [[TMP99]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP100]] release, align 8
// CHECK-NEXT:    [[TMP102:%.*]] = icmp ugt i64 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i64 [[TMP100]], i64 [[TMP101]]
// CHECK-NEXT:    store i64 [[TMP103]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP104]], i64 [[TMP105]] release monotonic, align 8
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i64, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i64, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i64 [[TMP104]], i64 [[TMP107]]
// CHECK-NEXT:    store i64 [[TMP109]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP110]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP111]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP112]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP113]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP114]], i64 [[TMP115]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i64 [[TMP117]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP118]] seq_cst, align 8
// CHECK-NEXT:    [[TMP120:%.*]] = icmp ult i64 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i64 [[TMP118]], i64 [[TMP119]]
// CHECK-NEXT:    store i64 [[TMP121]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP122]] seq_cst, align 8
// CHECK-NEXT:    [[TMP124:%.*]] = icmp ugt i64 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i64 [[TMP122]], i64 [[TMP123]]
// CHECK-NEXT:    store i64 [[TMP125]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP127:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP126]], i64 [[TMP127]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i64, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i64, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i64 [[TMP126]], i64 [[TMP129]]
// CHECK-NEXT:    store i64 [[TMP131]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i64, ptr [[ULV]], align 8
// CHECK-NEXT:    ret i64 [[TMP132]]
//
//
// CHECK-LABEL: @llxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON]], ptr [[LLX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON1]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON2]], ptr [[LLE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON3]], ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP0]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP2]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4]], i64 [[TMP5]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP8]] monotonic, align 8
// CHECK-NEXT:    [[TMP10:%.*]] = icmp slt i64 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP8]], i64 [[TMP9]]
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP12]] monotonic, align 8
// CHECK-NEXT:    [[TMP14:%.*]] = icmp sgt i64 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i64 [[TMP12]], i64 [[TMP13]]
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP16]], i64 [[TMP17]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i64 [[TMP16]], i64 [[TMP19]]
// CHECK-NEXT:    store i64 [[TMP21]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP22]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP23]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP24]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP26]], i64 [[TMP27]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP30]] acq_rel, align 8
// CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i64 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i64 [[TMP30]], i64 [[TMP31]]
// CHECK-NEXT:    store i64 [[TMP33]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP34]] acq_rel, align 8
// CHECK-NEXT:    [[TMP36:%.*]] = icmp sgt i64 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i64 [[TMP34]], i64 [[TMP35]]
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP38]], i64 [[TMP39]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i64, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i64 [[TMP38]], i64 [[TMP41]]
// CHECK-NEXT:    store i64 [[TMP43]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP44]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP46]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP48]], i64 [[TMP49]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i64 [[TMP51]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP52]] acquire, align 8
// CHECK-NEXT:    [[TMP54:%.*]] = icmp slt i64 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i64 [[TMP52]], i64 [[TMP53]]
// CHECK-NEXT:    store i64 [[TMP55]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP56:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP56]] acquire, align 8
// CHECK-NEXT:    [[TMP58:%.*]] = icmp sgt i64 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i64 [[TMP56]], i64 [[TMP57]]
// CHECK-NEXT:    store i64 [[TMP59]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP60:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP61:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP60]], i64 [[TMP61]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i64, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i64, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i64 [[TMP60]], i64 [[TMP63]]
// CHECK-NEXT:    store i64 [[TMP65]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP66:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP66]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP67]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP68]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP69]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP70:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP71:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP70]], i64 [[TMP71]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i64 [[TMP73]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP74]] monotonic, align 8
// CHECK-NEXT:    [[TMP76:%.*]] = icmp slt i64 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i64 [[TMP74]], i64 [[TMP75]]
// CHECK-NEXT:    store i64 [[TMP77]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP78:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP78]] monotonic, align 8
// CHECK-NEXT:    [[TMP80:%.*]] = icmp sgt i64 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i64 [[TMP78]], i64 [[TMP79]]
// CHECK-NEXT:    store i64 [[TMP81]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP82:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP83:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP82]], i64 [[TMP83]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i64 [[TMP82]], i64 [[TMP85]]
// CHECK-NEXT:    store i64 [[TMP87]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP88]] release, align 8
// CHECK-NEXT:    store i64 [[TMP89]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP90]] release, align 8
// CHECK-NEXT:    store i64 [[TMP91]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP93:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP92]], i64 [[TMP93]] release monotonic, align 8
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i64 [[TMP95]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP96]] release, align 8
// CHECK-NEXT:    [[TMP98:%.*]] = icmp slt i64 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i64 [[TMP96]], i64 [[TMP97]]
// CHECK-NEXT:    store i64 [[TMP99]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP100]] release, align 8
// CHECK-NEXT:    [[TMP102:%.*]] = icmp sgt i64 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i64 [[TMP100]], i64 [[TMP101]]
// CHECK-NEXT:    store i64 [[TMP103]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP104]], i64 [[TMP105]] release monotonic, align 8
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i64, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i64, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i64 [[TMP104]], i64 [[TMP107]]
// CHECK-NEXT:    store i64 [[TMP109]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP110]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP111]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP112]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP113]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP114]], i64 [[TMP115]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i64 [[TMP117]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP118]] seq_cst, align 8
// CHECK-NEXT:    [[TMP120:%.*]] = icmp slt i64 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i64 [[TMP118]], i64 [[TMP119]]
// CHECK-NEXT:    store i64 [[TMP121]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP122]] seq_cst, align 8
// CHECK-NEXT:    [[TMP124:%.*]] = icmp sgt i64 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i64 [[TMP122]], i64 [[TMP123]]
// CHECK-NEXT:    store i64 [[TMP125]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP127:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP126]], i64 [[TMP127]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i64, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i64, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i64 [[TMP126]], i64 [[TMP129]]
// CHECK-NEXT:    store i64 [[TMP131]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i64, ptr [[LLV]], align 8
// CHECK-NEXT:    ret i64 [[TMP132]]
//
//
// CHECK-LABEL: @ullxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON]], ptr [[ULLX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON1]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON2]], ptr [[ULLE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i64 poison
// CHECK-NEXT:    store i64 [[FREEZE_POISON3]], ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP0]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP2]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4]], i64 [[TMP5]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP8]] monotonic, align 8
// CHECK-NEXT:    [[TMP10:%.*]] = icmp ult i64 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP8]], i64 [[TMP9]]
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP12]] monotonic, align 8
// CHECK-NEXT:    [[TMP14:%.*]] = icmp ugt i64 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i64 [[TMP12]], i64 [[TMP13]]
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP16]], i64 [[TMP17]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i64 [[TMP16]], i64 [[TMP19]]
// CHECK-NEXT:    store i64 [[TMP21]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP22]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP23]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP24]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP26]], i64 [[TMP27]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP30]] acq_rel, align 8
// CHECK-NEXT:    [[TMP32:%.*]] = icmp ult i64 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i64 [[TMP30]], i64 [[TMP31]]
// CHECK-NEXT:    store i64 [[TMP33]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP34]] acq_rel, align 8
// CHECK-NEXT:    [[TMP36:%.*]] = icmp ugt i64 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i64 [[TMP34]], i64 [[TMP35]]
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP38]], i64 [[TMP39]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i64, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i64 [[TMP38]], i64 [[TMP41]]
// CHECK-NEXT:    store i64 [[TMP43]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP44]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP46]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP48]], i64 [[TMP49]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i64 [[TMP51]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP52]] acquire, align 8
// CHECK-NEXT:    [[TMP54:%.*]] = icmp ult i64 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i64 [[TMP52]], i64 [[TMP53]]
// CHECK-NEXT:    store i64 [[TMP55]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP56:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP56]] acquire, align 8
// CHECK-NEXT:    [[TMP58:%.*]] = icmp ugt i64 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i64 [[TMP56]], i64 [[TMP57]]
// CHECK-NEXT:    store i64 [[TMP59]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP60:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP61:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP60]], i64 [[TMP61]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i64, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i64, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i64 [[TMP60]], i64 [[TMP63]]
// CHECK-NEXT:    store i64 [[TMP65]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP66:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP66]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP67]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP68]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP69]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP71:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP70]], i64 [[TMP71]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i64 [[TMP73]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP74]] monotonic, align 8
// CHECK-NEXT:    [[TMP76:%.*]] = icmp ult i64 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i64 [[TMP74]], i64 [[TMP75]]
// CHECK-NEXT:    store i64 [[TMP77]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP78:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP78]] monotonic, align 8
// CHECK-NEXT:    [[TMP80:%.*]] = icmp ugt i64 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i64 [[TMP78]], i64 [[TMP79]]
// CHECK-NEXT:    store i64 [[TMP81]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP83:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP82]], i64 [[TMP83]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i64 [[TMP82]], i64 [[TMP85]]
// CHECK-NEXT:    store i64 [[TMP87]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP88]] release, align 8
// CHECK-NEXT:    store i64 [[TMP89]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP90]] release, align 8
// CHECK-NEXT:    store i64 [[TMP91]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP93:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP92]], i64 [[TMP93]] release monotonic, align 8
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i64 [[TMP95]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP96]] release, align 8
// CHECK-NEXT:    [[TMP98:%.*]] = icmp ult i64 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i64 [[TMP96]], i64 [[TMP97]]
// CHECK-NEXT:    store i64 [[TMP99]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP100]] release, align 8
// CHECK-NEXT:    [[TMP102:%.*]] = icmp ugt i64 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i64 [[TMP100]], i64 [[TMP101]]
// CHECK-NEXT:    store i64 [[TMP103]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP104]], i64 [[TMP105]] release monotonic, align 8
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i64, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i64, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i64 [[TMP104]], i64 [[TMP107]]
// CHECK-NEXT:    store i64 [[TMP109]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP110]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP111]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP112]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP113]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP114]], i64 [[TMP115]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i64 [[TMP117]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP118]] seq_cst, align 8
// CHECK-NEXT:    [[TMP120:%.*]] = icmp ult i64 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i64 [[TMP118]], i64 [[TMP119]]
// CHECK-NEXT:    store i64 [[TMP121]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP122]] seq_cst, align 8
// CHECK-NEXT:    [[TMP124:%.*]] = icmp ugt i64 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i64 [[TMP122]], i64 [[TMP123]]
// CHECK-NEXT:    store i64 [[TMP125]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP127:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP126]], i64 [[TMP127]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i64, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i64, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i64 [[TMP126]], i64 [[TMP129]]
// CHECK-NEXT:    store i64 [[TMP131]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i64, ptr [[ULLV]], align 8
// CHECK-NEXT:    ret i64 [[TMP132]]
//
//
// CHECK-LABEL: @fxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[FX:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FV:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FE:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FD:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON]], ptr [[FX]], align 4
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON1]], ptr [[FV]], align 4
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON2]], ptr [[FE]], align 4
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze float poison
// CHECK-NEXT:    store float [[FREEZE_POISON3]], ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP0]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP1]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP2]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP3]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP6:%.*]] = bitcast float [[TMP4]] to i32
// CHECK-NEXT:    [[TMP7:%.*]] = bitcast float [[TMP5]] to i32
// CHECK-NEXT:    [[TMP8:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP6]], i32 [[TMP7]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP9:%.*]] = extractvalue { i32, i1 } [[TMP8]], 0
// CHECK-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
// CHECK-NEXT:    store float [[TMP10]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP11:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP12:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP11]] monotonic, align 4
// CHECK-NEXT:    [[TMP13:%.*]] = fcmp olt float [[TMP12]], [[TMP11]]
// CHECK-NEXT:    [[TMP14:%.*]] = select i1 [[TMP13]], float [[TMP11]], float [[TMP12]]
// CHECK-NEXT:    store float [[TMP14]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP15]] monotonic, align 4
// CHECK-NEXT:    [[TMP17:%.*]] = fcmp ogt float [[TMP16]], [[TMP15]]
// CHECK-NEXT:    [[TMP18:%.*]] = select i1 [[TMP17]], float [[TMP15]], float [[TMP16]]
// CHECK-NEXT:    store float [[TMP18]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP19:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP20:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP21:%.*]] = bitcast float [[TMP19]] to i32
// CHECK-NEXT:    [[TMP22:%.*]] = bitcast float [[TMP20]] to i32
// CHECK-NEXT:    [[TMP23:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP21]], i32 [[TMP22]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP24:%.*]] = extractvalue { i32, i1 } [[TMP23]], 0
// CHECK-NEXT:    [[TMP25:%.*]] = bitcast i32 [[TMP24]] to float
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i1 } [[TMP23]], 1
// CHECK-NEXT:    [[TMP27:%.*]] = select i1 [[TMP26]], float [[TMP19]], float [[TMP25]]
// CHECK-NEXT:    store float [[TMP27]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP28]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP29]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP30]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP31]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP32:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP33:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP34:%.*]] = bitcast float [[TMP32]] to i32
// CHECK-NEXT:    [[TMP35:%.*]] = bitcast float [[TMP33]] to i32
// CHECK-NEXT:    [[TMP36:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP34]], i32 [[TMP35]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP37:%.*]] = extractvalue { i32, i1 } [[TMP36]], 0
// CHECK-NEXT:    [[TMP38:%.*]] = bitcast i32 [[TMP37]] to float
// CHECK-NEXT:    store float [[TMP38]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP39:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP39]] acq_rel, align 4
// CHECK-NEXT:    [[TMP41:%.*]] = fcmp olt float [[TMP40]], [[TMP39]]
// CHECK-NEXT:    [[TMP42:%.*]] = select i1 [[TMP41]], float [[TMP39]], float [[TMP40]]
// CHECK-NEXT:    store float [[TMP42]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP43:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP43]] acq_rel, align 4
// CHECK-NEXT:    [[TMP45:%.*]] = fcmp ogt float [[TMP44]], [[TMP43]]
// CHECK-NEXT:    [[TMP46:%.*]] = select i1 [[TMP45]], float [[TMP43]], float [[TMP44]]
// CHECK-NEXT:    store float [[TMP46]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP47:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP49:%.*]] = bitcast float [[TMP47]] to i32
// CHECK-NEXT:    [[TMP50:%.*]] = bitcast float [[TMP48]] to i32
// CHECK-NEXT:    [[TMP51:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP49]], i32 [[TMP50]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP52:%.*]] = extractvalue { i32, i1 } [[TMP51]], 0
// CHECK-NEXT:    [[TMP53:%.*]] = bitcast i32 [[TMP52]] to float
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i1 } [[TMP51]], 1
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], float [[TMP47]], float [[TMP53]]
// CHECK-NEXT:    store float [[TMP55]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP56:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP56]] acquire, align 4
// CHECK-NEXT:    store float [[TMP57]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP58:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP59:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP58]] acquire, align 4
// CHECK-NEXT:    store float [[TMP59]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP60:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP61:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP62:%.*]] = bitcast float [[TMP60]] to i32
// CHECK-NEXT:    [[TMP63:%.*]] = bitcast float [[TMP61]] to i32
// CHECK-NEXT:    [[TMP64:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP62]], i32 [[TMP63]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP65:%.*]] = extractvalue { i32, i1 } [[TMP64]], 0
// CHECK-NEXT:    [[TMP66:%.*]] = bitcast i32 [[TMP65]] to float
// CHECK-NEXT:    store float [[TMP66]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP67:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP68:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP67]] acquire, align 4
// CHECK-NEXT:    [[TMP69:%.*]] = fcmp olt float [[TMP68]], [[TMP67]]
// CHECK-NEXT:    [[TMP70:%.*]] = select i1 [[TMP69]], float [[TMP67]], float [[TMP68]]
// CHECK-NEXT:    store float [[TMP70]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP71:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP72:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP71]] acquire, align 4
// CHECK-NEXT:    [[TMP73:%.*]] = fcmp ogt float [[TMP72]], [[TMP71]]
// CHECK-NEXT:    [[TMP74:%.*]] = select i1 [[TMP73]], float [[TMP71]], float [[TMP72]]
// CHECK-NEXT:    store float [[TMP74]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP75:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP76:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP77:%.*]] = bitcast float [[TMP75]] to i32
// CHECK-NEXT:    [[TMP78:%.*]] = bitcast float [[TMP76]] to i32
// CHECK-NEXT:    [[TMP79:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP77]], i32 [[TMP78]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP80:%.*]] = extractvalue { i32, i1 } [[TMP79]], 0
// CHECK-NEXT:    [[TMP81:%.*]] = bitcast i32 [[TMP80]] to float
// CHECK-NEXT:    [[TMP82:%.*]] = extractvalue { i32, i1 } [[TMP79]], 1
// CHECK-NEXT:    [[TMP83:%.*]] = select i1 [[TMP82]], float [[TMP75]], float [[TMP81]]
// CHECK-NEXT:    store float [[TMP83]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP84:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP85:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP84]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP85]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP86:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP87:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP86]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP87]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP88:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP89:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP90:%.*]] = bitcast float [[TMP88]] to i32
// CHECK-NEXT:    [[TMP91:%.*]] = bitcast float [[TMP89]] to i32
// CHECK-NEXT:    [[TMP92:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP90]], i32 [[TMP91]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i32, i1 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = bitcast i32 [[TMP93]] to float
// CHECK-NEXT:    store float [[TMP94]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP95:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP96:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP95]] monotonic, align 4
// CHECK-NEXT:    [[TMP97:%.*]] = fcmp olt float [[TMP96]], [[TMP95]]
// CHECK-NEXT:    [[TMP98:%.*]] = select i1 [[TMP97]], float [[TMP95]], float [[TMP96]]
// CHECK-NEXT:    store float [[TMP98]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP99:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP100:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP99]] monotonic, align 4
// CHECK-NEXT:    [[TMP101:%.*]] = fcmp ogt float [[TMP100]], [[TMP99]]
// CHECK-NEXT:    [[TMP102:%.*]] = select i1 [[TMP101]], float [[TMP99]], float [[TMP100]]
// CHECK-NEXT:    store float [[TMP102]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP103:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP104:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP105:%.*]] = bitcast float [[TMP103]] to i32
// CHECK-NEXT:    [[TMP106:%.*]] = bitcast float [[TMP104]] to i32
// CHECK-NEXT:    [[TMP107:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP105]], i32 [[TMP106]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i32, i1 } [[TMP107]], 0
// CHECK-NEXT:    [[TMP109:%.*]] = bitcast i32 [[TMP108]] to float
// CHECK-NEXT:    [[TMP110:%.*]] = extractvalue { i32, i1 } [[TMP107]], 1
// CHECK-NEXT:    [[TMP111:%.*]] = select i1 [[TMP110]], float [[TMP103]], float [[TMP109]]
// CHECK-NEXT:    store float [[TMP111]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP112:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP112]] release, align 4
// CHECK-NEXT:    store float [[TMP113]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP115:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP114]] release, align 4
// CHECK-NEXT:    store float [[TMP115]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP116:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP117:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP118:%.*]] = bitcast float [[TMP116]] to i32
// CHECK-NEXT:    [[TMP119:%.*]] = bitcast float [[TMP117]] to i32
// CHECK-NEXT:    [[TMP120:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP118]], i32 [[TMP119]] release monotonic, align 4
// CHECK-NEXT:    [[TMP121:%.*]] = extractvalue { i32, i1 } [[TMP120]], 0
// CHECK-NEXT:    [[TMP122:%.*]] = bitcast i32 [[TMP121]] to float
// CHECK-NEXT:    store float [[TMP122]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP123:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP124:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP123]] release, align 4
// CHECK-NEXT:    [[TMP125:%.*]] = fcmp olt float [[TMP124]], [[TMP123]]
// CHECK-NEXT:    [[TMP126:%.*]] = select i1 [[TMP125]], float [[TMP123]], float [[TMP124]]
// CHECK-NEXT:    store float [[TMP126]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP127:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP128:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP127]] release, align 4
// CHECK-NEXT:    [[TMP129:%.*]] = fcmp ogt float [[TMP128]], [[TMP127]]
// CHECK-NEXT:    [[TMP130:%.*]] = select i1 [[TMP129]], float [[TMP127]], float [[TMP128]]
// CHECK-NEXT:    store float [[TMP130]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP131:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP132:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP133:%.*]] = bitcast float [[TMP131]] to i32
// CHECK-NEXT:    [[TMP134:%.*]] = bitcast float [[TMP132]] to i32
// CHECK-NEXT:    [[TMP135:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP133]], i32 [[TMP134]] release monotonic, align 4
// CHECK-NEXT:    [[TMP136:%.*]] = extractvalue { i32, i1 } [[TMP135]], 0
// CHECK-NEXT:    [[TMP137:%.*]] = bitcast i32 [[TMP136]] to float
// CHECK-NEXT:    [[TMP138:%.*]] = extractvalue { i32, i1 } [[TMP135]], 1
// CHECK-NEXT:    [[TMP139:%.*]] = select i1 [[TMP138]], float [[TMP131]], float [[TMP137]]
// CHECK-NEXT:    store float [[TMP139]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP140:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP141:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP140]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP141]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP142:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP143:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP142]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP143]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP144:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP145:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP146:%.*]] = bitcast float [[TMP144]] to i32
// CHECK-NEXT:    [[TMP147:%.*]] = bitcast float [[TMP145]] to i32
// CHECK-NEXT:    [[TMP148:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP146]], i32 [[TMP147]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP149:%.*]] = extractvalue { i32, i1 } [[TMP148]], 0
// CHECK-NEXT:    [[TMP150:%.*]] = bitcast i32 [[TMP149]] to float
// CHECK-NEXT:    store float [[TMP150]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP151:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP152:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP151]] seq_cst, align 4
// CHECK-NEXT:    [[TMP153:%.*]] = fcmp olt float [[TMP152]], [[TMP151]]
// CHECK-NEXT:    [[TMP154:%.*]] = select i1 [[TMP153]], float [[TMP151]], float [[TMP152]]
// CHECK-NEXT:    store float [[TMP154]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP155:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP156:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP155]] seq_cst, align 4
// CHECK-NEXT:    [[TMP157:%.*]] = fcmp ogt float [[TMP156]], [[TMP155]]
// CHECK-NEXT:    [[TMP158:%.*]] = select i1 [[TMP157]], float [[TMP155]], float [[TMP156]]
// CHECK-NEXT:    store float [[TMP158]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP159:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP160:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP161:%.*]] = bitcast float [[TMP159]] to i32
// CHECK-NEXT:    [[TMP162:%.*]] = bitcast float [[TMP160]] to i32
// CHECK-NEXT:    [[TMP163:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP161]], i32 [[TMP162]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP164:%.*]] = extractvalue { i32, i1 } [[TMP163]], 0
// CHECK-NEXT:    [[TMP165:%.*]] = bitcast i32 [[TMP164]] to float
// CHECK-NEXT:    [[TMP166:%.*]] = extractvalue { i32, i1 } [[TMP163]], 1
// CHECK-NEXT:    [[TMP167:%.*]] = select i1 [[TMP166]], float [[TMP159]], float [[TMP165]]
// CHECK-NEXT:    store float [[TMP167]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP168:%.*]] = load float, ptr [[FV]], align 4
// CHECK-NEXT:    ret float [[TMP168]]
//
//
// CHECK-LABEL: @dxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DX:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DV:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DE:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DD:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON]], ptr [[DX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON1]], ptr [[DV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON2]], ptr [[DE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON3]], ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP0]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP1]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP2]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP3]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = bitcast double [[TMP4]] to i64
// CHECK-NEXT:    [[TMP7:%.*]] = bitcast double [[TMP5]] to i64
// CHECK-NEXT:    [[TMP8:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6]], i64 [[TMP7]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP9:%.*]] = extractvalue { i64, i1 } [[TMP8]], 0
// CHECK-NEXT:    [[TMP10:%.*]] = bitcast i64 [[TMP9]] to double
// CHECK-NEXT:    store double [[TMP10]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP11]] monotonic, align 8
// CHECK-NEXT:    [[TMP13:%.*]] = fcmp olt double [[TMP12]], [[TMP11]]
// CHECK-NEXT:    [[TMP14:%.*]] = select i1 [[TMP13]], double [[TMP11]], double [[TMP12]]
// CHECK-NEXT:    store double [[TMP14]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP15]] monotonic, align 8
// CHECK-NEXT:    [[TMP17:%.*]] = fcmp ogt double [[TMP16]], [[TMP15]]
// CHECK-NEXT:    [[TMP18:%.*]] = select i1 [[TMP17]], double [[TMP15]], double [[TMP16]]
// CHECK-NEXT:    store double [[TMP18]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP19:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP20:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP21:%.*]] = bitcast double [[TMP19]] to i64
// CHECK-NEXT:    [[TMP22:%.*]] = bitcast double [[TMP20]] to i64
// CHECK-NEXT:    [[TMP23:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP21]], i64 [[TMP22]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP24:%.*]] = extractvalue { i64, i1 } [[TMP23]], 0
// CHECK-NEXT:    [[TMP25:%.*]] = bitcast i64 [[TMP24]] to double
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i64, i1 } [[TMP23]], 1
// CHECK-NEXT:    [[TMP27:%.*]] = select i1 [[TMP26]], double [[TMP19]], double [[TMP25]]
// CHECK-NEXT:    store double [[TMP27]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP28]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP29]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP30]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP31]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP32:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP33:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP34:%.*]] = bitcast double [[TMP32]] to i64
// CHECK-NEXT:    [[TMP35:%.*]] = bitcast double [[TMP33]] to i64
// CHECK-NEXT:    [[TMP36:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP34]], i64 [[TMP35]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP37:%.*]] = extractvalue { i64, i1 } [[TMP36]], 0
// CHECK-NEXT:    [[TMP38:%.*]] = bitcast i64 [[TMP37]] to double
// CHECK-NEXT:    store double [[TMP38]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP39:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP39]] acq_rel, align 8
// CHECK-NEXT:    [[TMP41:%.*]] = fcmp olt double [[TMP40]], [[TMP39]]
// CHECK-NEXT:    [[TMP42:%.*]] = select i1 [[TMP41]], double [[TMP39]], double [[TMP40]]
// CHECK-NEXT:    store double [[TMP42]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP43:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP43]] acq_rel, align 8
// CHECK-NEXT:    [[TMP45:%.*]] = fcmp ogt double [[TMP44]], [[TMP43]]
// CHECK-NEXT:    [[TMP46:%.*]] = select i1 [[TMP45]], double [[TMP43]], double [[TMP44]]
// CHECK-NEXT:    store double [[TMP46]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP47:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = bitcast double [[TMP47]] to i64
// CHECK-NEXT:    [[TMP50:%.*]] = bitcast double [[TMP48]] to i64
// CHECK-NEXT:    [[TMP51:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP49]], i64 [[TMP50]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP52:%.*]] = extractvalue { i64, i1 } [[TMP51]], 0
// CHECK-NEXT:    [[TMP53:%.*]] = bitcast i64 [[TMP52]] to double
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i64, i1 } [[TMP51]], 1
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], double [[TMP47]], double [[TMP53]]
// CHECK-NEXT:    store double [[TMP55]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP56:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP56]] acquire, align 8
// CHECK-NEXT:    store double [[TMP57]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP58:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP59:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP58]] acquire, align 8
// CHECK-NEXT:    store double [[TMP59]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP60:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP61:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = bitcast double [[TMP60]] to i64
// CHECK-NEXT:    [[TMP63:%.*]] = bitcast double [[TMP61]] to i64
// CHECK-NEXT:    [[TMP64:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP62]], i64 [[TMP63]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP65:%.*]] = extractvalue { i64, i1 } [[TMP64]], 0
// CHECK-NEXT:    [[TMP66:%.*]] = bitcast i64 [[TMP65]] to double
// CHECK-NEXT:    store double [[TMP66]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP67:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP67]] acquire, align 8
// CHECK-NEXT:    [[TMP69:%.*]] = fcmp olt double [[TMP68]], [[TMP67]]
// CHECK-NEXT:    [[TMP70:%.*]] = select i1 [[TMP69]], double [[TMP67]], double [[TMP68]]
// CHECK-NEXT:    store double [[TMP70]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP71:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP71]] acquire, align 8
// CHECK-NEXT:    [[TMP73:%.*]] = fcmp ogt double [[TMP72]], [[TMP71]]
// CHECK-NEXT:    [[TMP74:%.*]] = select i1 [[TMP73]], double [[TMP71]], double [[TMP72]]
// CHECK-NEXT:    store double [[TMP74]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP76:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP77:%.*]] = bitcast double [[TMP75]] to i64
// CHECK-NEXT:    [[TMP78:%.*]] = bitcast double [[TMP76]] to i64
// CHECK-NEXT:    [[TMP79:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP77]], i64 [[TMP78]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP80:%.*]] = extractvalue { i64, i1 } [[TMP79]], 0
// CHECK-NEXT:    [[TMP81:%.*]] = bitcast i64 [[TMP80]] to double
// CHECK-NEXT:    [[TMP82:%.*]] = extractvalue { i64, i1 } [[TMP79]], 1
// CHECK-NEXT:    [[TMP83:%.*]] = select i1 [[TMP82]], double [[TMP75]], double [[TMP81]]
// CHECK-NEXT:    store double [[TMP83]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP85:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP84]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP85]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP86:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP87:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP86]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP87]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP90:%.*]] = bitcast double [[TMP88]] to i64
// CHECK-NEXT:    [[TMP91:%.*]] = bitcast double [[TMP89]] to i64
// CHECK-NEXT:    [[TMP92:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP90]], i64 [[TMP91]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i64, i1 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = bitcast i64 [[TMP93]] to double
// CHECK-NEXT:    store double [[TMP94]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP95:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP96:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP95]] monotonic, align 8
// CHECK-NEXT:    [[TMP97:%.*]] = fcmp olt double [[TMP96]], [[TMP95]]
// CHECK-NEXT:    [[TMP98:%.*]] = select i1 [[TMP97]], double [[TMP95]], double [[TMP96]]
// CHECK-NEXT:    store double [[TMP98]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP99:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP100:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP99]] monotonic, align 8
// CHECK-NEXT:    [[TMP101:%.*]] = fcmp ogt double [[TMP100]], [[TMP99]]
// CHECK-NEXT:    [[TMP102:%.*]] = select i1 [[TMP101]], double [[TMP99]], double [[TMP100]]
// CHECK-NEXT:    store double [[TMP102]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP103:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP104:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = bitcast double [[TMP103]] to i64
// CHECK-NEXT:    [[TMP106:%.*]] = bitcast double [[TMP104]] to i64
// CHECK-NEXT:    [[TMP107:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP105]], i64 [[TMP106]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHECK-NEXT:    [[TMP109:%.*]] = bitcast i64 [[TMP108]] to double
// CHECK-NEXT:    [[TMP110:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHECK-NEXT:    [[TMP111:%.*]] = select i1 [[TMP110]], double [[TMP103]], double [[TMP109]]
// CHECK-NEXT:    store double [[TMP111]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP112:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP112]] release, align 8
// CHECK-NEXT:    store double [[TMP113]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP114]] release, align 8
// CHECK-NEXT:    store double [[TMP115]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP116:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP117:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP118:%.*]] = bitcast double [[TMP116]] to i64
// CHECK-NEXT:    [[TMP119:%.*]] = bitcast double [[TMP117]] to i64
// CHECK-NEXT:    [[TMP120:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP118]], i64 [[TMP119]] release monotonic, align 8
// CHECK-NEXT:    [[TMP121:%.*]] = extractvalue { i64, i1 } [[TMP120]], 0
// CHECK-NEXT:    [[TMP122:%.*]] = bitcast i64 [[TMP121]] to double
// CHECK-NEXT:    store double [[TMP122]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP123:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP124:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP123]] release, align 8
// CHECK-NEXT:    [[TMP125:%.*]] = fcmp olt double [[TMP124]], [[TMP123]]
// CHECK-NEXT:    [[TMP126:%.*]] = select i1 [[TMP125]], double [[TMP123]], double [[TMP124]]
// CHECK-NEXT:    store double [[TMP126]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP127:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP128:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP127]] release, align 8
// CHECK-NEXT:    [[TMP129:%.*]] = fcmp ogt double [[TMP128]], [[TMP127]]
// CHECK-NEXT:    [[TMP130:%.*]] = select i1 [[TMP129]], double [[TMP127]], double [[TMP128]]
// CHECK-NEXT:    store double [[TMP130]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP131:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP132:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP133:%.*]] = bitcast double [[TMP131]] to i64
// CHECK-NEXT:    [[TMP134:%.*]] = bitcast double [[TMP132]] to i64
// CHECK-NEXT:    [[TMP135:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP133]], i64 [[TMP134]] release monotonic, align 8
// CHECK-NEXT:    [[TMP136:%.*]] = extractvalue { i64, i1 } [[TMP135]], 0
// CHECK-NEXT:    [[TMP137:%.*]] = bitcast i64 [[TMP136]] to double
// CHECK-NEXT:    [[TMP138:%.*]] = extractvalue { i64, i1 } [[TMP135]], 1
// CHECK-NEXT:    [[TMP139:%.*]] = select i1 [[TMP138]], double [[TMP131]], double [[TMP137]]
// CHECK-NEXT:    store double [[TMP139]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP140:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP141:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP140]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP141]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP142:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP143:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP142]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP143]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP144:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP145:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP146:%.*]] = bitcast double [[TMP144]] to i64
// CHECK-NEXT:    [[TMP147:%.*]] = bitcast double [[TMP145]] to i64
// CHECK-NEXT:    [[TMP148:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP146]], i64 [[TMP147]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP149:%.*]] = extractvalue { i64, i1 } [[TMP148]], 0
// CHECK-NEXT:    [[TMP150:%.*]] = bitcast i64 [[TMP149]] to double
// CHECK-NEXT:    store double [[TMP150]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP151:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP152:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP151]] seq_cst, align 8
// CHECK-NEXT:    [[TMP153:%.*]] = fcmp olt double [[TMP152]], [[TMP151]]
// CHECK-NEXT:    [[TMP154:%.*]] = select i1 [[TMP153]], double [[TMP151]], double [[TMP152]]
// CHECK-NEXT:    store double [[TMP154]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP155:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP156:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP155]] seq_cst, align 8
// CHECK-NEXT:    [[TMP157:%.*]] = fcmp ogt double [[TMP156]], [[TMP155]]
// CHECK-NEXT:    [[TMP158:%.*]] = select i1 [[TMP157]], double [[TMP155]], double [[TMP156]]
// CHECK-NEXT:    store double [[TMP158]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP159:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP160:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP161:%.*]] = bitcast double [[TMP159]] to i64
// CHECK-NEXT:    [[TMP162:%.*]] = bitcast double [[TMP160]] to i64
// CHECK-NEXT:    [[TMP163:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP161]], i64 [[TMP162]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP164:%.*]] = extractvalue { i64, i1 } [[TMP163]], 0
// CHECK-NEXT:    [[TMP165:%.*]] = bitcast i64 [[TMP164]] to double
// CHECK-NEXT:    [[TMP166:%.*]] = extractvalue { i64, i1 } [[TMP163]], 1
// CHECK-NEXT:    [[TMP167:%.*]] = select i1 [[TMP166]], double [[TMP159]], double [[TMP165]]
// CHECK-NEXT:    store double [[TMP167]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP168:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    ret double [[TMP168]]
//
//
// CHECK-LABEL: @fail_dxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DX:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DV:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DE:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DD:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[FREEZE_POISON:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON]], ptr [[DX]], align 8
// CHECK-NEXT:    [[FREEZE_POISON1:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON1]], ptr [[DV]], align 8
// CHECK-NEXT:    [[FREEZE_POISON2:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON2]], ptr [[DE]], align 8
// CHECK-NEXT:    [[FREEZE_POISON3:%.*]] = freeze double poison
// CHECK-NEXT:    store double [[FREEZE_POISON3]], ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast double [[TMP0]] to i64
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast double [[TMP1]] to i64
// CHECK-NEXT:    [[TMP4:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP2]], i64 [[TMP3]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP5]] to double
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP4]], 1
// CHECK-NEXT:    br i1 [[TMP7]], label [[DX_ATOMIC_EXIT:%.*]], label [[DX_ATOMIC_CONT:%.*]]
// CHECK:       dx.atomic.cont:
// CHECK-NEXT:    store double [[TMP6]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT]]
// CHECK:       dx.atomic.exit:
// CHECK-NEXT:    [[TMP8:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = bitcast double [[TMP8]] to i64
// CHECK-NEXT:    [[TMP11:%.*]] = bitcast double [[TMP9]] to i64
// CHECK-NEXT:    [[TMP12:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP10]], i64 [[TMP11]] acquire monotonic, align 8
// CHECK-NEXT:    [[TMP13:%.*]] = extractvalue { i64, i1 } [[TMP12]], 0
// CHECK-NEXT:    [[TMP14:%.*]] = bitcast i64 [[TMP13]] to double
// CHECK-NEXT:    [[TMP15:%.*]] = extractvalue { i64, i1 } [[TMP12]], 1
// CHECK-NEXT:    br i1 [[TMP15]], label [[DX_ATOMIC_EXIT4:%.*]], label [[DX_ATOMIC_CONT5:%.*]]
// CHECK:       dx.atomic.cont5:
// CHECK-NEXT:    store double [[TMP14]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT4]]
// CHECK:       dx.atomic.exit4:
// CHECK-NEXT:    [[TMP16:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = bitcast double [[TMP16]] to i64
// CHECK-NEXT:    [[TMP19:%.*]] = bitcast double [[TMP17]] to i64
// CHECK-NEXT:    [[TMP20:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP18]], i64 [[TMP19]] release monotonic, align 8
// CHECK-NEXT:    [[TMP21:%.*]] = extractvalue { i64, i1 } [[TMP20]], 0
// CHECK-NEXT:    [[TMP22:%.*]] = bitcast i64 [[TMP21]] to double
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i64, i1 } [[TMP20]], 1
// CHECK-NEXT:    br i1 [[TMP23]], label [[DX_ATOMIC_EXIT6:%.*]], label [[DX_ATOMIC_CONT7:%.*]]
// CHECK:       dx.atomic.cont7:
// CHECK-NEXT:    store double [[TMP22]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT6]]
// CHECK:       dx.atomic.exit6:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP26:%.*]] = bitcast double [[TMP24]] to i64
// CHECK-NEXT:    [[TMP27:%.*]] = bitcast double [[TMP25]] to i64
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP26]], i64 [[TMP27]] acq_rel monotonic, align 8
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = bitcast i64 [[TMP29]] to double
// CHECK-NEXT:    [[TMP31:%.*]] = extractvalue { i64, i1 } [[TMP28]], 1
// CHECK-NEXT:    br i1 [[TMP31]], label [[DX_ATOMIC_EXIT8:%.*]], label [[DX_ATOMIC_CONT9:%.*]]
// CHECK:       dx.atomic.cont9:
// CHECK-NEXT:    store double [[TMP30]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT8]]
// CHECK:       dx.atomic.exit8:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP32:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP33:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP34:%.*]] = bitcast double [[TMP32]] to i64
// CHECK-NEXT:    [[TMP35:%.*]] = bitcast double [[TMP33]] to i64
// CHECK-NEXT:    [[TMP36:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP34]], i64 [[TMP35]] seq_cst monotonic, align 8
// CHECK-NEXT:    [[TMP37:%.*]] = extractvalue { i64, i1 } [[TMP36]], 0
// CHECK-NEXT:    [[TMP38:%.*]] = bitcast i64 [[TMP37]] to double
// CHECK-NEXT:    [[TMP39:%.*]] = extractvalue { i64, i1 } [[TMP36]], 1
// CHECK-NEXT:    br i1 [[TMP39]], label [[DX_ATOMIC_EXIT10:%.*]], label [[DX_ATOMIC_CONT11:%.*]]
// CHECK:       dx.atomic.cont11:
// CHECK-NEXT:    store double [[TMP38]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT10]]
// CHECK:       dx.atomic.exit10:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP40:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP41:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = bitcast double [[TMP40]] to i64
// CHECK-NEXT:    [[TMP43:%.*]] = bitcast double [[TMP41]] to i64
// CHECK-NEXT:    [[TMP44:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP42]], i64 [[TMP43]] monotonic acquire, align 8
// CHECK-NEXT:    [[TMP45:%.*]] = extractvalue { i64, i1 } [[TMP44]], 0
// CHECK-NEXT:    [[TMP46:%.*]] = bitcast i64 [[TMP45]] to double
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i64, i1 } [[TMP44]], 1
// CHECK-NEXT:    br i1 [[TMP47]], label [[DX_ATOMIC_EXIT12:%.*]], label [[DX_ATOMIC_CONT13:%.*]]
// CHECK:       dx.atomic.cont13:
// CHECK-NEXT:    store double [[TMP46]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT12]]
// CHECK:       dx.atomic.exit12:
// CHECK-NEXT:    [[TMP48:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = bitcast double [[TMP48]] to i64
// CHECK-NEXT:    [[TMP51:%.*]] = bitcast double [[TMP49]] to i64
// CHECK-NEXT:    [[TMP52:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP50]], i64 [[TMP51]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP53:%.*]] = extractvalue { i64, i1 } [[TMP52]], 0
// CHECK-NEXT:    [[TMP54:%.*]] = bitcast i64 [[TMP53]] to double
// CHECK-NEXT:    [[TMP55:%.*]] = extractvalue { i64, i1 } [[TMP52]], 1
// CHECK-NEXT:    br i1 [[TMP55]], label [[DX_ATOMIC_EXIT14:%.*]], label [[DX_ATOMIC_CONT15:%.*]]
// CHECK:       dx.atomic.cont15:
// CHECK-NEXT:    store double [[TMP54]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT14]]
// CHECK:       dx.atomic.exit14:
// CHECK-NEXT:    [[TMP56:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP58:%.*]] = bitcast double [[TMP56]] to i64
// CHECK-NEXT:    [[TMP59:%.*]] = bitcast double [[TMP57]] to i64
// CHECK-NEXT:    [[TMP60:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP58]], i64 [[TMP59]] release acquire, align 8
// CHECK-NEXT:    [[TMP61:%.*]] = extractvalue { i64, i1 } [[TMP60]], 0
// CHECK-NEXT:    [[TMP62:%.*]] = bitcast i64 [[TMP61]] to double
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i64, i1 } [[TMP60]], 1
// CHECK-NEXT:    br i1 [[TMP63]], label [[DX_ATOMIC_EXIT16:%.*]], label [[DX_ATOMIC_CONT17:%.*]]
// CHECK:       dx.atomic.cont17:
// CHECK-NEXT:    store double [[TMP62]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT16]]
// CHECK:       dx.atomic.exit16:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP64:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP65:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP66:%.*]] = bitcast double [[TMP64]] to i64
// CHECK-NEXT:    [[TMP67:%.*]] = bitcast double [[TMP65]] to i64
// CHECK-NEXT:    [[TMP68:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP66]], i64 [[TMP67]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i64, i1 } [[TMP68]], 0
// CHECK-NEXT:    [[TMP70:%.*]] = bitcast i64 [[TMP69]] to double
// CHECK-NEXT:    [[TMP71:%.*]] = extractvalue { i64, i1 } [[TMP68]], 1
// CHECK-NEXT:    br i1 [[TMP71]], label [[DX_ATOMIC_EXIT18:%.*]], label [[DX_ATOMIC_CONT19:%.*]]
// CHECK:       dx.atomic.cont19:
// CHECK-NEXT:    store double [[TMP70]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT18]]
// CHECK:       dx.atomic.exit18:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP72:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP73:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = bitcast double [[TMP72]] to i64
// CHECK-NEXT:    [[TMP75:%.*]] = bitcast double [[TMP73]] to i64
// CHECK-NEXT:    [[TMP76:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP74]], i64 [[TMP75]] seq_cst acquire, align 8
// CHECK-NEXT:    [[TMP77:%.*]] = extractvalue { i64, i1 } [[TMP76]], 0
// CHECK-NEXT:    [[TMP78:%.*]] = bitcast i64 [[TMP77]] to double
// CHECK-NEXT:    [[TMP79:%.*]] = extractvalue { i64, i1 } [[TMP76]], 1
// CHECK-NEXT:    br i1 [[TMP79]], label [[DX_ATOMIC_EXIT20:%.*]], label [[DX_ATOMIC_CONT21:%.*]]
// CHECK:       dx.atomic.cont21:
// CHECK-NEXT:    store double [[TMP78]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT20]]
// CHECK:       dx.atomic.exit20:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP80:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP81:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP82:%.*]] = bitcast double [[TMP80]] to i64
// CHECK-NEXT:    [[TMP83:%.*]] = bitcast double [[TMP81]] to i64
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP82]], i64 [[TMP83]] monotonic seq_cst, align 8
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = bitcast i64 [[TMP85]] to double
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHECK-NEXT:    br i1 [[TMP87]], label [[DX_ATOMIC_EXIT22:%.*]], label [[DX_ATOMIC_CONT23:%.*]]
// CHECK:       dx.atomic.cont23:
// CHECK-NEXT:    store double [[TMP86]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT22]]
// CHECK:       dx.atomic.exit22:
// CHECK-NEXT:    [[TMP88:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP90:%.*]] = bitcast double [[TMP88]] to i64
// CHECK-NEXT:    [[TMP91:%.*]] = bitcast double [[TMP89]] to i64
// CHECK-NEXT:    [[TMP92:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP90]], i64 [[TMP91]] acquire seq_cst, align 8
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i64, i1 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = bitcast i64 [[TMP93]] to double
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP92]], 1
// CHECK-NEXT:    br i1 [[TMP95]], label [[DX_ATOMIC_EXIT24:%.*]], label [[DX_ATOMIC_CONT25:%.*]]
// CHECK:       dx.atomic.cont25:
// CHECK-NEXT:    store double [[TMP94]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT24]]
// CHECK:       dx.atomic.exit24:
// CHECK-NEXT:    [[TMP96:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP97:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP98:%.*]] = bitcast double [[TMP96]] to i64
// CHECK-NEXT:    [[TMP99:%.*]] = bitcast double [[TMP97]] to i64
// CHECK-NEXT:    [[TMP100:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP98]], i64 [[TMP99]] release seq_cst, align 8
// CHECK-NEXT:    [[TMP101:%.*]] = extractvalue { i64, i1 } [[TMP100]], 0
// CHECK-NEXT:    [[TMP102:%.*]] = bitcast i64 [[TMP101]] to double
// CHECK-NEXT:    [[TMP103:%.*]] = extractvalue { i64, i1 } [[TMP100]], 1
// CHECK-NEXT:    br i1 [[TMP103]], label [[DX_ATOMIC_EXIT26:%.*]], label [[DX_ATOMIC_CONT27:%.*]]
// CHECK:       dx.atomic.cont27:
// CHECK-NEXT:    store double [[TMP102]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT26]]
// CHECK:       dx.atomic.exit26:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP106:%.*]] = bitcast double [[TMP104]] to i64
// CHECK-NEXT:    [[TMP107:%.*]] = bitcast double [[TMP105]] to i64
// CHECK-NEXT:    [[TMP108:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP106]], i64 [[TMP107]] acq_rel seq_cst, align 8
// CHECK-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP108]], 0
// CHECK-NEXT:    [[TMP110:%.*]] = bitcast i64 [[TMP109]] to double
// CHECK-NEXT:    [[TMP111:%.*]] = extractvalue { i64, i1 } [[TMP108]], 1
// CHECK-NEXT:    br i1 [[TMP111]], label [[DX_ATOMIC_EXIT28:%.*]], label [[DX_ATOMIC_CONT29:%.*]]
// CHECK:       dx.atomic.cont29:
// CHECK-NEXT:    store double [[TMP110]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT28]]
// CHECK:       dx.atomic.exit28:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP114:%.*]] = bitcast double [[TMP112]] to i64
// CHECK-NEXT:    [[TMP115:%.*]] = bitcast double [[TMP113]] to i64
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP114]], i64 [[TMP115]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHECK-NEXT:    [[TMP118:%.*]] = bitcast i64 [[TMP117]] to double
// CHECK-NEXT:    [[TMP119:%.*]] = extractvalue { i64, i1 } [[TMP116]], 1
// CHECK-NEXT:    br i1 [[TMP119]], label [[DX_ATOMIC_EXIT30:%.*]], label [[DX_ATOMIC_CONT31:%.*]]
// CHECK:       dx.atomic.cont31:
// CHECK-NEXT:    store double [[TMP118]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT30]]
// CHECK:       dx.atomic.exit30:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP120:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP121:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP120]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP122]] monotonic, align 8
// CHECK-NEXT:    [[TMP124:%.*]] = load double, ptr [[DX]], align 8
// CHECK-NEXT:    ret double [[TMP124]]
//
//
// SIMD-ONLY0-LABEL: @foo(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[CX:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[CE:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[CD:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCX:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCE:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCD:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[SX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[IX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[ID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[LX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[FX:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FE:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FD:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[DX:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DE:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DD:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON1]], ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON2]], ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON3]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON4:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON4]], ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON5:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON5]], ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON6:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON6]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON7:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON7]], ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON8:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON8]], ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON9:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON9]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON10:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON10]], ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON11:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON11]], ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON12:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON12]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON13:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON13]], ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON14:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON14]], ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON15:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON15]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON16:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON16]], ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON17:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON17]], ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON18:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON18]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON19:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON19]], ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON20:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON20]], ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON21:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON21]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON22:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON22]], ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON23:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON23]], ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON24:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON24]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON25:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON25]], ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON26:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON26]], ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON27:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON27]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON28:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON28]], ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON29:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON29]], ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON30:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON30]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON31:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON31]], ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON32:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON32]], ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON33:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON33]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON34:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON34]], ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON35:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON35]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = sext i8 [[TMP0]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV36:%.*]] = sext i8 [[TMP1]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV]], [[CONV36]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV38:%.*]] = sext i8 [[TMP2]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV39:%.*]] = sext i8 [[TMP3]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV38]], [[COND_TRUE]] ], [ [[CONV39]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    [[CONV40:%.*]] = trunc i32 [[COND]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV40]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV41:%.*]] = sext i8 [[TMP4]] to i32
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV42:%.*]] = sext i8 [[TMP5]] to i32
// SIMD-ONLY0-NEXT:    [[CMP43:%.*]] = icmp slt i32 [[CONV41]], [[CONV42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP43]], label [[COND_TRUE45:%.*]], label [[COND_FALSE47:%.*]]
// SIMD-ONLY0:       cond.true45:
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV46:%.*]] = sext i8 [[TMP6]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END49:%.*]]
// SIMD-ONLY0:       cond.false47:
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV48:%.*]] = sext i8 [[TMP7]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END49]]
// SIMD-ONLY0:       cond.end49:
// SIMD-ONLY0-NEXT:    [[COND50:%.*]] = phi i32 [ [[CONV46]], [[COND_TRUE45]] ], [ [[CONV48]], [[COND_FALSE47]] ]
// SIMD-ONLY0-NEXT:    [[CONV51:%.*]] = trunc i32 [[COND50]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV51]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV52:%.*]] = sext i8 [[TMP8]] to i32
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV53:%.*]] = sext i8 [[TMP9]] to i32
// SIMD-ONLY0-NEXT:    [[CMP54:%.*]] = icmp sgt i32 [[CONV52]], [[CONV53]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP54]], label [[COND_TRUE56:%.*]], label [[COND_FALSE58:%.*]]
// SIMD-ONLY0:       cond.true56:
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV57:%.*]] = sext i8 [[TMP10]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END60:%.*]]
// SIMD-ONLY0:       cond.false58:
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV59:%.*]] = sext i8 [[TMP11]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END60]]
// SIMD-ONLY0:       cond.end60:
// SIMD-ONLY0-NEXT:    [[COND61:%.*]] = phi i32 [ [[CONV57]], [[COND_TRUE56]] ], [ [[CONV59]], [[COND_FALSE58]] ]
// SIMD-ONLY0-NEXT:    [[CONV62:%.*]] = trunc i32 [[COND61]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV62]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV63:%.*]] = sext i8 [[TMP12]] to i32
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV64:%.*]] = sext i8 [[TMP13]] to i32
// SIMD-ONLY0-NEXT:    [[CMP65:%.*]] = icmp slt i32 [[CONV63]], [[CONV64]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP65]], label [[COND_TRUE67:%.*]], label [[COND_FALSE69:%.*]]
// SIMD-ONLY0:       cond.true67:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV68:%.*]] = sext i8 [[TMP14]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END71:%.*]]
// SIMD-ONLY0:       cond.false69:
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV70:%.*]] = sext i8 [[TMP15]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END71]]
// SIMD-ONLY0:       cond.end71:
// SIMD-ONLY0-NEXT:    [[COND72:%.*]] = phi i32 [ [[CONV68]], [[COND_TRUE67]] ], [ [[CONV70]], [[COND_FALSE69]] ]
// SIMD-ONLY0-NEXT:    [[CONV73:%.*]] = trunc i32 [[COND72]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV73]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV74:%.*]] = sext i8 [[TMP16]] to i32
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV75:%.*]] = sext i8 [[TMP17]] to i32
// SIMD-ONLY0-NEXT:    [[CMP76:%.*]] = icmp sgt i32 [[CONV74]], [[CONV75]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP76]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// SIMD-ONLY0:       if.then:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP18]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END]]
// SIMD-ONLY0:       if.end:
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV78:%.*]] = sext i8 [[TMP19]] to i32
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV79:%.*]] = sext i8 [[TMP20]] to i32
// SIMD-ONLY0-NEXT:    [[CMP80:%.*]] = icmp slt i32 [[CONV78]], [[CONV79]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP80]], label [[IF_THEN82:%.*]], label [[IF_END83:%.*]]
// SIMD-ONLY0:       if.then82:
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP21]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END83]]
// SIMD-ONLY0:       if.end83:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV84:%.*]] = sext i8 [[TMP22]] to i32
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV85:%.*]] = sext i8 [[TMP23]] to i32
// SIMD-ONLY0-NEXT:    [[CMP86:%.*]] = icmp sgt i32 [[CONV84]], [[CONV85]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP86]], label [[IF_THEN88:%.*]], label [[IF_END89:%.*]]
// SIMD-ONLY0:       if.then88:
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP24]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END89]]
// SIMD-ONLY0:       if.end89:
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV90:%.*]] = sext i8 [[TMP25]] to i32
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV91:%.*]] = sext i8 [[TMP26]] to i32
// SIMD-ONLY0-NEXT:    [[CMP92:%.*]] = icmp slt i32 [[CONV90]], [[CONV91]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP92]], label [[IF_THEN94:%.*]], label [[IF_END95:%.*]]
// SIMD-ONLY0:       if.then94:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP27]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END95]]
// SIMD-ONLY0:       if.end95:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV96:%.*]] = sext i8 [[TMP28]] to i32
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV97:%.*]] = sext i8 [[TMP29]] to i32
// SIMD-ONLY0-NEXT:    [[CMP98:%.*]] = icmp eq i32 [[CONV96]], [[CONV97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP98]], label [[COND_TRUE100:%.*]], label [[COND_FALSE102:%.*]]
// SIMD-ONLY0:       cond.true100:
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV101:%.*]] = sext i8 [[TMP30]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END104:%.*]]
// SIMD-ONLY0:       cond.false102:
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV103:%.*]] = sext i8 [[TMP31]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END104]]
// SIMD-ONLY0:       cond.end104:
// SIMD-ONLY0-NEXT:    [[COND105:%.*]] = phi i32 [ [[CONV101]], [[COND_TRUE100]] ], [ [[CONV103]], [[COND_FALSE102]] ]
// SIMD-ONLY0-NEXT:    [[CONV106:%.*]] = trunc i32 [[COND105]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV106]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV107:%.*]] = sext i8 [[TMP32]] to i32
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV108:%.*]] = sext i8 [[TMP33]] to i32
// SIMD-ONLY0-NEXT:    [[CMP109:%.*]] = icmp eq i32 [[CONV107]], [[CONV108]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP109]], label [[COND_TRUE111:%.*]], label [[COND_FALSE113:%.*]]
// SIMD-ONLY0:       cond.true111:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV112:%.*]] = sext i8 [[TMP34]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END115:%.*]]
// SIMD-ONLY0:       cond.false113:
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV114:%.*]] = sext i8 [[TMP35]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END115]]
// SIMD-ONLY0:       cond.end115:
// SIMD-ONLY0-NEXT:    [[COND116:%.*]] = phi i32 [ [[CONV112]], [[COND_TRUE111]] ], [ [[CONV114]], [[COND_FALSE113]] ]
// SIMD-ONLY0-NEXT:    [[CONV117:%.*]] = trunc i32 [[COND116]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV117]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV118:%.*]] = sext i8 [[TMP36]] to i32
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV119:%.*]] = sext i8 [[TMP37]] to i32
// SIMD-ONLY0-NEXT:    [[CMP120:%.*]] = icmp eq i32 [[CONV118]], [[CONV119]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP120]], label [[IF_THEN122:%.*]], label [[IF_END123:%.*]]
// SIMD-ONLY0:       if.then122:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP38]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END123]]
// SIMD-ONLY0:       if.end123:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV124:%.*]] = sext i8 [[TMP39]] to i32
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV125:%.*]] = sext i8 [[TMP40]] to i32
// SIMD-ONLY0-NEXT:    [[CMP126:%.*]] = icmp eq i32 [[CONV124]], [[CONV125]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP126]], label [[IF_THEN128:%.*]], label [[IF_END129:%.*]]
// SIMD-ONLY0:       if.then128:
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP41]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END129]]
// SIMD-ONLY0:       if.end129:
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV130:%.*]] = zext i8 [[TMP42]] to i32
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV131:%.*]] = zext i8 [[TMP43]] to i32
// SIMD-ONLY0-NEXT:    [[CMP132:%.*]] = icmp sgt i32 [[CONV130]], [[CONV131]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP132]], label [[COND_TRUE134:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true134:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV135:%.*]] = zext i8 [[TMP44]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END138:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV137:%.*]] = zext i8 [[TMP45]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END138]]
// SIMD-ONLY0:       cond.end138:
// SIMD-ONLY0-NEXT:    [[COND139:%.*]] = phi i32 [ [[CONV135]], [[COND_TRUE134]] ], [ [[CONV137]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    [[CONV140:%.*]] = trunc i32 [[COND139]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV140]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV141:%.*]] = zext i8 [[TMP46]] to i32
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV142:%.*]] = zext i8 [[TMP47]] to i32
// SIMD-ONLY0-NEXT:    [[CMP143:%.*]] = icmp slt i32 [[CONV141]], [[CONV142]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP143]], label [[COND_TRUE145:%.*]], label [[COND_FALSE147:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV146:%.*]] = zext i8 [[TMP48]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false147:
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = zext i8 [[TMP49]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i32 [ [[CONV146]], [[COND_TRUE145]] ], [ [[CONV148]], [[COND_FALSE147]] ]
// SIMD-ONLY0-NEXT:    [[CONV151:%.*]] = trunc i32 [[COND150]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV151]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV152:%.*]] = zext i8 [[TMP50]] to i32
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV153:%.*]] = zext i8 [[TMP51]] to i32
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp sgt i32 [[CONV152]], [[CONV153]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE156:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true156:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV157:%.*]] = zext i8 [[TMP52]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END160:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV159:%.*]] = zext i8 [[TMP53]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END160]]
// SIMD-ONLY0:       cond.end160:
// SIMD-ONLY0-NEXT:    [[COND161:%.*]] = phi i32 [ [[CONV157]], [[COND_TRUE156]] ], [ [[CONV159]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    [[CONV162:%.*]] = trunc i32 [[COND161]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV162]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV163:%.*]] = zext i8 [[TMP54]] to i32
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV164:%.*]] = zext i8 [[TMP55]] to i32
// SIMD-ONLY0-NEXT:    [[CMP165:%.*]] = icmp slt i32 [[CONV163]], [[CONV164]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP165]], label [[COND_TRUE167:%.*]], label [[COND_FALSE169:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV168:%.*]] = zext i8 [[TMP56]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END171:%.*]]
// SIMD-ONLY0:       cond.false169:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV170:%.*]] = zext i8 [[TMP57]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END171]]
// SIMD-ONLY0:       cond.end171:
// SIMD-ONLY0-NEXT:    [[COND172:%.*]] = phi i32 [ [[CONV168]], [[COND_TRUE167]] ], [ [[CONV170]], [[COND_FALSE169]] ]
// SIMD-ONLY0-NEXT:    [[CONV173:%.*]] = trunc i32 [[COND172]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV173]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV174:%.*]] = zext i8 [[TMP58]] to i32
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV175:%.*]] = zext i8 [[TMP59]] to i32
// SIMD-ONLY0-NEXT:    [[CMP176:%.*]] = icmp sgt i32 [[CONV174]], [[CONV175]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP176]], label [[IF_THEN178:%.*]], label [[IF_END179:%.*]]
// SIMD-ONLY0:       if.then178:
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP60]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END179]]
// SIMD-ONLY0:       if.end179:
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV180:%.*]] = zext i8 [[TMP61]] to i32
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV181:%.*]] = zext i8 [[TMP62]] to i32
// SIMD-ONLY0-NEXT:    [[CMP182:%.*]] = icmp slt i32 [[CONV180]], [[CONV181]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP182]], label [[IF_THEN184:%.*]], label [[IF_END185:%.*]]
// SIMD-ONLY0:       if.then184:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP63]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END185]]
// SIMD-ONLY0:       if.end185:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV186:%.*]] = zext i8 [[TMP64]] to i32
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV187:%.*]] = zext i8 [[TMP65]] to i32
// SIMD-ONLY0-NEXT:    [[CMP188:%.*]] = icmp sgt i32 [[CONV186]], [[CONV187]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP188]], label [[IF_THEN190:%.*]], label [[IF_END191:%.*]]
// SIMD-ONLY0:       if.then190:
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP66]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END191]]
// SIMD-ONLY0:       if.end191:
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV192:%.*]] = zext i8 [[TMP67]] to i32
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV193:%.*]] = zext i8 [[TMP68]] to i32
// SIMD-ONLY0-NEXT:    [[CMP194:%.*]] = icmp slt i32 [[CONV192]], [[CONV193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP194]], label [[IF_THEN196:%.*]], label [[IF_END197:%.*]]
// SIMD-ONLY0:       if.then196:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP69]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END197]]
// SIMD-ONLY0:       if.end197:
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV198:%.*]] = zext i8 [[TMP70]] to i32
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV199:%.*]] = zext i8 [[TMP71]] to i32
// SIMD-ONLY0-NEXT:    [[CMP200:%.*]] = icmp eq i32 [[CONV198]], [[CONV199]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP200]], label [[COND_TRUE202:%.*]], label [[COND_FALSE204:%.*]]
// SIMD-ONLY0:       cond.true202:
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV203:%.*]] = zext i8 [[TMP72]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END206:%.*]]
// SIMD-ONLY0:       cond.false204:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV205:%.*]] = zext i8 [[TMP73]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END206]]
// SIMD-ONLY0:       cond.end206:
// SIMD-ONLY0-NEXT:    [[COND207:%.*]] = phi i32 [ [[CONV203]], [[COND_TRUE202]] ], [ [[CONV205]], [[COND_FALSE204]] ]
// SIMD-ONLY0-NEXT:    [[CONV208:%.*]] = trunc i32 [[COND207]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV208]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV209:%.*]] = zext i8 [[TMP74]] to i32
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV210:%.*]] = zext i8 [[TMP75]] to i32
// SIMD-ONLY0-NEXT:    [[CMP211:%.*]] = icmp eq i32 [[CONV209]], [[CONV210]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP211]], label [[COND_TRUE213:%.*]], label [[COND_FALSE215:%.*]]
// SIMD-ONLY0:       cond.true213:
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV214:%.*]] = zext i8 [[TMP76]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END217:%.*]]
// SIMD-ONLY0:       cond.false215:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV216:%.*]] = zext i8 [[TMP77]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END217]]
// SIMD-ONLY0:       cond.end217:
// SIMD-ONLY0-NEXT:    [[COND218:%.*]] = phi i32 [ [[CONV214]], [[COND_TRUE213]] ], [ [[CONV216]], [[COND_FALSE215]] ]
// SIMD-ONLY0-NEXT:    [[CONV219:%.*]] = trunc i32 [[COND218]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV219]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV220:%.*]] = zext i8 [[TMP78]] to i32
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV221:%.*]] = zext i8 [[TMP79]] to i32
// SIMD-ONLY0-NEXT:    [[CMP222:%.*]] = icmp eq i32 [[CONV220]], [[CONV221]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP222]], label [[IF_THEN224:%.*]], label [[IF_END225:%.*]]
// SIMD-ONLY0:       if.then224:
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP80]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END225]]
// SIMD-ONLY0:       if.end225:
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV226:%.*]] = zext i8 [[TMP81]] to i32
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV227:%.*]] = zext i8 [[TMP82]] to i32
// SIMD-ONLY0-NEXT:    [[CMP228:%.*]] = icmp eq i32 [[CONV226]], [[CONV227]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP228]], label [[IF_THEN230:%.*]], label [[IF_END231:%.*]]
// SIMD-ONLY0:       if.then230:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP83]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END231]]
// SIMD-ONLY0:       if.end231:
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV232:%.*]] = sext i8 [[TMP84]] to i32
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV233:%.*]] = sext i8 [[TMP85]] to i32
// SIMD-ONLY0-NEXT:    [[CMP234:%.*]] = icmp sgt i32 [[CONV232]], [[CONV233]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP234]], label [[COND_TRUE236:%.*]], label [[COND_FALSE238:%.*]]
// SIMD-ONLY0:       cond.true236:
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV237:%.*]] = sext i8 [[TMP86]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END240:%.*]]
// SIMD-ONLY0:       cond.false238:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV239:%.*]] = sext i8 [[TMP87]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END240]]
// SIMD-ONLY0:       cond.end240:
// SIMD-ONLY0-NEXT:    [[COND241:%.*]] = phi i32 [ [[CONV237]], [[COND_TRUE236]] ], [ [[CONV239]], [[COND_FALSE238]] ]
// SIMD-ONLY0-NEXT:    [[CONV242:%.*]] = trunc i32 [[COND241]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV242]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV243:%.*]] = sext i8 [[TMP88]] to i32
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV244:%.*]] = sext i8 [[TMP89]] to i32
// SIMD-ONLY0-NEXT:    [[CMP245:%.*]] = icmp slt i32 [[CONV243]], [[CONV244]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP245]], label [[COND_TRUE247:%.*]], label [[COND_FALSE249:%.*]]
// SIMD-ONLY0:       cond.true247:
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV248:%.*]] = sext i8 [[TMP90]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END251:%.*]]
// SIMD-ONLY0:       cond.false249:
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV250:%.*]] = sext i8 [[TMP91]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END251]]
// SIMD-ONLY0:       cond.end251:
// SIMD-ONLY0-NEXT:    [[COND252:%.*]] = phi i32 [ [[CONV248]], [[COND_TRUE247]] ], [ [[CONV250]], [[COND_FALSE249]] ]
// SIMD-ONLY0-NEXT:    [[CONV253:%.*]] = trunc i32 [[COND252]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV253]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV254:%.*]] = sext i8 [[TMP92]] to i32
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV255:%.*]] = sext i8 [[TMP93]] to i32
// SIMD-ONLY0-NEXT:    [[CMP256:%.*]] = icmp sgt i32 [[CONV254]], [[CONV255]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP256]], label [[COND_TRUE258:%.*]], label [[COND_FALSE260:%.*]]
// SIMD-ONLY0:       cond.true258:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV259:%.*]] = sext i8 [[TMP94]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END262:%.*]]
// SIMD-ONLY0:       cond.false260:
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV261:%.*]] = sext i8 [[TMP95]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END262]]
// SIMD-ONLY0:       cond.end262:
// SIMD-ONLY0-NEXT:    [[COND263:%.*]] = phi i32 [ [[CONV259]], [[COND_TRUE258]] ], [ [[CONV261]], [[COND_FALSE260]] ]
// SIMD-ONLY0-NEXT:    [[CONV264:%.*]] = trunc i32 [[COND263]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV264]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV265:%.*]] = sext i8 [[TMP96]] to i32
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV266:%.*]] = sext i8 [[TMP97]] to i32
// SIMD-ONLY0-NEXT:    [[CMP267:%.*]] = icmp slt i32 [[CONV265]], [[CONV266]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP267]], label [[COND_TRUE269:%.*]], label [[COND_FALSE271:%.*]]
// SIMD-ONLY0:       cond.true269:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV270:%.*]] = sext i8 [[TMP98]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END273:%.*]]
// SIMD-ONLY0:       cond.false271:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV272:%.*]] = sext i8 [[TMP99]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END273]]
// SIMD-ONLY0:       cond.end273:
// SIMD-ONLY0-NEXT:    [[COND274:%.*]] = phi i32 [ [[CONV270]], [[COND_TRUE269]] ], [ [[CONV272]], [[COND_FALSE271]] ]
// SIMD-ONLY0-NEXT:    [[CONV275:%.*]] = trunc i32 [[COND274]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV275]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV276:%.*]] = sext i8 [[TMP100]] to i32
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV277:%.*]] = sext i8 [[TMP101]] to i32
// SIMD-ONLY0-NEXT:    [[CMP278:%.*]] = icmp sgt i32 [[CONV276]], [[CONV277]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP278]], label [[IF_THEN280:%.*]], label [[IF_END281:%.*]]
// SIMD-ONLY0:       if.then280:
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP102]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END281]]
// SIMD-ONLY0:       if.end281:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV282:%.*]] = sext i8 [[TMP103]] to i32
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV283:%.*]] = sext i8 [[TMP104]] to i32
// SIMD-ONLY0-NEXT:    [[CMP284:%.*]] = icmp slt i32 [[CONV282]], [[CONV283]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP284]], label [[IF_THEN286:%.*]], label [[IF_END287:%.*]]
// SIMD-ONLY0:       if.then286:
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP105]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END287]]
// SIMD-ONLY0:       if.end287:
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV288:%.*]] = sext i8 [[TMP106]] to i32
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV289:%.*]] = sext i8 [[TMP107]] to i32
// SIMD-ONLY0-NEXT:    [[CMP290:%.*]] = icmp sgt i32 [[CONV288]], [[CONV289]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP290]], label [[IF_THEN292:%.*]], label [[IF_END293:%.*]]
// SIMD-ONLY0:       if.then292:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP108]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END293]]
// SIMD-ONLY0:       if.end293:
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV294:%.*]] = sext i8 [[TMP109]] to i32
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV295:%.*]] = sext i8 [[TMP110]] to i32
// SIMD-ONLY0-NEXT:    [[CMP296:%.*]] = icmp slt i32 [[CONV294]], [[CONV295]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP296]], label [[IF_THEN298:%.*]], label [[IF_END299:%.*]]
// SIMD-ONLY0:       if.then298:
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP111]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END299]]
// SIMD-ONLY0:       if.end299:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV300:%.*]] = sext i8 [[TMP112]] to i32
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV301:%.*]] = sext i8 [[TMP113]] to i32
// SIMD-ONLY0-NEXT:    [[CMP302:%.*]] = icmp eq i32 [[CONV300]], [[CONV301]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP302]], label [[COND_TRUE304:%.*]], label [[COND_FALSE306:%.*]]
// SIMD-ONLY0:       cond.true304:
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV305:%.*]] = sext i8 [[TMP114]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END308:%.*]]
// SIMD-ONLY0:       cond.false306:
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV307:%.*]] = sext i8 [[TMP115]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END308]]
// SIMD-ONLY0:       cond.end308:
// SIMD-ONLY0-NEXT:    [[COND309:%.*]] = phi i32 [ [[CONV305]], [[COND_TRUE304]] ], [ [[CONV307]], [[COND_FALSE306]] ]
// SIMD-ONLY0-NEXT:    [[CONV310:%.*]] = trunc i32 [[COND309]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV310]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV311:%.*]] = sext i8 [[TMP116]] to i32
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV312:%.*]] = sext i8 [[TMP117]] to i32
// SIMD-ONLY0-NEXT:    [[CMP313:%.*]] = icmp eq i32 [[CONV311]], [[CONV312]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP313]], label [[COND_TRUE315:%.*]], label [[COND_FALSE317:%.*]]
// SIMD-ONLY0:       cond.true315:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV316:%.*]] = sext i8 [[TMP118]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END319:%.*]]
// SIMD-ONLY0:       cond.false317:
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV318:%.*]] = sext i8 [[TMP119]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END319]]
// SIMD-ONLY0:       cond.end319:
// SIMD-ONLY0-NEXT:    [[COND320:%.*]] = phi i32 [ [[CONV316]], [[COND_TRUE315]] ], [ [[CONV318]], [[COND_FALSE317]] ]
// SIMD-ONLY0-NEXT:    [[CONV321:%.*]] = trunc i32 [[COND320]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV321]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV322:%.*]] = sext i8 [[TMP120]] to i32
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV323:%.*]] = sext i8 [[TMP121]] to i32
// SIMD-ONLY0-NEXT:    [[CMP324:%.*]] = icmp eq i32 [[CONV322]], [[CONV323]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP324]], label [[IF_THEN326:%.*]], label [[IF_END327:%.*]]
// SIMD-ONLY0:       if.then326:
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP122]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END327]]
// SIMD-ONLY0:       if.end327:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV328:%.*]] = sext i8 [[TMP123]] to i32
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV329:%.*]] = sext i8 [[TMP124]] to i32
// SIMD-ONLY0-NEXT:    [[CMP330:%.*]] = icmp eq i32 [[CONV328]], [[CONV329]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP330]], label [[IF_THEN332:%.*]], label [[IF_END333:%.*]]
// SIMD-ONLY0:       if.then332:
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP125]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END333]]
// SIMD-ONLY0:       if.end333:
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV334:%.*]] = zext i8 [[TMP126]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV335:%.*]] = zext i8 [[TMP127]] to i32
// SIMD-ONLY0-NEXT:    [[CMP336:%.*]] = icmp sgt i32 [[CONV334]], [[CONV335]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP336]], label [[COND_TRUE338:%.*]], label [[COND_FALSE340:%.*]]
// SIMD-ONLY0:       cond.true338:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV339:%.*]] = zext i8 [[TMP128]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END342:%.*]]
// SIMD-ONLY0:       cond.false340:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV341:%.*]] = zext i8 [[TMP129]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END342]]
// SIMD-ONLY0:       cond.end342:
// SIMD-ONLY0-NEXT:    [[COND343:%.*]] = phi i32 [ [[CONV339]], [[COND_TRUE338]] ], [ [[CONV341]], [[COND_FALSE340]] ]
// SIMD-ONLY0-NEXT:    [[CONV344:%.*]] = trunc i32 [[COND343]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV344]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV345:%.*]] = zext i8 [[TMP130]] to i32
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV346:%.*]] = zext i8 [[TMP131]] to i32
// SIMD-ONLY0-NEXT:    [[CMP347:%.*]] = icmp slt i32 [[CONV345]], [[CONV346]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP347]], label [[COND_TRUE349:%.*]], label [[COND_FALSE351:%.*]]
// SIMD-ONLY0:       cond.true349:
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV350:%.*]] = zext i8 [[TMP132]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END353:%.*]]
// SIMD-ONLY0:       cond.false351:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV352:%.*]] = zext i8 [[TMP133]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END353]]
// SIMD-ONLY0:       cond.end353:
// SIMD-ONLY0-NEXT:    [[COND354:%.*]] = phi i32 [ [[CONV350]], [[COND_TRUE349]] ], [ [[CONV352]], [[COND_FALSE351]] ]
// SIMD-ONLY0-NEXT:    [[CONV355:%.*]] = trunc i32 [[COND354]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV355]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV356:%.*]] = zext i8 [[TMP134]] to i32
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV357:%.*]] = zext i8 [[TMP135]] to i32
// SIMD-ONLY0-NEXT:    [[CMP358:%.*]] = icmp sgt i32 [[CONV356]], [[CONV357]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP358]], label [[COND_TRUE360:%.*]], label [[COND_FALSE362:%.*]]
// SIMD-ONLY0:       cond.true360:
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV361:%.*]] = zext i8 [[TMP136]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END364:%.*]]
// SIMD-ONLY0:       cond.false362:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV363:%.*]] = zext i8 [[TMP137]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END364]]
// SIMD-ONLY0:       cond.end364:
// SIMD-ONLY0-NEXT:    [[COND365:%.*]] = phi i32 [ [[CONV361]], [[COND_TRUE360]] ], [ [[CONV363]], [[COND_FALSE362]] ]
// SIMD-ONLY0-NEXT:    [[CONV366:%.*]] = trunc i32 [[COND365]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV366]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV367:%.*]] = zext i8 [[TMP138]] to i32
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV368:%.*]] = zext i8 [[TMP139]] to i32
// SIMD-ONLY0-NEXT:    [[CMP369:%.*]] = icmp slt i32 [[CONV367]], [[CONV368]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP369]], label [[COND_TRUE371:%.*]], label [[COND_FALSE373:%.*]]
// SIMD-ONLY0:       cond.true371:
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV372:%.*]] = zext i8 [[TMP140]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END375:%.*]]
// SIMD-ONLY0:       cond.false373:
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV374:%.*]] = zext i8 [[TMP141]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END375]]
// SIMD-ONLY0:       cond.end375:
// SIMD-ONLY0-NEXT:    [[COND376:%.*]] = phi i32 [ [[CONV372]], [[COND_TRUE371]] ], [ [[CONV374]], [[COND_FALSE373]] ]
// SIMD-ONLY0-NEXT:    [[CONV377:%.*]] = trunc i32 [[COND376]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV377]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV378:%.*]] = zext i8 [[TMP142]] to i32
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV379:%.*]] = zext i8 [[TMP143]] to i32
// SIMD-ONLY0-NEXT:    [[CMP380:%.*]] = icmp sgt i32 [[CONV378]], [[CONV379]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP380]], label [[IF_THEN382:%.*]], label [[IF_END383:%.*]]
// SIMD-ONLY0:       if.then382:
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP144]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END383]]
// SIMD-ONLY0:       if.end383:
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV384:%.*]] = zext i8 [[TMP145]] to i32
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV385:%.*]] = zext i8 [[TMP146]] to i32
// SIMD-ONLY0-NEXT:    [[CMP386:%.*]] = icmp slt i32 [[CONV384]], [[CONV385]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP386]], label [[IF_THEN388:%.*]], label [[IF_END389:%.*]]
// SIMD-ONLY0:       if.then388:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP147]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END389]]
// SIMD-ONLY0:       if.end389:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV390:%.*]] = zext i8 [[TMP148]] to i32
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV391:%.*]] = zext i8 [[TMP149]] to i32
// SIMD-ONLY0-NEXT:    [[CMP392:%.*]] = icmp sgt i32 [[CONV390]], [[CONV391]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP392]], label [[IF_THEN394:%.*]], label [[IF_END395:%.*]]
// SIMD-ONLY0:       if.then394:
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP150]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END395]]
// SIMD-ONLY0:       if.end395:
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV396:%.*]] = zext i8 [[TMP151]] to i32
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV397:%.*]] = zext i8 [[TMP152]] to i32
// SIMD-ONLY0-NEXT:    [[CMP398:%.*]] = icmp slt i32 [[CONV396]], [[CONV397]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP398]], label [[IF_THEN400:%.*]], label [[IF_END401:%.*]]
// SIMD-ONLY0:       if.then400:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP153]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END401]]
// SIMD-ONLY0:       if.end401:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV402:%.*]] = zext i8 [[TMP154]] to i32
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV403:%.*]] = zext i8 [[TMP155]] to i32
// SIMD-ONLY0-NEXT:    [[CMP404:%.*]] = icmp eq i32 [[CONV402]], [[CONV403]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP404]], label [[COND_TRUE406:%.*]], label [[COND_FALSE408:%.*]]
// SIMD-ONLY0:       cond.true406:
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV407:%.*]] = zext i8 [[TMP156]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END410:%.*]]
// SIMD-ONLY0:       cond.false408:
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV409:%.*]] = zext i8 [[TMP157]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END410]]
// SIMD-ONLY0:       cond.end410:
// SIMD-ONLY0-NEXT:    [[COND411:%.*]] = phi i32 [ [[CONV407]], [[COND_TRUE406]] ], [ [[CONV409]], [[COND_FALSE408]] ]
// SIMD-ONLY0-NEXT:    [[CONV412:%.*]] = trunc i32 [[COND411]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV412]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV413:%.*]] = zext i8 [[TMP158]] to i32
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV414:%.*]] = zext i8 [[TMP159]] to i32
// SIMD-ONLY0-NEXT:    [[CMP415:%.*]] = icmp eq i32 [[CONV413]], [[CONV414]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP415]], label [[COND_TRUE417:%.*]], label [[COND_FALSE419:%.*]]
// SIMD-ONLY0:       cond.true417:
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV418:%.*]] = zext i8 [[TMP160]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END421:%.*]]
// SIMD-ONLY0:       cond.false419:
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV420:%.*]] = zext i8 [[TMP161]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END421]]
// SIMD-ONLY0:       cond.end421:
// SIMD-ONLY0-NEXT:    [[COND422:%.*]] = phi i32 [ [[CONV418]], [[COND_TRUE417]] ], [ [[CONV420]], [[COND_FALSE419]] ]
// SIMD-ONLY0-NEXT:    [[CONV423:%.*]] = trunc i32 [[COND422]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV423]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV424:%.*]] = zext i8 [[TMP162]] to i32
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV425:%.*]] = zext i8 [[TMP163]] to i32
// SIMD-ONLY0-NEXT:    [[CMP426:%.*]] = icmp eq i32 [[CONV424]], [[CONV425]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP426]], label [[IF_THEN428:%.*]], label [[IF_END429:%.*]]
// SIMD-ONLY0:       if.then428:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP164]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END429]]
// SIMD-ONLY0:       if.end429:
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV430:%.*]] = zext i8 [[TMP165]] to i32
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV431:%.*]] = zext i8 [[TMP166]] to i32
// SIMD-ONLY0-NEXT:    [[CMP432:%.*]] = icmp eq i32 [[CONV430]], [[CONV431]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP432]], label [[IF_THEN434:%.*]], label [[IF_END435:%.*]]
// SIMD-ONLY0:       if.then434:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP167]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END435]]
// SIMD-ONLY0:       if.end435:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV436:%.*]] = sext i8 [[TMP168]] to i32
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV437:%.*]] = sext i8 [[TMP169]] to i32
// SIMD-ONLY0-NEXT:    [[CMP438:%.*]] = icmp sgt i32 [[CONV436]], [[CONV437]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP438]], label [[COND_TRUE440:%.*]], label [[COND_FALSE442:%.*]]
// SIMD-ONLY0:       cond.true440:
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV441:%.*]] = sext i8 [[TMP170]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END444:%.*]]
// SIMD-ONLY0:       cond.false442:
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV443:%.*]] = sext i8 [[TMP171]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END444]]
// SIMD-ONLY0:       cond.end444:
// SIMD-ONLY0-NEXT:    [[COND445:%.*]] = phi i32 [ [[CONV441]], [[COND_TRUE440]] ], [ [[CONV443]], [[COND_FALSE442]] ]
// SIMD-ONLY0-NEXT:    [[CONV446:%.*]] = trunc i32 [[COND445]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV446]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV447:%.*]] = sext i8 [[TMP172]] to i32
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV448:%.*]] = sext i8 [[TMP173]] to i32
// SIMD-ONLY0-NEXT:    [[CMP449:%.*]] = icmp slt i32 [[CONV447]], [[CONV448]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP449]], label [[COND_TRUE451:%.*]], label [[COND_FALSE453:%.*]]
// SIMD-ONLY0:       cond.true451:
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV452:%.*]] = sext i8 [[TMP174]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END455:%.*]]
// SIMD-ONLY0:       cond.false453:
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV454:%.*]] = sext i8 [[TMP175]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END455]]
// SIMD-ONLY0:       cond.end455:
// SIMD-ONLY0-NEXT:    [[COND456:%.*]] = phi i32 [ [[CONV452]], [[COND_TRUE451]] ], [ [[CONV454]], [[COND_FALSE453]] ]
// SIMD-ONLY0-NEXT:    [[CONV457:%.*]] = trunc i32 [[COND456]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV457]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV458:%.*]] = sext i8 [[TMP176]] to i32
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV459:%.*]] = sext i8 [[TMP177]] to i32
// SIMD-ONLY0-NEXT:    [[CMP460:%.*]] = icmp sgt i32 [[CONV458]], [[CONV459]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP460]], label [[COND_TRUE462:%.*]], label [[COND_FALSE464:%.*]]
// SIMD-ONLY0:       cond.true462:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV463:%.*]] = sext i8 [[TMP178]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END466:%.*]]
// SIMD-ONLY0:       cond.false464:
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV465:%.*]] = sext i8 [[TMP179]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END466]]
// SIMD-ONLY0:       cond.end466:
// SIMD-ONLY0-NEXT:    [[COND467:%.*]] = phi i32 [ [[CONV463]], [[COND_TRUE462]] ], [ [[CONV465]], [[COND_FALSE464]] ]
// SIMD-ONLY0-NEXT:    [[CONV468:%.*]] = trunc i32 [[COND467]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV468]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV469:%.*]] = sext i8 [[TMP180]] to i32
// SIMD-ONLY0-NEXT:    [[TMP181:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV470:%.*]] = sext i8 [[TMP181]] to i32
// SIMD-ONLY0-NEXT:    [[CMP471:%.*]] = icmp slt i32 [[CONV469]], [[CONV470]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP471]], label [[COND_TRUE473:%.*]], label [[COND_FALSE475:%.*]]
// SIMD-ONLY0:       cond.true473:
// SIMD-ONLY0-NEXT:    [[TMP182:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV474:%.*]] = sext i8 [[TMP182]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END477:%.*]]
// SIMD-ONLY0:       cond.false475:
// SIMD-ONLY0-NEXT:    [[TMP183:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV476:%.*]] = sext i8 [[TMP183]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END477]]
// SIMD-ONLY0:       cond.end477:
// SIMD-ONLY0-NEXT:    [[COND478:%.*]] = phi i32 [ [[CONV474]], [[COND_TRUE473]] ], [ [[CONV476]], [[COND_FALSE475]] ]
// SIMD-ONLY0-NEXT:    [[CONV479:%.*]] = trunc i32 [[COND478]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV479]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP184:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV480:%.*]] = sext i8 [[TMP184]] to i32
// SIMD-ONLY0-NEXT:    [[TMP185:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV481:%.*]] = sext i8 [[TMP185]] to i32
// SIMD-ONLY0-NEXT:    [[CMP482:%.*]] = icmp sgt i32 [[CONV480]], [[CONV481]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP482]], label [[IF_THEN484:%.*]], label [[IF_END485:%.*]]
// SIMD-ONLY0:       if.then484:
// SIMD-ONLY0-NEXT:    [[TMP186:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP186]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END485]]
// SIMD-ONLY0:       if.end485:
// SIMD-ONLY0-NEXT:    [[TMP187:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV486:%.*]] = sext i8 [[TMP187]] to i32
// SIMD-ONLY0-NEXT:    [[TMP188:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV487:%.*]] = sext i8 [[TMP188]] to i32
// SIMD-ONLY0-NEXT:    [[CMP488:%.*]] = icmp slt i32 [[CONV486]], [[CONV487]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP488]], label [[IF_THEN490:%.*]], label [[IF_END491:%.*]]
// SIMD-ONLY0:       if.then490:
// SIMD-ONLY0-NEXT:    [[TMP189:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP189]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END491]]
// SIMD-ONLY0:       if.end491:
// SIMD-ONLY0-NEXT:    [[TMP190:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV492:%.*]] = sext i8 [[TMP190]] to i32
// SIMD-ONLY0-NEXT:    [[TMP191:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV493:%.*]] = sext i8 [[TMP191]] to i32
// SIMD-ONLY0-NEXT:    [[CMP494:%.*]] = icmp sgt i32 [[CONV492]], [[CONV493]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP494]], label [[IF_THEN496:%.*]], label [[IF_END497:%.*]]
// SIMD-ONLY0:       if.then496:
// SIMD-ONLY0-NEXT:    [[TMP192:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP192]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END497]]
// SIMD-ONLY0:       if.end497:
// SIMD-ONLY0-NEXT:    [[TMP193:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV498:%.*]] = sext i8 [[TMP193]] to i32
// SIMD-ONLY0-NEXT:    [[TMP194:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV499:%.*]] = sext i8 [[TMP194]] to i32
// SIMD-ONLY0-NEXT:    [[CMP500:%.*]] = icmp slt i32 [[CONV498]], [[CONV499]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP500]], label [[IF_THEN502:%.*]], label [[IF_END503:%.*]]
// SIMD-ONLY0:       if.then502:
// SIMD-ONLY0-NEXT:    [[TMP195:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP195]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END503]]
// SIMD-ONLY0:       if.end503:
// SIMD-ONLY0-NEXT:    [[TMP196:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV504:%.*]] = sext i8 [[TMP196]] to i32
// SIMD-ONLY0-NEXT:    [[TMP197:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV505:%.*]] = sext i8 [[TMP197]] to i32
// SIMD-ONLY0-NEXT:    [[CMP506:%.*]] = icmp eq i32 [[CONV504]], [[CONV505]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP506]], label [[COND_TRUE508:%.*]], label [[COND_FALSE510:%.*]]
// SIMD-ONLY0:       cond.true508:
// SIMD-ONLY0-NEXT:    [[TMP198:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV509:%.*]] = sext i8 [[TMP198]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END512:%.*]]
// SIMD-ONLY0:       cond.false510:
// SIMD-ONLY0-NEXT:    [[TMP199:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV511:%.*]] = sext i8 [[TMP199]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END512]]
// SIMD-ONLY0:       cond.end512:
// SIMD-ONLY0-NEXT:    [[COND513:%.*]] = phi i32 [ [[CONV509]], [[COND_TRUE508]] ], [ [[CONV511]], [[COND_FALSE510]] ]
// SIMD-ONLY0-NEXT:    [[CONV514:%.*]] = trunc i32 [[COND513]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV514]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP200:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV515:%.*]] = sext i8 [[TMP200]] to i32
// SIMD-ONLY0-NEXT:    [[TMP201:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV516:%.*]] = sext i8 [[TMP201]] to i32
// SIMD-ONLY0-NEXT:    [[CMP517:%.*]] = icmp eq i32 [[CONV515]], [[CONV516]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP517]], label [[COND_TRUE519:%.*]], label [[COND_FALSE521:%.*]]
// SIMD-ONLY0:       cond.true519:
// SIMD-ONLY0-NEXT:    [[TMP202:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV520:%.*]] = sext i8 [[TMP202]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END523:%.*]]
// SIMD-ONLY0:       cond.false521:
// SIMD-ONLY0-NEXT:    [[TMP203:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV522:%.*]] = sext i8 [[TMP203]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END523]]
// SIMD-ONLY0:       cond.end523:
// SIMD-ONLY0-NEXT:    [[COND524:%.*]] = phi i32 [ [[CONV520]], [[COND_TRUE519]] ], [ [[CONV522]], [[COND_FALSE521]] ]
// SIMD-ONLY0-NEXT:    [[CONV525:%.*]] = trunc i32 [[COND524]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV525]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP204:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV526:%.*]] = sext i8 [[TMP204]] to i32
// SIMD-ONLY0-NEXT:    [[TMP205:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV527:%.*]] = sext i8 [[TMP205]] to i32
// SIMD-ONLY0-NEXT:    [[CMP528:%.*]] = icmp eq i32 [[CONV526]], [[CONV527]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP528]], label [[IF_THEN530:%.*]], label [[IF_END531:%.*]]
// SIMD-ONLY0:       if.then530:
// SIMD-ONLY0-NEXT:    [[TMP206:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP206]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END531]]
// SIMD-ONLY0:       if.end531:
// SIMD-ONLY0-NEXT:    [[TMP207:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV532:%.*]] = sext i8 [[TMP207]] to i32
// SIMD-ONLY0-NEXT:    [[TMP208:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV533:%.*]] = sext i8 [[TMP208]] to i32
// SIMD-ONLY0-NEXT:    [[CMP534:%.*]] = icmp eq i32 [[CONV532]], [[CONV533]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP534]], label [[IF_THEN536:%.*]], label [[IF_END537:%.*]]
// SIMD-ONLY0:       if.then536:
// SIMD-ONLY0-NEXT:    [[TMP209:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP209]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END537]]
// SIMD-ONLY0:       if.end537:
// SIMD-ONLY0-NEXT:    [[TMP210:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV538:%.*]] = zext i8 [[TMP210]] to i32
// SIMD-ONLY0-NEXT:    [[TMP211:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV539:%.*]] = zext i8 [[TMP211]] to i32
// SIMD-ONLY0-NEXT:    [[CMP540:%.*]] = icmp sgt i32 [[CONV538]], [[CONV539]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP540]], label [[COND_TRUE542:%.*]], label [[COND_FALSE544:%.*]]
// SIMD-ONLY0:       cond.true542:
// SIMD-ONLY0-NEXT:    [[TMP212:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV543:%.*]] = zext i8 [[TMP212]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END546:%.*]]
// SIMD-ONLY0:       cond.false544:
// SIMD-ONLY0-NEXT:    [[TMP213:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV545:%.*]] = zext i8 [[TMP213]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END546]]
// SIMD-ONLY0:       cond.end546:
// SIMD-ONLY0-NEXT:    [[COND547:%.*]] = phi i32 [ [[CONV543]], [[COND_TRUE542]] ], [ [[CONV545]], [[COND_FALSE544]] ]
// SIMD-ONLY0-NEXT:    [[CONV548:%.*]] = trunc i32 [[COND547]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV548]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP214:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV549:%.*]] = zext i8 [[TMP214]] to i32
// SIMD-ONLY0-NEXT:    [[TMP215:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV550:%.*]] = zext i8 [[TMP215]] to i32
// SIMD-ONLY0-NEXT:    [[CMP551:%.*]] = icmp slt i32 [[CONV549]], [[CONV550]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP551]], label [[COND_TRUE553:%.*]], label [[COND_FALSE555:%.*]]
// SIMD-ONLY0:       cond.true553:
// SIMD-ONLY0-NEXT:    [[TMP216:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV554:%.*]] = zext i8 [[TMP216]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END557:%.*]]
// SIMD-ONLY0:       cond.false555:
// SIMD-ONLY0-NEXT:    [[TMP217:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV556:%.*]] = zext i8 [[TMP217]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END557]]
// SIMD-ONLY0:       cond.end557:
// SIMD-ONLY0-NEXT:    [[COND558:%.*]] = phi i32 [ [[CONV554]], [[COND_TRUE553]] ], [ [[CONV556]], [[COND_FALSE555]] ]
// SIMD-ONLY0-NEXT:    [[CONV559:%.*]] = trunc i32 [[COND558]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV559]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP218:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV560:%.*]] = zext i8 [[TMP218]] to i32
// SIMD-ONLY0-NEXT:    [[TMP219:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV561:%.*]] = zext i8 [[TMP219]] to i32
// SIMD-ONLY0-NEXT:    [[CMP562:%.*]] = icmp sgt i32 [[CONV560]], [[CONV561]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP562]], label [[COND_TRUE564:%.*]], label [[COND_FALSE566:%.*]]
// SIMD-ONLY0:       cond.true564:
// SIMD-ONLY0-NEXT:    [[TMP220:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV565:%.*]] = zext i8 [[TMP220]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END568:%.*]]
// SIMD-ONLY0:       cond.false566:
// SIMD-ONLY0-NEXT:    [[TMP221:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV567:%.*]] = zext i8 [[TMP221]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END568]]
// SIMD-ONLY0:       cond.end568:
// SIMD-ONLY0-NEXT:    [[COND569:%.*]] = phi i32 [ [[CONV565]], [[COND_TRUE564]] ], [ [[CONV567]], [[COND_FALSE566]] ]
// SIMD-ONLY0-NEXT:    [[CONV570:%.*]] = trunc i32 [[COND569]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV570]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP222:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV571:%.*]] = zext i8 [[TMP222]] to i32
// SIMD-ONLY0-NEXT:    [[TMP223:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV572:%.*]] = zext i8 [[TMP223]] to i32
// SIMD-ONLY0-NEXT:    [[CMP573:%.*]] = icmp slt i32 [[CONV571]], [[CONV572]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP573]], label [[COND_TRUE575:%.*]], label [[COND_FALSE577:%.*]]
// SIMD-ONLY0:       cond.true575:
// SIMD-ONLY0-NEXT:    [[TMP224:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV576:%.*]] = zext i8 [[TMP224]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END579:%.*]]
// SIMD-ONLY0:       cond.false577:
// SIMD-ONLY0-NEXT:    [[TMP225:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV578:%.*]] = zext i8 [[TMP225]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END579]]
// SIMD-ONLY0:       cond.end579:
// SIMD-ONLY0-NEXT:    [[COND580:%.*]] = phi i32 [ [[CONV576]], [[COND_TRUE575]] ], [ [[CONV578]], [[COND_FALSE577]] ]
// SIMD-ONLY0-NEXT:    [[CONV581:%.*]] = trunc i32 [[COND580]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV581]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP226:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV582:%.*]] = zext i8 [[TMP226]] to i32
// SIMD-ONLY0-NEXT:    [[TMP227:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV583:%.*]] = zext i8 [[TMP227]] to i32
// SIMD-ONLY0-NEXT:    [[CMP584:%.*]] = icmp sgt i32 [[CONV582]], [[CONV583]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP584]], label [[IF_THEN586:%.*]], label [[IF_END587:%.*]]
// SIMD-ONLY0:       if.then586:
// SIMD-ONLY0-NEXT:    [[TMP228:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP228]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END587]]
// SIMD-ONLY0:       if.end587:
// SIMD-ONLY0-NEXT:    [[TMP229:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV588:%.*]] = zext i8 [[TMP229]] to i32
// SIMD-ONLY0-NEXT:    [[TMP230:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV589:%.*]] = zext i8 [[TMP230]] to i32
// SIMD-ONLY0-NEXT:    [[CMP590:%.*]] = icmp slt i32 [[CONV588]], [[CONV589]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP590]], label [[IF_THEN592:%.*]], label [[IF_END593:%.*]]
// SIMD-ONLY0:       if.then592:
// SIMD-ONLY0-NEXT:    [[TMP231:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP231]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END593]]
// SIMD-ONLY0:       if.end593:
// SIMD-ONLY0-NEXT:    [[TMP232:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV594:%.*]] = zext i8 [[TMP232]] to i32
// SIMD-ONLY0-NEXT:    [[TMP233:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV595:%.*]] = zext i8 [[TMP233]] to i32
// SIMD-ONLY0-NEXT:    [[CMP596:%.*]] = icmp sgt i32 [[CONV594]], [[CONV595]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP596]], label [[IF_THEN598:%.*]], label [[IF_END599:%.*]]
// SIMD-ONLY0:       if.then598:
// SIMD-ONLY0-NEXT:    [[TMP234:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP234]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END599]]
// SIMD-ONLY0:       if.end599:
// SIMD-ONLY0-NEXT:    [[TMP235:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV600:%.*]] = zext i8 [[TMP235]] to i32
// SIMD-ONLY0-NEXT:    [[TMP236:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV601:%.*]] = zext i8 [[TMP236]] to i32
// SIMD-ONLY0-NEXT:    [[CMP602:%.*]] = icmp slt i32 [[CONV600]], [[CONV601]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP602]], label [[IF_THEN604:%.*]], label [[IF_END605:%.*]]
// SIMD-ONLY0:       if.then604:
// SIMD-ONLY0-NEXT:    [[TMP237:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP237]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END605]]
// SIMD-ONLY0:       if.end605:
// SIMD-ONLY0-NEXT:    [[TMP238:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV606:%.*]] = zext i8 [[TMP238]] to i32
// SIMD-ONLY0-NEXT:    [[TMP239:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV607:%.*]] = zext i8 [[TMP239]] to i32
// SIMD-ONLY0-NEXT:    [[CMP608:%.*]] = icmp eq i32 [[CONV606]], [[CONV607]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP608]], label [[COND_TRUE610:%.*]], label [[COND_FALSE612:%.*]]
// SIMD-ONLY0:       cond.true610:
// SIMD-ONLY0-NEXT:    [[TMP240:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV611:%.*]] = zext i8 [[TMP240]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END614:%.*]]
// SIMD-ONLY0:       cond.false612:
// SIMD-ONLY0-NEXT:    [[TMP241:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV613:%.*]] = zext i8 [[TMP241]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END614]]
// SIMD-ONLY0:       cond.end614:
// SIMD-ONLY0-NEXT:    [[COND615:%.*]] = phi i32 [ [[CONV611]], [[COND_TRUE610]] ], [ [[CONV613]], [[COND_FALSE612]] ]
// SIMD-ONLY0-NEXT:    [[CONV616:%.*]] = trunc i32 [[COND615]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV616]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP242:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV617:%.*]] = zext i8 [[TMP242]] to i32
// SIMD-ONLY0-NEXT:    [[TMP243:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV618:%.*]] = zext i8 [[TMP243]] to i32
// SIMD-ONLY0-NEXT:    [[CMP619:%.*]] = icmp eq i32 [[CONV617]], [[CONV618]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP619]], label [[COND_TRUE621:%.*]], label [[COND_FALSE623:%.*]]
// SIMD-ONLY0:       cond.true621:
// SIMD-ONLY0-NEXT:    [[TMP244:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV622:%.*]] = zext i8 [[TMP244]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END625:%.*]]
// SIMD-ONLY0:       cond.false623:
// SIMD-ONLY0-NEXT:    [[TMP245:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV624:%.*]] = zext i8 [[TMP245]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END625]]
// SIMD-ONLY0:       cond.end625:
// SIMD-ONLY0-NEXT:    [[COND626:%.*]] = phi i32 [ [[CONV622]], [[COND_TRUE621]] ], [ [[CONV624]], [[COND_FALSE623]] ]
// SIMD-ONLY0-NEXT:    [[CONV627:%.*]] = trunc i32 [[COND626]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV627]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP246:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV628:%.*]] = zext i8 [[TMP246]] to i32
// SIMD-ONLY0-NEXT:    [[TMP247:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV629:%.*]] = zext i8 [[TMP247]] to i32
// SIMD-ONLY0-NEXT:    [[CMP630:%.*]] = icmp eq i32 [[CONV628]], [[CONV629]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP630]], label [[IF_THEN632:%.*]], label [[IF_END633:%.*]]
// SIMD-ONLY0:       if.then632:
// SIMD-ONLY0-NEXT:    [[TMP248:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP248]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END633]]
// SIMD-ONLY0:       if.end633:
// SIMD-ONLY0-NEXT:    [[TMP249:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV634:%.*]] = zext i8 [[TMP249]] to i32
// SIMD-ONLY0-NEXT:    [[TMP250:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV635:%.*]] = zext i8 [[TMP250]] to i32
// SIMD-ONLY0-NEXT:    [[CMP636:%.*]] = icmp eq i32 [[CONV634]], [[CONV635]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP636]], label [[IF_THEN638:%.*]], label [[IF_END639:%.*]]
// SIMD-ONLY0:       if.then638:
// SIMD-ONLY0-NEXT:    [[TMP251:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP251]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END639]]
// SIMD-ONLY0:       if.end639:
// SIMD-ONLY0-NEXT:    [[TMP252:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV640:%.*]] = sext i8 [[TMP252]] to i32
// SIMD-ONLY0-NEXT:    [[TMP253:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV641:%.*]] = sext i8 [[TMP253]] to i32
// SIMD-ONLY0-NEXT:    [[CMP642:%.*]] = icmp sgt i32 [[CONV640]], [[CONV641]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP642]], label [[COND_TRUE644:%.*]], label [[COND_FALSE646:%.*]]
// SIMD-ONLY0:       cond.true644:
// SIMD-ONLY0-NEXT:    [[TMP254:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV645:%.*]] = sext i8 [[TMP254]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END648:%.*]]
// SIMD-ONLY0:       cond.false646:
// SIMD-ONLY0-NEXT:    [[TMP255:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV647:%.*]] = sext i8 [[TMP255]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END648]]
// SIMD-ONLY0:       cond.end648:
// SIMD-ONLY0-NEXT:    [[COND649:%.*]] = phi i32 [ [[CONV645]], [[COND_TRUE644]] ], [ [[CONV647]], [[COND_FALSE646]] ]
// SIMD-ONLY0-NEXT:    [[CONV650:%.*]] = trunc i32 [[COND649]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV650]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP256:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV651:%.*]] = sext i8 [[TMP256]] to i32
// SIMD-ONLY0-NEXT:    [[TMP257:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV652:%.*]] = sext i8 [[TMP257]] to i32
// SIMD-ONLY0-NEXT:    [[CMP653:%.*]] = icmp slt i32 [[CONV651]], [[CONV652]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP653]], label [[COND_TRUE655:%.*]], label [[COND_FALSE657:%.*]]
// SIMD-ONLY0:       cond.true655:
// SIMD-ONLY0-NEXT:    [[TMP258:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV656:%.*]] = sext i8 [[TMP258]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END659:%.*]]
// SIMD-ONLY0:       cond.false657:
// SIMD-ONLY0-NEXT:    [[TMP259:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV658:%.*]] = sext i8 [[TMP259]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END659]]
// SIMD-ONLY0:       cond.end659:
// SIMD-ONLY0-NEXT:    [[COND660:%.*]] = phi i32 [ [[CONV656]], [[COND_TRUE655]] ], [ [[CONV658]], [[COND_FALSE657]] ]
// SIMD-ONLY0-NEXT:    [[CONV661:%.*]] = trunc i32 [[COND660]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV661]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP260:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV662:%.*]] = sext i8 [[TMP260]] to i32
// SIMD-ONLY0-NEXT:    [[TMP261:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV663:%.*]] = sext i8 [[TMP261]] to i32
// SIMD-ONLY0-NEXT:    [[CMP664:%.*]] = icmp sgt i32 [[CONV662]], [[CONV663]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP664]], label [[COND_TRUE666:%.*]], label [[COND_FALSE668:%.*]]
// SIMD-ONLY0:       cond.true666:
// SIMD-ONLY0-NEXT:    [[TMP262:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV667:%.*]] = sext i8 [[TMP262]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END670:%.*]]
// SIMD-ONLY0:       cond.false668:
// SIMD-ONLY0-NEXT:    [[TMP263:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV669:%.*]] = sext i8 [[TMP263]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END670]]
// SIMD-ONLY0:       cond.end670:
// SIMD-ONLY0-NEXT:    [[COND671:%.*]] = phi i32 [ [[CONV667]], [[COND_TRUE666]] ], [ [[CONV669]], [[COND_FALSE668]] ]
// SIMD-ONLY0-NEXT:    [[CONV672:%.*]] = trunc i32 [[COND671]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV672]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP264:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV673:%.*]] = sext i8 [[TMP264]] to i32
// SIMD-ONLY0-NEXT:    [[TMP265:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV674:%.*]] = sext i8 [[TMP265]] to i32
// SIMD-ONLY0-NEXT:    [[CMP675:%.*]] = icmp slt i32 [[CONV673]], [[CONV674]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP675]], label [[COND_TRUE677:%.*]], label [[COND_FALSE679:%.*]]
// SIMD-ONLY0:       cond.true677:
// SIMD-ONLY0-NEXT:    [[TMP266:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV678:%.*]] = sext i8 [[TMP266]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END681:%.*]]
// SIMD-ONLY0:       cond.false679:
// SIMD-ONLY0-NEXT:    [[TMP267:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV680:%.*]] = sext i8 [[TMP267]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END681]]
// SIMD-ONLY0:       cond.end681:
// SIMD-ONLY0-NEXT:    [[COND682:%.*]] = phi i32 [ [[CONV678]], [[COND_TRUE677]] ], [ [[CONV680]], [[COND_FALSE679]] ]
// SIMD-ONLY0-NEXT:    [[CONV683:%.*]] = trunc i32 [[COND682]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV683]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP268:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV684:%.*]] = sext i8 [[TMP268]] to i32
// SIMD-ONLY0-NEXT:    [[TMP269:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV685:%.*]] = sext i8 [[TMP269]] to i32
// SIMD-ONLY0-NEXT:    [[CMP686:%.*]] = icmp sgt i32 [[CONV684]], [[CONV685]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP686]], label [[IF_THEN688:%.*]], label [[IF_END689:%.*]]
// SIMD-ONLY0:       if.then688:
// SIMD-ONLY0-NEXT:    [[TMP270:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP270]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END689]]
// SIMD-ONLY0:       if.end689:
// SIMD-ONLY0-NEXT:    [[TMP271:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV690:%.*]] = sext i8 [[TMP271]] to i32
// SIMD-ONLY0-NEXT:    [[TMP272:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV691:%.*]] = sext i8 [[TMP272]] to i32
// SIMD-ONLY0-NEXT:    [[CMP692:%.*]] = icmp slt i32 [[CONV690]], [[CONV691]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP692]], label [[IF_THEN694:%.*]], label [[IF_END695:%.*]]
// SIMD-ONLY0:       if.then694:
// SIMD-ONLY0-NEXT:    [[TMP273:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP273]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END695]]
// SIMD-ONLY0:       if.end695:
// SIMD-ONLY0-NEXT:    [[TMP274:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV696:%.*]] = sext i8 [[TMP274]] to i32
// SIMD-ONLY0-NEXT:    [[TMP275:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV697:%.*]] = sext i8 [[TMP275]] to i32
// SIMD-ONLY0-NEXT:    [[CMP698:%.*]] = icmp sgt i32 [[CONV696]], [[CONV697]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP698]], label [[IF_THEN700:%.*]], label [[IF_END701:%.*]]
// SIMD-ONLY0:       if.then700:
// SIMD-ONLY0-NEXT:    [[TMP276:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP276]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END701]]
// SIMD-ONLY0:       if.end701:
// SIMD-ONLY0-NEXT:    [[TMP277:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV702:%.*]] = sext i8 [[TMP277]] to i32
// SIMD-ONLY0-NEXT:    [[TMP278:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV703:%.*]] = sext i8 [[TMP278]] to i32
// SIMD-ONLY0-NEXT:    [[CMP704:%.*]] = icmp slt i32 [[CONV702]], [[CONV703]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP704]], label [[IF_THEN706:%.*]], label [[IF_END707:%.*]]
// SIMD-ONLY0:       if.then706:
// SIMD-ONLY0-NEXT:    [[TMP279:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP279]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END707]]
// SIMD-ONLY0:       if.end707:
// SIMD-ONLY0-NEXT:    [[TMP280:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV708:%.*]] = sext i8 [[TMP280]] to i32
// SIMD-ONLY0-NEXT:    [[TMP281:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV709:%.*]] = sext i8 [[TMP281]] to i32
// SIMD-ONLY0-NEXT:    [[CMP710:%.*]] = icmp eq i32 [[CONV708]], [[CONV709]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP710]], label [[COND_TRUE712:%.*]], label [[COND_FALSE714:%.*]]
// SIMD-ONLY0:       cond.true712:
// SIMD-ONLY0-NEXT:    [[TMP282:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV713:%.*]] = sext i8 [[TMP282]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END716:%.*]]
// SIMD-ONLY0:       cond.false714:
// SIMD-ONLY0-NEXT:    [[TMP283:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV715:%.*]] = sext i8 [[TMP283]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END716]]
// SIMD-ONLY0:       cond.end716:
// SIMD-ONLY0-NEXT:    [[COND717:%.*]] = phi i32 [ [[CONV713]], [[COND_TRUE712]] ], [ [[CONV715]], [[COND_FALSE714]] ]
// SIMD-ONLY0-NEXT:    [[CONV718:%.*]] = trunc i32 [[COND717]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV718]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP284:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV719:%.*]] = sext i8 [[TMP284]] to i32
// SIMD-ONLY0-NEXT:    [[TMP285:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV720:%.*]] = sext i8 [[TMP285]] to i32
// SIMD-ONLY0-NEXT:    [[CMP721:%.*]] = icmp eq i32 [[CONV719]], [[CONV720]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP721]], label [[COND_TRUE723:%.*]], label [[COND_FALSE725:%.*]]
// SIMD-ONLY0:       cond.true723:
// SIMD-ONLY0-NEXT:    [[TMP286:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV724:%.*]] = sext i8 [[TMP286]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END727:%.*]]
// SIMD-ONLY0:       cond.false725:
// SIMD-ONLY0-NEXT:    [[TMP287:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV726:%.*]] = sext i8 [[TMP287]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END727]]
// SIMD-ONLY0:       cond.end727:
// SIMD-ONLY0-NEXT:    [[COND728:%.*]] = phi i32 [ [[CONV724]], [[COND_TRUE723]] ], [ [[CONV726]], [[COND_FALSE725]] ]
// SIMD-ONLY0-NEXT:    [[CONV729:%.*]] = trunc i32 [[COND728]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV729]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP288:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV730:%.*]] = sext i8 [[TMP288]] to i32
// SIMD-ONLY0-NEXT:    [[TMP289:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV731:%.*]] = sext i8 [[TMP289]] to i32
// SIMD-ONLY0-NEXT:    [[CMP732:%.*]] = icmp eq i32 [[CONV730]], [[CONV731]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP732]], label [[IF_THEN734:%.*]], label [[IF_END735:%.*]]
// SIMD-ONLY0:       if.then734:
// SIMD-ONLY0-NEXT:    [[TMP290:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP290]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END735]]
// SIMD-ONLY0:       if.end735:
// SIMD-ONLY0-NEXT:    [[TMP291:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV736:%.*]] = sext i8 [[TMP291]] to i32
// SIMD-ONLY0-NEXT:    [[TMP292:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV737:%.*]] = sext i8 [[TMP292]] to i32
// SIMD-ONLY0-NEXT:    [[CMP738:%.*]] = icmp eq i32 [[CONV736]], [[CONV737]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP738]], label [[IF_THEN740:%.*]], label [[IF_END741:%.*]]
// SIMD-ONLY0:       if.then740:
// SIMD-ONLY0-NEXT:    [[TMP293:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP293]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END741]]
// SIMD-ONLY0:       if.end741:
// SIMD-ONLY0-NEXT:    [[TMP294:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV742:%.*]] = zext i8 [[TMP294]] to i32
// SIMD-ONLY0-NEXT:    [[TMP295:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV743:%.*]] = zext i8 [[TMP295]] to i32
// SIMD-ONLY0-NEXT:    [[CMP744:%.*]] = icmp sgt i32 [[CONV742]], [[CONV743]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP744]], label [[COND_TRUE746:%.*]], label [[COND_FALSE748:%.*]]
// SIMD-ONLY0:       cond.true746:
// SIMD-ONLY0-NEXT:    [[TMP296:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV747:%.*]] = zext i8 [[TMP296]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END750:%.*]]
// SIMD-ONLY0:       cond.false748:
// SIMD-ONLY0-NEXT:    [[TMP297:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV749:%.*]] = zext i8 [[TMP297]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END750]]
// SIMD-ONLY0:       cond.end750:
// SIMD-ONLY0-NEXT:    [[COND751:%.*]] = phi i32 [ [[CONV747]], [[COND_TRUE746]] ], [ [[CONV749]], [[COND_FALSE748]] ]
// SIMD-ONLY0-NEXT:    [[CONV752:%.*]] = trunc i32 [[COND751]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV752]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP298:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV753:%.*]] = zext i8 [[TMP298]] to i32
// SIMD-ONLY0-NEXT:    [[TMP299:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV754:%.*]] = zext i8 [[TMP299]] to i32
// SIMD-ONLY0-NEXT:    [[CMP755:%.*]] = icmp slt i32 [[CONV753]], [[CONV754]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP755]], label [[COND_TRUE757:%.*]], label [[COND_FALSE759:%.*]]
// SIMD-ONLY0:       cond.true757:
// SIMD-ONLY0-NEXT:    [[TMP300:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV758:%.*]] = zext i8 [[TMP300]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END761:%.*]]
// SIMD-ONLY0:       cond.false759:
// SIMD-ONLY0-NEXT:    [[TMP301:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV760:%.*]] = zext i8 [[TMP301]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END761]]
// SIMD-ONLY0:       cond.end761:
// SIMD-ONLY0-NEXT:    [[COND762:%.*]] = phi i32 [ [[CONV758]], [[COND_TRUE757]] ], [ [[CONV760]], [[COND_FALSE759]] ]
// SIMD-ONLY0-NEXT:    [[CONV763:%.*]] = trunc i32 [[COND762]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV763]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP302:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV764:%.*]] = zext i8 [[TMP302]] to i32
// SIMD-ONLY0-NEXT:    [[TMP303:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV765:%.*]] = zext i8 [[TMP303]] to i32
// SIMD-ONLY0-NEXT:    [[CMP766:%.*]] = icmp sgt i32 [[CONV764]], [[CONV765]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP766]], label [[COND_TRUE768:%.*]], label [[COND_FALSE770:%.*]]
// SIMD-ONLY0:       cond.true768:
// SIMD-ONLY0-NEXT:    [[TMP304:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV769:%.*]] = zext i8 [[TMP304]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END772:%.*]]
// SIMD-ONLY0:       cond.false770:
// SIMD-ONLY0-NEXT:    [[TMP305:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV771:%.*]] = zext i8 [[TMP305]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END772]]
// SIMD-ONLY0:       cond.end772:
// SIMD-ONLY0-NEXT:    [[COND773:%.*]] = phi i32 [ [[CONV769]], [[COND_TRUE768]] ], [ [[CONV771]], [[COND_FALSE770]] ]
// SIMD-ONLY0-NEXT:    [[CONV774:%.*]] = trunc i32 [[COND773]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV774]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP306:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV775:%.*]] = zext i8 [[TMP306]] to i32
// SIMD-ONLY0-NEXT:    [[TMP307:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV776:%.*]] = zext i8 [[TMP307]] to i32
// SIMD-ONLY0-NEXT:    [[CMP777:%.*]] = icmp slt i32 [[CONV775]], [[CONV776]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP777]], label [[COND_TRUE779:%.*]], label [[COND_FALSE781:%.*]]
// SIMD-ONLY0:       cond.true779:
// SIMD-ONLY0-NEXT:    [[TMP308:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV780:%.*]] = zext i8 [[TMP308]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END783:%.*]]
// SIMD-ONLY0:       cond.false781:
// SIMD-ONLY0-NEXT:    [[TMP309:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV782:%.*]] = zext i8 [[TMP309]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END783]]
// SIMD-ONLY0:       cond.end783:
// SIMD-ONLY0-NEXT:    [[COND784:%.*]] = phi i32 [ [[CONV780]], [[COND_TRUE779]] ], [ [[CONV782]], [[COND_FALSE781]] ]
// SIMD-ONLY0-NEXT:    [[CONV785:%.*]] = trunc i32 [[COND784]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV785]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP310:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV786:%.*]] = zext i8 [[TMP310]] to i32
// SIMD-ONLY0-NEXT:    [[TMP311:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV787:%.*]] = zext i8 [[TMP311]] to i32
// SIMD-ONLY0-NEXT:    [[CMP788:%.*]] = icmp sgt i32 [[CONV786]], [[CONV787]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP788]], label [[IF_THEN790:%.*]], label [[IF_END791:%.*]]
// SIMD-ONLY0:       if.then790:
// SIMD-ONLY0-NEXT:    [[TMP312:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP312]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END791]]
// SIMD-ONLY0:       if.end791:
// SIMD-ONLY0-NEXT:    [[TMP313:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV792:%.*]] = zext i8 [[TMP313]] to i32
// SIMD-ONLY0-NEXT:    [[TMP314:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV793:%.*]] = zext i8 [[TMP314]] to i32
// SIMD-ONLY0-NEXT:    [[CMP794:%.*]] = icmp slt i32 [[CONV792]], [[CONV793]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP794]], label [[IF_THEN796:%.*]], label [[IF_END797:%.*]]
// SIMD-ONLY0:       if.then796:
// SIMD-ONLY0-NEXT:    [[TMP315:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP315]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END797]]
// SIMD-ONLY0:       if.end797:
// SIMD-ONLY0-NEXT:    [[TMP316:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV798:%.*]] = zext i8 [[TMP316]] to i32
// SIMD-ONLY0-NEXT:    [[TMP317:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV799:%.*]] = zext i8 [[TMP317]] to i32
// SIMD-ONLY0-NEXT:    [[CMP800:%.*]] = icmp sgt i32 [[CONV798]], [[CONV799]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP800]], label [[IF_THEN802:%.*]], label [[IF_END803:%.*]]
// SIMD-ONLY0:       if.then802:
// SIMD-ONLY0-NEXT:    [[TMP318:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP318]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END803]]
// SIMD-ONLY0:       if.end803:
// SIMD-ONLY0-NEXT:    [[TMP319:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV804:%.*]] = zext i8 [[TMP319]] to i32
// SIMD-ONLY0-NEXT:    [[TMP320:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV805:%.*]] = zext i8 [[TMP320]] to i32
// SIMD-ONLY0-NEXT:    [[CMP806:%.*]] = icmp slt i32 [[CONV804]], [[CONV805]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP806]], label [[IF_THEN808:%.*]], label [[IF_END809:%.*]]
// SIMD-ONLY0:       if.then808:
// SIMD-ONLY0-NEXT:    [[TMP321:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP321]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END809]]
// SIMD-ONLY0:       if.end809:
// SIMD-ONLY0-NEXT:    [[TMP322:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV810:%.*]] = zext i8 [[TMP322]] to i32
// SIMD-ONLY0-NEXT:    [[TMP323:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV811:%.*]] = zext i8 [[TMP323]] to i32
// SIMD-ONLY0-NEXT:    [[CMP812:%.*]] = icmp eq i32 [[CONV810]], [[CONV811]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP812]], label [[COND_TRUE814:%.*]], label [[COND_FALSE816:%.*]]
// SIMD-ONLY0:       cond.true814:
// SIMD-ONLY0-NEXT:    [[TMP324:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV815:%.*]] = zext i8 [[TMP324]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END818:%.*]]
// SIMD-ONLY0:       cond.false816:
// SIMD-ONLY0-NEXT:    [[TMP325:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV817:%.*]] = zext i8 [[TMP325]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END818]]
// SIMD-ONLY0:       cond.end818:
// SIMD-ONLY0-NEXT:    [[COND819:%.*]] = phi i32 [ [[CONV815]], [[COND_TRUE814]] ], [ [[CONV817]], [[COND_FALSE816]] ]
// SIMD-ONLY0-NEXT:    [[CONV820:%.*]] = trunc i32 [[COND819]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV820]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP326:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV821:%.*]] = zext i8 [[TMP326]] to i32
// SIMD-ONLY0-NEXT:    [[TMP327:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV822:%.*]] = zext i8 [[TMP327]] to i32
// SIMD-ONLY0-NEXT:    [[CMP823:%.*]] = icmp eq i32 [[CONV821]], [[CONV822]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP823]], label [[COND_TRUE825:%.*]], label [[COND_FALSE827:%.*]]
// SIMD-ONLY0:       cond.true825:
// SIMD-ONLY0-NEXT:    [[TMP328:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV826:%.*]] = zext i8 [[TMP328]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END829:%.*]]
// SIMD-ONLY0:       cond.false827:
// SIMD-ONLY0-NEXT:    [[TMP329:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV828:%.*]] = zext i8 [[TMP329]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END829]]
// SIMD-ONLY0:       cond.end829:
// SIMD-ONLY0-NEXT:    [[COND830:%.*]] = phi i32 [ [[CONV826]], [[COND_TRUE825]] ], [ [[CONV828]], [[COND_FALSE827]] ]
// SIMD-ONLY0-NEXT:    [[CONV831:%.*]] = trunc i32 [[COND830]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV831]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP330:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV832:%.*]] = zext i8 [[TMP330]] to i32
// SIMD-ONLY0-NEXT:    [[TMP331:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV833:%.*]] = zext i8 [[TMP331]] to i32
// SIMD-ONLY0-NEXT:    [[CMP834:%.*]] = icmp eq i32 [[CONV832]], [[CONV833]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP834]], label [[IF_THEN836:%.*]], label [[IF_END837:%.*]]
// SIMD-ONLY0:       if.then836:
// SIMD-ONLY0-NEXT:    [[TMP332:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP332]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END837]]
// SIMD-ONLY0:       if.end837:
// SIMD-ONLY0-NEXT:    [[TMP333:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV838:%.*]] = zext i8 [[TMP333]] to i32
// SIMD-ONLY0-NEXT:    [[TMP334:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV839:%.*]] = zext i8 [[TMP334]] to i32
// SIMD-ONLY0-NEXT:    [[CMP840:%.*]] = icmp eq i32 [[CONV838]], [[CONV839]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP840]], label [[IF_THEN842:%.*]], label [[IF_END843:%.*]]
// SIMD-ONLY0:       if.then842:
// SIMD-ONLY0-NEXT:    [[TMP335:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP335]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END843]]
// SIMD-ONLY0:       if.end843:
// SIMD-ONLY0-NEXT:    [[TMP336:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV844:%.*]] = sext i8 [[TMP336]] to i32
// SIMD-ONLY0-NEXT:    [[TMP337:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV845:%.*]] = sext i8 [[TMP337]] to i32
// SIMD-ONLY0-NEXT:    [[CMP846:%.*]] = icmp sgt i32 [[CONV844]], [[CONV845]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP846]], label [[COND_TRUE848:%.*]], label [[COND_FALSE850:%.*]]
// SIMD-ONLY0:       cond.true848:
// SIMD-ONLY0-NEXT:    [[TMP338:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV849:%.*]] = sext i8 [[TMP338]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END852:%.*]]
// SIMD-ONLY0:       cond.false850:
// SIMD-ONLY0-NEXT:    [[TMP339:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV851:%.*]] = sext i8 [[TMP339]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END852]]
// SIMD-ONLY0:       cond.end852:
// SIMD-ONLY0-NEXT:    [[COND853:%.*]] = phi i32 [ [[CONV849]], [[COND_TRUE848]] ], [ [[CONV851]], [[COND_FALSE850]] ]
// SIMD-ONLY0-NEXT:    [[CONV854:%.*]] = trunc i32 [[COND853]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV854]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP340:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV855:%.*]] = sext i8 [[TMP340]] to i32
// SIMD-ONLY0-NEXT:    [[TMP341:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV856:%.*]] = sext i8 [[TMP341]] to i32
// SIMD-ONLY0-NEXT:    [[CMP857:%.*]] = icmp slt i32 [[CONV855]], [[CONV856]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP857]], label [[COND_TRUE859:%.*]], label [[COND_FALSE861:%.*]]
// SIMD-ONLY0:       cond.true859:
// SIMD-ONLY0-NEXT:    [[TMP342:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV860:%.*]] = sext i8 [[TMP342]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END863:%.*]]
// SIMD-ONLY0:       cond.false861:
// SIMD-ONLY0-NEXT:    [[TMP343:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV862:%.*]] = sext i8 [[TMP343]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END863]]
// SIMD-ONLY0:       cond.end863:
// SIMD-ONLY0-NEXT:    [[COND864:%.*]] = phi i32 [ [[CONV860]], [[COND_TRUE859]] ], [ [[CONV862]], [[COND_FALSE861]] ]
// SIMD-ONLY0-NEXT:    [[CONV865:%.*]] = trunc i32 [[COND864]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV865]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP344:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV866:%.*]] = sext i8 [[TMP344]] to i32
// SIMD-ONLY0-NEXT:    [[TMP345:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV867:%.*]] = sext i8 [[TMP345]] to i32
// SIMD-ONLY0-NEXT:    [[CMP868:%.*]] = icmp sgt i32 [[CONV866]], [[CONV867]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP868]], label [[COND_TRUE870:%.*]], label [[COND_FALSE872:%.*]]
// SIMD-ONLY0:       cond.true870:
// SIMD-ONLY0-NEXT:    [[TMP346:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV871:%.*]] = sext i8 [[TMP346]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END874:%.*]]
// SIMD-ONLY0:       cond.false872:
// SIMD-ONLY0-NEXT:    [[TMP347:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV873:%.*]] = sext i8 [[TMP347]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END874]]
// SIMD-ONLY0:       cond.end874:
// SIMD-ONLY0-NEXT:    [[COND875:%.*]] = phi i32 [ [[CONV871]], [[COND_TRUE870]] ], [ [[CONV873]], [[COND_FALSE872]] ]
// SIMD-ONLY0-NEXT:    [[CONV876:%.*]] = trunc i32 [[COND875]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV876]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP348:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV877:%.*]] = sext i8 [[TMP348]] to i32
// SIMD-ONLY0-NEXT:    [[TMP349:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV878:%.*]] = sext i8 [[TMP349]] to i32
// SIMD-ONLY0-NEXT:    [[CMP879:%.*]] = icmp slt i32 [[CONV877]], [[CONV878]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP879]], label [[COND_TRUE881:%.*]], label [[COND_FALSE883:%.*]]
// SIMD-ONLY0:       cond.true881:
// SIMD-ONLY0-NEXT:    [[TMP350:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV882:%.*]] = sext i8 [[TMP350]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END885:%.*]]
// SIMD-ONLY0:       cond.false883:
// SIMD-ONLY0-NEXT:    [[TMP351:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV884:%.*]] = sext i8 [[TMP351]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END885]]
// SIMD-ONLY0:       cond.end885:
// SIMD-ONLY0-NEXT:    [[COND886:%.*]] = phi i32 [ [[CONV882]], [[COND_TRUE881]] ], [ [[CONV884]], [[COND_FALSE883]] ]
// SIMD-ONLY0-NEXT:    [[CONV887:%.*]] = trunc i32 [[COND886]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV887]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP352:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV888:%.*]] = sext i8 [[TMP352]] to i32
// SIMD-ONLY0-NEXT:    [[TMP353:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV889:%.*]] = sext i8 [[TMP353]] to i32
// SIMD-ONLY0-NEXT:    [[CMP890:%.*]] = icmp sgt i32 [[CONV888]], [[CONV889]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP890]], label [[IF_THEN892:%.*]], label [[IF_END893:%.*]]
// SIMD-ONLY0:       if.then892:
// SIMD-ONLY0-NEXT:    [[TMP354:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP354]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END893]]
// SIMD-ONLY0:       if.end893:
// SIMD-ONLY0-NEXT:    [[TMP355:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV894:%.*]] = sext i8 [[TMP355]] to i32
// SIMD-ONLY0-NEXT:    [[TMP356:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV895:%.*]] = sext i8 [[TMP356]] to i32
// SIMD-ONLY0-NEXT:    [[CMP896:%.*]] = icmp slt i32 [[CONV894]], [[CONV895]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP896]], label [[IF_THEN898:%.*]], label [[IF_END899:%.*]]
// SIMD-ONLY0:       if.then898:
// SIMD-ONLY0-NEXT:    [[TMP357:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP357]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END899]]
// SIMD-ONLY0:       if.end899:
// SIMD-ONLY0-NEXT:    [[TMP358:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV900:%.*]] = sext i8 [[TMP358]] to i32
// SIMD-ONLY0-NEXT:    [[TMP359:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV901:%.*]] = sext i8 [[TMP359]] to i32
// SIMD-ONLY0-NEXT:    [[CMP902:%.*]] = icmp sgt i32 [[CONV900]], [[CONV901]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP902]], label [[IF_THEN904:%.*]], label [[IF_END905:%.*]]
// SIMD-ONLY0:       if.then904:
// SIMD-ONLY0-NEXT:    [[TMP360:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP360]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END905]]
// SIMD-ONLY0:       if.end905:
// SIMD-ONLY0-NEXT:    [[TMP361:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV906:%.*]] = sext i8 [[TMP361]] to i32
// SIMD-ONLY0-NEXT:    [[TMP362:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV907:%.*]] = sext i8 [[TMP362]] to i32
// SIMD-ONLY0-NEXT:    [[CMP908:%.*]] = icmp slt i32 [[CONV906]], [[CONV907]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP908]], label [[IF_THEN910:%.*]], label [[IF_END911:%.*]]
// SIMD-ONLY0:       if.then910:
// SIMD-ONLY0-NEXT:    [[TMP363:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP363]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END911]]
// SIMD-ONLY0:       if.end911:
// SIMD-ONLY0-NEXT:    [[TMP364:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV912:%.*]] = sext i8 [[TMP364]] to i32
// SIMD-ONLY0-NEXT:    [[TMP365:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV913:%.*]] = sext i8 [[TMP365]] to i32
// SIMD-ONLY0-NEXT:    [[CMP914:%.*]] = icmp eq i32 [[CONV912]], [[CONV913]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP914]], label [[COND_TRUE916:%.*]], label [[COND_FALSE918:%.*]]
// SIMD-ONLY0:       cond.true916:
// SIMD-ONLY0-NEXT:    [[TMP366:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV917:%.*]] = sext i8 [[TMP366]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END920:%.*]]
// SIMD-ONLY0:       cond.false918:
// SIMD-ONLY0-NEXT:    [[TMP367:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV919:%.*]] = sext i8 [[TMP367]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END920]]
// SIMD-ONLY0:       cond.end920:
// SIMD-ONLY0-NEXT:    [[COND921:%.*]] = phi i32 [ [[CONV917]], [[COND_TRUE916]] ], [ [[CONV919]], [[COND_FALSE918]] ]
// SIMD-ONLY0-NEXT:    [[CONV922:%.*]] = trunc i32 [[COND921]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV922]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP368:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV923:%.*]] = sext i8 [[TMP368]] to i32
// SIMD-ONLY0-NEXT:    [[TMP369:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV924:%.*]] = sext i8 [[TMP369]] to i32
// SIMD-ONLY0-NEXT:    [[CMP925:%.*]] = icmp eq i32 [[CONV923]], [[CONV924]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP925]], label [[COND_TRUE927:%.*]], label [[COND_FALSE929:%.*]]
// SIMD-ONLY0:       cond.true927:
// SIMD-ONLY0-NEXT:    [[TMP370:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV928:%.*]] = sext i8 [[TMP370]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END931:%.*]]
// SIMD-ONLY0:       cond.false929:
// SIMD-ONLY0-NEXT:    [[TMP371:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV930:%.*]] = sext i8 [[TMP371]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END931]]
// SIMD-ONLY0:       cond.end931:
// SIMD-ONLY0-NEXT:    [[COND932:%.*]] = phi i32 [ [[CONV928]], [[COND_TRUE927]] ], [ [[CONV930]], [[COND_FALSE929]] ]
// SIMD-ONLY0-NEXT:    [[CONV933:%.*]] = trunc i32 [[COND932]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV933]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP372:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV934:%.*]] = sext i8 [[TMP372]] to i32
// SIMD-ONLY0-NEXT:    [[TMP373:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV935:%.*]] = sext i8 [[TMP373]] to i32
// SIMD-ONLY0-NEXT:    [[CMP936:%.*]] = icmp eq i32 [[CONV934]], [[CONV935]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP936]], label [[IF_THEN938:%.*]], label [[IF_END939:%.*]]
// SIMD-ONLY0:       if.then938:
// SIMD-ONLY0-NEXT:    [[TMP374:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP374]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END939]]
// SIMD-ONLY0:       if.end939:
// SIMD-ONLY0-NEXT:    [[TMP375:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV940:%.*]] = sext i8 [[TMP375]] to i32
// SIMD-ONLY0-NEXT:    [[TMP376:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV941:%.*]] = sext i8 [[TMP376]] to i32
// SIMD-ONLY0-NEXT:    [[CMP942:%.*]] = icmp eq i32 [[CONV940]], [[CONV941]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP942]], label [[IF_THEN944:%.*]], label [[IF_END945:%.*]]
// SIMD-ONLY0:       if.then944:
// SIMD-ONLY0-NEXT:    [[TMP377:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP377]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END945]]
// SIMD-ONLY0:       if.end945:
// SIMD-ONLY0-NEXT:    [[TMP378:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV946:%.*]] = zext i8 [[TMP378]] to i32
// SIMD-ONLY0-NEXT:    [[TMP379:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV947:%.*]] = zext i8 [[TMP379]] to i32
// SIMD-ONLY0-NEXT:    [[CMP948:%.*]] = icmp sgt i32 [[CONV946]], [[CONV947]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP948]], label [[COND_TRUE950:%.*]], label [[COND_FALSE952:%.*]]
// SIMD-ONLY0:       cond.true950:
// SIMD-ONLY0-NEXT:    [[TMP380:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV951:%.*]] = zext i8 [[TMP380]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END954:%.*]]
// SIMD-ONLY0:       cond.false952:
// SIMD-ONLY0-NEXT:    [[TMP381:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV953:%.*]] = zext i8 [[TMP381]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END954]]
// SIMD-ONLY0:       cond.end954:
// SIMD-ONLY0-NEXT:    [[COND955:%.*]] = phi i32 [ [[CONV951]], [[COND_TRUE950]] ], [ [[CONV953]], [[COND_FALSE952]] ]
// SIMD-ONLY0-NEXT:    [[CONV956:%.*]] = trunc i32 [[COND955]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV956]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP382:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV957:%.*]] = zext i8 [[TMP382]] to i32
// SIMD-ONLY0-NEXT:    [[TMP383:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV958:%.*]] = zext i8 [[TMP383]] to i32
// SIMD-ONLY0-NEXT:    [[CMP959:%.*]] = icmp slt i32 [[CONV957]], [[CONV958]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP959]], label [[COND_TRUE961:%.*]], label [[COND_FALSE963:%.*]]
// SIMD-ONLY0:       cond.true961:
// SIMD-ONLY0-NEXT:    [[TMP384:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV962:%.*]] = zext i8 [[TMP384]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END965:%.*]]
// SIMD-ONLY0:       cond.false963:
// SIMD-ONLY0-NEXT:    [[TMP385:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV964:%.*]] = zext i8 [[TMP385]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END965]]
// SIMD-ONLY0:       cond.end965:
// SIMD-ONLY0-NEXT:    [[COND966:%.*]] = phi i32 [ [[CONV962]], [[COND_TRUE961]] ], [ [[CONV964]], [[COND_FALSE963]] ]
// SIMD-ONLY0-NEXT:    [[CONV967:%.*]] = trunc i32 [[COND966]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV967]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP386:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV968:%.*]] = zext i8 [[TMP386]] to i32
// SIMD-ONLY0-NEXT:    [[TMP387:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV969:%.*]] = zext i8 [[TMP387]] to i32
// SIMD-ONLY0-NEXT:    [[CMP970:%.*]] = icmp sgt i32 [[CONV968]], [[CONV969]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP970]], label [[COND_TRUE972:%.*]], label [[COND_FALSE974:%.*]]
// SIMD-ONLY0:       cond.true972:
// SIMD-ONLY0-NEXT:    [[TMP388:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV973:%.*]] = zext i8 [[TMP388]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END976:%.*]]
// SIMD-ONLY0:       cond.false974:
// SIMD-ONLY0-NEXT:    [[TMP389:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV975:%.*]] = zext i8 [[TMP389]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END976]]
// SIMD-ONLY0:       cond.end976:
// SIMD-ONLY0-NEXT:    [[COND977:%.*]] = phi i32 [ [[CONV973]], [[COND_TRUE972]] ], [ [[CONV975]], [[COND_FALSE974]] ]
// SIMD-ONLY0-NEXT:    [[CONV978:%.*]] = trunc i32 [[COND977]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV978]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP390:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV979:%.*]] = zext i8 [[TMP390]] to i32
// SIMD-ONLY0-NEXT:    [[TMP391:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV980:%.*]] = zext i8 [[TMP391]] to i32
// SIMD-ONLY0-NEXT:    [[CMP981:%.*]] = icmp slt i32 [[CONV979]], [[CONV980]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP981]], label [[COND_TRUE983:%.*]], label [[COND_FALSE985:%.*]]
// SIMD-ONLY0:       cond.true983:
// SIMD-ONLY0-NEXT:    [[TMP392:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV984:%.*]] = zext i8 [[TMP392]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END987:%.*]]
// SIMD-ONLY0:       cond.false985:
// SIMD-ONLY0-NEXT:    [[TMP393:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV986:%.*]] = zext i8 [[TMP393]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END987]]
// SIMD-ONLY0:       cond.end987:
// SIMD-ONLY0-NEXT:    [[COND988:%.*]] = phi i32 [ [[CONV984]], [[COND_TRUE983]] ], [ [[CONV986]], [[COND_FALSE985]] ]
// SIMD-ONLY0-NEXT:    [[CONV989:%.*]] = trunc i32 [[COND988]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV989]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP394:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV990:%.*]] = zext i8 [[TMP394]] to i32
// SIMD-ONLY0-NEXT:    [[TMP395:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV991:%.*]] = zext i8 [[TMP395]] to i32
// SIMD-ONLY0-NEXT:    [[CMP992:%.*]] = icmp sgt i32 [[CONV990]], [[CONV991]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP992]], label [[IF_THEN994:%.*]], label [[IF_END995:%.*]]
// SIMD-ONLY0:       if.then994:
// SIMD-ONLY0-NEXT:    [[TMP396:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP396]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END995]]
// SIMD-ONLY0:       if.end995:
// SIMD-ONLY0-NEXT:    [[TMP397:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV996:%.*]] = zext i8 [[TMP397]] to i32
// SIMD-ONLY0-NEXT:    [[TMP398:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV997:%.*]] = zext i8 [[TMP398]] to i32
// SIMD-ONLY0-NEXT:    [[CMP998:%.*]] = icmp slt i32 [[CONV996]], [[CONV997]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP998]], label [[IF_THEN1000:%.*]], label [[IF_END1001:%.*]]
// SIMD-ONLY0:       if.then1000:
// SIMD-ONLY0-NEXT:    [[TMP399:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP399]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1001]]
// SIMD-ONLY0:       if.end1001:
// SIMD-ONLY0-NEXT:    [[TMP400:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1002:%.*]] = zext i8 [[TMP400]] to i32
// SIMD-ONLY0-NEXT:    [[TMP401:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1003:%.*]] = zext i8 [[TMP401]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1004:%.*]] = icmp sgt i32 [[CONV1002]], [[CONV1003]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1004]], label [[IF_THEN1006:%.*]], label [[IF_END1007:%.*]]
// SIMD-ONLY0:       if.then1006:
// SIMD-ONLY0-NEXT:    [[TMP402:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP402]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1007]]
// SIMD-ONLY0:       if.end1007:
// SIMD-ONLY0-NEXT:    [[TMP403:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1008:%.*]] = zext i8 [[TMP403]] to i32
// SIMD-ONLY0-NEXT:    [[TMP404:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1009:%.*]] = zext i8 [[TMP404]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1010:%.*]] = icmp slt i32 [[CONV1008]], [[CONV1009]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1010]], label [[IF_THEN1012:%.*]], label [[IF_END1013:%.*]]
// SIMD-ONLY0:       if.then1012:
// SIMD-ONLY0-NEXT:    [[TMP405:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP405]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1013]]
// SIMD-ONLY0:       if.end1013:
// SIMD-ONLY0-NEXT:    [[TMP406:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1014:%.*]] = zext i8 [[TMP406]] to i32
// SIMD-ONLY0-NEXT:    [[TMP407:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1015:%.*]] = zext i8 [[TMP407]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1016:%.*]] = icmp eq i32 [[CONV1014]], [[CONV1015]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1016]], label [[COND_TRUE1018:%.*]], label [[COND_FALSE1020:%.*]]
// SIMD-ONLY0:       cond.true1018:
// SIMD-ONLY0-NEXT:    [[TMP408:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1019:%.*]] = zext i8 [[TMP408]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1022:%.*]]
// SIMD-ONLY0:       cond.false1020:
// SIMD-ONLY0-NEXT:    [[TMP409:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1021:%.*]] = zext i8 [[TMP409]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1022]]
// SIMD-ONLY0:       cond.end1022:
// SIMD-ONLY0-NEXT:    [[COND1023:%.*]] = phi i32 [ [[CONV1019]], [[COND_TRUE1018]] ], [ [[CONV1021]], [[COND_FALSE1020]] ]
// SIMD-ONLY0-NEXT:    [[CONV1024:%.*]] = trunc i32 [[COND1023]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1024]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP410:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1025:%.*]] = zext i8 [[TMP410]] to i32
// SIMD-ONLY0-NEXT:    [[TMP411:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1026:%.*]] = zext i8 [[TMP411]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1027:%.*]] = icmp eq i32 [[CONV1025]], [[CONV1026]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1027]], label [[COND_TRUE1029:%.*]], label [[COND_FALSE1031:%.*]]
// SIMD-ONLY0:       cond.true1029:
// SIMD-ONLY0-NEXT:    [[TMP412:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1030:%.*]] = zext i8 [[TMP412]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1033:%.*]]
// SIMD-ONLY0:       cond.false1031:
// SIMD-ONLY0-NEXT:    [[TMP413:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1032:%.*]] = zext i8 [[TMP413]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1033]]
// SIMD-ONLY0:       cond.end1033:
// SIMD-ONLY0-NEXT:    [[COND1034:%.*]] = phi i32 [ [[CONV1030]], [[COND_TRUE1029]] ], [ [[CONV1032]], [[COND_FALSE1031]] ]
// SIMD-ONLY0-NEXT:    [[CONV1035:%.*]] = trunc i32 [[COND1034]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1035]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP414:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1036:%.*]] = zext i8 [[TMP414]] to i32
// SIMD-ONLY0-NEXT:    [[TMP415:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1037:%.*]] = zext i8 [[TMP415]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1038:%.*]] = icmp eq i32 [[CONV1036]], [[CONV1037]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1038]], label [[IF_THEN1040:%.*]], label [[IF_END1041:%.*]]
// SIMD-ONLY0:       if.then1040:
// SIMD-ONLY0-NEXT:    [[TMP416:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP416]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1041]]
// SIMD-ONLY0:       if.end1041:
// SIMD-ONLY0-NEXT:    [[TMP417:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1042:%.*]] = zext i8 [[TMP417]] to i32
// SIMD-ONLY0-NEXT:    [[TMP418:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1043:%.*]] = zext i8 [[TMP418]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1044:%.*]] = icmp eq i32 [[CONV1042]], [[CONV1043]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1044]], label [[IF_THEN1046:%.*]], label [[IF_END1047:%.*]]
// SIMD-ONLY0:       if.then1046:
// SIMD-ONLY0-NEXT:    [[TMP419:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP419]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1047]]
// SIMD-ONLY0:       if.end1047:
// SIMD-ONLY0-NEXT:    [[TMP420:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1048:%.*]] = sext i8 [[TMP420]] to i32
// SIMD-ONLY0-NEXT:    [[TMP421:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1049:%.*]] = sext i8 [[TMP421]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1050:%.*]] = icmp sgt i32 [[CONV1048]], [[CONV1049]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1050]], label [[COND_TRUE1052:%.*]], label [[COND_FALSE1054:%.*]]
// SIMD-ONLY0:       cond.true1052:
// SIMD-ONLY0-NEXT:    [[TMP422:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1053:%.*]] = sext i8 [[TMP422]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1056:%.*]]
// SIMD-ONLY0:       cond.false1054:
// SIMD-ONLY0-NEXT:    [[TMP423:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1055:%.*]] = sext i8 [[TMP423]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1056]]
// SIMD-ONLY0:       cond.end1056:
// SIMD-ONLY0-NEXT:    [[COND1057:%.*]] = phi i32 [ [[CONV1053]], [[COND_TRUE1052]] ], [ [[CONV1055]], [[COND_FALSE1054]] ]
// SIMD-ONLY0-NEXT:    [[CONV1058:%.*]] = trunc i32 [[COND1057]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1058]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP424:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1059:%.*]] = sext i8 [[TMP424]] to i32
// SIMD-ONLY0-NEXT:    [[TMP425:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1060:%.*]] = sext i8 [[TMP425]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1061:%.*]] = icmp slt i32 [[CONV1059]], [[CONV1060]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1061]], label [[COND_TRUE1063:%.*]], label [[COND_FALSE1065:%.*]]
// SIMD-ONLY0:       cond.true1063:
// SIMD-ONLY0-NEXT:    [[TMP426:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1064:%.*]] = sext i8 [[TMP426]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1067:%.*]]
// SIMD-ONLY0:       cond.false1065:
// SIMD-ONLY0-NEXT:    [[TMP427:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1066:%.*]] = sext i8 [[TMP427]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1067]]
// SIMD-ONLY0:       cond.end1067:
// SIMD-ONLY0-NEXT:    [[COND1068:%.*]] = phi i32 [ [[CONV1064]], [[COND_TRUE1063]] ], [ [[CONV1066]], [[COND_FALSE1065]] ]
// SIMD-ONLY0-NEXT:    [[CONV1069:%.*]] = trunc i32 [[COND1068]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1069]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP428:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1070:%.*]] = sext i8 [[TMP428]] to i32
// SIMD-ONLY0-NEXT:    [[TMP429:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1071:%.*]] = sext i8 [[TMP429]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1072:%.*]] = icmp sgt i32 [[CONV1070]], [[CONV1071]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1072]], label [[COND_TRUE1074:%.*]], label [[COND_FALSE1076:%.*]]
// SIMD-ONLY0:       cond.true1074:
// SIMD-ONLY0-NEXT:    [[TMP430:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1075:%.*]] = sext i8 [[TMP430]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1078:%.*]]
// SIMD-ONLY0:       cond.false1076:
// SIMD-ONLY0-NEXT:    [[TMP431:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1077:%.*]] = sext i8 [[TMP431]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1078]]
// SIMD-ONLY0:       cond.end1078:
// SIMD-ONLY0-NEXT:    [[COND1079:%.*]] = phi i32 [ [[CONV1075]], [[COND_TRUE1074]] ], [ [[CONV1077]], [[COND_FALSE1076]] ]
// SIMD-ONLY0-NEXT:    [[CONV1080:%.*]] = trunc i32 [[COND1079]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1080]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP432:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1081:%.*]] = sext i8 [[TMP432]] to i32
// SIMD-ONLY0-NEXT:    [[TMP433:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1082:%.*]] = sext i8 [[TMP433]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1083:%.*]] = icmp slt i32 [[CONV1081]], [[CONV1082]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1083]], label [[COND_TRUE1085:%.*]], label [[COND_FALSE1087:%.*]]
// SIMD-ONLY0:       cond.true1085:
// SIMD-ONLY0-NEXT:    [[TMP434:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1086:%.*]] = sext i8 [[TMP434]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1089:%.*]]
// SIMD-ONLY0:       cond.false1087:
// SIMD-ONLY0-NEXT:    [[TMP435:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1088:%.*]] = sext i8 [[TMP435]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1089]]
// SIMD-ONLY0:       cond.end1089:
// SIMD-ONLY0-NEXT:    [[COND1090:%.*]] = phi i32 [ [[CONV1086]], [[COND_TRUE1085]] ], [ [[CONV1088]], [[COND_FALSE1087]] ]
// SIMD-ONLY0-NEXT:    [[CONV1091:%.*]] = trunc i32 [[COND1090]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1091]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP436:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1092:%.*]] = sext i8 [[TMP436]] to i32
// SIMD-ONLY0-NEXT:    [[TMP437:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1093:%.*]] = sext i8 [[TMP437]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1094:%.*]] = icmp sgt i32 [[CONV1092]], [[CONV1093]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1094]], label [[IF_THEN1096:%.*]], label [[IF_END1097:%.*]]
// SIMD-ONLY0:       if.then1096:
// SIMD-ONLY0-NEXT:    [[TMP438:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP438]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1097]]
// SIMD-ONLY0:       if.end1097:
// SIMD-ONLY0-NEXT:    [[TMP439:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1098:%.*]] = sext i8 [[TMP439]] to i32
// SIMD-ONLY0-NEXT:    [[TMP440:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1099:%.*]] = sext i8 [[TMP440]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1100:%.*]] = icmp slt i32 [[CONV1098]], [[CONV1099]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1100]], label [[IF_THEN1102:%.*]], label [[IF_END1103:%.*]]
// SIMD-ONLY0:       if.then1102:
// SIMD-ONLY0-NEXT:    [[TMP441:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP441]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1103]]
// SIMD-ONLY0:       if.end1103:
// SIMD-ONLY0-NEXT:    [[TMP442:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1104:%.*]] = sext i8 [[TMP442]] to i32
// SIMD-ONLY0-NEXT:    [[TMP443:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1105:%.*]] = sext i8 [[TMP443]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1106:%.*]] = icmp sgt i32 [[CONV1104]], [[CONV1105]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1106]], label [[IF_THEN1108:%.*]], label [[IF_END1109:%.*]]
// SIMD-ONLY0:       if.then1108:
// SIMD-ONLY0-NEXT:    [[TMP444:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP444]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1109]]
// SIMD-ONLY0:       if.end1109:
// SIMD-ONLY0-NEXT:    [[TMP445:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1110:%.*]] = sext i8 [[TMP445]] to i32
// SIMD-ONLY0-NEXT:    [[TMP446:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1111:%.*]] = sext i8 [[TMP446]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1112:%.*]] = icmp slt i32 [[CONV1110]], [[CONV1111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1112]], label [[IF_THEN1114:%.*]], label [[IF_END1115:%.*]]
// SIMD-ONLY0:       if.then1114:
// SIMD-ONLY0-NEXT:    [[TMP447:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP447]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1115]]
// SIMD-ONLY0:       if.end1115:
// SIMD-ONLY0-NEXT:    [[TMP448:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1116:%.*]] = sext i8 [[TMP448]] to i32
// SIMD-ONLY0-NEXT:    [[TMP449:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1117:%.*]] = sext i8 [[TMP449]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1118:%.*]] = icmp eq i32 [[CONV1116]], [[CONV1117]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1118]], label [[COND_TRUE1120:%.*]], label [[COND_FALSE1122:%.*]]
// SIMD-ONLY0:       cond.true1120:
// SIMD-ONLY0-NEXT:    [[TMP450:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1121:%.*]] = sext i8 [[TMP450]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1124:%.*]]
// SIMD-ONLY0:       cond.false1122:
// SIMD-ONLY0-NEXT:    [[TMP451:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1123:%.*]] = sext i8 [[TMP451]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1124]]
// SIMD-ONLY0:       cond.end1124:
// SIMD-ONLY0-NEXT:    [[COND1125:%.*]] = phi i32 [ [[CONV1121]], [[COND_TRUE1120]] ], [ [[CONV1123]], [[COND_FALSE1122]] ]
// SIMD-ONLY0-NEXT:    [[CONV1126:%.*]] = trunc i32 [[COND1125]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1126]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP452:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1127:%.*]] = sext i8 [[TMP452]] to i32
// SIMD-ONLY0-NEXT:    [[TMP453:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1128:%.*]] = sext i8 [[TMP453]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1129:%.*]] = icmp eq i32 [[CONV1127]], [[CONV1128]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1129]], label [[COND_TRUE1131:%.*]], label [[COND_FALSE1133:%.*]]
// SIMD-ONLY0:       cond.true1131:
// SIMD-ONLY0-NEXT:    [[TMP454:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1132:%.*]] = sext i8 [[TMP454]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1135:%.*]]
// SIMD-ONLY0:       cond.false1133:
// SIMD-ONLY0-NEXT:    [[TMP455:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1134:%.*]] = sext i8 [[TMP455]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1135]]
// SIMD-ONLY0:       cond.end1135:
// SIMD-ONLY0-NEXT:    [[COND1136:%.*]] = phi i32 [ [[CONV1132]], [[COND_TRUE1131]] ], [ [[CONV1134]], [[COND_FALSE1133]] ]
// SIMD-ONLY0-NEXT:    [[CONV1137:%.*]] = trunc i32 [[COND1136]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1137]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP456:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1138:%.*]] = sext i8 [[TMP456]] to i32
// SIMD-ONLY0-NEXT:    [[TMP457:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1139:%.*]] = sext i8 [[TMP457]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1140:%.*]] = icmp eq i32 [[CONV1138]], [[CONV1139]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1140]], label [[IF_THEN1142:%.*]], label [[IF_END1143:%.*]]
// SIMD-ONLY0:       if.then1142:
// SIMD-ONLY0-NEXT:    [[TMP458:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP458]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1143]]
// SIMD-ONLY0:       if.end1143:
// SIMD-ONLY0-NEXT:    [[TMP459:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1144:%.*]] = sext i8 [[TMP459]] to i32
// SIMD-ONLY0-NEXT:    [[TMP460:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1145:%.*]] = sext i8 [[TMP460]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1146:%.*]] = icmp eq i32 [[CONV1144]], [[CONV1145]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1146]], label [[IF_THEN1148:%.*]], label [[IF_END1149:%.*]]
// SIMD-ONLY0:       if.then1148:
// SIMD-ONLY0-NEXT:    [[TMP461:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP461]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1149]]
// SIMD-ONLY0:       if.end1149:
// SIMD-ONLY0-NEXT:    [[TMP462:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1150:%.*]] = zext i8 [[TMP462]] to i32
// SIMD-ONLY0-NEXT:    [[TMP463:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1151:%.*]] = zext i8 [[TMP463]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1152:%.*]] = icmp sgt i32 [[CONV1150]], [[CONV1151]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1152]], label [[COND_TRUE1154:%.*]], label [[COND_FALSE1156:%.*]]
// SIMD-ONLY0:       cond.true1154:
// SIMD-ONLY0-NEXT:    [[TMP464:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1155:%.*]] = zext i8 [[TMP464]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1158:%.*]]
// SIMD-ONLY0:       cond.false1156:
// SIMD-ONLY0-NEXT:    [[TMP465:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1157:%.*]] = zext i8 [[TMP465]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1158]]
// SIMD-ONLY0:       cond.end1158:
// SIMD-ONLY0-NEXT:    [[COND1159:%.*]] = phi i32 [ [[CONV1155]], [[COND_TRUE1154]] ], [ [[CONV1157]], [[COND_FALSE1156]] ]
// SIMD-ONLY0-NEXT:    [[CONV1160:%.*]] = trunc i32 [[COND1159]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1160]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP466:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1161:%.*]] = zext i8 [[TMP466]] to i32
// SIMD-ONLY0-NEXT:    [[TMP467:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1162:%.*]] = zext i8 [[TMP467]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1163:%.*]] = icmp slt i32 [[CONV1161]], [[CONV1162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1163]], label [[COND_TRUE1165:%.*]], label [[COND_FALSE1167:%.*]]
// SIMD-ONLY0:       cond.true1165:
// SIMD-ONLY0-NEXT:    [[TMP468:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1166:%.*]] = zext i8 [[TMP468]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1169:%.*]]
// SIMD-ONLY0:       cond.false1167:
// SIMD-ONLY0-NEXT:    [[TMP469:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1168:%.*]] = zext i8 [[TMP469]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1169]]
// SIMD-ONLY0:       cond.end1169:
// SIMD-ONLY0-NEXT:    [[COND1170:%.*]] = phi i32 [ [[CONV1166]], [[COND_TRUE1165]] ], [ [[CONV1168]], [[COND_FALSE1167]] ]
// SIMD-ONLY0-NEXT:    [[CONV1171:%.*]] = trunc i32 [[COND1170]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1171]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP470:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1172:%.*]] = zext i8 [[TMP470]] to i32
// SIMD-ONLY0-NEXT:    [[TMP471:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1173:%.*]] = zext i8 [[TMP471]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1174:%.*]] = icmp sgt i32 [[CONV1172]], [[CONV1173]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1174]], label [[COND_TRUE1176:%.*]], label [[COND_FALSE1178:%.*]]
// SIMD-ONLY0:       cond.true1176:
// SIMD-ONLY0-NEXT:    [[TMP472:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1177:%.*]] = zext i8 [[TMP472]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1180:%.*]]
// SIMD-ONLY0:       cond.false1178:
// SIMD-ONLY0-NEXT:    [[TMP473:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1179:%.*]] = zext i8 [[TMP473]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1180]]
// SIMD-ONLY0:       cond.end1180:
// SIMD-ONLY0-NEXT:    [[COND1181:%.*]] = phi i32 [ [[CONV1177]], [[COND_TRUE1176]] ], [ [[CONV1179]], [[COND_FALSE1178]] ]
// SIMD-ONLY0-NEXT:    [[CONV1182:%.*]] = trunc i32 [[COND1181]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1182]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP474:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1183:%.*]] = zext i8 [[TMP474]] to i32
// SIMD-ONLY0-NEXT:    [[TMP475:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1184:%.*]] = zext i8 [[TMP475]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1185:%.*]] = icmp slt i32 [[CONV1183]], [[CONV1184]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1185]], label [[COND_TRUE1187:%.*]], label [[COND_FALSE1189:%.*]]
// SIMD-ONLY0:       cond.true1187:
// SIMD-ONLY0-NEXT:    [[TMP476:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1188:%.*]] = zext i8 [[TMP476]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1191:%.*]]
// SIMD-ONLY0:       cond.false1189:
// SIMD-ONLY0-NEXT:    [[TMP477:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1190:%.*]] = zext i8 [[TMP477]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1191]]
// SIMD-ONLY0:       cond.end1191:
// SIMD-ONLY0-NEXT:    [[COND1192:%.*]] = phi i32 [ [[CONV1188]], [[COND_TRUE1187]] ], [ [[CONV1190]], [[COND_FALSE1189]] ]
// SIMD-ONLY0-NEXT:    [[CONV1193:%.*]] = trunc i32 [[COND1192]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1193]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP478:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1194:%.*]] = zext i8 [[TMP478]] to i32
// SIMD-ONLY0-NEXT:    [[TMP479:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1195:%.*]] = zext i8 [[TMP479]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1196:%.*]] = icmp sgt i32 [[CONV1194]], [[CONV1195]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1196]], label [[IF_THEN1198:%.*]], label [[IF_END1199:%.*]]
// SIMD-ONLY0:       if.then1198:
// SIMD-ONLY0-NEXT:    [[TMP480:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP480]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1199]]
// SIMD-ONLY0:       if.end1199:
// SIMD-ONLY0-NEXT:    [[TMP481:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1200:%.*]] = zext i8 [[TMP481]] to i32
// SIMD-ONLY0-NEXT:    [[TMP482:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1201:%.*]] = zext i8 [[TMP482]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1202:%.*]] = icmp slt i32 [[CONV1200]], [[CONV1201]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1202]], label [[IF_THEN1204:%.*]], label [[IF_END1205:%.*]]
// SIMD-ONLY0:       if.then1204:
// SIMD-ONLY0-NEXT:    [[TMP483:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP483]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1205]]
// SIMD-ONLY0:       if.end1205:
// SIMD-ONLY0-NEXT:    [[TMP484:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1206:%.*]] = zext i8 [[TMP484]] to i32
// SIMD-ONLY0-NEXT:    [[TMP485:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1207:%.*]] = zext i8 [[TMP485]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1208:%.*]] = icmp sgt i32 [[CONV1206]], [[CONV1207]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1208]], label [[IF_THEN1210:%.*]], label [[IF_END1211:%.*]]
// SIMD-ONLY0:       if.then1210:
// SIMD-ONLY0-NEXT:    [[TMP486:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP486]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1211]]
// SIMD-ONLY0:       if.end1211:
// SIMD-ONLY0-NEXT:    [[TMP487:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1212:%.*]] = zext i8 [[TMP487]] to i32
// SIMD-ONLY0-NEXT:    [[TMP488:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1213:%.*]] = zext i8 [[TMP488]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1214:%.*]] = icmp slt i32 [[CONV1212]], [[CONV1213]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1214]], label [[IF_THEN1216:%.*]], label [[IF_END1217:%.*]]
// SIMD-ONLY0:       if.then1216:
// SIMD-ONLY0-NEXT:    [[TMP489:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP489]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1217]]
// SIMD-ONLY0:       if.end1217:
// SIMD-ONLY0-NEXT:    [[TMP490:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1218:%.*]] = zext i8 [[TMP490]] to i32
// SIMD-ONLY0-NEXT:    [[TMP491:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1219:%.*]] = zext i8 [[TMP491]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1220:%.*]] = icmp eq i32 [[CONV1218]], [[CONV1219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1220]], label [[COND_TRUE1222:%.*]], label [[COND_FALSE1224:%.*]]
// SIMD-ONLY0:       cond.true1222:
// SIMD-ONLY0-NEXT:    [[TMP492:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1223:%.*]] = zext i8 [[TMP492]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1226:%.*]]
// SIMD-ONLY0:       cond.false1224:
// SIMD-ONLY0-NEXT:    [[TMP493:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1225:%.*]] = zext i8 [[TMP493]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1226]]
// SIMD-ONLY0:       cond.end1226:
// SIMD-ONLY0-NEXT:    [[COND1227:%.*]] = phi i32 [ [[CONV1223]], [[COND_TRUE1222]] ], [ [[CONV1225]], [[COND_FALSE1224]] ]
// SIMD-ONLY0-NEXT:    [[CONV1228:%.*]] = trunc i32 [[COND1227]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1228]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP494:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1229:%.*]] = zext i8 [[TMP494]] to i32
// SIMD-ONLY0-NEXT:    [[TMP495:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1230:%.*]] = zext i8 [[TMP495]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1231:%.*]] = icmp eq i32 [[CONV1229]], [[CONV1230]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1231]], label [[COND_TRUE1233:%.*]], label [[COND_FALSE1235:%.*]]
// SIMD-ONLY0:       cond.true1233:
// SIMD-ONLY0-NEXT:    [[TMP496:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1234:%.*]] = zext i8 [[TMP496]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1237:%.*]]
// SIMD-ONLY0:       cond.false1235:
// SIMD-ONLY0-NEXT:    [[TMP497:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1236:%.*]] = zext i8 [[TMP497]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1237]]
// SIMD-ONLY0:       cond.end1237:
// SIMD-ONLY0-NEXT:    [[COND1238:%.*]] = phi i32 [ [[CONV1234]], [[COND_TRUE1233]] ], [ [[CONV1236]], [[COND_FALSE1235]] ]
// SIMD-ONLY0-NEXT:    [[CONV1239:%.*]] = trunc i32 [[COND1238]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1239]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP498:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1240:%.*]] = zext i8 [[TMP498]] to i32
// SIMD-ONLY0-NEXT:    [[TMP499:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1241:%.*]] = zext i8 [[TMP499]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1242:%.*]] = icmp eq i32 [[CONV1240]], [[CONV1241]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1242]], label [[IF_THEN1244:%.*]], label [[IF_END1245:%.*]]
// SIMD-ONLY0:       if.then1244:
// SIMD-ONLY0-NEXT:    [[TMP500:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP500]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1245]]
// SIMD-ONLY0:       if.end1245:
// SIMD-ONLY0-NEXT:    [[TMP501:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1246:%.*]] = zext i8 [[TMP501]] to i32
// SIMD-ONLY0-NEXT:    [[TMP502:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1247:%.*]] = zext i8 [[TMP502]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1248:%.*]] = icmp eq i32 [[CONV1246]], [[CONV1247]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1248]], label [[IF_THEN1250:%.*]], label [[IF_END1251:%.*]]
// SIMD-ONLY0:       if.then1250:
// SIMD-ONLY0-NEXT:    [[TMP503:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP503]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1251]]
// SIMD-ONLY0:       if.end1251:
// SIMD-ONLY0-NEXT:    [[TMP504:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1252:%.*]] = sext i16 [[TMP504]] to i32
// SIMD-ONLY0-NEXT:    [[TMP505:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1253:%.*]] = sext i16 [[TMP505]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1254:%.*]] = icmp sgt i32 [[CONV1252]], [[CONV1253]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1254]], label [[COND_TRUE1256:%.*]], label [[COND_FALSE1258:%.*]]
// SIMD-ONLY0:       cond.true1256:
// SIMD-ONLY0-NEXT:    [[TMP506:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1257:%.*]] = sext i16 [[TMP506]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1260:%.*]]
// SIMD-ONLY0:       cond.false1258:
// SIMD-ONLY0-NEXT:    [[TMP507:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1259:%.*]] = sext i16 [[TMP507]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1260]]
// SIMD-ONLY0:       cond.end1260:
// SIMD-ONLY0-NEXT:    [[COND1261:%.*]] = phi i32 [ [[CONV1257]], [[COND_TRUE1256]] ], [ [[CONV1259]], [[COND_FALSE1258]] ]
// SIMD-ONLY0-NEXT:    [[CONV1262:%.*]] = trunc i32 [[COND1261]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1262]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP508:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1263:%.*]] = sext i16 [[TMP508]] to i32
// SIMD-ONLY0-NEXT:    [[TMP509:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1264:%.*]] = sext i16 [[TMP509]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1265:%.*]] = icmp slt i32 [[CONV1263]], [[CONV1264]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1265]], label [[COND_TRUE1267:%.*]], label [[COND_FALSE1269:%.*]]
// SIMD-ONLY0:       cond.true1267:
// SIMD-ONLY0-NEXT:    [[TMP510:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1268:%.*]] = sext i16 [[TMP510]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1271:%.*]]
// SIMD-ONLY0:       cond.false1269:
// SIMD-ONLY0-NEXT:    [[TMP511:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1270:%.*]] = sext i16 [[TMP511]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1271]]
// SIMD-ONLY0:       cond.end1271:
// SIMD-ONLY0-NEXT:    [[COND1272:%.*]] = phi i32 [ [[CONV1268]], [[COND_TRUE1267]] ], [ [[CONV1270]], [[COND_FALSE1269]] ]
// SIMD-ONLY0-NEXT:    [[CONV1273:%.*]] = trunc i32 [[COND1272]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1273]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP512:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1274:%.*]] = sext i16 [[TMP512]] to i32
// SIMD-ONLY0-NEXT:    [[TMP513:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1275:%.*]] = sext i16 [[TMP513]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1276:%.*]] = icmp sgt i32 [[CONV1274]], [[CONV1275]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1276]], label [[COND_TRUE1278:%.*]], label [[COND_FALSE1280:%.*]]
// SIMD-ONLY0:       cond.true1278:
// SIMD-ONLY0-NEXT:    [[TMP514:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1279:%.*]] = sext i16 [[TMP514]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1282:%.*]]
// SIMD-ONLY0:       cond.false1280:
// SIMD-ONLY0-NEXT:    [[TMP515:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1281:%.*]] = sext i16 [[TMP515]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1282]]
// SIMD-ONLY0:       cond.end1282:
// SIMD-ONLY0-NEXT:    [[COND1283:%.*]] = phi i32 [ [[CONV1279]], [[COND_TRUE1278]] ], [ [[CONV1281]], [[COND_FALSE1280]] ]
// SIMD-ONLY0-NEXT:    [[CONV1284:%.*]] = trunc i32 [[COND1283]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1284]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP516:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1285:%.*]] = sext i16 [[TMP516]] to i32
// SIMD-ONLY0-NEXT:    [[TMP517:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1286:%.*]] = sext i16 [[TMP517]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1287:%.*]] = icmp slt i32 [[CONV1285]], [[CONV1286]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1287]], label [[COND_TRUE1289:%.*]], label [[COND_FALSE1291:%.*]]
// SIMD-ONLY0:       cond.true1289:
// SIMD-ONLY0-NEXT:    [[TMP518:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1290:%.*]] = sext i16 [[TMP518]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1293:%.*]]
// SIMD-ONLY0:       cond.false1291:
// SIMD-ONLY0-NEXT:    [[TMP519:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1292:%.*]] = sext i16 [[TMP519]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1293]]
// SIMD-ONLY0:       cond.end1293:
// SIMD-ONLY0-NEXT:    [[COND1294:%.*]] = phi i32 [ [[CONV1290]], [[COND_TRUE1289]] ], [ [[CONV1292]], [[COND_FALSE1291]] ]
// SIMD-ONLY0-NEXT:    [[CONV1295:%.*]] = trunc i32 [[COND1294]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1295]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP520:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1296:%.*]] = sext i16 [[TMP520]] to i32
// SIMD-ONLY0-NEXT:    [[TMP521:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1297:%.*]] = sext i16 [[TMP521]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1298:%.*]] = icmp sgt i32 [[CONV1296]], [[CONV1297]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1298]], label [[IF_THEN1300:%.*]], label [[IF_END1301:%.*]]
// SIMD-ONLY0:       if.then1300:
// SIMD-ONLY0-NEXT:    [[TMP522:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP522]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1301]]
// SIMD-ONLY0:       if.end1301:
// SIMD-ONLY0-NEXT:    [[TMP523:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1302:%.*]] = sext i16 [[TMP523]] to i32
// SIMD-ONLY0-NEXT:    [[TMP524:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1303:%.*]] = sext i16 [[TMP524]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1304:%.*]] = icmp slt i32 [[CONV1302]], [[CONV1303]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1304]], label [[IF_THEN1306:%.*]], label [[IF_END1307:%.*]]
// SIMD-ONLY0:       if.then1306:
// SIMD-ONLY0-NEXT:    [[TMP525:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP525]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1307]]
// SIMD-ONLY0:       if.end1307:
// SIMD-ONLY0-NEXT:    [[TMP526:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1308:%.*]] = sext i16 [[TMP526]] to i32
// SIMD-ONLY0-NEXT:    [[TMP527:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1309:%.*]] = sext i16 [[TMP527]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1310:%.*]] = icmp sgt i32 [[CONV1308]], [[CONV1309]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1310]], label [[IF_THEN1312:%.*]], label [[IF_END1313:%.*]]
// SIMD-ONLY0:       if.then1312:
// SIMD-ONLY0-NEXT:    [[TMP528:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP528]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1313]]
// SIMD-ONLY0:       if.end1313:
// SIMD-ONLY0-NEXT:    [[TMP529:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1314:%.*]] = sext i16 [[TMP529]] to i32
// SIMD-ONLY0-NEXT:    [[TMP530:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1315:%.*]] = sext i16 [[TMP530]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1316:%.*]] = icmp slt i32 [[CONV1314]], [[CONV1315]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1316]], label [[IF_THEN1318:%.*]], label [[IF_END1319:%.*]]
// SIMD-ONLY0:       if.then1318:
// SIMD-ONLY0-NEXT:    [[TMP531:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP531]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1319]]
// SIMD-ONLY0:       if.end1319:
// SIMD-ONLY0-NEXT:    [[TMP532:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1320:%.*]] = sext i16 [[TMP532]] to i32
// SIMD-ONLY0-NEXT:    [[TMP533:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1321:%.*]] = sext i16 [[TMP533]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1322:%.*]] = icmp eq i32 [[CONV1320]], [[CONV1321]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1322]], label [[COND_TRUE1324:%.*]], label [[COND_FALSE1326:%.*]]
// SIMD-ONLY0:       cond.true1324:
// SIMD-ONLY0-NEXT:    [[TMP534:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1325:%.*]] = sext i16 [[TMP534]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1328:%.*]]
// SIMD-ONLY0:       cond.false1326:
// SIMD-ONLY0-NEXT:    [[TMP535:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1327:%.*]] = sext i16 [[TMP535]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1328]]
// SIMD-ONLY0:       cond.end1328:
// SIMD-ONLY0-NEXT:    [[COND1329:%.*]] = phi i32 [ [[CONV1325]], [[COND_TRUE1324]] ], [ [[CONV1327]], [[COND_FALSE1326]] ]
// SIMD-ONLY0-NEXT:    [[CONV1330:%.*]] = trunc i32 [[COND1329]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1330]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP536:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1331:%.*]] = sext i16 [[TMP536]] to i32
// SIMD-ONLY0-NEXT:    [[TMP537:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1332:%.*]] = sext i16 [[TMP537]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1333:%.*]] = icmp eq i32 [[CONV1331]], [[CONV1332]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1333]], label [[COND_TRUE1335:%.*]], label [[COND_FALSE1337:%.*]]
// SIMD-ONLY0:       cond.true1335:
// SIMD-ONLY0-NEXT:    [[TMP538:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1336:%.*]] = sext i16 [[TMP538]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1339:%.*]]
// SIMD-ONLY0:       cond.false1337:
// SIMD-ONLY0-NEXT:    [[TMP539:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1338:%.*]] = sext i16 [[TMP539]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1339]]
// SIMD-ONLY0:       cond.end1339:
// SIMD-ONLY0-NEXT:    [[COND1340:%.*]] = phi i32 [ [[CONV1336]], [[COND_TRUE1335]] ], [ [[CONV1338]], [[COND_FALSE1337]] ]
// SIMD-ONLY0-NEXT:    [[CONV1341:%.*]] = trunc i32 [[COND1340]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1341]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP540:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1342:%.*]] = sext i16 [[TMP540]] to i32
// SIMD-ONLY0-NEXT:    [[TMP541:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1343:%.*]] = sext i16 [[TMP541]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1344:%.*]] = icmp eq i32 [[CONV1342]], [[CONV1343]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1344]], label [[IF_THEN1346:%.*]], label [[IF_END1347:%.*]]
// SIMD-ONLY0:       if.then1346:
// SIMD-ONLY0-NEXT:    [[TMP542:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP542]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1347]]
// SIMD-ONLY0:       if.end1347:
// SIMD-ONLY0-NEXT:    [[TMP543:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1348:%.*]] = sext i16 [[TMP543]] to i32
// SIMD-ONLY0-NEXT:    [[TMP544:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1349:%.*]] = sext i16 [[TMP544]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1350:%.*]] = icmp eq i32 [[CONV1348]], [[CONV1349]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1350]], label [[IF_THEN1352:%.*]], label [[IF_END1353:%.*]]
// SIMD-ONLY0:       if.then1352:
// SIMD-ONLY0-NEXT:    [[TMP545:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP545]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1353]]
// SIMD-ONLY0:       if.end1353:
// SIMD-ONLY0-NEXT:    [[TMP546:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1354:%.*]] = zext i16 [[TMP546]] to i32
// SIMD-ONLY0-NEXT:    [[TMP547:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1355:%.*]] = zext i16 [[TMP547]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1356:%.*]] = icmp sgt i32 [[CONV1354]], [[CONV1355]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1356]], label [[COND_TRUE1358:%.*]], label [[COND_FALSE1360:%.*]]
// SIMD-ONLY0:       cond.true1358:
// SIMD-ONLY0-NEXT:    [[TMP548:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1359:%.*]] = zext i16 [[TMP548]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1362:%.*]]
// SIMD-ONLY0:       cond.false1360:
// SIMD-ONLY0-NEXT:    [[TMP549:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1361:%.*]] = zext i16 [[TMP549]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1362]]
// SIMD-ONLY0:       cond.end1362:
// SIMD-ONLY0-NEXT:    [[COND1363:%.*]] = phi i32 [ [[CONV1359]], [[COND_TRUE1358]] ], [ [[CONV1361]], [[COND_FALSE1360]] ]
// SIMD-ONLY0-NEXT:    [[CONV1364:%.*]] = trunc i32 [[COND1363]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1364]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP550:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1365:%.*]] = zext i16 [[TMP550]] to i32
// SIMD-ONLY0-NEXT:    [[TMP551:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1366:%.*]] = zext i16 [[TMP551]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1367:%.*]] = icmp slt i32 [[CONV1365]], [[CONV1366]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1367]], label [[COND_TRUE1369:%.*]], label [[COND_FALSE1371:%.*]]
// SIMD-ONLY0:       cond.true1369:
// SIMD-ONLY0-NEXT:    [[TMP552:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1370:%.*]] = zext i16 [[TMP552]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1373:%.*]]
// SIMD-ONLY0:       cond.false1371:
// SIMD-ONLY0-NEXT:    [[TMP553:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1372:%.*]] = zext i16 [[TMP553]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1373]]
// SIMD-ONLY0:       cond.end1373:
// SIMD-ONLY0-NEXT:    [[COND1374:%.*]] = phi i32 [ [[CONV1370]], [[COND_TRUE1369]] ], [ [[CONV1372]], [[COND_FALSE1371]] ]
// SIMD-ONLY0-NEXT:    [[CONV1375:%.*]] = trunc i32 [[COND1374]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1375]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP554:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1376:%.*]] = zext i16 [[TMP554]] to i32
// SIMD-ONLY0-NEXT:    [[TMP555:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1377:%.*]] = zext i16 [[TMP555]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1378:%.*]] = icmp sgt i32 [[CONV1376]], [[CONV1377]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1378]], label [[COND_TRUE1380:%.*]], label [[COND_FALSE1382:%.*]]
// SIMD-ONLY0:       cond.true1380:
// SIMD-ONLY0-NEXT:    [[TMP556:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1381:%.*]] = zext i16 [[TMP556]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1384:%.*]]
// SIMD-ONLY0:       cond.false1382:
// SIMD-ONLY0-NEXT:    [[TMP557:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1383:%.*]] = zext i16 [[TMP557]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1384]]
// SIMD-ONLY0:       cond.end1384:
// SIMD-ONLY0-NEXT:    [[COND1385:%.*]] = phi i32 [ [[CONV1381]], [[COND_TRUE1380]] ], [ [[CONV1383]], [[COND_FALSE1382]] ]
// SIMD-ONLY0-NEXT:    [[CONV1386:%.*]] = trunc i32 [[COND1385]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1386]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP558:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1387:%.*]] = zext i16 [[TMP558]] to i32
// SIMD-ONLY0-NEXT:    [[TMP559:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1388:%.*]] = zext i16 [[TMP559]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1389:%.*]] = icmp slt i32 [[CONV1387]], [[CONV1388]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1389]], label [[COND_TRUE1391:%.*]], label [[COND_FALSE1393:%.*]]
// SIMD-ONLY0:       cond.true1391:
// SIMD-ONLY0-NEXT:    [[TMP560:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1392:%.*]] = zext i16 [[TMP560]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1395:%.*]]
// SIMD-ONLY0:       cond.false1393:
// SIMD-ONLY0-NEXT:    [[TMP561:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1394:%.*]] = zext i16 [[TMP561]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1395]]
// SIMD-ONLY0:       cond.end1395:
// SIMD-ONLY0-NEXT:    [[COND1396:%.*]] = phi i32 [ [[CONV1392]], [[COND_TRUE1391]] ], [ [[CONV1394]], [[COND_FALSE1393]] ]
// SIMD-ONLY0-NEXT:    [[CONV1397:%.*]] = trunc i32 [[COND1396]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1397]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP562:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1398:%.*]] = zext i16 [[TMP562]] to i32
// SIMD-ONLY0-NEXT:    [[TMP563:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1399:%.*]] = zext i16 [[TMP563]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1400:%.*]] = icmp sgt i32 [[CONV1398]], [[CONV1399]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1400]], label [[IF_THEN1402:%.*]], label [[IF_END1403:%.*]]
// SIMD-ONLY0:       if.then1402:
// SIMD-ONLY0-NEXT:    [[TMP564:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP564]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1403]]
// SIMD-ONLY0:       if.end1403:
// SIMD-ONLY0-NEXT:    [[TMP565:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1404:%.*]] = zext i16 [[TMP565]] to i32
// SIMD-ONLY0-NEXT:    [[TMP566:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1405:%.*]] = zext i16 [[TMP566]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1406:%.*]] = icmp slt i32 [[CONV1404]], [[CONV1405]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1406]], label [[IF_THEN1408:%.*]], label [[IF_END1409:%.*]]
// SIMD-ONLY0:       if.then1408:
// SIMD-ONLY0-NEXT:    [[TMP567:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP567]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1409]]
// SIMD-ONLY0:       if.end1409:
// SIMD-ONLY0-NEXT:    [[TMP568:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1410:%.*]] = zext i16 [[TMP568]] to i32
// SIMD-ONLY0-NEXT:    [[TMP569:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1411:%.*]] = zext i16 [[TMP569]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1412:%.*]] = icmp sgt i32 [[CONV1410]], [[CONV1411]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1412]], label [[IF_THEN1414:%.*]], label [[IF_END1415:%.*]]
// SIMD-ONLY0:       if.then1414:
// SIMD-ONLY0-NEXT:    [[TMP570:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP570]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1415]]
// SIMD-ONLY0:       if.end1415:
// SIMD-ONLY0-NEXT:    [[TMP571:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1416:%.*]] = zext i16 [[TMP571]] to i32
// SIMD-ONLY0-NEXT:    [[TMP572:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1417:%.*]] = zext i16 [[TMP572]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1418:%.*]] = icmp slt i32 [[CONV1416]], [[CONV1417]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1418]], label [[IF_THEN1420:%.*]], label [[IF_END1421:%.*]]
// SIMD-ONLY0:       if.then1420:
// SIMD-ONLY0-NEXT:    [[TMP573:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP573]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1421]]
// SIMD-ONLY0:       if.end1421:
// SIMD-ONLY0-NEXT:    [[TMP574:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1422:%.*]] = zext i16 [[TMP574]] to i32
// SIMD-ONLY0-NEXT:    [[TMP575:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1423:%.*]] = zext i16 [[TMP575]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1424:%.*]] = icmp eq i32 [[CONV1422]], [[CONV1423]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1424]], label [[COND_TRUE1426:%.*]], label [[COND_FALSE1428:%.*]]
// SIMD-ONLY0:       cond.true1426:
// SIMD-ONLY0-NEXT:    [[TMP576:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1427:%.*]] = zext i16 [[TMP576]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1430:%.*]]
// SIMD-ONLY0:       cond.false1428:
// SIMD-ONLY0-NEXT:    [[TMP577:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1429:%.*]] = zext i16 [[TMP577]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1430]]
// SIMD-ONLY0:       cond.end1430:
// SIMD-ONLY0-NEXT:    [[COND1431:%.*]] = phi i32 [ [[CONV1427]], [[COND_TRUE1426]] ], [ [[CONV1429]], [[COND_FALSE1428]] ]
// SIMD-ONLY0-NEXT:    [[CONV1432:%.*]] = trunc i32 [[COND1431]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1432]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP578:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1433:%.*]] = zext i16 [[TMP578]] to i32
// SIMD-ONLY0-NEXT:    [[TMP579:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1434:%.*]] = zext i16 [[TMP579]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1435:%.*]] = icmp eq i32 [[CONV1433]], [[CONV1434]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1435]], label [[COND_TRUE1437:%.*]], label [[COND_FALSE1439:%.*]]
// SIMD-ONLY0:       cond.true1437:
// SIMD-ONLY0-NEXT:    [[TMP580:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1438:%.*]] = zext i16 [[TMP580]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1441:%.*]]
// SIMD-ONLY0:       cond.false1439:
// SIMD-ONLY0-NEXT:    [[TMP581:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1440:%.*]] = zext i16 [[TMP581]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1441]]
// SIMD-ONLY0:       cond.end1441:
// SIMD-ONLY0-NEXT:    [[COND1442:%.*]] = phi i32 [ [[CONV1438]], [[COND_TRUE1437]] ], [ [[CONV1440]], [[COND_FALSE1439]] ]
// SIMD-ONLY0-NEXT:    [[CONV1443:%.*]] = trunc i32 [[COND1442]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1443]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP582:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1444:%.*]] = zext i16 [[TMP582]] to i32
// SIMD-ONLY0-NEXT:    [[TMP583:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1445:%.*]] = zext i16 [[TMP583]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1446:%.*]] = icmp eq i32 [[CONV1444]], [[CONV1445]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1446]], label [[IF_THEN1448:%.*]], label [[IF_END1449:%.*]]
// SIMD-ONLY0:       if.then1448:
// SIMD-ONLY0-NEXT:    [[TMP584:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP584]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1449]]
// SIMD-ONLY0:       if.end1449:
// SIMD-ONLY0-NEXT:    [[TMP585:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1450:%.*]] = zext i16 [[TMP585]] to i32
// SIMD-ONLY0-NEXT:    [[TMP586:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1451:%.*]] = zext i16 [[TMP586]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1452:%.*]] = icmp eq i32 [[CONV1450]], [[CONV1451]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1452]], label [[IF_THEN1454:%.*]], label [[IF_END1455:%.*]]
// SIMD-ONLY0:       if.then1454:
// SIMD-ONLY0-NEXT:    [[TMP587:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP587]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1455]]
// SIMD-ONLY0:       if.end1455:
// SIMD-ONLY0-NEXT:    [[TMP588:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1456:%.*]] = sext i16 [[TMP588]] to i32
// SIMD-ONLY0-NEXT:    [[TMP589:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1457:%.*]] = sext i16 [[TMP589]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1458:%.*]] = icmp sgt i32 [[CONV1456]], [[CONV1457]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1458]], label [[COND_TRUE1460:%.*]], label [[COND_FALSE1462:%.*]]
// SIMD-ONLY0:       cond.true1460:
// SIMD-ONLY0-NEXT:    [[TMP590:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1461:%.*]] = sext i16 [[TMP590]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1464:%.*]]
// SIMD-ONLY0:       cond.false1462:
// SIMD-ONLY0-NEXT:    [[TMP591:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1463:%.*]] = sext i16 [[TMP591]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1464]]
// SIMD-ONLY0:       cond.end1464:
// SIMD-ONLY0-NEXT:    [[COND1465:%.*]] = phi i32 [ [[CONV1461]], [[COND_TRUE1460]] ], [ [[CONV1463]], [[COND_FALSE1462]] ]
// SIMD-ONLY0-NEXT:    [[CONV1466:%.*]] = trunc i32 [[COND1465]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1466]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP592:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1467:%.*]] = sext i16 [[TMP592]] to i32
// SIMD-ONLY0-NEXT:    [[TMP593:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1468:%.*]] = sext i16 [[TMP593]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1469:%.*]] = icmp slt i32 [[CONV1467]], [[CONV1468]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1469]], label [[COND_TRUE1471:%.*]], label [[COND_FALSE1473:%.*]]
// SIMD-ONLY0:       cond.true1471:
// SIMD-ONLY0-NEXT:    [[TMP594:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1472:%.*]] = sext i16 [[TMP594]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1475:%.*]]
// SIMD-ONLY0:       cond.false1473:
// SIMD-ONLY0-NEXT:    [[TMP595:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1474:%.*]] = sext i16 [[TMP595]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1475]]
// SIMD-ONLY0:       cond.end1475:
// SIMD-ONLY0-NEXT:    [[COND1476:%.*]] = phi i32 [ [[CONV1472]], [[COND_TRUE1471]] ], [ [[CONV1474]], [[COND_FALSE1473]] ]
// SIMD-ONLY0-NEXT:    [[CONV1477:%.*]] = trunc i32 [[COND1476]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1477]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP596:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1478:%.*]] = sext i16 [[TMP596]] to i32
// SIMD-ONLY0-NEXT:    [[TMP597:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1479:%.*]] = sext i16 [[TMP597]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1480:%.*]] = icmp sgt i32 [[CONV1478]], [[CONV1479]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1480]], label [[COND_TRUE1482:%.*]], label [[COND_FALSE1484:%.*]]
// SIMD-ONLY0:       cond.true1482:
// SIMD-ONLY0-NEXT:    [[TMP598:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1483:%.*]] = sext i16 [[TMP598]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1486:%.*]]
// SIMD-ONLY0:       cond.false1484:
// SIMD-ONLY0-NEXT:    [[TMP599:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1485:%.*]] = sext i16 [[TMP599]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1486]]
// SIMD-ONLY0:       cond.end1486:
// SIMD-ONLY0-NEXT:    [[COND1487:%.*]] = phi i32 [ [[CONV1483]], [[COND_TRUE1482]] ], [ [[CONV1485]], [[COND_FALSE1484]] ]
// SIMD-ONLY0-NEXT:    [[CONV1488:%.*]] = trunc i32 [[COND1487]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1488]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP600:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1489:%.*]] = sext i16 [[TMP600]] to i32
// SIMD-ONLY0-NEXT:    [[TMP601:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1490:%.*]] = sext i16 [[TMP601]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1491:%.*]] = icmp slt i32 [[CONV1489]], [[CONV1490]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1491]], label [[COND_TRUE1493:%.*]], label [[COND_FALSE1495:%.*]]
// SIMD-ONLY0:       cond.true1493:
// SIMD-ONLY0-NEXT:    [[TMP602:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1494:%.*]] = sext i16 [[TMP602]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1497:%.*]]
// SIMD-ONLY0:       cond.false1495:
// SIMD-ONLY0-NEXT:    [[TMP603:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1496:%.*]] = sext i16 [[TMP603]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1497]]
// SIMD-ONLY0:       cond.end1497:
// SIMD-ONLY0-NEXT:    [[COND1498:%.*]] = phi i32 [ [[CONV1494]], [[COND_TRUE1493]] ], [ [[CONV1496]], [[COND_FALSE1495]] ]
// SIMD-ONLY0-NEXT:    [[CONV1499:%.*]] = trunc i32 [[COND1498]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1499]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP604:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1500:%.*]] = sext i16 [[TMP604]] to i32
// SIMD-ONLY0-NEXT:    [[TMP605:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1501:%.*]] = sext i16 [[TMP605]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1502:%.*]] = icmp sgt i32 [[CONV1500]], [[CONV1501]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1502]], label [[IF_THEN1504:%.*]], label [[IF_END1505:%.*]]
// SIMD-ONLY0:       if.then1504:
// SIMD-ONLY0-NEXT:    [[TMP606:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP606]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1505]]
// SIMD-ONLY0:       if.end1505:
// SIMD-ONLY0-NEXT:    [[TMP607:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1506:%.*]] = sext i16 [[TMP607]] to i32
// SIMD-ONLY0-NEXT:    [[TMP608:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1507:%.*]] = sext i16 [[TMP608]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1508:%.*]] = icmp slt i32 [[CONV1506]], [[CONV1507]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1508]], label [[IF_THEN1510:%.*]], label [[IF_END1511:%.*]]
// SIMD-ONLY0:       if.then1510:
// SIMD-ONLY0-NEXT:    [[TMP609:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP609]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1511]]
// SIMD-ONLY0:       if.end1511:
// SIMD-ONLY0-NEXT:    [[TMP610:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1512:%.*]] = sext i16 [[TMP610]] to i32
// SIMD-ONLY0-NEXT:    [[TMP611:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1513:%.*]] = sext i16 [[TMP611]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1514:%.*]] = icmp sgt i32 [[CONV1512]], [[CONV1513]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1514]], label [[IF_THEN1516:%.*]], label [[IF_END1517:%.*]]
// SIMD-ONLY0:       if.then1516:
// SIMD-ONLY0-NEXT:    [[TMP612:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP612]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1517]]
// SIMD-ONLY0:       if.end1517:
// SIMD-ONLY0-NEXT:    [[TMP613:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1518:%.*]] = sext i16 [[TMP613]] to i32
// SIMD-ONLY0-NEXT:    [[TMP614:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1519:%.*]] = sext i16 [[TMP614]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1520:%.*]] = icmp slt i32 [[CONV1518]], [[CONV1519]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1520]], label [[IF_THEN1522:%.*]], label [[IF_END1523:%.*]]
// SIMD-ONLY0:       if.then1522:
// SIMD-ONLY0-NEXT:    [[TMP615:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP615]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1523]]
// SIMD-ONLY0:       if.end1523:
// SIMD-ONLY0-NEXT:    [[TMP616:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1524:%.*]] = sext i16 [[TMP616]] to i32
// SIMD-ONLY0-NEXT:    [[TMP617:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1525:%.*]] = sext i16 [[TMP617]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1526:%.*]] = icmp eq i32 [[CONV1524]], [[CONV1525]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1526]], label [[COND_TRUE1528:%.*]], label [[COND_FALSE1530:%.*]]
// SIMD-ONLY0:       cond.true1528:
// SIMD-ONLY0-NEXT:    [[TMP618:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1529:%.*]] = sext i16 [[TMP618]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1532:%.*]]
// SIMD-ONLY0:       cond.false1530:
// SIMD-ONLY0-NEXT:    [[TMP619:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1531:%.*]] = sext i16 [[TMP619]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1532]]
// SIMD-ONLY0:       cond.end1532:
// SIMD-ONLY0-NEXT:    [[COND1533:%.*]] = phi i32 [ [[CONV1529]], [[COND_TRUE1528]] ], [ [[CONV1531]], [[COND_FALSE1530]] ]
// SIMD-ONLY0-NEXT:    [[CONV1534:%.*]] = trunc i32 [[COND1533]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1534]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP620:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1535:%.*]] = sext i16 [[TMP620]] to i32
// SIMD-ONLY0-NEXT:    [[TMP621:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1536:%.*]] = sext i16 [[TMP621]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1537:%.*]] = icmp eq i32 [[CONV1535]], [[CONV1536]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1537]], label [[COND_TRUE1539:%.*]], label [[COND_FALSE1541:%.*]]
// SIMD-ONLY0:       cond.true1539:
// SIMD-ONLY0-NEXT:    [[TMP622:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1540:%.*]] = sext i16 [[TMP622]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1543:%.*]]
// SIMD-ONLY0:       cond.false1541:
// SIMD-ONLY0-NEXT:    [[TMP623:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1542:%.*]] = sext i16 [[TMP623]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1543]]
// SIMD-ONLY0:       cond.end1543:
// SIMD-ONLY0-NEXT:    [[COND1544:%.*]] = phi i32 [ [[CONV1540]], [[COND_TRUE1539]] ], [ [[CONV1542]], [[COND_FALSE1541]] ]
// SIMD-ONLY0-NEXT:    [[CONV1545:%.*]] = trunc i32 [[COND1544]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1545]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP624:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1546:%.*]] = sext i16 [[TMP624]] to i32
// SIMD-ONLY0-NEXT:    [[TMP625:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1547:%.*]] = sext i16 [[TMP625]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1548:%.*]] = icmp eq i32 [[CONV1546]], [[CONV1547]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1548]], label [[IF_THEN1550:%.*]], label [[IF_END1551:%.*]]
// SIMD-ONLY0:       if.then1550:
// SIMD-ONLY0-NEXT:    [[TMP626:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP626]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1551]]
// SIMD-ONLY0:       if.end1551:
// SIMD-ONLY0-NEXT:    [[TMP627:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1552:%.*]] = sext i16 [[TMP627]] to i32
// SIMD-ONLY0-NEXT:    [[TMP628:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1553:%.*]] = sext i16 [[TMP628]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1554:%.*]] = icmp eq i32 [[CONV1552]], [[CONV1553]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1554]], label [[IF_THEN1556:%.*]], label [[IF_END1557:%.*]]
// SIMD-ONLY0:       if.then1556:
// SIMD-ONLY0-NEXT:    [[TMP629:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP629]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1557]]
// SIMD-ONLY0:       if.end1557:
// SIMD-ONLY0-NEXT:    [[TMP630:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1558:%.*]] = zext i16 [[TMP630]] to i32
// SIMD-ONLY0-NEXT:    [[TMP631:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1559:%.*]] = zext i16 [[TMP631]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1560:%.*]] = icmp sgt i32 [[CONV1558]], [[CONV1559]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1560]], label [[COND_TRUE1562:%.*]], label [[COND_FALSE1564:%.*]]
// SIMD-ONLY0:       cond.true1562:
// SIMD-ONLY0-NEXT:    [[TMP632:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1563:%.*]] = zext i16 [[TMP632]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1566:%.*]]
// SIMD-ONLY0:       cond.false1564:
// SIMD-ONLY0-NEXT:    [[TMP633:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1565:%.*]] = zext i16 [[TMP633]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1566]]
// SIMD-ONLY0:       cond.end1566:
// SIMD-ONLY0-NEXT:    [[COND1567:%.*]] = phi i32 [ [[CONV1563]], [[COND_TRUE1562]] ], [ [[CONV1565]], [[COND_FALSE1564]] ]
// SIMD-ONLY0-NEXT:    [[CONV1568:%.*]] = trunc i32 [[COND1567]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1568]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP634:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1569:%.*]] = zext i16 [[TMP634]] to i32
// SIMD-ONLY0-NEXT:    [[TMP635:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1570:%.*]] = zext i16 [[TMP635]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1571:%.*]] = icmp slt i32 [[CONV1569]], [[CONV1570]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1571]], label [[COND_TRUE1573:%.*]], label [[COND_FALSE1575:%.*]]
// SIMD-ONLY0:       cond.true1573:
// SIMD-ONLY0-NEXT:    [[TMP636:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1574:%.*]] = zext i16 [[TMP636]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1577:%.*]]
// SIMD-ONLY0:       cond.false1575:
// SIMD-ONLY0-NEXT:    [[TMP637:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1576:%.*]] = zext i16 [[TMP637]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1577]]
// SIMD-ONLY0:       cond.end1577:
// SIMD-ONLY0-NEXT:    [[COND1578:%.*]] = phi i32 [ [[CONV1574]], [[COND_TRUE1573]] ], [ [[CONV1576]], [[COND_FALSE1575]] ]
// SIMD-ONLY0-NEXT:    [[CONV1579:%.*]] = trunc i32 [[COND1578]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1579]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP638:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1580:%.*]] = zext i16 [[TMP638]] to i32
// SIMD-ONLY0-NEXT:    [[TMP639:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1581:%.*]] = zext i16 [[TMP639]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1582:%.*]] = icmp sgt i32 [[CONV1580]], [[CONV1581]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1582]], label [[COND_TRUE1584:%.*]], label [[COND_FALSE1586:%.*]]
// SIMD-ONLY0:       cond.true1584:
// SIMD-ONLY0-NEXT:    [[TMP640:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1585:%.*]] = zext i16 [[TMP640]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1588:%.*]]
// SIMD-ONLY0:       cond.false1586:
// SIMD-ONLY0-NEXT:    [[TMP641:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1587:%.*]] = zext i16 [[TMP641]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1588]]
// SIMD-ONLY0:       cond.end1588:
// SIMD-ONLY0-NEXT:    [[COND1589:%.*]] = phi i32 [ [[CONV1585]], [[COND_TRUE1584]] ], [ [[CONV1587]], [[COND_FALSE1586]] ]
// SIMD-ONLY0-NEXT:    [[CONV1590:%.*]] = trunc i32 [[COND1589]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1590]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP642:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1591:%.*]] = zext i16 [[TMP642]] to i32
// SIMD-ONLY0-NEXT:    [[TMP643:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1592:%.*]] = zext i16 [[TMP643]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1593:%.*]] = icmp slt i32 [[CONV1591]], [[CONV1592]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1593]], label [[COND_TRUE1595:%.*]], label [[COND_FALSE1597:%.*]]
// SIMD-ONLY0:       cond.true1595:
// SIMD-ONLY0-NEXT:    [[TMP644:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1596:%.*]] = zext i16 [[TMP644]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1599:%.*]]
// SIMD-ONLY0:       cond.false1597:
// SIMD-ONLY0-NEXT:    [[TMP645:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1598:%.*]] = zext i16 [[TMP645]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1599]]
// SIMD-ONLY0:       cond.end1599:
// SIMD-ONLY0-NEXT:    [[COND1600:%.*]] = phi i32 [ [[CONV1596]], [[COND_TRUE1595]] ], [ [[CONV1598]], [[COND_FALSE1597]] ]
// SIMD-ONLY0-NEXT:    [[CONV1601:%.*]] = trunc i32 [[COND1600]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1601]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP646:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1602:%.*]] = zext i16 [[TMP646]] to i32
// SIMD-ONLY0-NEXT:    [[TMP647:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1603:%.*]] = zext i16 [[TMP647]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1604:%.*]] = icmp sgt i32 [[CONV1602]], [[CONV1603]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1604]], label [[IF_THEN1606:%.*]], label [[IF_END1607:%.*]]
// SIMD-ONLY0:       if.then1606:
// SIMD-ONLY0-NEXT:    [[TMP648:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP648]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1607]]
// SIMD-ONLY0:       if.end1607:
// SIMD-ONLY0-NEXT:    [[TMP649:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1608:%.*]] = zext i16 [[TMP649]] to i32
// SIMD-ONLY0-NEXT:    [[TMP650:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1609:%.*]] = zext i16 [[TMP650]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1610:%.*]] = icmp slt i32 [[CONV1608]], [[CONV1609]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1610]], label [[IF_THEN1612:%.*]], label [[IF_END1613:%.*]]
// SIMD-ONLY0:       if.then1612:
// SIMD-ONLY0-NEXT:    [[TMP651:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP651]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1613]]
// SIMD-ONLY0:       if.end1613:
// SIMD-ONLY0-NEXT:    [[TMP652:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1614:%.*]] = zext i16 [[TMP652]] to i32
// SIMD-ONLY0-NEXT:    [[TMP653:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1615:%.*]] = zext i16 [[TMP653]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1616:%.*]] = icmp sgt i32 [[CONV1614]], [[CONV1615]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1616]], label [[IF_THEN1618:%.*]], label [[IF_END1619:%.*]]
// SIMD-ONLY0:       if.then1618:
// SIMD-ONLY0-NEXT:    [[TMP654:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP654]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1619]]
// SIMD-ONLY0:       if.end1619:
// SIMD-ONLY0-NEXT:    [[TMP655:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1620:%.*]] = zext i16 [[TMP655]] to i32
// SIMD-ONLY0-NEXT:    [[TMP656:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1621:%.*]] = zext i16 [[TMP656]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1622:%.*]] = icmp slt i32 [[CONV1620]], [[CONV1621]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1622]], label [[IF_THEN1624:%.*]], label [[IF_END1625:%.*]]
// SIMD-ONLY0:       if.then1624:
// SIMD-ONLY0-NEXT:    [[TMP657:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP657]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1625]]
// SIMD-ONLY0:       if.end1625:
// SIMD-ONLY0-NEXT:    [[TMP658:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1626:%.*]] = zext i16 [[TMP658]] to i32
// SIMD-ONLY0-NEXT:    [[TMP659:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1627:%.*]] = zext i16 [[TMP659]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1628:%.*]] = icmp eq i32 [[CONV1626]], [[CONV1627]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1628]], label [[COND_TRUE1630:%.*]], label [[COND_FALSE1632:%.*]]
// SIMD-ONLY0:       cond.true1630:
// SIMD-ONLY0-NEXT:    [[TMP660:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1631:%.*]] = zext i16 [[TMP660]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1634:%.*]]
// SIMD-ONLY0:       cond.false1632:
// SIMD-ONLY0-NEXT:    [[TMP661:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1633:%.*]] = zext i16 [[TMP661]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1634]]
// SIMD-ONLY0:       cond.end1634:
// SIMD-ONLY0-NEXT:    [[COND1635:%.*]] = phi i32 [ [[CONV1631]], [[COND_TRUE1630]] ], [ [[CONV1633]], [[COND_FALSE1632]] ]
// SIMD-ONLY0-NEXT:    [[CONV1636:%.*]] = trunc i32 [[COND1635]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1636]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP662:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1637:%.*]] = zext i16 [[TMP662]] to i32
// SIMD-ONLY0-NEXT:    [[TMP663:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1638:%.*]] = zext i16 [[TMP663]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1639:%.*]] = icmp eq i32 [[CONV1637]], [[CONV1638]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1639]], label [[COND_TRUE1641:%.*]], label [[COND_FALSE1643:%.*]]
// SIMD-ONLY0:       cond.true1641:
// SIMD-ONLY0-NEXT:    [[TMP664:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1642:%.*]] = zext i16 [[TMP664]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1645:%.*]]
// SIMD-ONLY0:       cond.false1643:
// SIMD-ONLY0-NEXT:    [[TMP665:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1644:%.*]] = zext i16 [[TMP665]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1645]]
// SIMD-ONLY0:       cond.end1645:
// SIMD-ONLY0-NEXT:    [[COND1646:%.*]] = phi i32 [ [[CONV1642]], [[COND_TRUE1641]] ], [ [[CONV1644]], [[COND_FALSE1643]] ]
// SIMD-ONLY0-NEXT:    [[CONV1647:%.*]] = trunc i32 [[COND1646]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1647]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP666:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1648:%.*]] = zext i16 [[TMP666]] to i32
// SIMD-ONLY0-NEXT:    [[TMP667:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1649:%.*]] = zext i16 [[TMP667]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1650:%.*]] = icmp eq i32 [[CONV1648]], [[CONV1649]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1650]], label [[IF_THEN1652:%.*]], label [[IF_END1653:%.*]]
// SIMD-ONLY0:       if.then1652:
// SIMD-ONLY0-NEXT:    [[TMP668:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP668]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1653]]
// SIMD-ONLY0:       if.end1653:
// SIMD-ONLY0-NEXT:    [[TMP669:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1654:%.*]] = zext i16 [[TMP669]] to i32
// SIMD-ONLY0-NEXT:    [[TMP670:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1655:%.*]] = zext i16 [[TMP670]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1656:%.*]] = icmp eq i32 [[CONV1654]], [[CONV1655]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1656]], label [[IF_THEN1658:%.*]], label [[IF_END1659:%.*]]
// SIMD-ONLY0:       if.then1658:
// SIMD-ONLY0-NEXT:    [[TMP671:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP671]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1659]]
// SIMD-ONLY0:       if.end1659:
// SIMD-ONLY0-NEXT:    [[TMP672:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1660:%.*]] = sext i16 [[TMP672]] to i32
// SIMD-ONLY0-NEXT:    [[TMP673:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1661:%.*]] = sext i16 [[TMP673]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1662:%.*]] = icmp sgt i32 [[CONV1660]], [[CONV1661]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1662]], label [[COND_TRUE1664:%.*]], label [[COND_FALSE1666:%.*]]
// SIMD-ONLY0:       cond.true1664:
// SIMD-ONLY0-NEXT:    [[TMP674:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1665:%.*]] = sext i16 [[TMP674]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1668:%.*]]
// SIMD-ONLY0:       cond.false1666:
// SIMD-ONLY0-NEXT:    [[TMP675:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1667:%.*]] = sext i16 [[TMP675]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1668]]
// SIMD-ONLY0:       cond.end1668:
// SIMD-ONLY0-NEXT:    [[COND1669:%.*]] = phi i32 [ [[CONV1665]], [[COND_TRUE1664]] ], [ [[CONV1667]], [[COND_FALSE1666]] ]
// SIMD-ONLY0-NEXT:    [[CONV1670:%.*]] = trunc i32 [[COND1669]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1670]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP676:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1671:%.*]] = sext i16 [[TMP676]] to i32
// SIMD-ONLY0-NEXT:    [[TMP677:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1672:%.*]] = sext i16 [[TMP677]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1673:%.*]] = icmp slt i32 [[CONV1671]], [[CONV1672]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1673]], label [[COND_TRUE1675:%.*]], label [[COND_FALSE1677:%.*]]
// SIMD-ONLY0:       cond.true1675:
// SIMD-ONLY0-NEXT:    [[TMP678:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1676:%.*]] = sext i16 [[TMP678]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1679:%.*]]
// SIMD-ONLY0:       cond.false1677:
// SIMD-ONLY0-NEXT:    [[TMP679:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1678:%.*]] = sext i16 [[TMP679]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1679]]
// SIMD-ONLY0:       cond.end1679:
// SIMD-ONLY0-NEXT:    [[COND1680:%.*]] = phi i32 [ [[CONV1676]], [[COND_TRUE1675]] ], [ [[CONV1678]], [[COND_FALSE1677]] ]
// SIMD-ONLY0-NEXT:    [[CONV1681:%.*]] = trunc i32 [[COND1680]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1681]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP680:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1682:%.*]] = sext i16 [[TMP680]] to i32
// SIMD-ONLY0-NEXT:    [[TMP681:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1683:%.*]] = sext i16 [[TMP681]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1684:%.*]] = icmp sgt i32 [[CONV1682]], [[CONV1683]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1684]], label [[COND_TRUE1686:%.*]], label [[COND_FALSE1688:%.*]]
// SIMD-ONLY0:       cond.true1686:
// SIMD-ONLY0-NEXT:    [[TMP682:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1687:%.*]] = sext i16 [[TMP682]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1690:%.*]]
// SIMD-ONLY0:       cond.false1688:
// SIMD-ONLY0-NEXT:    [[TMP683:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1689:%.*]] = sext i16 [[TMP683]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1690]]
// SIMD-ONLY0:       cond.end1690:
// SIMD-ONLY0-NEXT:    [[COND1691:%.*]] = phi i32 [ [[CONV1687]], [[COND_TRUE1686]] ], [ [[CONV1689]], [[COND_FALSE1688]] ]
// SIMD-ONLY0-NEXT:    [[CONV1692:%.*]] = trunc i32 [[COND1691]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1692]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP684:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1693:%.*]] = sext i16 [[TMP684]] to i32
// SIMD-ONLY0-NEXT:    [[TMP685:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1694:%.*]] = sext i16 [[TMP685]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1695:%.*]] = icmp slt i32 [[CONV1693]], [[CONV1694]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1695]], label [[COND_TRUE1697:%.*]], label [[COND_FALSE1699:%.*]]
// SIMD-ONLY0:       cond.true1697:
// SIMD-ONLY0-NEXT:    [[TMP686:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1698:%.*]] = sext i16 [[TMP686]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1701:%.*]]
// SIMD-ONLY0:       cond.false1699:
// SIMD-ONLY0-NEXT:    [[TMP687:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1700:%.*]] = sext i16 [[TMP687]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1701]]
// SIMD-ONLY0:       cond.end1701:
// SIMD-ONLY0-NEXT:    [[COND1702:%.*]] = phi i32 [ [[CONV1698]], [[COND_TRUE1697]] ], [ [[CONV1700]], [[COND_FALSE1699]] ]
// SIMD-ONLY0-NEXT:    [[CONV1703:%.*]] = trunc i32 [[COND1702]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1703]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP688:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1704:%.*]] = sext i16 [[TMP688]] to i32
// SIMD-ONLY0-NEXT:    [[TMP689:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1705:%.*]] = sext i16 [[TMP689]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1706:%.*]] = icmp sgt i32 [[CONV1704]], [[CONV1705]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1706]], label [[IF_THEN1708:%.*]], label [[IF_END1709:%.*]]
// SIMD-ONLY0:       if.then1708:
// SIMD-ONLY0-NEXT:    [[TMP690:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP690]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1709]]
// SIMD-ONLY0:       if.end1709:
// SIMD-ONLY0-NEXT:    [[TMP691:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1710:%.*]] = sext i16 [[TMP691]] to i32
// SIMD-ONLY0-NEXT:    [[TMP692:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1711:%.*]] = sext i16 [[TMP692]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1712:%.*]] = icmp slt i32 [[CONV1710]], [[CONV1711]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1712]], label [[IF_THEN1714:%.*]], label [[IF_END1715:%.*]]
// SIMD-ONLY0:       if.then1714:
// SIMD-ONLY0-NEXT:    [[TMP693:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP693]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1715]]
// SIMD-ONLY0:       if.end1715:
// SIMD-ONLY0-NEXT:    [[TMP694:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1716:%.*]] = sext i16 [[TMP694]] to i32
// SIMD-ONLY0-NEXT:    [[TMP695:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1717:%.*]] = sext i16 [[TMP695]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1718:%.*]] = icmp sgt i32 [[CONV1716]], [[CONV1717]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1718]], label [[IF_THEN1720:%.*]], label [[IF_END1721:%.*]]
// SIMD-ONLY0:       if.then1720:
// SIMD-ONLY0-NEXT:    [[TMP696:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP696]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1721]]
// SIMD-ONLY0:       if.end1721:
// SIMD-ONLY0-NEXT:    [[TMP697:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1722:%.*]] = sext i16 [[TMP697]] to i32
// SIMD-ONLY0-NEXT:    [[TMP698:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1723:%.*]] = sext i16 [[TMP698]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1724:%.*]] = icmp slt i32 [[CONV1722]], [[CONV1723]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1724]], label [[IF_THEN1726:%.*]], label [[IF_END1727:%.*]]
// SIMD-ONLY0:       if.then1726:
// SIMD-ONLY0-NEXT:    [[TMP699:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP699]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1727]]
// SIMD-ONLY0:       if.end1727:
// SIMD-ONLY0-NEXT:    [[TMP700:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1728:%.*]] = sext i16 [[TMP700]] to i32
// SIMD-ONLY0-NEXT:    [[TMP701:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1729:%.*]] = sext i16 [[TMP701]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1730:%.*]] = icmp eq i32 [[CONV1728]], [[CONV1729]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1730]], label [[COND_TRUE1732:%.*]], label [[COND_FALSE1734:%.*]]
// SIMD-ONLY0:       cond.true1732:
// SIMD-ONLY0-NEXT:    [[TMP702:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1733:%.*]] = sext i16 [[TMP702]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1736:%.*]]
// SIMD-ONLY0:       cond.false1734:
// SIMD-ONLY0-NEXT:    [[TMP703:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1735:%.*]] = sext i16 [[TMP703]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1736]]
// SIMD-ONLY0:       cond.end1736:
// SIMD-ONLY0-NEXT:    [[COND1737:%.*]] = phi i32 [ [[CONV1733]], [[COND_TRUE1732]] ], [ [[CONV1735]], [[COND_FALSE1734]] ]
// SIMD-ONLY0-NEXT:    [[CONV1738:%.*]] = trunc i32 [[COND1737]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1738]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP704:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1739:%.*]] = sext i16 [[TMP704]] to i32
// SIMD-ONLY0-NEXT:    [[TMP705:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1740:%.*]] = sext i16 [[TMP705]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1741:%.*]] = icmp eq i32 [[CONV1739]], [[CONV1740]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1741]], label [[COND_TRUE1743:%.*]], label [[COND_FALSE1745:%.*]]
// SIMD-ONLY0:       cond.true1743:
// SIMD-ONLY0-NEXT:    [[TMP706:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1744:%.*]] = sext i16 [[TMP706]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1747:%.*]]
// SIMD-ONLY0:       cond.false1745:
// SIMD-ONLY0-NEXT:    [[TMP707:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1746:%.*]] = sext i16 [[TMP707]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1747]]
// SIMD-ONLY0:       cond.end1747:
// SIMD-ONLY0-NEXT:    [[COND1748:%.*]] = phi i32 [ [[CONV1744]], [[COND_TRUE1743]] ], [ [[CONV1746]], [[COND_FALSE1745]] ]
// SIMD-ONLY0-NEXT:    [[CONV1749:%.*]] = trunc i32 [[COND1748]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1749]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP708:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1750:%.*]] = sext i16 [[TMP708]] to i32
// SIMD-ONLY0-NEXT:    [[TMP709:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1751:%.*]] = sext i16 [[TMP709]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1752:%.*]] = icmp eq i32 [[CONV1750]], [[CONV1751]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1752]], label [[IF_THEN1754:%.*]], label [[IF_END1755:%.*]]
// SIMD-ONLY0:       if.then1754:
// SIMD-ONLY0-NEXT:    [[TMP710:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP710]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1755]]
// SIMD-ONLY0:       if.end1755:
// SIMD-ONLY0-NEXT:    [[TMP711:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1756:%.*]] = sext i16 [[TMP711]] to i32
// SIMD-ONLY0-NEXT:    [[TMP712:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1757:%.*]] = sext i16 [[TMP712]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1758:%.*]] = icmp eq i32 [[CONV1756]], [[CONV1757]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1758]], label [[IF_THEN1760:%.*]], label [[IF_END1761:%.*]]
// SIMD-ONLY0:       if.then1760:
// SIMD-ONLY0-NEXT:    [[TMP713:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP713]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1761]]
// SIMD-ONLY0:       if.end1761:
// SIMD-ONLY0-NEXT:    [[TMP714:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1762:%.*]] = zext i16 [[TMP714]] to i32
// SIMD-ONLY0-NEXT:    [[TMP715:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1763:%.*]] = zext i16 [[TMP715]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1764:%.*]] = icmp sgt i32 [[CONV1762]], [[CONV1763]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1764]], label [[COND_TRUE1766:%.*]], label [[COND_FALSE1768:%.*]]
// SIMD-ONLY0:       cond.true1766:
// SIMD-ONLY0-NEXT:    [[TMP716:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1767:%.*]] = zext i16 [[TMP716]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1770:%.*]]
// SIMD-ONLY0:       cond.false1768:
// SIMD-ONLY0-NEXT:    [[TMP717:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1769:%.*]] = zext i16 [[TMP717]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1770]]
// SIMD-ONLY0:       cond.end1770:
// SIMD-ONLY0-NEXT:    [[COND1771:%.*]] = phi i32 [ [[CONV1767]], [[COND_TRUE1766]] ], [ [[CONV1769]], [[COND_FALSE1768]] ]
// SIMD-ONLY0-NEXT:    [[CONV1772:%.*]] = trunc i32 [[COND1771]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1772]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP718:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1773:%.*]] = zext i16 [[TMP718]] to i32
// SIMD-ONLY0-NEXT:    [[TMP719:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1774:%.*]] = zext i16 [[TMP719]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1775:%.*]] = icmp slt i32 [[CONV1773]], [[CONV1774]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1775]], label [[COND_TRUE1777:%.*]], label [[COND_FALSE1779:%.*]]
// SIMD-ONLY0:       cond.true1777:
// SIMD-ONLY0-NEXT:    [[TMP720:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1778:%.*]] = zext i16 [[TMP720]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1781:%.*]]
// SIMD-ONLY0:       cond.false1779:
// SIMD-ONLY0-NEXT:    [[TMP721:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1780:%.*]] = zext i16 [[TMP721]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1781]]
// SIMD-ONLY0:       cond.end1781:
// SIMD-ONLY0-NEXT:    [[COND1782:%.*]] = phi i32 [ [[CONV1778]], [[COND_TRUE1777]] ], [ [[CONV1780]], [[COND_FALSE1779]] ]
// SIMD-ONLY0-NEXT:    [[CONV1783:%.*]] = trunc i32 [[COND1782]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1783]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP722:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1784:%.*]] = zext i16 [[TMP722]] to i32
// SIMD-ONLY0-NEXT:    [[TMP723:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1785:%.*]] = zext i16 [[TMP723]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1786:%.*]] = icmp sgt i32 [[CONV1784]], [[CONV1785]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1786]], label [[COND_TRUE1788:%.*]], label [[COND_FALSE1790:%.*]]
// SIMD-ONLY0:       cond.true1788:
// SIMD-ONLY0-NEXT:    [[TMP724:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1789:%.*]] = zext i16 [[TMP724]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1792:%.*]]
// SIMD-ONLY0:       cond.false1790:
// SIMD-ONLY0-NEXT:    [[TMP725:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1791:%.*]] = zext i16 [[TMP725]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1792]]
// SIMD-ONLY0:       cond.end1792:
// SIMD-ONLY0-NEXT:    [[COND1793:%.*]] = phi i32 [ [[CONV1789]], [[COND_TRUE1788]] ], [ [[CONV1791]], [[COND_FALSE1790]] ]
// SIMD-ONLY0-NEXT:    [[CONV1794:%.*]] = trunc i32 [[COND1793]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1794]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP726:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1795:%.*]] = zext i16 [[TMP726]] to i32
// SIMD-ONLY0-NEXT:    [[TMP727:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1796:%.*]] = zext i16 [[TMP727]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1797:%.*]] = icmp slt i32 [[CONV1795]], [[CONV1796]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1797]], label [[COND_TRUE1799:%.*]], label [[COND_FALSE1801:%.*]]
// SIMD-ONLY0:       cond.true1799:
// SIMD-ONLY0-NEXT:    [[TMP728:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1800:%.*]] = zext i16 [[TMP728]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1803:%.*]]
// SIMD-ONLY0:       cond.false1801:
// SIMD-ONLY0-NEXT:    [[TMP729:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1802:%.*]] = zext i16 [[TMP729]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1803]]
// SIMD-ONLY0:       cond.end1803:
// SIMD-ONLY0-NEXT:    [[COND1804:%.*]] = phi i32 [ [[CONV1800]], [[COND_TRUE1799]] ], [ [[CONV1802]], [[COND_FALSE1801]] ]
// SIMD-ONLY0-NEXT:    [[CONV1805:%.*]] = trunc i32 [[COND1804]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1805]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP730:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1806:%.*]] = zext i16 [[TMP730]] to i32
// SIMD-ONLY0-NEXT:    [[TMP731:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1807:%.*]] = zext i16 [[TMP731]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1808:%.*]] = icmp sgt i32 [[CONV1806]], [[CONV1807]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1808]], label [[IF_THEN1810:%.*]], label [[IF_END1811:%.*]]
// SIMD-ONLY0:       if.then1810:
// SIMD-ONLY0-NEXT:    [[TMP732:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP732]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1811]]
// SIMD-ONLY0:       if.end1811:
// SIMD-ONLY0-NEXT:    [[TMP733:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1812:%.*]] = zext i16 [[TMP733]] to i32
// SIMD-ONLY0-NEXT:    [[TMP734:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1813:%.*]] = zext i16 [[TMP734]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1814:%.*]] = icmp slt i32 [[CONV1812]], [[CONV1813]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1814]], label [[IF_THEN1816:%.*]], label [[IF_END1817:%.*]]
// SIMD-ONLY0:       if.then1816:
// SIMD-ONLY0-NEXT:    [[TMP735:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP735]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1817]]
// SIMD-ONLY0:       if.end1817:
// SIMD-ONLY0-NEXT:    [[TMP736:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1818:%.*]] = zext i16 [[TMP736]] to i32
// SIMD-ONLY0-NEXT:    [[TMP737:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1819:%.*]] = zext i16 [[TMP737]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1820:%.*]] = icmp sgt i32 [[CONV1818]], [[CONV1819]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1820]], label [[IF_THEN1822:%.*]], label [[IF_END1823:%.*]]
// SIMD-ONLY0:       if.then1822:
// SIMD-ONLY0-NEXT:    [[TMP738:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP738]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1823]]
// SIMD-ONLY0:       if.end1823:
// SIMD-ONLY0-NEXT:    [[TMP739:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1824:%.*]] = zext i16 [[TMP739]] to i32
// SIMD-ONLY0-NEXT:    [[TMP740:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1825:%.*]] = zext i16 [[TMP740]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1826:%.*]] = icmp slt i32 [[CONV1824]], [[CONV1825]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1826]], label [[IF_THEN1828:%.*]], label [[IF_END1829:%.*]]
// SIMD-ONLY0:       if.then1828:
// SIMD-ONLY0-NEXT:    [[TMP741:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP741]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1829]]
// SIMD-ONLY0:       if.end1829:
// SIMD-ONLY0-NEXT:    [[TMP742:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1830:%.*]] = zext i16 [[TMP742]] to i32
// SIMD-ONLY0-NEXT:    [[TMP743:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1831:%.*]] = zext i16 [[TMP743]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1832:%.*]] = icmp eq i32 [[CONV1830]], [[CONV1831]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1832]], label [[COND_TRUE1834:%.*]], label [[COND_FALSE1836:%.*]]
// SIMD-ONLY0:       cond.true1834:
// SIMD-ONLY0-NEXT:    [[TMP744:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1835:%.*]] = zext i16 [[TMP744]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1838:%.*]]
// SIMD-ONLY0:       cond.false1836:
// SIMD-ONLY0-NEXT:    [[TMP745:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1837:%.*]] = zext i16 [[TMP745]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1838]]
// SIMD-ONLY0:       cond.end1838:
// SIMD-ONLY0-NEXT:    [[COND1839:%.*]] = phi i32 [ [[CONV1835]], [[COND_TRUE1834]] ], [ [[CONV1837]], [[COND_FALSE1836]] ]
// SIMD-ONLY0-NEXT:    [[CONV1840:%.*]] = trunc i32 [[COND1839]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1840]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP746:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1841:%.*]] = zext i16 [[TMP746]] to i32
// SIMD-ONLY0-NEXT:    [[TMP747:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1842:%.*]] = zext i16 [[TMP747]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1843:%.*]] = icmp eq i32 [[CONV1841]], [[CONV1842]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1843]], label [[COND_TRUE1845:%.*]], label [[COND_FALSE1847:%.*]]
// SIMD-ONLY0:       cond.true1845:
// SIMD-ONLY0-NEXT:    [[TMP748:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1846:%.*]] = zext i16 [[TMP748]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1849:%.*]]
// SIMD-ONLY0:       cond.false1847:
// SIMD-ONLY0-NEXT:    [[TMP749:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1848:%.*]] = zext i16 [[TMP749]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1849]]
// SIMD-ONLY0:       cond.end1849:
// SIMD-ONLY0-NEXT:    [[COND1850:%.*]] = phi i32 [ [[CONV1846]], [[COND_TRUE1845]] ], [ [[CONV1848]], [[COND_FALSE1847]] ]
// SIMD-ONLY0-NEXT:    [[CONV1851:%.*]] = trunc i32 [[COND1850]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1851]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP750:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1852:%.*]] = zext i16 [[TMP750]] to i32
// SIMD-ONLY0-NEXT:    [[TMP751:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1853:%.*]] = zext i16 [[TMP751]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1854:%.*]] = icmp eq i32 [[CONV1852]], [[CONV1853]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1854]], label [[IF_THEN1856:%.*]], label [[IF_END1857:%.*]]
// SIMD-ONLY0:       if.then1856:
// SIMD-ONLY0-NEXT:    [[TMP752:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP752]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1857]]
// SIMD-ONLY0:       if.end1857:
// SIMD-ONLY0-NEXT:    [[TMP753:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1858:%.*]] = zext i16 [[TMP753]] to i32
// SIMD-ONLY0-NEXT:    [[TMP754:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1859:%.*]] = zext i16 [[TMP754]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1860:%.*]] = icmp eq i32 [[CONV1858]], [[CONV1859]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1860]], label [[IF_THEN1862:%.*]], label [[IF_END1863:%.*]]
// SIMD-ONLY0:       if.then1862:
// SIMD-ONLY0-NEXT:    [[TMP755:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP755]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1863]]
// SIMD-ONLY0:       if.end1863:
// SIMD-ONLY0-NEXT:    [[TMP756:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1864:%.*]] = sext i16 [[TMP756]] to i32
// SIMD-ONLY0-NEXT:    [[TMP757:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1865:%.*]] = sext i16 [[TMP757]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1866:%.*]] = icmp sgt i32 [[CONV1864]], [[CONV1865]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1866]], label [[COND_TRUE1868:%.*]], label [[COND_FALSE1870:%.*]]
// SIMD-ONLY0:       cond.true1868:
// SIMD-ONLY0-NEXT:    [[TMP758:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1869:%.*]] = sext i16 [[TMP758]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1872:%.*]]
// SIMD-ONLY0:       cond.false1870:
// SIMD-ONLY0-NEXT:    [[TMP759:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1871:%.*]] = sext i16 [[TMP759]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1872]]
// SIMD-ONLY0:       cond.end1872:
// SIMD-ONLY0-NEXT:    [[COND1873:%.*]] = phi i32 [ [[CONV1869]], [[COND_TRUE1868]] ], [ [[CONV1871]], [[COND_FALSE1870]] ]
// SIMD-ONLY0-NEXT:    [[CONV1874:%.*]] = trunc i32 [[COND1873]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1874]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP760:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1875:%.*]] = sext i16 [[TMP760]] to i32
// SIMD-ONLY0-NEXT:    [[TMP761:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1876:%.*]] = sext i16 [[TMP761]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1877:%.*]] = icmp slt i32 [[CONV1875]], [[CONV1876]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1877]], label [[COND_TRUE1879:%.*]], label [[COND_FALSE1881:%.*]]
// SIMD-ONLY0:       cond.true1879:
// SIMD-ONLY0-NEXT:    [[TMP762:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1880:%.*]] = sext i16 [[TMP762]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1883:%.*]]
// SIMD-ONLY0:       cond.false1881:
// SIMD-ONLY0-NEXT:    [[TMP763:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1882:%.*]] = sext i16 [[TMP763]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1883]]
// SIMD-ONLY0:       cond.end1883:
// SIMD-ONLY0-NEXT:    [[COND1884:%.*]] = phi i32 [ [[CONV1880]], [[COND_TRUE1879]] ], [ [[CONV1882]], [[COND_FALSE1881]] ]
// SIMD-ONLY0-NEXT:    [[CONV1885:%.*]] = trunc i32 [[COND1884]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1885]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP764:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1886:%.*]] = sext i16 [[TMP764]] to i32
// SIMD-ONLY0-NEXT:    [[TMP765:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1887:%.*]] = sext i16 [[TMP765]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1888:%.*]] = icmp sgt i32 [[CONV1886]], [[CONV1887]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1888]], label [[COND_TRUE1890:%.*]], label [[COND_FALSE1892:%.*]]
// SIMD-ONLY0:       cond.true1890:
// SIMD-ONLY0-NEXT:    [[TMP766:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1891:%.*]] = sext i16 [[TMP766]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1894:%.*]]
// SIMD-ONLY0:       cond.false1892:
// SIMD-ONLY0-NEXT:    [[TMP767:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1893:%.*]] = sext i16 [[TMP767]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1894]]
// SIMD-ONLY0:       cond.end1894:
// SIMD-ONLY0-NEXT:    [[COND1895:%.*]] = phi i32 [ [[CONV1891]], [[COND_TRUE1890]] ], [ [[CONV1893]], [[COND_FALSE1892]] ]
// SIMD-ONLY0-NEXT:    [[CONV1896:%.*]] = trunc i32 [[COND1895]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1896]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP768:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1897:%.*]] = sext i16 [[TMP768]] to i32
// SIMD-ONLY0-NEXT:    [[TMP769:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1898:%.*]] = sext i16 [[TMP769]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1899:%.*]] = icmp slt i32 [[CONV1897]], [[CONV1898]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1899]], label [[COND_TRUE1901:%.*]], label [[COND_FALSE1903:%.*]]
// SIMD-ONLY0:       cond.true1901:
// SIMD-ONLY0-NEXT:    [[TMP770:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1902:%.*]] = sext i16 [[TMP770]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1905:%.*]]
// SIMD-ONLY0:       cond.false1903:
// SIMD-ONLY0-NEXT:    [[TMP771:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1904:%.*]] = sext i16 [[TMP771]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1905]]
// SIMD-ONLY0:       cond.end1905:
// SIMD-ONLY0-NEXT:    [[COND1906:%.*]] = phi i32 [ [[CONV1902]], [[COND_TRUE1901]] ], [ [[CONV1904]], [[COND_FALSE1903]] ]
// SIMD-ONLY0-NEXT:    [[CONV1907:%.*]] = trunc i32 [[COND1906]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1907]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP772:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1908:%.*]] = sext i16 [[TMP772]] to i32
// SIMD-ONLY0-NEXT:    [[TMP773:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1909:%.*]] = sext i16 [[TMP773]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1910:%.*]] = icmp sgt i32 [[CONV1908]], [[CONV1909]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1910]], label [[IF_THEN1912:%.*]], label [[IF_END1913:%.*]]
// SIMD-ONLY0:       if.then1912:
// SIMD-ONLY0-NEXT:    [[TMP774:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP774]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1913]]
// SIMD-ONLY0:       if.end1913:
// SIMD-ONLY0-NEXT:    [[TMP775:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1914:%.*]] = sext i16 [[TMP775]] to i32
// SIMD-ONLY0-NEXT:    [[TMP776:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1915:%.*]] = sext i16 [[TMP776]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1916:%.*]] = icmp slt i32 [[CONV1914]], [[CONV1915]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1916]], label [[IF_THEN1918:%.*]], label [[IF_END1919:%.*]]
// SIMD-ONLY0:       if.then1918:
// SIMD-ONLY0-NEXT:    [[TMP777:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP777]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1919]]
// SIMD-ONLY0:       if.end1919:
// SIMD-ONLY0-NEXT:    [[TMP778:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1920:%.*]] = sext i16 [[TMP778]] to i32
// SIMD-ONLY0-NEXT:    [[TMP779:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1921:%.*]] = sext i16 [[TMP779]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1922:%.*]] = icmp sgt i32 [[CONV1920]], [[CONV1921]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1922]], label [[IF_THEN1924:%.*]], label [[IF_END1925:%.*]]
// SIMD-ONLY0:       if.then1924:
// SIMD-ONLY0-NEXT:    [[TMP780:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP780]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1925]]
// SIMD-ONLY0:       if.end1925:
// SIMD-ONLY0-NEXT:    [[TMP781:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1926:%.*]] = sext i16 [[TMP781]] to i32
// SIMD-ONLY0-NEXT:    [[TMP782:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1927:%.*]] = sext i16 [[TMP782]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1928:%.*]] = icmp slt i32 [[CONV1926]], [[CONV1927]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1928]], label [[IF_THEN1930:%.*]], label [[IF_END1931:%.*]]
// SIMD-ONLY0:       if.then1930:
// SIMD-ONLY0-NEXT:    [[TMP783:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP783]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1931]]
// SIMD-ONLY0:       if.end1931:
// SIMD-ONLY0-NEXT:    [[TMP784:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1932:%.*]] = sext i16 [[TMP784]] to i32
// SIMD-ONLY0-NEXT:    [[TMP785:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1933:%.*]] = sext i16 [[TMP785]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1934:%.*]] = icmp eq i32 [[CONV1932]], [[CONV1933]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1934]], label [[COND_TRUE1936:%.*]], label [[COND_FALSE1938:%.*]]
// SIMD-ONLY0:       cond.true1936:
// SIMD-ONLY0-NEXT:    [[TMP786:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1937:%.*]] = sext i16 [[TMP786]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1940:%.*]]
// SIMD-ONLY0:       cond.false1938:
// SIMD-ONLY0-NEXT:    [[TMP787:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1939:%.*]] = sext i16 [[TMP787]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1940]]
// SIMD-ONLY0:       cond.end1940:
// SIMD-ONLY0-NEXT:    [[COND1941:%.*]] = phi i32 [ [[CONV1937]], [[COND_TRUE1936]] ], [ [[CONV1939]], [[COND_FALSE1938]] ]
// SIMD-ONLY0-NEXT:    [[CONV1942:%.*]] = trunc i32 [[COND1941]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1942]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP788:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1943:%.*]] = sext i16 [[TMP788]] to i32
// SIMD-ONLY0-NEXT:    [[TMP789:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1944:%.*]] = sext i16 [[TMP789]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1945:%.*]] = icmp eq i32 [[CONV1943]], [[CONV1944]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1945]], label [[COND_TRUE1947:%.*]], label [[COND_FALSE1949:%.*]]
// SIMD-ONLY0:       cond.true1947:
// SIMD-ONLY0-NEXT:    [[TMP790:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1948:%.*]] = sext i16 [[TMP790]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1951:%.*]]
// SIMD-ONLY0:       cond.false1949:
// SIMD-ONLY0-NEXT:    [[TMP791:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1950:%.*]] = sext i16 [[TMP791]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1951]]
// SIMD-ONLY0:       cond.end1951:
// SIMD-ONLY0-NEXT:    [[COND1952:%.*]] = phi i32 [ [[CONV1948]], [[COND_TRUE1947]] ], [ [[CONV1950]], [[COND_FALSE1949]] ]
// SIMD-ONLY0-NEXT:    [[CONV1953:%.*]] = trunc i32 [[COND1952]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1953]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP792:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1954:%.*]] = sext i16 [[TMP792]] to i32
// SIMD-ONLY0-NEXT:    [[TMP793:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1955:%.*]] = sext i16 [[TMP793]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1956:%.*]] = icmp eq i32 [[CONV1954]], [[CONV1955]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1956]], label [[IF_THEN1958:%.*]], label [[IF_END1959:%.*]]
// SIMD-ONLY0:       if.then1958:
// SIMD-ONLY0-NEXT:    [[TMP794:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP794]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1959]]
// SIMD-ONLY0:       if.end1959:
// SIMD-ONLY0-NEXT:    [[TMP795:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1960:%.*]] = sext i16 [[TMP795]] to i32
// SIMD-ONLY0-NEXT:    [[TMP796:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1961:%.*]] = sext i16 [[TMP796]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1962:%.*]] = icmp eq i32 [[CONV1960]], [[CONV1961]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1962]], label [[IF_THEN1964:%.*]], label [[IF_END1965:%.*]]
// SIMD-ONLY0:       if.then1964:
// SIMD-ONLY0-NEXT:    [[TMP797:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP797]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1965]]
// SIMD-ONLY0:       if.end1965:
// SIMD-ONLY0-NEXT:    [[TMP798:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1966:%.*]] = zext i16 [[TMP798]] to i32
// SIMD-ONLY0-NEXT:    [[TMP799:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1967:%.*]] = zext i16 [[TMP799]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1968:%.*]] = icmp sgt i32 [[CONV1966]], [[CONV1967]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1968]], label [[COND_TRUE1970:%.*]], label [[COND_FALSE1972:%.*]]
// SIMD-ONLY0:       cond.true1970:
// SIMD-ONLY0-NEXT:    [[TMP800:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1971:%.*]] = zext i16 [[TMP800]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1974:%.*]]
// SIMD-ONLY0:       cond.false1972:
// SIMD-ONLY0-NEXT:    [[TMP801:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1973:%.*]] = zext i16 [[TMP801]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1974]]
// SIMD-ONLY0:       cond.end1974:
// SIMD-ONLY0-NEXT:    [[COND1975:%.*]] = phi i32 [ [[CONV1971]], [[COND_TRUE1970]] ], [ [[CONV1973]], [[COND_FALSE1972]] ]
// SIMD-ONLY0-NEXT:    [[CONV1976:%.*]] = trunc i32 [[COND1975]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1976]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP802:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1977:%.*]] = zext i16 [[TMP802]] to i32
// SIMD-ONLY0-NEXT:    [[TMP803:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1978:%.*]] = zext i16 [[TMP803]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1979:%.*]] = icmp slt i32 [[CONV1977]], [[CONV1978]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1979]], label [[COND_TRUE1981:%.*]], label [[COND_FALSE1983:%.*]]
// SIMD-ONLY0:       cond.true1981:
// SIMD-ONLY0-NEXT:    [[TMP804:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1982:%.*]] = zext i16 [[TMP804]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1985:%.*]]
// SIMD-ONLY0:       cond.false1983:
// SIMD-ONLY0-NEXT:    [[TMP805:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1984:%.*]] = zext i16 [[TMP805]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1985]]
// SIMD-ONLY0:       cond.end1985:
// SIMD-ONLY0-NEXT:    [[COND1986:%.*]] = phi i32 [ [[CONV1982]], [[COND_TRUE1981]] ], [ [[CONV1984]], [[COND_FALSE1983]] ]
// SIMD-ONLY0-NEXT:    [[CONV1987:%.*]] = trunc i32 [[COND1986]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1987]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP806:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1988:%.*]] = zext i16 [[TMP806]] to i32
// SIMD-ONLY0-NEXT:    [[TMP807:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1989:%.*]] = zext i16 [[TMP807]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1990:%.*]] = icmp sgt i32 [[CONV1988]], [[CONV1989]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1990]], label [[COND_TRUE1992:%.*]], label [[COND_FALSE1994:%.*]]
// SIMD-ONLY0:       cond.true1992:
// SIMD-ONLY0-NEXT:    [[TMP808:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1993:%.*]] = zext i16 [[TMP808]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1996:%.*]]
// SIMD-ONLY0:       cond.false1994:
// SIMD-ONLY0-NEXT:    [[TMP809:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1995:%.*]] = zext i16 [[TMP809]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1996]]
// SIMD-ONLY0:       cond.end1996:
// SIMD-ONLY0-NEXT:    [[COND1997:%.*]] = phi i32 [ [[CONV1993]], [[COND_TRUE1992]] ], [ [[CONV1995]], [[COND_FALSE1994]] ]
// SIMD-ONLY0-NEXT:    [[CONV1998:%.*]] = trunc i32 [[COND1997]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1998]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP810:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1999:%.*]] = zext i16 [[TMP810]] to i32
// SIMD-ONLY0-NEXT:    [[TMP811:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2000:%.*]] = zext i16 [[TMP811]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2001:%.*]] = icmp slt i32 [[CONV1999]], [[CONV2000]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2001]], label [[COND_TRUE2003:%.*]], label [[COND_FALSE2005:%.*]]
// SIMD-ONLY0:       cond.true2003:
// SIMD-ONLY0-NEXT:    [[TMP812:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2004:%.*]] = zext i16 [[TMP812]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2007:%.*]]
// SIMD-ONLY0:       cond.false2005:
// SIMD-ONLY0-NEXT:    [[TMP813:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2006:%.*]] = zext i16 [[TMP813]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2007]]
// SIMD-ONLY0:       cond.end2007:
// SIMD-ONLY0-NEXT:    [[COND2008:%.*]] = phi i32 [ [[CONV2004]], [[COND_TRUE2003]] ], [ [[CONV2006]], [[COND_FALSE2005]] ]
// SIMD-ONLY0-NEXT:    [[CONV2009:%.*]] = trunc i32 [[COND2008]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2009]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP814:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2010:%.*]] = zext i16 [[TMP814]] to i32
// SIMD-ONLY0-NEXT:    [[TMP815:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2011:%.*]] = zext i16 [[TMP815]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2012:%.*]] = icmp sgt i32 [[CONV2010]], [[CONV2011]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2012]], label [[IF_THEN2014:%.*]], label [[IF_END2015:%.*]]
// SIMD-ONLY0:       if.then2014:
// SIMD-ONLY0-NEXT:    [[TMP816:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP816]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2015]]
// SIMD-ONLY0:       if.end2015:
// SIMD-ONLY0-NEXT:    [[TMP817:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2016:%.*]] = zext i16 [[TMP817]] to i32
// SIMD-ONLY0-NEXT:    [[TMP818:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2017:%.*]] = zext i16 [[TMP818]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2018:%.*]] = icmp slt i32 [[CONV2016]], [[CONV2017]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2018]], label [[IF_THEN2020:%.*]], label [[IF_END2021:%.*]]
// SIMD-ONLY0:       if.then2020:
// SIMD-ONLY0-NEXT:    [[TMP819:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP819]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2021]]
// SIMD-ONLY0:       if.end2021:
// SIMD-ONLY0-NEXT:    [[TMP820:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2022:%.*]] = zext i16 [[TMP820]] to i32
// SIMD-ONLY0-NEXT:    [[TMP821:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2023:%.*]] = zext i16 [[TMP821]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2024:%.*]] = icmp sgt i32 [[CONV2022]], [[CONV2023]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2024]], label [[IF_THEN2026:%.*]], label [[IF_END2027:%.*]]
// SIMD-ONLY0:       if.then2026:
// SIMD-ONLY0-NEXT:    [[TMP822:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP822]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2027]]
// SIMD-ONLY0:       if.end2027:
// SIMD-ONLY0-NEXT:    [[TMP823:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2028:%.*]] = zext i16 [[TMP823]] to i32
// SIMD-ONLY0-NEXT:    [[TMP824:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2029:%.*]] = zext i16 [[TMP824]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2030:%.*]] = icmp slt i32 [[CONV2028]], [[CONV2029]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2030]], label [[IF_THEN2032:%.*]], label [[IF_END2033:%.*]]
// SIMD-ONLY0:       if.then2032:
// SIMD-ONLY0-NEXT:    [[TMP825:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP825]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2033]]
// SIMD-ONLY0:       if.end2033:
// SIMD-ONLY0-NEXT:    [[TMP826:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2034:%.*]] = zext i16 [[TMP826]] to i32
// SIMD-ONLY0-NEXT:    [[TMP827:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2035:%.*]] = zext i16 [[TMP827]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2036:%.*]] = icmp eq i32 [[CONV2034]], [[CONV2035]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2036]], label [[COND_TRUE2038:%.*]], label [[COND_FALSE2040:%.*]]
// SIMD-ONLY0:       cond.true2038:
// SIMD-ONLY0-NEXT:    [[TMP828:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2039:%.*]] = zext i16 [[TMP828]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2042:%.*]]
// SIMD-ONLY0:       cond.false2040:
// SIMD-ONLY0-NEXT:    [[TMP829:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2041:%.*]] = zext i16 [[TMP829]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2042]]
// SIMD-ONLY0:       cond.end2042:
// SIMD-ONLY0-NEXT:    [[COND2043:%.*]] = phi i32 [ [[CONV2039]], [[COND_TRUE2038]] ], [ [[CONV2041]], [[COND_FALSE2040]] ]
// SIMD-ONLY0-NEXT:    [[CONV2044:%.*]] = trunc i32 [[COND2043]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2044]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP830:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2045:%.*]] = zext i16 [[TMP830]] to i32
// SIMD-ONLY0-NEXT:    [[TMP831:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2046:%.*]] = zext i16 [[TMP831]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2047:%.*]] = icmp eq i32 [[CONV2045]], [[CONV2046]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2047]], label [[COND_TRUE2049:%.*]], label [[COND_FALSE2051:%.*]]
// SIMD-ONLY0:       cond.true2049:
// SIMD-ONLY0-NEXT:    [[TMP832:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2050:%.*]] = zext i16 [[TMP832]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2053:%.*]]
// SIMD-ONLY0:       cond.false2051:
// SIMD-ONLY0-NEXT:    [[TMP833:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2052:%.*]] = zext i16 [[TMP833]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2053]]
// SIMD-ONLY0:       cond.end2053:
// SIMD-ONLY0-NEXT:    [[COND2054:%.*]] = phi i32 [ [[CONV2050]], [[COND_TRUE2049]] ], [ [[CONV2052]], [[COND_FALSE2051]] ]
// SIMD-ONLY0-NEXT:    [[CONV2055:%.*]] = trunc i32 [[COND2054]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2055]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP834:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2056:%.*]] = zext i16 [[TMP834]] to i32
// SIMD-ONLY0-NEXT:    [[TMP835:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2057:%.*]] = zext i16 [[TMP835]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2058:%.*]] = icmp eq i32 [[CONV2056]], [[CONV2057]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2058]], label [[IF_THEN2060:%.*]], label [[IF_END2061:%.*]]
// SIMD-ONLY0:       if.then2060:
// SIMD-ONLY0-NEXT:    [[TMP836:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP836]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2061]]
// SIMD-ONLY0:       if.end2061:
// SIMD-ONLY0-NEXT:    [[TMP837:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2062:%.*]] = zext i16 [[TMP837]] to i32
// SIMD-ONLY0-NEXT:    [[TMP838:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2063:%.*]] = zext i16 [[TMP838]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2064:%.*]] = icmp eq i32 [[CONV2062]], [[CONV2063]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2064]], label [[IF_THEN2066:%.*]], label [[IF_END2067:%.*]]
// SIMD-ONLY0:       if.then2066:
// SIMD-ONLY0-NEXT:    [[TMP839:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP839]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2067]]
// SIMD-ONLY0:       if.end2067:
// SIMD-ONLY0-NEXT:    [[TMP840:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2068:%.*]] = sext i16 [[TMP840]] to i32
// SIMD-ONLY0-NEXT:    [[TMP841:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2069:%.*]] = sext i16 [[TMP841]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2070:%.*]] = icmp sgt i32 [[CONV2068]], [[CONV2069]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2070]], label [[COND_TRUE2072:%.*]], label [[COND_FALSE2074:%.*]]
// SIMD-ONLY0:       cond.true2072:
// SIMD-ONLY0-NEXT:    [[TMP842:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2073:%.*]] = sext i16 [[TMP842]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2076:%.*]]
// SIMD-ONLY0:       cond.false2074:
// SIMD-ONLY0-NEXT:    [[TMP843:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2075:%.*]] = sext i16 [[TMP843]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2076]]
// SIMD-ONLY0:       cond.end2076:
// SIMD-ONLY0-NEXT:    [[COND2077:%.*]] = phi i32 [ [[CONV2073]], [[COND_TRUE2072]] ], [ [[CONV2075]], [[COND_FALSE2074]] ]
// SIMD-ONLY0-NEXT:    [[CONV2078:%.*]] = trunc i32 [[COND2077]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2078]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP844:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2079:%.*]] = sext i16 [[TMP844]] to i32
// SIMD-ONLY0-NEXT:    [[TMP845:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2080:%.*]] = sext i16 [[TMP845]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2081:%.*]] = icmp slt i32 [[CONV2079]], [[CONV2080]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2081]], label [[COND_TRUE2083:%.*]], label [[COND_FALSE2085:%.*]]
// SIMD-ONLY0:       cond.true2083:
// SIMD-ONLY0-NEXT:    [[TMP846:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2084:%.*]] = sext i16 [[TMP846]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2087:%.*]]
// SIMD-ONLY0:       cond.false2085:
// SIMD-ONLY0-NEXT:    [[TMP847:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2086:%.*]] = sext i16 [[TMP847]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2087]]
// SIMD-ONLY0:       cond.end2087:
// SIMD-ONLY0-NEXT:    [[COND2088:%.*]] = phi i32 [ [[CONV2084]], [[COND_TRUE2083]] ], [ [[CONV2086]], [[COND_FALSE2085]] ]
// SIMD-ONLY0-NEXT:    [[CONV2089:%.*]] = trunc i32 [[COND2088]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2089]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP848:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2090:%.*]] = sext i16 [[TMP848]] to i32
// SIMD-ONLY0-NEXT:    [[TMP849:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2091:%.*]] = sext i16 [[TMP849]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2092:%.*]] = icmp sgt i32 [[CONV2090]], [[CONV2091]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2092]], label [[COND_TRUE2094:%.*]], label [[COND_FALSE2096:%.*]]
// SIMD-ONLY0:       cond.true2094:
// SIMD-ONLY0-NEXT:    [[TMP850:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2095:%.*]] = sext i16 [[TMP850]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2098:%.*]]
// SIMD-ONLY0:       cond.false2096:
// SIMD-ONLY0-NEXT:    [[TMP851:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2097:%.*]] = sext i16 [[TMP851]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2098]]
// SIMD-ONLY0:       cond.end2098:
// SIMD-ONLY0-NEXT:    [[COND2099:%.*]] = phi i32 [ [[CONV2095]], [[COND_TRUE2094]] ], [ [[CONV2097]], [[COND_FALSE2096]] ]
// SIMD-ONLY0-NEXT:    [[CONV2100:%.*]] = trunc i32 [[COND2099]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2100]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP852:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2101:%.*]] = sext i16 [[TMP852]] to i32
// SIMD-ONLY0-NEXT:    [[TMP853:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2102:%.*]] = sext i16 [[TMP853]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2103:%.*]] = icmp slt i32 [[CONV2101]], [[CONV2102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2103]], label [[COND_TRUE2105:%.*]], label [[COND_FALSE2107:%.*]]
// SIMD-ONLY0:       cond.true2105:
// SIMD-ONLY0-NEXT:    [[TMP854:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2106:%.*]] = sext i16 [[TMP854]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2109:%.*]]
// SIMD-ONLY0:       cond.false2107:
// SIMD-ONLY0-NEXT:    [[TMP855:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2108:%.*]] = sext i16 [[TMP855]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2109]]
// SIMD-ONLY0:       cond.end2109:
// SIMD-ONLY0-NEXT:    [[COND2110:%.*]] = phi i32 [ [[CONV2106]], [[COND_TRUE2105]] ], [ [[CONV2108]], [[COND_FALSE2107]] ]
// SIMD-ONLY0-NEXT:    [[CONV2111:%.*]] = trunc i32 [[COND2110]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2111]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP856:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2112:%.*]] = sext i16 [[TMP856]] to i32
// SIMD-ONLY0-NEXT:    [[TMP857:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2113:%.*]] = sext i16 [[TMP857]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2114:%.*]] = icmp sgt i32 [[CONV2112]], [[CONV2113]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2114]], label [[IF_THEN2116:%.*]], label [[IF_END2117:%.*]]
// SIMD-ONLY0:       if.then2116:
// SIMD-ONLY0-NEXT:    [[TMP858:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP858]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2117]]
// SIMD-ONLY0:       if.end2117:
// SIMD-ONLY0-NEXT:    [[TMP859:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2118:%.*]] = sext i16 [[TMP859]] to i32
// SIMD-ONLY0-NEXT:    [[TMP860:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2119:%.*]] = sext i16 [[TMP860]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2120:%.*]] = icmp slt i32 [[CONV2118]], [[CONV2119]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2120]], label [[IF_THEN2122:%.*]], label [[IF_END2123:%.*]]
// SIMD-ONLY0:       if.then2122:
// SIMD-ONLY0-NEXT:    [[TMP861:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP861]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2123]]
// SIMD-ONLY0:       if.end2123:
// SIMD-ONLY0-NEXT:    [[TMP862:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2124:%.*]] = sext i16 [[TMP862]] to i32
// SIMD-ONLY0-NEXT:    [[TMP863:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2125:%.*]] = sext i16 [[TMP863]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2126:%.*]] = icmp sgt i32 [[CONV2124]], [[CONV2125]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2126]], label [[IF_THEN2128:%.*]], label [[IF_END2129:%.*]]
// SIMD-ONLY0:       if.then2128:
// SIMD-ONLY0-NEXT:    [[TMP864:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP864]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2129]]
// SIMD-ONLY0:       if.end2129:
// SIMD-ONLY0-NEXT:    [[TMP865:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2130:%.*]] = sext i16 [[TMP865]] to i32
// SIMD-ONLY0-NEXT:    [[TMP866:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2131:%.*]] = sext i16 [[TMP866]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2132:%.*]] = icmp slt i32 [[CONV2130]], [[CONV2131]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2132]], label [[IF_THEN2134:%.*]], label [[IF_END2135:%.*]]
// SIMD-ONLY0:       if.then2134:
// SIMD-ONLY0-NEXT:    [[TMP867:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP867]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2135]]
// SIMD-ONLY0:       if.end2135:
// SIMD-ONLY0-NEXT:    [[TMP868:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2136:%.*]] = sext i16 [[TMP868]] to i32
// SIMD-ONLY0-NEXT:    [[TMP869:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2137:%.*]] = sext i16 [[TMP869]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2138:%.*]] = icmp eq i32 [[CONV2136]], [[CONV2137]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2138]], label [[COND_TRUE2140:%.*]], label [[COND_FALSE2142:%.*]]
// SIMD-ONLY0:       cond.true2140:
// SIMD-ONLY0-NEXT:    [[TMP870:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2141:%.*]] = sext i16 [[TMP870]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2144:%.*]]
// SIMD-ONLY0:       cond.false2142:
// SIMD-ONLY0-NEXT:    [[TMP871:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2143:%.*]] = sext i16 [[TMP871]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2144]]
// SIMD-ONLY0:       cond.end2144:
// SIMD-ONLY0-NEXT:    [[COND2145:%.*]] = phi i32 [ [[CONV2141]], [[COND_TRUE2140]] ], [ [[CONV2143]], [[COND_FALSE2142]] ]
// SIMD-ONLY0-NEXT:    [[CONV2146:%.*]] = trunc i32 [[COND2145]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2146]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP872:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2147:%.*]] = sext i16 [[TMP872]] to i32
// SIMD-ONLY0-NEXT:    [[TMP873:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2148:%.*]] = sext i16 [[TMP873]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2149:%.*]] = icmp eq i32 [[CONV2147]], [[CONV2148]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2149]], label [[COND_TRUE2151:%.*]], label [[COND_FALSE2153:%.*]]
// SIMD-ONLY0:       cond.true2151:
// SIMD-ONLY0-NEXT:    [[TMP874:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2152:%.*]] = sext i16 [[TMP874]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2155:%.*]]
// SIMD-ONLY0:       cond.false2153:
// SIMD-ONLY0-NEXT:    [[TMP875:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2154:%.*]] = sext i16 [[TMP875]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2155]]
// SIMD-ONLY0:       cond.end2155:
// SIMD-ONLY0-NEXT:    [[COND2156:%.*]] = phi i32 [ [[CONV2152]], [[COND_TRUE2151]] ], [ [[CONV2154]], [[COND_FALSE2153]] ]
// SIMD-ONLY0-NEXT:    [[CONV2157:%.*]] = trunc i32 [[COND2156]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2157]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP876:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2158:%.*]] = sext i16 [[TMP876]] to i32
// SIMD-ONLY0-NEXT:    [[TMP877:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2159:%.*]] = sext i16 [[TMP877]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2160:%.*]] = icmp eq i32 [[CONV2158]], [[CONV2159]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2160]], label [[IF_THEN2162:%.*]], label [[IF_END2163:%.*]]
// SIMD-ONLY0:       if.then2162:
// SIMD-ONLY0-NEXT:    [[TMP878:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP878]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2163]]
// SIMD-ONLY0:       if.end2163:
// SIMD-ONLY0-NEXT:    [[TMP879:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2164:%.*]] = sext i16 [[TMP879]] to i32
// SIMD-ONLY0-NEXT:    [[TMP880:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2165:%.*]] = sext i16 [[TMP880]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2166:%.*]] = icmp eq i32 [[CONV2164]], [[CONV2165]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2166]], label [[IF_THEN2168:%.*]], label [[IF_END2169:%.*]]
// SIMD-ONLY0:       if.then2168:
// SIMD-ONLY0-NEXT:    [[TMP881:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP881]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2169]]
// SIMD-ONLY0:       if.end2169:
// SIMD-ONLY0-NEXT:    [[TMP882:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2170:%.*]] = zext i16 [[TMP882]] to i32
// SIMD-ONLY0-NEXT:    [[TMP883:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2171:%.*]] = zext i16 [[TMP883]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2172:%.*]] = icmp sgt i32 [[CONV2170]], [[CONV2171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2172]], label [[COND_TRUE2174:%.*]], label [[COND_FALSE2176:%.*]]
// SIMD-ONLY0:       cond.true2174:
// SIMD-ONLY0-NEXT:    [[TMP884:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2175:%.*]] = zext i16 [[TMP884]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2178:%.*]]
// SIMD-ONLY0:       cond.false2176:
// SIMD-ONLY0-NEXT:    [[TMP885:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2177:%.*]] = zext i16 [[TMP885]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2178]]
// SIMD-ONLY0:       cond.end2178:
// SIMD-ONLY0-NEXT:    [[COND2179:%.*]] = phi i32 [ [[CONV2175]], [[COND_TRUE2174]] ], [ [[CONV2177]], [[COND_FALSE2176]] ]
// SIMD-ONLY0-NEXT:    [[CONV2180:%.*]] = trunc i32 [[COND2179]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2180]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP886:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2181:%.*]] = zext i16 [[TMP886]] to i32
// SIMD-ONLY0-NEXT:    [[TMP887:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2182:%.*]] = zext i16 [[TMP887]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2183:%.*]] = icmp slt i32 [[CONV2181]], [[CONV2182]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2183]], label [[COND_TRUE2185:%.*]], label [[COND_FALSE2187:%.*]]
// SIMD-ONLY0:       cond.true2185:
// SIMD-ONLY0-NEXT:    [[TMP888:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2186:%.*]] = zext i16 [[TMP888]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2189:%.*]]
// SIMD-ONLY0:       cond.false2187:
// SIMD-ONLY0-NEXT:    [[TMP889:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2188:%.*]] = zext i16 [[TMP889]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2189]]
// SIMD-ONLY0:       cond.end2189:
// SIMD-ONLY0-NEXT:    [[COND2190:%.*]] = phi i32 [ [[CONV2186]], [[COND_TRUE2185]] ], [ [[CONV2188]], [[COND_FALSE2187]] ]
// SIMD-ONLY0-NEXT:    [[CONV2191:%.*]] = trunc i32 [[COND2190]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2191]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP890:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2192:%.*]] = zext i16 [[TMP890]] to i32
// SIMD-ONLY0-NEXT:    [[TMP891:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2193:%.*]] = zext i16 [[TMP891]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2194:%.*]] = icmp sgt i32 [[CONV2192]], [[CONV2193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2194]], label [[COND_TRUE2196:%.*]], label [[COND_FALSE2198:%.*]]
// SIMD-ONLY0:       cond.true2196:
// SIMD-ONLY0-NEXT:    [[TMP892:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2197:%.*]] = zext i16 [[TMP892]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2200:%.*]]
// SIMD-ONLY0:       cond.false2198:
// SIMD-ONLY0-NEXT:    [[TMP893:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2199:%.*]] = zext i16 [[TMP893]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2200]]
// SIMD-ONLY0:       cond.end2200:
// SIMD-ONLY0-NEXT:    [[COND2201:%.*]] = phi i32 [ [[CONV2197]], [[COND_TRUE2196]] ], [ [[CONV2199]], [[COND_FALSE2198]] ]
// SIMD-ONLY0-NEXT:    [[CONV2202:%.*]] = trunc i32 [[COND2201]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2202]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP894:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2203:%.*]] = zext i16 [[TMP894]] to i32
// SIMD-ONLY0-NEXT:    [[TMP895:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2204:%.*]] = zext i16 [[TMP895]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2205:%.*]] = icmp slt i32 [[CONV2203]], [[CONV2204]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2205]], label [[COND_TRUE2207:%.*]], label [[COND_FALSE2209:%.*]]
// SIMD-ONLY0:       cond.true2207:
// SIMD-ONLY0-NEXT:    [[TMP896:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2208:%.*]] = zext i16 [[TMP896]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2211:%.*]]
// SIMD-ONLY0:       cond.false2209:
// SIMD-ONLY0-NEXT:    [[TMP897:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2210:%.*]] = zext i16 [[TMP897]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2211]]
// SIMD-ONLY0:       cond.end2211:
// SIMD-ONLY0-NEXT:    [[COND2212:%.*]] = phi i32 [ [[CONV2208]], [[COND_TRUE2207]] ], [ [[CONV2210]], [[COND_FALSE2209]] ]
// SIMD-ONLY0-NEXT:    [[CONV2213:%.*]] = trunc i32 [[COND2212]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2213]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP898:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2214:%.*]] = zext i16 [[TMP898]] to i32
// SIMD-ONLY0-NEXT:    [[TMP899:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2215:%.*]] = zext i16 [[TMP899]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2216:%.*]] = icmp sgt i32 [[CONV2214]], [[CONV2215]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2216]], label [[IF_THEN2218:%.*]], label [[IF_END2219:%.*]]
// SIMD-ONLY0:       if.then2218:
// SIMD-ONLY0-NEXT:    [[TMP900:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP900]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2219]]
// SIMD-ONLY0:       if.end2219:
// SIMD-ONLY0-NEXT:    [[TMP901:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2220:%.*]] = zext i16 [[TMP901]] to i32
// SIMD-ONLY0-NEXT:    [[TMP902:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2221:%.*]] = zext i16 [[TMP902]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2222:%.*]] = icmp slt i32 [[CONV2220]], [[CONV2221]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2222]], label [[IF_THEN2224:%.*]], label [[IF_END2225:%.*]]
// SIMD-ONLY0:       if.then2224:
// SIMD-ONLY0-NEXT:    [[TMP903:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP903]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2225]]
// SIMD-ONLY0:       if.end2225:
// SIMD-ONLY0-NEXT:    [[TMP904:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2226:%.*]] = zext i16 [[TMP904]] to i32
// SIMD-ONLY0-NEXT:    [[TMP905:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2227:%.*]] = zext i16 [[TMP905]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2228:%.*]] = icmp sgt i32 [[CONV2226]], [[CONV2227]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2228]], label [[IF_THEN2230:%.*]], label [[IF_END2231:%.*]]
// SIMD-ONLY0:       if.then2230:
// SIMD-ONLY0-NEXT:    [[TMP906:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP906]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2231]]
// SIMD-ONLY0:       if.end2231:
// SIMD-ONLY0-NEXT:    [[TMP907:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2232:%.*]] = zext i16 [[TMP907]] to i32
// SIMD-ONLY0-NEXT:    [[TMP908:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2233:%.*]] = zext i16 [[TMP908]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2234:%.*]] = icmp slt i32 [[CONV2232]], [[CONV2233]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2234]], label [[IF_THEN2236:%.*]], label [[IF_END2237:%.*]]
// SIMD-ONLY0:       if.then2236:
// SIMD-ONLY0-NEXT:    [[TMP909:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP909]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2237]]
// SIMD-ONLY0:       if.end2237:
// SIMD-ONLY0-NEXT:    [[TMP910:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2238:%.*]] = zext i16 [[TMP910]] to i32
// SIMD-ONLY0-NEXT:    [[TMP911:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2239:%.*]] = zext i16 [[TMP911]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2240:%.*]] = icmp eq i32 [[CONV2238]], [[CONV2239]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2240]], label [[COND_TRUE2242:%.*]], label [[COND_FALSE2244:%.*]]
// SIMD-ONLY0:       cond.true2242:
// SIMD-ONLY0-NEXT:    [[TMP912:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2243:%.*]] = zext i16 [[TMP912]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2246:%.*]]
// SIMD-ONLY0:       cond.false2244:
// SIMD-ONLY0-NEXT:    [[TMP913:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2245:%.*]] = zext i16 [[TMP913]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2246]]
// SIMD-ONLY0:       cond.end2246:
// SIMD-ONLY0-NEXT:    [[COND2247:%.*]] = phi i32 [ [[CONV2243]], [[COND_TRUE2242]] ], [ [[CONV2245]], [[COND_FALSE2244]] ]
// SIMD-ONLY0-NEXT:    [[CONV2248:%.*]] = trunc i32 [[COND2247]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2248]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP914:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2249:%.*]] = zext i16 [[TMP914]] to i32
// SIMD-ONLY0-NEXT:    [[TMP915:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2250:%.*]] = zext i16 [[TMP915]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2251:%.*]] = icmp eq i32 [[CONV2249]], [[CONV2250]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2251]], label [[COND_TRUE2253:%.*]], label [[COND_FALSE2255:%.*]]
// SIMD-ONLY0:       cond.true2253:
// SIMD-ONLY0-NEXT:    [[TMP916:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2254:%.*]] = zext i16 [[TMP916]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2257:%.*]]
// SIMD-ONLY0:       cond.false2255:
// SIMD-ONLY0-NEXT:    [[TMP917:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2256:%.*]] = zext i16 [[TMP917]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2257]]
// SIMD-ONLY0:       cond.end2257:
// SIMD-ONLY0-NEXT:    [[COND2258:%.*]] = phi i32 [ [[CONV2254]], [[COND_TRUE2253]] ], [ [[CONV2256]], [[COND_FALSE2255]] ]
// SIMD-ONLY0-NEXT:    [[CONV2259:%.*]] = trunc i32 [[COND2258]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2259]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP918:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2260:%.*]] = zext i16 [[TMP918]] to i32
// SIMD-ONLY0-NEXT:    [[TMP919:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2261:%.*]] = zext i16 [[TMP919]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2262:%.*]] = icmp eq i32 [[CONV2260]], [[CONV2261]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2262]], label [[IF_THEN2264:%.*]], label [[IF_END2265:%.*]]
// SIMD-ONLY0:       if.then2264:
// SIMD-ONLY0-NEXT:    [[TMP920:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP920]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2265]]
// SIMD-ONLY0:       if.end2265:
// SIMD-ONLY0-NEXT:    [[TMP921:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2266:%.*]] = zext i16 [[TMP921]] to i32
// SIMD-ONLY0-NEXT:    [[TMP922:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2267:%.*]] = zext i16 [[TMP922]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2268:%.*]] = icmp eq i32 [[CONV2266]], [[CONV2267]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2268]], label [[IF_THEN2270:%.*]], label [[IF_END2271:%.*]]
// SIMD-ONLY0:       if.then2270:
// SIMD-ONLY0-NEXT:    [[TMP923:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP923]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2271]]
// SIMD-ONLY0:       if.end2271:
// SIMD-ONLY0-NEXT:    [[TMP924:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2272:%.*]] = sext i16 [[TMP924]] to i32
// SIMD-ONLY0-NEXT:    [[TMP925:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2273:%.*]] = sext i16 [[TMP925]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2274:%.*]] = icmp sgt i32 [[CONV2272]], [[CONV2273]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2274]], label [[COND_TRUE2276:%.*]], label [[COND_FALSE2278:%.*]]
// SIMD-ONLY0:       cond.true2276:
// SIMD-ONLY0-NEXT:    [[TMP926:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2277:%.*]] = sext i16 [[TMP926]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2280:%.*]]
// SIMD-ONLY0:       cond.false2278:
// SIMD-ONLY0-NEXT:    [[TMP927:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2279:%.*]] = sext i16 [[TMP927]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2280]]
// SIMD-ONLY0:       cond.end2280:
// SIMD-ONLY0-NEXT:    [[COND2281:%.*]] = phi i32 [ [[CONV2277]], [[COND_TRUE2276]] ], [ [[CONV2279]], [[COND_FALSE2278]] ]
// SIMD-ONLY0-NEXT:    [[CONV2282:%.*]] = trunc i32 [[COND2281]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2282]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP928:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2283:%.*]] = sext i16 [[TMP928]] to i32
// SIMD-ONLY0-NEXT:    [[TMP929:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2284:%.*]] = sext i16 [[TMP929]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2285:%.*]] = icmp slt i32 [[CONV2283]], [[CONV2284]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2285]], label [[COND_TRUE2287:%.*]], label [[COND_FALSE2289:%.*]]
// SIMD-ONLY0:       cond.true2287:
// SIMD-ONLY0-NEXT:    [[TMP930:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2288:%.*]] = sext i16 [[TMP930]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2291:%.*]]
// SIMD-ONLY0:       cond.false2289:
// SIMD-ONLY0-NEXT:    [[TMP931:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2290:%.*]] = sext i16 [[TMP931]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2291]]
// SIMD-ONLY0:       cond.end2291:
// SIMD-ONLY0-NEXT:    [[COND2292:%.*]] = phi i32 [ [[CONV2288]], [[COND_TRUE2287]] ], [ [[CONV2290]], [[COND_FALSE2289]] ]
// SIMD-ONLY0-NEXT:    [[CONV2293:%.*]] = trunc i32 [[COND2292]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2293]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP932:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2294:%.*]] = sext i16 [[TMP932]] to i32
// SIMD-ONLY0-NEXT:    [[TMP933:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2295:%.*]] = sext i16 [[TMP933]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2296:%.*]] = icmp sgt i32 [[CONV2294]], [[CONV2295]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2296]], label [[COND_TRUE2298:%.*]], label [[COND_FALSE2300:%.*]]
// SIMD-ONLY0:       cond.true2298:
// SIMD-ONLY0-NEXT:    [[TMP934:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2299:%.*]] = sext i16 [[TMP934]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2302:%.*]]
// SIMD-ONLY0:       cond.false2300:
// SIMD-ONLY0-NEXT:    [[TMP935:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2301:%.*]] = sext i16 [[TMP935]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2302]]
// SIMD-ONLY0:       cond.end2302:
// SIMD-ONLY0-NEXT:    [[COND2303:%.*]] = phi i32 [ [[CONV2299]], [[COND_TRUE2298]] ], [ [[CONV2301]], [[COND_FALSE2300]] ]
// SIMD-ONLY0-NEXT:    [[CONV2304:%.*]] = trunc i32 [[COND2303]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2304]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP936:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2305:%.*]] = sext i16 [[TMP936]] to i32
// SIMD-ONLY0-NEXT:    [[TMP937:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2306:%.*]] = sext i16 [[TMP937]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2307:%.*]] = icmp slt i32 [[CONV2305]], [[CONV2306]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2307]], label [[COND_TRUE2309:%.*]], label [[COND_FALSE2311:%.*]]
// SIMD-ONLY0:       cond.true2309:
// SIMD-ONLY0-NEXT:    [[TMP938:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2310:%.*]] = sext i16 [[TMP938]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2313:%.*]]
// SIMD-ONLY0:       cond.false2311:
// SIMD-ONLY0-NEXT:    [[TMP939:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2312:%.*]] = sext i16 [[TMP939]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2313]]
// SIMD-ONLY0:       cond.end2313:
// SIMD-ONLY0-NEXT:    [[COND2314:%.*]] = phi i32 [ [[CONV2310]], [[COND_TRUE2309]] ], [ [[CONV2312]], [[COND_FALSE2311]] ]
// SIMD-ONLY0-NEXT:    [[CONV2315:%.*]] = trunc i32 [[COND2314]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2315]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP940:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2316:%.*]] = sext i16 [[TMP940]] to i32
// SIMD-ONLY0-NEXT:    [[TMP941:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2317:%.*]] = sext i16 [[TMP941]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2318:%.*]] = icmp sgt i32 [[CONV2316]], [[CONV2317]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2318]], label [[IF_THEN2320:%.*]], label [[IF_END2321:%.*]]
// SIMD-ONLY0:       if.then2320:
// SIMD-ONLY0-NEXT:    [[TMP942:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP942]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2321]]
// SIMD-ONLY0:       if.end2321:
// SIMD-ONLY0-NEXT:    [[TMP943:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2322:%.*]] = sext i16 [[TMP943]] to i32
// SIMD-ONLY0-NEXT:    [[TMP944:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2323:%.*]] = sext i16 [[TMP944]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2324:%.*]] = icmp slt i32 [[CONV2322]], [[CONV2323]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2324]], label [[IF_THEN2326:%.*]], label [[IF_END2327:%.*]]
// SIMD-ONLY0:       if.then2326:
// SIMD-ONLY0-NEXT:    [[TMP945:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP945]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2327]]
// SIMD-ONLY0:       if.end2327:
// SIMD-ONLY0-NEXT:    [[TMP946:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2328:%.*]] = sext i16 [[TMP946]] to i32
// SIMD-ONLY0-NEXT:    [[TMP947:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2329:%.*]] = sext i16 [[TMP947]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2330:%.*]] = icmp sgt i32 [[CONV2328]], [[CONV2329]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2330]], label [[IF_THEN2332:%.*]], label [[IF_END2333:%.*]]
// SIMD-ONLY0:       if.then2332:
// SIMD-ONLY0-NEXT:    [[TMP948:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP948]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2333]]
// SIMD-ONLY0:       if.end2333:
// SIMD-ONLY0-NEXT:    [[TMP949:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2334:%.*]] = sext i16 [[TMP949]] to i32
// SIMD-ONLY0-NEXT:    [[TMP950:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2335:%.*]] = sext i16 [[TMP950]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2336:%.*]] = icmp slt i32 [[CONV2334]], [[CONV2335]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2336]], label [[IF_THEN2338:%.*]], label [[IF_END2339:%.*]]
// SIMD-ONLY0:       if.then2338:
// SIMD-ONLY0-NEXT:    [[TMP951:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP951]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2339]]
// SIMD-ONLY0:       if.end2339:
// SIMD-ONLY0-NEXT:    [[TMP952:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2340:%.*]] = sext i16 [[TMP952]] to i32
// SIMD-ONLY0-NEXT:    [[TMP953:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2341:%.*]] = sext i16 [[TMP953]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2342:%.*]] = icmp eq i32 [[CONV2340]], [[CONV2341]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2342]], label [[COND_TRUE2344:%.*]], label [[COND_FALSE2346:%.*]]
// SIMD-ONLY0:       cond.true2344:
// SIMD-ONLY0-NEXT:    [[TMP954:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2345:%.*]] = sext i16 [[TMP954]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2348:%.*]]
// SIMD-ONLY0:       cond.false2346:
// SIMD-ONLY0-NEXT:    [[TMP955:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2347:%.*]] = sext i16 [[TMP955]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2348]]
// SIMD-ONLY0:       cond.end2348:
// SIMD-ONLY0-NEXT:    [[COND2349:%.*]] = phi i32 [ [[CONV2345]], [[COND_TRUE2344]] ], [ [[CONV2347]], [[COND_FALSE2346]] ]
// SIMD-ONLY0-NEXT:    [[CONV2350:%.*]] = trunc i32 [[COND2349]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2350]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP956:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2351:%.*]] = sext i16 [[TMP956]] to i32
// SIMD-ONLY0-NEXT:    [[TMP957:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2352:%.*]] = sext i16 [[TMP957]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2353:%.*]] = icmp eq i32 [[CONV2351]], [[CONV2352]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2353]], label [[COND_TRUE2355:%.*]], label [[COND_FALSE2357:%.*]]
// SIMD-ONLY0:       cond.true2355:
// SIMD-ONLY0-NEXT:    [[TMP958:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2356:%.*]] = sext i16 [[TMP958]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2359:%.*]]
// SIMD-ONLY0:       cond.false2357:
// SIMD-ONLY0-NEXT:    [[TMP959:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2358:%.*]] = sext i16 [[TMP959]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2359]]
// SIMD-ONLY0:       cond.end2359:
// SIMD-ONLY0-NEXT:    [[COND2360:%.*]] = phi i32 [ [[CONV2356]], [[COND_TRUE2355]] ], [ [[CONV2358]], [[COND_FALSE2357]] ]
// SIMD-ONLY0-NEXT:    [[CONV2361:%.*]] = trunc i32 [[COND2360]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2361]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP960:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2362:%.*]] = sext i16 [[TMP960]] to i32
// SIMD-ONLY0-NEXT:    [[TMP961:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2363:%.*]] = sext i16 [[TMP961]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2364:%.*]] = icmp eq i32 [[CONV2362]], [[CONV2363]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2364]], label [[IF_THEN2366:%.*]], label [[IF_END2367:%.*]]
// SIMD-ONLY0:       if.then2366:
// SIMD-ONLY0-NEXT:    [[TMP962:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP962]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2367]]
// SIMD-ONLY0:       if.end2367:
// SIMD-ONLY0-NEXT:    [[TMP963:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2368:%.*]] = sext i16 [[TMP963]] to i32
// SIMD-ONLY0-NEXT:    [[TMP964:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2369:%.*]] = sext i16 [[TMP964]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2370:%.*]] = icmp eq i32 [[CONV2368]], [[CONV2369]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2370]], label [[IF_THEN2372:%.*]], label [[IF_END2373:%.*]]
// SIMD-ONLY0:       if.then2372:
// SIMD-ONLY0-NEXT:    [[TMP965:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP965]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2373]]
// SIMD-ONLY0:       if.end2373:
// SIMD-ONLY0-NEXT:    [[TMP966:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2374:%.*]] = zext i16 [[TMP966]] to i32
// SIMD-ONLY0-NEXT:    [[TMP967:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2375:%.*]] = zext i16 [[TMP967]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2376:%.*]] = icmp sgt i32 [[CONV2374]], [[CONV2375]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2376]], label [[COND_TRUE2378:%.*]], label [[COND_FALSE2380:%.*]]
// SIMD-ONLY0:       cond.true2378:
// SIMD-ONLY0-NEXT:    [[TMP968:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2379:%.*]] = zext i16 [[TMP968]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2382:%.*]]
// SIMD-ONLY0:       cond.false2380:
// SIMD-ONLY0-NEXT:    [[TMP969:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2381:%.*]] = zext i16 [[TMP969]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2382]]
// SIMD-ONLY0:       cond.end2382:
// SIMD-ONLY0-NEXT:    [[COND2383:%.*]] = phi i32 [ [[CONV2379]], [[COND_TRUE2378]] ], [ [[CONV2381]], [[COND_FALSE2380]] ]
// SIMD-ONLY0-NEXT:    [[CONV2384:%.*]] = trunc i32 [[COND2383]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2384]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP970:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2385:%.*]] = zext i16 [[TMP970]] to i32
// SIMD-ONLY0-NEXT:    [[TMP971:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2386:%.*]] = zext i16 [[TMP971]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2387:%.*]] = icmp slt i32 [[CONV2385]], [[CONV2386]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2387]], label [[COND_TRUE2389:%.*]], label [[COND_FALSE2391:%.*]]
// SIMD-ONLY0:       cond.true2389:
// SIMD-ONLY0-NEXT:    [[TMP972:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2390:%.*]] = zext i16 [[TMP972]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2393:%.*]]
// SIMD-ONLY0:       cond.false2391:
// SIMD-ONLY0-NEXT:    [[TMP973:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2392:%.*]] = zext i16 [[TMP973]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2393]]
// SIMD-ONLY0:       cond.end2393:
// SIMD-ONLY0-NEXT:    [[COND2394:%.*]] = phi i32 [ [[CONV2390]], [[COND_TRUE2389]] ], [ [[CONV2392]], [[COND_FALSE2391]] ]
// SIMD-ONLY0-NEXT:    [[CONV2395:%.*]] = trunc i32 [[COND2394]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2395]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP974:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2396:%.*]] = zext i16 [[TMP974]] to i32
// SIMD-ONLY0-NEXT:    [[TMP975:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2397:%.*]] = zext i16 [[TMP975]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2398:%.*]] = icmp sgt i32 [[CONV2396]], [[CONV2397]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2398]], label [[COND_TRUE2400:%.*]], label [[COND_FALSE2402:%.*]]
// SIMD-ONLY0:       cond.true2400:
// SIMD-ONLY0-NEXT:    [[TMP976:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2401:%.*]] = zext i16 [[TMP976]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2404:%.*]]
// SIMD-ONLY0:       cond.false2402:
// SIMD-ONLY0-NEXT:    [[TMP977:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2403:%.*]] = zext i16 [[TMP977]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2404]]
// SIMD-ONLY0:       cond.end2404:
// SIMD-ONLY0-NEXT:    [[COND2405:%.*]] = phi i32 [ [[CONV2401]], [[COND_TRUE2400]] ], [ [[CONV2403]], [[COND_FALSE2402]] ]
// SIMD-ONLY0-NEXT:    [[CONV2406:%.*]] = trunc i32 [[COND2405]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2406]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP978:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2407:%.*]] = zext i16 [[TMP978]] to i32
// SIMD-ONLY0-NEXT:    [[TMP979:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2408:%.*]] = zext i16 [[TMP979]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2409:%.*]] = icmp slt i32 [[CONV2407]], [[CONV2408]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2409]], label [[COND_TRUE2411:%.*]], label [[COND_FALSE2413:%.*]]
// SIMD-ONLY0:       cond.true2411:
// SIMD-ONLY0-NEXT:    [[TMP980:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2412:%.*]] = zext i16 [[TMP980]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2415:%.*]]
// SIMD-ONLY0:       cond.false2413:
// SIMD-ONLY0-NEXT:    [[TMP981:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2414:%.*]] = zext i16 [[TMP981]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2415]]
// SIMD-ONLY0:       cond.end2415:
// SIMD-ONLY0-NEXT:    [[COND2416:%.*]] = phi i32 [ [[CONV2412]], [[COND_TRUE2411]] ], [ [[CONV2414]], [[COND_FALSE2413]] ]
// SIMD-ONLY0-NEXT:    [[CONV2417:%.*]] = trunc i32 [[COND2416]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2417]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP982:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2418:%.*]] = zext i16 [[TMP982]] to i32
// SIMD-ONLY0-NEXT:    [[TMP983:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2419:%.*]] = zext i16 [[TMP983]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2420:%.*]] = icmp sgt i32 [[CONV2418]], [[CONV2419]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2420]], label [[IF_THEN2422:%.*]], label [[IF_END2423:%.*]]
// SIMD-ONLY0:       if.then2422:
// SIMD-ONLY0-NEXT:    [[TMP984:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP984]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2423]]
// SIMD-ONLY0:       if.end2423:
// SIMD-ONLY0-NEXT:    [[TMP985:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2424:%.*]] = zext i16 [[TMP985]] to i32
// SIMD-ONLY0-NEXT:    [[TMP986:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2425:%.*]] = zext i16 [[TMP986]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2426:%.*]] = icmp slt i32 [[CONV2424]], [[CONV2425]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2426]], label [[IF_THEN2428:%.*]], label [[IF_END2429:%.*]]
// SIMD-ONLY0:       if.then2428:
// SIMD-ONLY0-NEXT:    [[TMP987:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP987]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2429]]
// SIMD-ONLY0:       if.end2429:
// SIMD-ONLY0-NEXT:    [[TMP988:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2430:%.*]] = zext i16 [[TMP988]] to i32
// SIMD-ONLY0-NEXT:    [[TMP989:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2431:%.*]] = zext i16 [[TMP989]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2432:%.*]] = icmp sgt i32 [[CONV2430]], [[CONV2431]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2432]], label [[IF_THEN2434:%.*]], label [[IF_END2435:%.*]]
// SIMD-ONLY0:       if.then2434:
// SIMD-ONLY0-NEXT:    [[TMP990:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP990]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2435]]
// SIMD-ONLY0:       if.end2435:
// SIMD-ONLY0-NEXT:    [[TMP991:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2436:%.*]] = zext i16 [[TMP991]] to i32
// SIMD-ONLY0-NEXT:    [[TMP992:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2437:%.*]] = zext i16 [[TMP992]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2438:%.*]] = icmp slt i32 [[CONV2436]], [[CONV2437]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2438]], label [[IF_THEN2440:%.*]], label [[IF_END2441:%.*]]
// SIMD-ONLY0:       if.then2440:
// SIMD-ONLY0-NEXT:    [[TMP993:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP993]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2441]]
// SIMD-ONLY0:       if.end2441:
// SIMD-ONLY0-NEXT:    [[TMP994:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2442:%.*]] = zext i16 [[TMP994]] to i32
// SIMD-ONLY0-NEXT:    [[TMP995:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2443:%.*]] = zext i16 [[TMP995]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2444:%.*]] = icmp eq i32 [[CONV2442]], [[CONV2443]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2444]], label [[COND_TRUE2446:%.*]], label [[COND_FALSE2448:%.*]]
// SIMD-ONLY0:       cond.true2446:
// SIMD-ONLY0-NEXT:    [[TMP996:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2447:%.*]] = zext i16 [[TMP996]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2450:%.*]]
// SIMD-ONLY0:       cond.false2448:
// SIMD-ONLY0-NEXT:    [[TMP997:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2449:%.*]] = zext i16 [[TMP997]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2450]]
// SIMD-ONLY0:       cond.end2450:
// SIMD-ONLY0-NEXT:    [[COND2451:%.*]] = phi i32 [ [[CONV2447]], [[COND_TRUE2446]] ], [ [[CONV2449]], [[COND_FALSE2448]] ]
// SIMD-ONLY0-NEXT:    [[CONV2452:%.*]] = trunc i32 [[COND2451]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2452]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP998:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2453:%.*]] = zext i16 [[TMP998]] to i32
// SIMD-ONLY0-NEXT:    [[TMP999:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2454:%.*]] = zext i16 [[TMP999]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2455:%.*]] = icmp eq i32 [[CONV2453]], [[CONV2454]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2455]], label [[COND_TRUE2457:%.*]], label [[COND_FALSE2459:%.*]]
// SIMD-ONLY0:       cond.true2457:
// SIMD-ONLY0-NEXT:    [[TMP1000:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2458:%.*]] = zext i16 [[TMP1000]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2461:%.*]]
// SIMD-ONLY0:       cond.false2459:
// SIMD-ONLY0-NEXT:    [[TMP1001:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2460:%.*]] = zext i16 [[TMP1001]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2461]]
// SIMD-ONLY0:       cond.end2461:
// SIMD-ONLY0-NEXT:    [[COND2462:%.*]] = phi i32 [ [[CONV2458]], [[COND_TRUE2457]] ], [ [[CONV2460]], [[COND_FALSE2459]] ]
// SIMD-ONLY0-NEXT:    [[CONV2463:%.*]] = trunc i32 [[COND2462]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2463]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1002:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2464:%.*]] = zext i16 [[TMP1002]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1003:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2465:%.*]] = zext i16 [[TMP1003]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2466:%.*]] = icmp eq i32 [[CONV2464]], [[CONV2465]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2466]], label [[IF_THEN2468:%.*]], label [[IF_END2469:%.*]]
// SIMD-ONLY0:       if.then2468:
// SIMD-ONLY0-NEXT:    [[TMP1004:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1004]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2469]]
// SIMD-ONLY0:       if.end2469:
// SIMD-ONLY0-NEXT:    [[TMP1005:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2470:%.*]] = zext i16 [[TMP1005]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1006:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2471:%.*]] = zext i16 [[TMP1006]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2472:%.*]] = icmp eq i32 [[CONV2470]], [[CONV2471]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2472]], label [[IF_THEN2474:%.*]], label [[IF_END2475:%.*]]
// SIMD-ONLY0:       if.then2474:
// SIMD-ONLY0-NEXT:    [[TMP1007:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1007]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2475]]
// SIMD-ONLY0:       if.end2475:
// SIMD-ONLY0-NEXT:    [[TMP1008:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1009:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2476:%.*]] = icmp sgt i32 [[TMP1008]], [[TMP1009]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2476]], label [[COND_TRUE2478:%.*]], label [[COND_FALSE2479:%.*]]
// SIMD-ONLY0:       cond.true2478:
// SIMD-ONLY0-NEXT:    [[TMP1010:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2480:%.*]]
// SIMD-ONLY0:       cond.false2479:
// SIMD-ONLY0-NEXT:    [[TMP1011:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2480]]
// SIMD-ONLY0:       cond.end2480:
// SIMD-ONLY0-NEXT:    [[COND2481:%.*]] = phi i32 [ [[TMP1010]], [[COND_TRUE2478]] ], [ [[TMP1011]], [[COND_FALSE2479]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2481]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1012:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1013:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2482:%.*]] = icmp slt i32 [[TMP1012]], [[TMP1013]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2482]], label [[COND_TRUE2484:%.*]], label [[COND_FALSE2485:%.*]]
// SIMD-ONLY0:       cond.true2484:
// SIMD-ONLY0-NEXT:    [[TMP1014:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2486:%.*]]
// SIMD-ONLY0:       cond.false2485:
// SIMD-ONLY0-NEXT:    [[TMP1015:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2486]]
// SIMD-ONLY0:       cond.end2486:
// SIMD-ONLY0-NEXT:    [[COND2487:%.*]] = phi i32 [ [[TMP1014]], [[COND_TRUE2484]] ], [ [[TMP1015]], [[COND_FALSE2485]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2487]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1016:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1017:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2488:%.*]] = icmp sgt i32 [[TMP1016]], [[TMP1017]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2488]], label [[COND_TRUE2490:%.*]], label [[COND_FALSE2491:%.*]]
// SIMD-ONLY0:       cond.true2490:
// SIMD-ONLY0-NEXT:    [[TMP1018:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2492:%.*]]
// SIMD-ONLY0:       cond.false2491:
// SIMD-ONLY0-NEXT:    [[TMP1019:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2492]]
// SIMD-ONLY0:       cond.end2492:
// SIMD-ONLY0-NEXT:    [[COND2493:%.*]] = phi i32 [ [[TMP1018]], [[COND_TRUE2490]] ], [ [[TMP1019]], [[COND_FALSE2491]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2493]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1020:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1021:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2494:%.*]] = icmp slt i32 [[TMP1020]], [[TMP1021]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2494]], label [[COND_TRUE2496:%.*]], label [[COND_FALSE2497:%.*]]
// SIMD-ONLY0:       cond.true2496:
// SIMD-ONLY0-NEXT:    [[TMP1022:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2498:%.*]]
// SIMD-ONLY0:       cond.false2497:
// SIMD-ONLY0-NEXT:    [[TMP1023:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2498]]
// SIMD-ONLY0:       cond.end2498:
// SIMD-ONLY0-NEXT:    [[COND2499:%.*]] = phi i32 [ [[TMP1022]], [[COND_TRUE2496]] ], [ [[TMP1023]], [[COND_FALSE2497]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2499]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1024:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1025:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2500:%.*]] = icmp sgt i32 [[TMP1024]], [[TMP1025]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2500]], label [[IF_THEN2502:%.*]], label [[IF_END2503:%.*]]
// SIMD-ONLY0:       if.then2502:
// SIMD-ONLY0-NEXT:    [[TMP1026:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1026]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2503]]
// SIMD-ONLY0:       if.end2503:
// SIMD-ONLY0-NEXT:    [[TMP1027:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1028:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2504:%.*]] = icmp slt i32 [[TMP1027]], [[TMP1028]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2504]], label [[IF_THEN2506:%.*]], label [[IF_END2507:%.*]]
// SIMD-ONLY0:       if.then2506:
// SIMD-ONLY0-NEXT:    [[TMP1029:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1029]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2507]]
// SIMD-ONLY0:       if.end2507:
// SIMD-ONLY0-NEXT:    [[TMP1030:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1031:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2508:%.*]] = icmp sgt i32 [[TMP1030]], [[TMP1031]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2508]], label [[IF_THEN2510:%.*]], label [[IF_END2511:%.*]]
// SIMD-ONLY0:       if.then2510:
// SIMD-ONLY0-NEXT:    [[TMP1032:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1032]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2511]]
// SIMD-ONLY0:       if.end2511:
// SIMD-ONLY0-NEXT:    [[TMP1033:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1034:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2512:%.*]] = icmp slt i32 [[TMP1033]], [[TMP1034]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2512]], label [[IF_THEN2514:%.*]], label [[IF_END2515:%.*]]
// SIMD-ONLY0:       if.then2514:
// SIMD-ONLY0-NEXT:    [[TMP1035:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1035]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2515]]
// SIMD-ONLY0:       if.end2515:
// SIMD-ONLY0-NEXT:    [[TMP1036:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1037:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2516:%.*]] = icmp eq i32 [[TMP1036]], [[TMP1037]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2516]], label [[COND_TRUE2518:%.*]], label [[COND_FALSE2519:%.*]]
// SIMD-ONLY0:       cond.true2518:
// SIMD-ONLY0-NEXT:    [[TMP1038:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2520:%.*]]
// SIMD-ONLY0:       cond.false2519:
// SIMD-ONLY0-NEXT:    [[TMP1039:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2520]]
// SIMD-ONLY0:       cond.end2520:
// SIMD-ONLY0-NEXT:    [[COND2521:%.*]] = phi i32 [ [[TMP1038]], [[COND_TRUE2518]] ], [ [[TMP1039]], [[COND_FALSE2519]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2521]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1040:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1041:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2522:%.*]] = icmp eq i32 [[TMP1040]], [[TMP1041]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2522]], label [[COND_TRUE2524:%.*]], label [[COND_FALSE2525:%.*]]
// SIMD-ONLY0:       cond.true2524:
// SIMD-ONLY0-NEXT:    [[TMP1042:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2526:%.*]]
// SIMD-ONLY0:       cond.false2525:
// SIMD-ONLY0-NEXT:    [[TMP1043:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2526]]
// SIMD-ONLY0:       cond.end2526:
// SIMD-ONLY0-NEXT:    [[COND2527:%.*]] = phi i32 [ [[TMP1042]], [[COND_TRUE2524]] ], [ [[TMP1043]], [[COND_FALSE2525]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2527]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1044:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1045:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2528:%.*]] = icmp eq i32 [[TMP1044]], [[TMP1045]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2528]], label [[IF_THEN2530:%.*]], label [[IF_END2531:%.*]]
// SIMD-ONLY0:       if.then2530:
// SIMD-ONLY0-NEXT:    [[TMP1046:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1046]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2531]]
// SIMD-ONLY0:       if.end2531:
// SIMD-ONLY0-NEXT:    [[TMP1047:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1048:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2532:%.*]] = icmp eq i32 [[TMP1047]], [[TMP1048]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2532]], label [[IF_THEN2534:%.*]], label [[IF_END2535:%.*]]
// SIMD-ONLY0:       if.then2534:
// SIMD-ONLY0-NEXT:    [[TMP1049:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1049]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2535]]
// SIMD-ONLY0:       if.end2535:
// SIMD-ONLY0-NEXT:    [[TMP1050:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1051:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2536:%.*]] = icmp ugt i32 [[TMP1050]], [[TMP1051]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2536]], label [[COND_TRUE2538:%.*]], label [[COND_FALSE2539:%.*]]
// SIMD-ONLY0:       cond.true2538:
// SIMD-ONLY0-NEXT:    [[TMP1052:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2540:%.*]]
// SIMD-ONLY0:       cond.false2539:
// SIMD-ONLY0-NEXT:    [[TMP1053:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2540]]
// SIMD-ONLY0:       cond.end2540:
// SIMD-ONLY0-NEXT:    [[COND2541:%.*]] = phi i32 [ [[TMP1052]], [[COND_TRUE2538]] ], [ [[TMP1053]], [[COND_FALSE2539]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2541]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1054:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1055:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2542:%.*]] = icmp ult i32 [[TMP1054]], [[TMP1055]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2542]], label [[COND_TRUE2544:%.*]], label [[COND_FALSE2545:%.*]]
// SIMD-ONLY0:       cond.true2544:
// SIMD-ONLY0-NEXT:    [[TMP1056:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2546:%.*]]
// SIMD-ONLY0:       cond.false2545:
// SIMD-ONLY0-NEXT:    [[TMP1057:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2546]]
// SIMD-ONLY0:       cond.end2546:
// SIMD-ONLY0-NEXT:    [[COND2547:%.*]] = phi i32 [ [[TMP1056]], [[COND_TRUE2544]] ], [ [[TMP1057]], [[COND_FALSE2545]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2547]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1058:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1059:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2548:%.*]] = icmp ugt i32 [[TMP1058]], [[TMP1059]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2548]], label [[COND_TRUE2550:%.*]], label [[COND_FALSE2551:%.*]]
// SIMD-ONLY0:       cond.true2550:
// SIMD-ONLY0-NEXT:    [[TMP1060:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2552:%.*]]
// SIMD-ONLY0:       cond.false2551:
// SIMD-ONLY0-NEXT:    [[TMP1061:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2552]]
// SIMD-ONLY0:       cond.end2552:
// SIMD-ONLY0-NEXT:    [[COND2553:%.*]] = phi i32 [ [[TMP1060]], [[COND_TRUE2550]] ], [ [[TMP1061]], [[COND_FALSE2551]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2553]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1062:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1063:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2554:%.*]] = icmp ult i32 [[TMP1062]], [[TMP1063]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2554]], label [[COND_TRUE2556:%.*]], label [[COND_FALSE2557:%.*]]
// SIMD-ONLY0:       cond.true2556:
// SIMD-ONLY0-NEXT:    [[TMP1064:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2558:%.*]]
// SIMD-ONLY0:       cond.false2557:
// SIMD-ONLY0-NEXT:    [[TMP1065:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2558]]
// SIMD-ONLY0:       cond.end2558:
// SIMD-ONLY0-NEXT:    [[COND2559:%.*]] = phi i32 [ [[TMP1064]], [[COND_TRUE2556]] ], [ [[TMP1065]], [[COND_FALSE2557]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2559]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1066:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1067:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2560:%.*]] = icmp ugt i32 [[TMP1066]], [[TMP1067]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2560]], label [[IF_THEN2562:%.*]], label [[IF_END2563:%.*]]
// SIMD-ONLY0:       if.then2562:
// SIMD-ONLY0-NEXT:    [[TMP1068:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1068]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2563]]
// SIMD-ONLY0:       if.end2563:
// SIMD-ONLY0-NEXT:    [[TMP1069:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1070:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2564:%.*]] = icmp ult i32 [[TMP1069]], [[TMP1070]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2564]], label [[IF_THEN2566:%.*]], label [[IF_END2567:%.*]]
// SIMD-ONLY0:       if.then2566:
// SIMD-ONLY0-NEXT:    [[TMP1071:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1071]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2567]]
// SIMD-ONLY0:       if.end2567:
// SIMD-ONLY0-NEXT:    [[TMP1072:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1073:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2568:%.*]] = icmp ugt i32 [[TMP1072]], [[TMP1073]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2568]], label [[IF_THEN2570:%.*]], label [[IF_END2571:%.*]]
// SIMD-ONLY0:       if.then2570:
// SIMD-ONLY0-NEXT:    [[TMP1074:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1074]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2571]]
// SIMD-ONLY0:       if.end2571:
// SIMD-ONLY0-NEXT:    [[TMP1075:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1076:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2572:%.*]] = icmp ult i32 [[TMP1075]], [[TMP1076]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2572]], label [[IF_THEN2574:%.*]], label [[IF_END2575:%.*]]
// SIMD-ONLY0:       if.then2574:
// SIMD-ONLY0-NEXT:    [[TMP1077:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1077]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2575]]
// SIMD-ONLY0:       if.end2575:
// SIMD-ONLY0-NEXT:    [[TMP1078:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1079:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2576:%.*]] = icmp eq i32 [[TMP1078]], [[TMP1079]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2576]], label [[COND_TRUE2578:%.*]], label [[COND_FALSE2579:%.*]]
// SIMD-ONLY0:       cond.true2578:
// SIMD-ONLY0-NEXT:    [[TMP1080:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2580:%.*]]
// SIMD-ONLY0:       cond.false2579:
// SIMD-ONLY0-NEXT:    [[TMP1081:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2580]]
// SIMD-ONLY0:       cond.end2580:
// SIMD-ONLY0-NEXT:    [[COND2581:%.*]] = phi i32 [ [[TMP1080]], [[COND_TRUE2578]] ], [ [[TMP1081]], [[COND_FALSE2579]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2581]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1082:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1083:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2582:%.*]] = icmp eq i32 [[TMP1082]], [[TMP1083]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2582]], label [[COND_TRUE2584:%.*]], label [[COND_FALSE2585:%.*]]
// SIMD-ONLY0:       cond.true2584:
// SIMD-ONLY0-NEXT:    [[TMP1084:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2586:%.*]]
// SIMD-ONLY0:       cond.false2585:
// SIMD-ONLY0-NEXT:    [[TMP1085:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2586]]
// SIMD-ONLY0:       cond.end2586:
// SIMD-ONLY0-NEXT:    [[COND2587:%.*]] = phi i32 [ [[TMP1084]], [[COND_TRUE2584]] ], [ [[TMP1085]], [[COND_FALSE2585]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2587]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1086:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1087:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2588:%.*]] = icmp eq i32 [[TMP1086]], [[TMP1087]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2588]], label [[IF_THEN2590:%.*]], label [[IF_END2591:%.*]]
// SIMD-ONLY0:       if.then2590:
// SIMD-ONLY0-NEXT:    [[TMP1088:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1088]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2591]]
// SIMD-ONLY0:       if.end2591:
// SIMD-ONLY0-NEXT:    [[TMP1089:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1090:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2592:%.*]] = icmp eq i32 [[TMP1089]], [[TMP1090]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2592]], label [[IF_THEN2594:%.*]], label [[IF_END2595:%.*]]
// SIMD-ONLY0:       if.then2594:
// SIMD-ONLY0-NEXT:    [[TMP1091:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1091]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2595]]
// SIMD-ONLY0:       if.end2595:
// SIMD-ONLY0-NEXT:    [[TMP1092:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1093:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2596:%.*]] = icmp sgt i32 [[TMP1092]], [[TMP1093]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2596]], label [[COND_TRUE2598:%.*]], label [[COND_FALSE2599:%.*]]
// SIMD-ONLY0:       cond.true2598:
// SIMD-ONLY0-NEXT:    [[TMP1094:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2600:%.*]]
// SIMD-ONLY0:       cond.false2599:
// SIMD-ONLY0-NEXT:    [[TMP1095:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2600]]
// SIMD-ONLY0:       cond.end2600:
// SIMD-ONLY0-NEXT:    [[COND2601:%.*]] = phi i32 [ [[TMP1094]], [[COND_TRUE2598]] ], [ [[TMP1095]], [[COND_FALSE2599]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2601]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1096:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1097:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2602:%.*]] = icmp slt i32 [[TMP1096]], [[TMP1097]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2602]], label [[COND_TRUE2604:%.*]], label [[COND_FALSE2605:%.*]]
// SIMD-ONLY0:       cond.true2604:
// SIMD-ONLY0-NEXT:    [[TMP1098:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2606:%.*]]
// SIMD-ONLY0:       cond.false2605:
// SIMD-ONLY0-NEXT:    [[TMP1099:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2606]]
// SIMD-ONLY0:       cond.end2606:
// SIMD-ONLY0-NEXT:    [[COND2607:%.*]] = phi i32 [ [[TMP1098]], [[COND_TRUE2604]] ], [ [[TMP1099]], [[COND_FALSE2605]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2607]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1100:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1101:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2608:%.*]] = icmp sgt i32 [[TMP1100]], [[TMP1101]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2608]], label [[COND_TRUE2610:%.*]], label [[COND_FALSE2611:%.*]]
// SIMD-ONLY0:       cond.true2610:
// SIMD-ONLY0-NEXT:    [[TMP1102:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2612:%.*]]
// SIMD-ONLY0:       cond.false2611:
// SIMD-ONLY0-NEXT:    [[TMP1103:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2612]]
// SIMD-ONLY0:       cond.end2612:
// SIMD-ONLY0-NEXT:    [[COND2613:%.*]] = phi i32 [ [[TMP1102]], [[COND_TRUE2610]] ], [ [[TMP1103]], [[COND_FALSE2611]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2613]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1104:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1105:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2614:%.*]] = icmp slt i32 [[TMP1104]], [[TMP1105]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2614]], label [[COND_TRUE2616:%.*]], label [[COND_FALSE2617:%.*]]
// SIMD-ONLY0:       cond.true2616:
// SIMD-ONLY0-NEXT:    [[TMP1106:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2618:%.*]]
// SIMD-ONLY0:       cond.false2617:
// SIMD-ONLY0-NEXT:    [[TMP1107:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2618]]
// SIMD-ONLY0:       cond.end2618:
// SIMD-ONLY0-NEXT:    [[COND2619:%.*]] = phi i32 [ [[TMP1106]], [[COND_TRUE2616]] ], [ [[TMP1107]], [[COND_FALSE2617]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2619]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1108:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1109:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2620:%.*]] = icmp sgt i32 [[TMP1108]], [[TMP1109]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2620]], label [[IF_THEN2622:%.*]], label [[IF_END2623:%.*]]
// SIMD-ONLY0:       if.then2622:
// SIMD-ONLY0-NEXT:    [[TMP1110:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1110]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2623]]
// SIMD-ONLY0:       if.end2623:
// SIMD-ONLY0-NEXT:    [[TMP1111:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1112:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2624:%.*]] = icmp slt i32 [[TMP1111]], [[TMP1112]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2624]], label [[IF_THEN2626:%.*]], label [[IF_END2627:%.*]]
// SIMD-ONLY0:       if.then2626:
// SIMD-ONLY0-NEXT:    [[TMP1113:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1113]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2627]]
// SIMD-ONLY0:       if.end2627:
// SIMD-ONLY0-NEXT:    [[TMP1114:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1115:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2628:%.*]] = icmp sgt i32 [[TMP1114]], [[TMP1115]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2628]], label [[IF_THEN2630:%.*]], label [[IF_END2631:%.*]]
// SIMD-ONLY0:       if.then2630:
// SIMD-ONLY0-NEXT:    [[TMP1116:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1116]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2631]]
// SIMD-ONLY0:       if.end2631:
// SIMD-ONLY0-NEXT:    [[TMP1117:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1118:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2632:%.*]] = icmp slt i32 [[TMP1117]], [[TMP1118]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2632]], label [[IF_THEN2634:%.*]], label [[IF_END2635:%.*]]
// SIMD-ONLY0:       if.then2634:
// SIMD-ONLY0-NEXT:    [[TMP1119:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1119]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2635]]
// SIMD-ONLY0:       if.end2635:
// SIMD-ONLY0-NEXT:    [[TMP1120:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1121:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2636:%.*]] = icmp eq i32 [[TMP1120]], [[TMP1121]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2636]], label [[COND_TRUE2638:%.*]], label [[COND_FALSE2639:%.*]]
// SIMD-ONLY0:       cond.true2638:
// SIMD-ONLY0-NEXT:    [[TMP1122:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2640:%.*]]
// SIMD-ONLY0:       cond.false2639:
// SIMD-ONLY0-NEXT:    [[TMP1123:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2640]]
// SIMD-ONLY0:       cond.end2640:
// SIMD-ONLY0-NEXT:    [[COND2641:%.*]] = phi i32 [ [[TMP1122]], [[COND_TRUE2638]] ], [ [[TMP1123]], [[COND_FALSE2639]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2641]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1124:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1125:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2642:%.*]] = icmp eq i32 [[TMP1124]], [[TMP1125]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2642]], label [[COND_TRUE2644:%.*]], label [[COND_FALSE2645:%.*]]
// SIMD-ONLY0:       cond.true2644:
// SIMD-ONLY0-NEXT:    [[TMP1126:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2646:%.*]]
// SIMD-ONLY0:       cond.false2645:
// SIMD-ONLY0-NEXT:    [[TMP1127:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2646]]
// SIMD-ONLY0:       cond.end2646:
// SIMD-ONLY0-NEXT:    [[COND2647:%.*]] = phi i32 [ [[TMP1126]], [[COND_TRUE2644]] ], [ [[TMP1127]], [[COND_FALSE2645]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2647]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1128:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1129:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2648:%.*]] = icmp eq i32 [[TMP1128]], [[TMP1129]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2648]], label [[IF_THEN2650:%.*]], label [[IF_END2651:%.*]]
// SIMD-ONLY0:       if.then2650:
// SIMD-ONLY0-NEXT:    [[TMP1130:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1130]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2651]]
// SIMD-ONLY0:       if.end2651:
// SIMD-ONLY0-NEXT:    [[TMP1131:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1132:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2652:%.*]] = icmp eq i32 [[TMP1131]], [[TMP1132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2652]], label [[IF_THEN2654:%.*]], label [[IF_END2655:%.*]]
// SIMD-ONLY0:       if.then2654:
// SIMD-ONLY0-NEXT:    [[TMP1133:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1133]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2655]]
// SIMD-ONLY0:       if.end2655:
// SIMD-ONLY0-NEXT:    [[TMP1134:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1135:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2656:%.*]] = icmp ugt i32 [[TMP1134]], [[TMP1135]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2656]], label [[COND_TRUE2658:%.*]], label [[COND_FALSE2659:%.*]]
// SIMD-ONLY0:       cond.true2658:
// SIMD-ONLY0-NEXT:    [[TMP1136:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2660:%.*]]
// SIMD-ONLY0:       cond.false2659:
// SIMD-ONLY0-NEXT:    [[TMP1137:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2660]]
// SIMD-ONLY0:       cond.end2660:
// SIMD-ONLY0-NEXT:    [[COND2661:%.*]] = phi i32 [ [[TMP1136]], [[COND_TRUE2658]] ], [ [[TMP1137]], [[COND_FALSE2659]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2661]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1138:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1139:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2662:%.*]] = icmp ult i32 [[TMP1138]], [[TMP1139]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2662]], label [[COND_TRUE2664:%.*]], label [[COND_FALSE2665:%.*]]
// SIMD-ONLY0:       cond.true2664:
// SIMD-ONLY0-NEXT:    [[TMP1140:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2666:%.*]]
// SIMD-ONLY0:       cond.false2665:
// SIMD-ONLY0-NEXT:    [[TMP1141:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2666]]
// SIMD-ONLY0:       cond.end2666:
// SIMD-ONLY0-NEXT:    [[COND2667:%.*]] = phi i32 [ [[TMP1140]], [[COND_TRUE2664]] ], [ [[TMP1141]], [[COND_FALSE2665]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2667]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1142:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1143:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2668:%.*]] = icmp ugt i32 [[TMP1142]], [[TMP1143]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2668]], label [[COND_TRUE2670:%.*]], label [[COND_FALSE2671:%.*]]
// SIMD-ONLY0:       cond.true2670:
// SIMD-ONLY0-NEXT:    [[TMP1144:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2672:%.*]]
// SIMD-ONLY0:       cond.false2671:
// SIMD-ONLY0-NEXT:    [[TMP1145:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2672]]
// SIMD-ONLY0:       cond.end2672:
// SIMD-ONLY0-NEXT:    [[COND2673:%.*]] = phi i32 [ [[TMP1144]], [[COND_TRUE2670]] ], [ [[TMP1145]], [[COND_FALSE2671]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2673]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1146:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1147:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2674:%.*]] = icmp ult i32 [[TMP1146]], [[TMP1147]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2674]], label [[COND_TRUE2676:%.*]], label [[COND_FALSE2677:%.*]]
// SIMD-ONLY0:       cond.true2676:
// SIMD-ONLY0-NEXT:    [[TMP1148:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2678:%.*]]
// SIMD-ONLY0:       cond.false2677:
// SIMD-ONLY0-NEXT:    [[TMP1149:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2678]]
// SIMD-ONLY0:       cond.end2678:
// SIMD-ONLY0-NEXT:    [[COND2679:%.*]] = phi i32 [ [[TMP1148]], [[COND_TRUE2676]] ], [ [[TMP1149]], [[COND_FALSE2677]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2679]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1150:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1151:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2680:%.*]] = icmp ugt i32 [[TMP1150]], [[TMP1151]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2680]], label [[IF_THEN2682:%.*]], label [[IF_END2683:%.*]]
// SIMD-ONLY0:       if.then2682:
// SIMD-ONLY0-NEXT:    [[TMP1152:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1152]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2683]]
// SIMD-ONLY0:       if.end2683:
// SIMD-ONLY0-NEXT:    [[TMP1153:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1154:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2684:%.*]] = icmp ult i32 [[TMP1153]], [[TMP1154]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2684]], label [[IF_THEN2686:%.*]], label [[IF_END2687:%.*]]
// SIMD-ONLY0:       if.then2686:
// SIMD-ONLY0-NEXT:    [[TMP1155:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1155]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2687]]
// SIMD-ONLY0:       if.end2687:
// SIMD-ONLY0-NEXT:    [[TMP1156:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1157:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2688:%.*]] = icmp ugt i32 [[TMP1156]], [[TMP1157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2688]], label [[IF_THEN2690:%.*]], label [[IF_END2691:%.*]]
// SIMD-ONLY0:       if.then2690:
// SIMD-ONLY0-NEXT:    [[TMP1158:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1158]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2691]]
// SIMD-ONLY0:       if.end2691:
// SIMD-ONLY0-NEXT:    [[TMP1159:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1160:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2692:%.*]] = icmp ult i32 [[TMP1159]], [[TMP1160]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2692]], label [[IF_THEN2694:%.*]], label [[IF_END2695:%.*]]
// SIMD-ONLY0:       if.then2694:
// SIMD-ONLY0-NEXT:    [[TMP1161:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1161]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2695]]
// SIMD-ONLY0:       if.end2695:
// SIMD-ONLY0-NEXT:    [[TMP1162:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1163:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2696:%.*]] = icmp eq i32 [[TMP1162]], [[TMP1163]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2696]], label [[COND_TRUE2698:%.*]], label [[COND_FALSE2699:%.*]]
// SIMD-ONLY0:       cond.true2698:
// SIMD-ONLY0-NEXT:    [[TMP1164:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2700:%.*]]
// SIMD-ONLY0:       cond.false2699:
// SIMD-ONLY0-NEXT:    [[TMP1165:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2700]]
// SIMD-ONLY0:       cond.end2700:
// SIMD-ONLY0-NEXT:    [[COND2701:%.*]] = phi i32 [ [[TMP1164]], [[COND_TRUE2698]] ], [ [[TMP1165]], [[COND_FALSE2699]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2701]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1166:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1167:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2702:%.*]] = icmp eq i32 [[TMP1166]], [[TMP1167]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2702]], label [[COND_TRUE2704:%.*]], label [[COND_FALSE2705:%.*]]
// SIMD-ONLY0:       cond.true2704:
// SIMD-ONLY0-NEXT:    [[TMP1168:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2706:%.*]]
// SIMD-ONLY0:       cond.false2705:
// SIMD-ONLY0-NEXT:    [[TMP1169:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2706]]
// SIMD-ONLY0:       cond.end2706:
// SIMD-ONLY0-NEXT:    [[COND2707:%.*]] = phi i32 [ [[TMP1168]], [[COND_TRUE2704]] ], [ [[TMP1169]], [[COND_FALSE2705]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2707]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1170:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1171:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2708:%.*]] = icmp eq i32 [[TMP1170]], [[TMP1171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2708]], label [[IF_THEN2710:%.*]], label [[IF_END2711:%.*]]
// SIMD-ONLY0:       if.then2710:
// SIMD-ONLY0-NEXT:    [[TMP1172:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1172]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2711]]
// SIMD-ONLY0:       if.end2711:
// SIMD-ONLY0-NEXT:    [[TMP1173:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1174:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2712:%.*]] = icmp eq i32 [[TMP1173]], [[TMP1174]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2712]], label [[IF_THEN2714:%.*]], label [[IF_END2715:%.*]]
// SIMD-ONLY0:       if.then2714:
// SIMD-ONLY0-NEXT:    [[TMP1175:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1175]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2715]]
// SIMD-ONLY0:       if.end2715:
// SIMD-ONLY0-NEXT:    [[TMP1176:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1177:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2716:%.*]] = icmp sgt i32 [[TMP1176]], [[TMP1177]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2716]], label [[COND_TRUE2718:%.*]], label [[COND_FALSE2719:%.*]]
// SIMD-ONLY0:       cond.true2718:
// SIMD-ONLY0-NEXT:    [[TMP1178:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2720:%.*]]
// SIMD-ONLY0:       cond.false2719:
// SIMD-ONLY0-NEXT:    [[TMP1179:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2720]]
// SIMD-ONLY0:       cond.end2720:
// SIMD-ONLY0-NEXT:    [[COND2721:%.*]] = phi i32 [ [[TMP1178]], [[COND_TRUE2718]] ], [ [[TMP1179]], [[COND_FALSE2719]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2721]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1180:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1181:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2722:%.*]] = icmp slt i32 [[TMP1180]], [[TMP1181]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2722]], label [[COND_TRUE2724:%.*]], label [[COND_FALSE2725:%.*]]
// SIMD-ONLY0:       cond.true2724:
// SIMD-ONLY0-NEXT:    [[TMP1182:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2726:%.*]]
// SIMD-ONLY0:       cond.false2725:
// SIMD-ONLY0-NEXT:    [[TMP1183:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2726]]
// SIMD-ONLY0:       cond.end2726:
// SIMD-ONLY0-NEXT:    [[COND2727:%.*]] = phi i32 [ [[TMP1182]], [[COND_TRUE2724]] ], [ [[TMP1183]], [[COND_FALSE2725]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2727]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1184:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1185:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2728:%.*]] = icmp sgt i32 [[TMP1184]], [[TMP1185]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2728]], label [[COND_TRUE2730:%.*]], label [[COND_FALSE2731:%.*]]
// SIMD-ONLY0:       cond.true2730:
// SIMD-ONLY0-NEXT:    [[TMP1186:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2732:%.*]]
// SIMD-ONLY0:       cond.false2731:
// SIMD-ONLY0-NEXT:    [[TMP1187:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2732]]
// SIMD-ONLY0:       cond.end2732:
// SIMD-ONLY0-NEXT:    [[COND2733:%.*]] = phi i32 [ [[TMP1186]], [[COND_TRUE2730]] ], [ [[TMP1187]], [[COND_FALSE2731]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2733]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1188:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1189:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2734:%.*]] = icmp slt i32 [[TMP1188]], [[TMP1189]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2734]], label [[COND_TRUE2736:%.*]], label [[COND_FALSE2737:%.*]]
// SIMD-ONLY0:       cond.true2736:
// SIMD-ONLY0-NEXT:    [[TMP1190:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2738:%.*]]
// SIMD-ONLY0:       cond.false2737:
// SIMD-ONLY0-NEXT:    [[TMP1191:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2738]]
// SIMD-ONLY0:       cond.end2738:
// SIMD-ONLY0-NEXT:    [[COND2739:%.*]] = phi i32 [ [[TMP1190]], [[COND_TRUE2736]] ], [ [[TMP1191]], [[COND_FALSE2737]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2739]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1192:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1193:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2740:%.*]] = icmp sgt i32 [[TMP1192]], [[TMP1193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2740]], label [[IF_THEN2742:%.*]], label [[IF_END2743:%.*]]
// SIMD-ONLY0:       if.then2742:
// SIMD-ONLY0-NEXT:    [[TMP1194:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1194]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2743]]
// SIMD-ONLY0:       if.end2743:
// SIMD-ONLY0-NEXT:    [[TMP1195:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1196:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2744:%.*]] = icmp slt i32 [[TMP1195]], [[TMP1196]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2744]], label [[IF_THEN2746:%.*]], label [[IF_END2747:%.*]]
// SIMD-ONLY0:       if.then2746:
// SIMD-ONLY0-NEXT:    [[TMP1197:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1197]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2747]]
// SIMD-ONLY0:       if.end2747:
// SIMD-ONLY0-NEXT:    [[TMP1198:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1199:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2748:%.*]] = icmp sgt i32 [[TMP1198]], [[TMP1199]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2748]], label [[IF_THEN2750:%.*]], label [[IF_END2751:%.*]]
// SIMD-ONLY0:       if.then2750:
// SIMD-ONLY0-NEXT:    [[TMP1200:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1200]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2751]]
// SIMD-ONLY0:       if.end2751:
// SIMD-ONLY0-NEXT:    [[TMP1201:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1202:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2752:%.*]] = icmp slt i32 [[TMP1201]], [[TMP1202]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2752]], label [[IF_THEN2754:%.*]], label [[IF_END2755:%.*]]
// SIMD-ONLY0:       if.then2754:
// SIMD-ONLY0-NEXT:    [[TMP1203:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1203]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2755]]
// SIMD-ONLY0:       if.end2755:
// SIMD-ONLY0-NEXT:    [[TMP1204:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1205:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2756:%.*]] = icmp eq i32 [[TMP1204]], [[TMP1205]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2756]], label [[COND_TRUE2758:%.*]], label [[COND_FALSE2759:%.*]]
// SIMD-ONLY0:       cond.true2758:
// SIMD-ONLY0-NEXT:    [[TMP1206:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2760:%.*]]
// SIMD-ONLY0:       cond.false2759:
// SIMD-ONLY0-NEXT:    [[TMP1207:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2760]]
// SIMD-ONLY0:       cond.end2760:
// SIMD-ONLY0-NEXT:    [[COND2761:%.*]] = phi i32 [ [[TMP1206]], [[COND_TRUE2758]] ], [ [[TMP1207]], [[COND_FALSE2759]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2761]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1208:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1209:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2762:%.*]] = icmp eq i32 [[TMP1208]], [[TMP1209]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2762]], label [[COND_TRUE2764:%.*]], label [[COND_FALSE2765:%.*]]
// SIMD-ONLY0:       cond.true2764:
// SIMD-ONLY0-NEXT:    [[TMP1210:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2766:%.*]]
// SIMD-ONLY0:       cond.false2765:
// SIMD-ONLY0-NEXT:    [[TMP1211:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2766]]
// SIMD-ONLY0:       cond.end2766:
// SIMD-ONLY0-NEXT:    [[COND2767:%.*]] = phi i32 [ [[TMP1210]], [[COND_TRUE2764]] ], [ [[TMP1211]], [[COND_FALSE2765]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2767]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1212:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1213:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2768:%.*]] = icmp eq i32 [[TMP1212]], [[TMP1213]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2768]], label [[IF_THEN2770:%.*]], label [[IF_END2771:%.*]]
// SIMD-ONLY0:       if.then2770:
// SIMD-ONLY0-NEXT:    [[TMP1214:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1214]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2771]]
// SIMD-ONLY0:       if.end2771:
// SIMD-ONLY0-NEXT:    [[TMP1215:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1216:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2772:%.*]] = icmp eq i32 [[TMP1215]], [[TMP1216]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2772]], label [[IF_THEN2774:%.*]], label [[IF_END2775:%.*]]
// SIMD-ONLY0:       if.then2774:
// SIMD-ONLY0-NEXT:    [[TMP1217:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1217]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2775]]
// SIMD-ONLY0:       if.end2775:
// SIMD-ONLY0-NEXT:    [[TMP1218:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1219:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2776:%.*]] = icmp ugt i32 [[TMP1218]], [[TMP1219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2776]], label [[COND_TRUE2778:%.*]], label [[COND_FALSE2779:%.*]]
// SIMD-ONLY0:       cond.true2778:
// SIMD-ONLY0-NEXT:    [[TMP1220:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2780:%.*]]
// SIMD-ONLY0:       cond.false2779:
// SIMD-ONLY0-NEXT:    [[TMP1221:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2780]]
// SIMD-ONLY0:       cond.end2780:
// SIMD-ONLY0-NEXT:    [[COND2781:%.*]] = phi i32 [ [[TMP1220]], [[COND_TRUE2778]] ], [ [[TMP1221]], [[COND_FALSE2779]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2781]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1222:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1223:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2782:%.*]] = icmp ult i32 [[TMP1222]], [[TMP1223]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2782]], label [[COND_TRUE2784:%.*]], label [[COND_FALSE2785:%.*]]
// SIMD-ONLY0:       cond.true2784:
// SIMD-ONLY0-NEXT:    [[TMP1224:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2786:%.*]]
// SIMD-ONLY0:       cond.false2785:
// SIMD-ONLY0-NEXT:    [[TMP1225:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2786]]
// SIMD-ONLY0:       cond.end2786:
// SIMD-ONLY0-NEXT:    [[COND2787:%.*]] = phi i32 [ [[TMP1224]], [[COND_TRUE2784]] ], [ [[TMP1225]], [[COND_FALSE2785]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2787]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1226:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1227:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2788:%.*]] = icmp ugt i32 [[TMP1226]], [[TMP1227]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2788]], label [[COND_TRUE2790:%.*]], label [[COND_FALSE2791:%.*]]
// SIMD-ONLY0:       cond.true2790:
// SIMD-ONLY0-NEXT:    [[TMP1228:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2792:%.*]]
// SIMD-ONLY0:       cond.false2791:
// SIMD-ONLY0-NEXT:    [[TMP1229:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2792]]
// SIMD-ONLY0:       cond.end2792:
// SIMD-ONLY0-NEXT:    [[COND2793:%.*]] = phi i32 [ [[TMP1228]], [[COND_TRUE2790]] ], [ [[TMP1229]], [[COND_FALSE2791]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2793]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1230:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1231:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2794:%.*]] = icmp ult i32 [[TMP1230]], [[TMP1231]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2794]], label [[COND_TRUE2796:%.*]], label [[COND_FALSE2797:%.*]]
// SIMD-ONLY0:       cond.true2796:
// SIMD-ONLY0-NEXT:    [[TMP1232:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2798:%.*]]
// SIMD-ONLY0:       cond.false2797:
// SIMD-ONLY0-NEXT:    [[TMP1233:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2798]]
// SIMD-ONLY0:       cond.end2798:
// SIMD-ONLY0-NEXT:    [[COND2799:%.*]] = phi i32 [ [[TMP1232]], [[COND_TRUE2796]] ], [ [[TMP1233]], [[COND_FALSE2797]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2799]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1234:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1235:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2800:%.*]] = icmp ugt i32 [[TMP1234]], [[TMP1235]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2800]], label [[IF_THEN2802:%.*]], label [[IF_END2803:%.*]]
// SIMD-ONLY0:       if.then2802:
// SIMD-ONLY0-NEXT:    [[TMP1236:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1236]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2803]]
// SIMD-ONLY0:       if.end2803:
// SIMD-ONLY0-NEXT:    [[TMP1237:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1238:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2804:%.*]] = icmp ult i32 [[TMP1237]], [[TMP1238]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2804]], label [[IF_THEN2806:%.*]], label [[IF_END2807:%.*]]
// SIMD-ONLY0:       if.then2806:
// SIMD-ONLY0-NEXT:    [[TMP1239:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1239]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2807]]
// SIMD-ONLY0:       if.end2807:
// SIMD-ONLY0-NEXT:    [[TMP1240:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1241:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2808:%.*]] = icmp ugt i32 [[TMP1240]], [[TMP1241]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2808]], label [[IF_THEN2810:%.*]], label [[IF_END2811:%.*]]
// SIMD-ONLY0:       if.then2810:
// SIMD-ONLY0-NEXT:    [[TMP1242:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1242]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2811]]
// SIMD-ONLY0:       if.end2811:
// SIMD-ONLY0-NEXT:    [[TMP1243:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1244:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2812:%.*]] = icmp ult i32 [[TMP1243]], [[TMP1244]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2812]], label [[IF_THEN2814:%.*]], label [[IF_END2815:%.*]]
// SIMD-ONLY0:       if.then2814:
// SIMD-ONLY0-NEXT:    [[TMP1245:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1245]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2815]]
// SIMD-ONLY0:       if.end2815:
// SIMD-ONLY0-NEXT:    [[TMP1246:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1247:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2816:%.*]] = icmp eq i32 [[TMP1246]], [[TMP1247]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2816]], label [[COND_TRUE2818:%.*]], label [[COND_FALSE2819:%.*]]
// SIMD-ONLY0:       cond.true2818:
// SIMD-ONLY0-NEXT:    [[TMP1248:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2820:%.*]]
// SIMD-ONLY0:       cond.false2819:
// SIMD-ONLY0-NEXT:    [[TMP1249:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2820]]
// SIMD-ONLY0:       cond.end2820:
// SIMD-ONLY0-NEXT:    [[COND2821:%.*]] = phi i32 [ [[TMP1248]], [[COND_TRUE2818]] ], [ [[TMP1249]], [[COND_FALSE2819]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2821]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1250:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1251:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2822:%.*]] = icmp eq i32 [[TMP1250]], [[TMP1251]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2822]], label [[COND_TRUE2824:%.*]], label [[COND_FALSE2825:%.*]]
// SIMD-ONLY0:       cond.true2824:
// SIMD-ONLY0-NEXT:    [[TMP1252:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2826:%.*]]
// SIMD-ONLY0:       cond.false2825:
// SIMD-ONLY0-NEXT:    [[TMP1253:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2826]]
// SIMD-ONLY0:       cond.end2826:
// SIMD-ONLY0-NEXT:    [[COND2827:%.*]] = phi i32 [ [[TMP1252]], [[COND_TRUE2824]] ], [ [[TMP1253]], [[COND_FALSE2825]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2827]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1254:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1255:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2828:%.*]] = icmp eq i32 [[TMP1254]], [[TMP1255]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2828]], label [[IF_THEN2830:%.*]], label [[IF_END2831:%.*]]
// SIMD-ONLY0:       if.then2830:
// SIMD-ONLY0-NEXT:    [[TMP1256:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1256]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2831]]
// SIMD-ONLY0:       if.end2831:
// SIMD-ONLY0-NEXT:    [[TMP1257:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1258:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2832:%.*]] = icmp eq i32 [[TMP1257]], [[TMP1258]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2832]], label [[IF_THEN2834:%.*]], label [[IF_END2835:%.*]]
// SIMD-ONLY0:       if.then2834:
// SIMD-ONLY0-NEXT:    [[TMP1259:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1259]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2835]]
// SIMD-ONLY0:       if.end2835:
// SIMD-ONLY0-NEXT:    [[TMP1260:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1261:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2836:%.*]] = icmp sgt i32 [[TMP1260]], [[TMP1261]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2836]], label [[COND_TRUE2838:%.*]], label [[COND_FALSE2839:%.*]]
// SIMD-ONLY0:       cond.true2838:
// SIMD-ONLY0-NEXT:    [[TMP1262:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2840:%.*]]
// SIMD-ONLY0:       cond.false2839:
// SIMD-ONLY0-NEXT:    [[TMP1263:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2840]]
// SIMD-ONLY0:       cond.end2840:
// SIMD-ONLY0-NEXT:    [[COND2841:%.*]] = phi i32 [ [[TMP1262]], [[COND_TRUE2838]] ], [ [[TMP1263]], [[COND_FALSE2839]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2841]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1264:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1265:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2842:%.*]] = icmp slt i32 [[TMP1264]], [[TMP1265]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2842]], label [[COND_TRUE2844:%.*]], label [[COND_FALSE2845:%.*]]
// SIMD-ONLY0:       cond.true2844:
// SIMD-ONLY0-NEXT:    [[TMP1266:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2846:%.*]]
// SIMD-ONLY0:       cond.false2845:
// SIMD-ONLY0-NEXT:    [[TMP1267:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2846]]
// SIMD-ONLY0:       cond.end2846:
// SIMD-ONLY0-NEXT:    [[COND2847:%.*]] = phi i32 [ [[TMP1266]], [[COND_TRUE2844]] ], [ [[TMP1267]], [[COND_FALSE2845]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2847]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1268:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1269:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2848:%.*]] = icmp sgt i32 [[TMP1268]], [[TMP1269]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2848]], label [[COND_TRUE2850:%.*]], label [[COND_FALSE2851:%.*]]
// SIMD-ONLY0:       cond.true2850:
// SIMD-ONLY0-NEXT:    [[TMP1270:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2852:%.*]]
// SIMD-ONLY0:       cond.false2851:
// SIMD-ONLY0-NEXT:    [[TMP1271:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2852]]
// SIMD-ONLY0:       cond.end2852:
// SIMD-ONLY0-NEXT:    [[COND2853:%.*]] = phi i32 [ [[TMP1270]], [[COND_TRUE2850]] ], [ [[TMP1271]], [[COND_FALSE2851]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2853]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1272:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1273:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2854:%.*]] = icmp slt i32 [[TMP1272]], [[TMP1273]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2854]], label [[COND_TRUE2856:%.*]], label [[COND_FALSE2857:%.*]]
// SIMD-ONLY0:       cond.true2856:
// SIMD-ONLY0-NEXT:    [[TMP1274:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2858:%.*]]
// SIMD-ONLY0:       cond.false2857:
// SIMD-ONLY0-NEXT:    [[TMP1275:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2858]]
// SIMD-ONLY0:       cond.end2858:
// SIMD-ONLY0-NEXT:    [[COND2859:%.*]] = phi i32 [ [[TMP1274]], [[COND_TRUE2856]] ], [ [[TMP1275]], [[COND_FALSE2857]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2859]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1276:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1277:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2860:%.*]] = icmp sgt i32 [[TMP1276]], [[TMP1277]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2860]], label [[IF_THEN2862:%.*]], label [[IF_END2863:%.*]]
// SIMD-ONLY0:       if.then2862:
// SIMD-ONLY0-NEXT:    [[TMP1278:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1278]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2863]]
// SIMD-ONLY0:       if.end2863:
// SIMD-ONLY0-NEXT:    [[TMP1279:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1280:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2864:%.*]] = icmp slt i32 [[TMP1279]], [[TMP1280]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2864]], label [[IF_THEN2866:%.*]], label [[IF_END2867:%.*]]
// SIMD-ONLY0:       if.then2866:
// SIMD-ONLY0-NEXT:    [[TMP1281:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1281]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2867]]
// SIMD-ONLY0:       if.end2867:
// SIMD-ONLY0-NEXT:    [[TMP1282:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1283:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2868:%.*]] = icmp sgt i32 [[TMP1282]], [[TMP1283]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2868]], label [[IF_THEN2870:%.*]], label [[IF_END2871:%.*]]
// SIMD-ONLY0:       if.then2870:
// SIMD-ONLY0-NEXT:    [[TMP1284:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1284]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2871]]
// SIMD-ONLY0:       if.end2871:
// SIMD-ONLY0-NEXT:    [[TMP1285:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1286:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2872:%.*]] = icmp slt i32 [[TMP1285]], [[TMP1286]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2872]], label [[IF_THEN2874:%.*]], label [[IF_END2875:%.*]]
// SIMD-ONLY0:       if.then2874:
// SIMD-ONLY0-NEXT:    [[TMP1287:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1287]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2875]]
// SIMD-ONLY0:       if.end2875:
// SIMD-ONLY0-NEXT:    [[TMP1288:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1289:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2876:%.*]] = icmp eq i32 [[TMP1288]], [[TMP1289]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2876]], label [[COND_TRUE2878:%.*]], label [[COND_FALSE2879:%.*]]
// SIMD-ONLY0:       cond.true2878:
// SIMD-ONLY0-NEXT:    [[TMP1290:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2880:%.*]]
// SIMD-ONLY0:       cond.false2879:
// SIMD-ONLY0-NEXT:    [[TMP1291:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2880]]
// SIMD-ONLY0:       cond.end2880:
// SIMD-ONLY0-NEXT:    [[COND2881:%.*]] = phi i32 [ [[TMP1290]], [[COND_TRUE2878]] ], [ [[TMP1291]], [[COND_FALSE2879]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2881]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1292:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1293:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2882:%.*]] = icmp eq i32 [[TMP1292]], [[TMP1293]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2882]], label [[COND_TRUE2884:%.*]], label [[COND_FALSE2885:%.*]]
// SIMD-ONLY0:       cond.true2884:
// SIMD-ONLY0-NEXT:    [[TMP1294:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2886:%.*]]
// SIMD-ONLY0:       cond.false2885:
// SIMD-ONLY0-NEXT:    [[TMP1295:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2886]]
// SIMD-ONLY0:       cond.end2886:
// SIMD-ONLY0-NEXT:    [[COND2887:%.*]] = phi i32 [ [[TMP1294]], [[COND_TRUE2884]] ], [ [[TMP1295]], [[COND_FALSE2885]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2887]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1296:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1297:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2888:%.*]] = icmp eq i32 [[TMP1296]], [[TMP1297]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2888]], label [[IF_THEN2890:%.*]], label [[IF_END2891:%.*]]
// SIMD-ONLY0:       if.then2890:
// SIMD-ONLY0-NEXT:    [[TMP1298:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1298]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2891]]
// SIMD-ONLY0:       if.end2891:
// SIMD-ONLY0-NEXT:    [[TMP1299:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1300:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2892:%.*]] = icmp eq i32 [[TMP1299]], [[TMP1300]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2892]], label [[IF_THEN2894:%.*]], label [[IF_END2895:%.*]]
// SIMD-ONLY0:       if.then2894:
// SIMD-ONLY0-NEXT:    [[TMP1301:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1301]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2895]]
// SIMD-ONLY0:       if.end2895:
// SIMD-ONLY0-NEXT:    [[TMP1302:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1303:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2896:%.*]] = icmp ugt i32 [[TMP1302]], [[TMP1303]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2896]], label [[COND_TRUE2898:%.*]], label [[COND_FALSE2899:%.*]]
// SIMD-ONLY0:       cond.true2898:
// SIMD-ONLY0-NEXT:    [[TMP1304:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2900:%.*]]
// SIMD-ONLY0:       cond.false2899:
// SIMD-ONLY0-NEXT:    [[TMP1305:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2900]]
// SIMD-ONLY0:       cond.end2900:
// SIMD-ONLY0-NEXT:    [[COND2901:%.*]] = phi i32 [ [[TMP1304]], [[COND_TRUE2898]] ], [ [[TMP1305]], [[COND_FALSE2899]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2901]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1306:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1307:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2902:%.*]] = icmp ult i32 [[TMP1306]], [[TMP1307]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2902]], label [[COND_TRUE2904:%.*]], label [[COND_FALSE2905:%.*]]
// SIMD-ONLY0:       cond.true2904:
// SIMD-ONLY0-NEXT:    [[TMP1308:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2906:%.*]]
// SIMD-ONLY0:       cond.false2905:
// SIMD-ONLY0-NEXT:    [[TMP1309:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2906]]
// SIMD-ONLY0:       cond.end2906:
// SIMD-ONLY0-NEXT:    [[COND2907:%.*]] = phi i32 [ [[TMP1308]], [[COND_TRUE2904]] ], [ [[TMP1309]], [[COND_FALSE2905]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2907]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1310:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1311:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2908:%.*]] = icmp ugt i32 [[TMP1310]], [[TMP1311]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2908]], label [[COND_TRUE2910:%.*]], label [[COND_FALSE2911:%.*]]
// SIMD-ONLY0:       cond.true2910:
// SIMD-ONLY0-NEXT:    [[TMP1312:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2912:%.*]]
// SIMD-ONLY0:       cond.false2911:
// SIMD-ONLY0-NEXT:    [[TMP1313:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2912]]
// SIMD-ONLY0:       cond.end2912:
// SIMD-ONLY0-NEXT:    [[COND2913:%.*]] = phi i32 [ [[TMP1312]], [[COND_TRUE2910]] ], [ [[TMP1313]], [[COND_FALSE2911]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2913]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1314:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1315:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2914:%.*]] = icmp ult i32 [[TMP1314]], [[TMP1315]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2914]], label [[COND_TRUE2916:%.*]], label [[COND_FALSE2917:%.*]]
// SIMD-ONLY0:       cond.true2916:
// SIMD-ONLY0-NEXT:    [[TMP1316:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2918:%.*]]
// SIMD-ONLY0:       cond.false2917:
// SIMD-ONLY0-NEXT:    [[TMP1317:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2918]]
// SIMD-ONLY0:       cond.end2918:
// SIMD-ONLY0-NEXT:    [[COND2919:%.*]] = phi i32 [ [[TMP1316]], [[COND_TRUE2916]] ], [ [[TMP1317]], [[COND_FALSE2917]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2919]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1318:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1319:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2920:%.*]] = icmp ugt i32 [[TMP1318]], [[TMP1319]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2920]], label [[IF_THEN2922:%.*]], label [[IF_END2923:%.*]]
// SIMD-ONLY0:       if.then2922:
// SIMD-ONLY0-NEXT:    [[TMP1320:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1320]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2923]]
// SIMD-ONLY0:       if.end2923:
// SIMD-ONLY0-NEXT:    [[TMP1321:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1322:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2924:%.*]] = icmp ult i32 [[TMP1321]], [[TMP1322]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2924]], label [[IF_THEN2926:%.*]], label [[IF_END2927:%.*]]
// SIMD-ONLY0:       if.then2926:
// SIMD-ONLY0-NEXT:    [[TMP1323:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1323]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2927]]
// SIMD-ONLY0:       if.end2927:
// SIMD-ONLY0-NEXT:    [[TMP1324:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1325:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2928:%.*]] = icmp ugt i32 [[TMP1324]], [[TMP1325]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2928]], label [[IF_THEN2930:%.*]], label [[IF_END2931:%.*]]
// SIMD-ONLY0:       if.then2930:
// SIMD-ONLY0-NEXT:    [[TMP1326:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1326]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2931]]
// SIMD-ONLY0:       if.end2931:
// SIMD-ONLY0-NEXT:    [[TMP1327:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1328:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2932:%.*]] = icmp ult i32 [[TMP1327]], [[TMP1328]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2932]], label [[IF_THEN2934:%.*]], label [[IF_END2935:%.*]]
// SIMD-ONLY0:       if.then2934:
// SIMD-ONLY0-NEXT:    [[TMP1329:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1329]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2935]]
// SIMD-ONLY0:       if.end2935:
// SIMD-ONLY0-NEXT:    [[TMP1330:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1331:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2936:%.*]] = icmp eq i32 [[TMP1330]], [[TMP1331]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2936]], label [[COND_TRUE2938:%.*]], label [[COND_FALSE2939:%.*]]
// SIMD-ONLY0:       cond.true2938:
// SIMD-ONLY0-NEXT:    [[TMP1332:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2940:%.*]]
// SIMD-ONLY0:       cond.false2939:
// SIMD-ONLY0-NEXT:    [[TMP1333:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2940]]
// SIMD-ONLY0:       cond.end2940:
// SIMD-ONLY0-NEXT:    [[COND2941:%.*]] = phi i32 [ [[TMP1332]], [[COND_TRUE2938]] ], [ [[TMP1333]], [[COND_FALSE2939]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2941]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1334:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1335:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2942:%.*]] = icmp eq i32 [[TMP1334]], [[TMP1335]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2942]], label [[COND_TRUE2944:%.*]], label [[COND_FALSE2945:%.*]]
// SIMD-ONLY0:       cond.true2944:
// SIMD-ONLY0-NEXT:    [[TMP1336:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2946:%.*]]
// SIMD-ONLY0:       cond.false2945:
// SIMD-ONLY0-NEXT:    [[TMP1337:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2946]]
// SIMD-ONLY0:       cond.end2946:
// SIMD-ONLY0-NEXT:    [[COND2947:%.*]] = phi i32 [ [[TMP1336]], [[COND_TRUE2944]] ], [ [[TMP1337]], [[COND_FALSE2945]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2947]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1338:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1339:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2948:%.*]] = icmp eq i32 [[TMP1338]], [[TMP1339]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2948]], label [[IF_THEN2950:%.*]], label [[IF_END2951:%.*]]
// SIMD-ONLY0:       if.then2950:
// SIMD-ONLY0-NEXT:    [[TMP1340:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1340]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2951]]
// SIMD-ONLY0:       if.end2951:
// SIMD-ONLY0-NEXT:    [[TMP1341:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1342:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2952:%.*]] = icmp eq i32 [[TMP1341]], [[TMP1342]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2952]], label [[IF_THEN2954:%.*]], label [[IF_END2955:%.*]]
// SIMD-ONLY0:       if.then2954:
// SIMD-ONLY0-NEXT:    [[TMP1343:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1343]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2955]]
// SIMD-ONLY0:       if.end2955:
// SIMD-ONLY0-NEXT:    [[TMP1344:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1345:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2956:%.*]] = icmp sgt i32 [[TMP1344]], [[TMP1345]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2956]], label [[COND_TRUE2958:%.*]], label [[COND_FALSE2959:%.*]]
// SIMD-ONLY0:       cond.true2958:
// SIMD-ONLY0-NEXT:    [[TMP1346:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2960:%.*]]
// SIMD-ONLY0:       cond.false2959:
// SIMD-ONLY0-NEXT:    [[TMP1347:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2960]]
// SIMD-ONLY0:       cond.end2960:
// SIMD-ONLY0-NEXT:    [[COND2961:%.*]] = phi i32 [ [[TMP1346]], [[COND_TRUE2958]] ], [ [[TMP1347]], [[COND_FALSE2959]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2961]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1348:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1349:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2962:%.*]] = icmp slt i32 [[TMP1348]], [[TMP1349]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2962]], label [[COND_TRUE2964:%.*]], label [[COND_FALSE2965:%.*]]
// SIMD-ONLY0:       cond.true2964:
// SIMD-ONLY0-NEXT:    [[TMP1350:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2966:%.*]]
// SIMD-ONLY0:       cond.false2965:
// SIMD-ONLY0-NEXT:    [[TMP1351:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2966]]
// SIMD-ONLY0:       cond.end2966:
// SIMD-ONLY0-NEXT:    [[COND2967:%.*]] = phi i32 [ [[TMP1350]], [[COND_TRUE2964]] ], [ [[TMP1351]], [[COND_FALSE2965]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2967]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1352:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1353:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2968:%.*]] = icmp sgt i32 [[TMP1352]], [[TMP1353]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2968]], label [[COND_TRUE2970:%.*]], label [[COND_FALSE2971:%.*]]
// SIMD-ONLY0:       cond.true2970:
// SIMD-ONLY0-NEXT:    [[TMP1354:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2972:%.*]]
// SIMD-ONLY0:       cond.false2971:
// SIMD-ONLY0-NEXT:    [[TMP1355:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2972]]
// SIMD-ONLY0:       cond.end2972:
// SIMD-ONLY0-NEXT:    [[COND2973:%.*]] = phi i32 [ [[TMP1354]], [[COND_TRUE2970]] ], [ [[TMP1355]], [[COND_FALSE2971]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2973]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1356:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1357:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2974:%.*]] = icmp slt i32 [[TMP1356]], [[TMP1357]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2974]], label [[COND_TRUE2976:%.*]], label [[COND_FALSE2977:%.*]]
// SIMD-ONLY0:       cond.true2976:
// SIMD-ONLY0-NEXT:    [[TMP1358:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2978:%.*]]
// SIMD-ONLY0:       cond.false2977:
// SIMD-ONLY0-NEXT:    [[TMP1359:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2978]]
// SIMD-ONLY0:       cond.end2978:
// SIMD-ONLY0-NEXT:    [[COND2979:%.*]] = phi i32 [ [[TMP1358]], [[COND_TRUE2976]] ], [ [[TMP1359]], [[COND_FALSE2977]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2979]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1360:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1361:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2980:%.*]] = icmp sgt i32 [[TMP1360]], [[TMP1361]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2980]], label [[IF_THEN2982:%.*]], label [[IF_END2983:%.*]]
// SIMD-ONLY0:       if.then2982:
// SIMD-ONLY0-NEXT:    [[TMP1362:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1362]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2983]]
// SIMD-ONLY0:       if.end2983:
// SIMD-ONLY0-NEXT:    [[TMP1363:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1364:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2984:%.*]] = icmp slt i32 [[TMP1363]], [[TMP1364]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2984]], label [[IF_THEN2986:%.*]], label [[IF_END2987:%.*]]
// SIMD-ONLY0:       if.then2986:
// SIMD-ONLY0-NEXT:    [[TMP1365:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1365]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2987]]
// SIMD-ONLY0:       if.end2987:
// SIMD-ONLY0-NEXT:    [[TMP1366:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1367:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2988:%.*]] = icmp sgt i32 [[TMP1366]], [[TMP1367]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2988]], label [[IF_THEN2990:%.*]], label [[IF_END2991:%.*]]
// SIMD-ONLY0:       if.then2990:
// SIMD-ONLY0-NEXT:    [[TMP1368:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1368]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2991]]
// SIMD-ONLY0:       if.end2991:
// SIMD-ONLY0-NEXT:    [[TMP1369:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1370:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2992:%.*]] = icmp slt i32 [[TMP1369]], [[TMP1370]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2992]], label [[IF_THEN2994:%.*]], label [[IF_END2995:%.*]]
// SIMD-ONLY0:       if.then2994:
// SIMD-ONLY0-NEXT:    [[TMP1371:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1371]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2995]]
// SIMD-ONLY0:       if.end2995:
// SIMD-ONLY0-NEXT:    [[TMP1372:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1373:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2996:%.*]] = icmp eq i32 [[TMP1372]], [[TMP1373]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2996]], label [[COND_TRUE2998:%.*]], label [[COND_FALSE2999:%.*]]
// SIMD-ONLY0:       cond.true2998:
// SIMD-ONLY0-NEXT:    [[TMP1374:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3000:%.*]]
// SIMD-ONLY0:       cond.false2999:
// SIMD-ONLY0-NEXT:    [[TMP1375:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3000]]
// SIMD-ONLY0:       cond.end3000:
// SIMD-ONLY0-NEXT:    [[COND3001:%.*]] = phi i32 [ [[TMP1374]], [[COND_TRUE2998]] ], [ [[TMP1375]], [[COND_FALSE2999]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3001]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1376:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1377:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3002:%.*]] = icmp eq i32 [[TMP1376]], [[TMP1377]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3002]], label [[COND_TRUE3004:%.*]], label [[COND_FALSE3005:%.*]]
// SIMD-ONLY0:       cond.true3004:
// SIMD-ONLY0-NEXT:    [[TMP1378:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3006:%.*]]
// SIMD-ONLY0:       cond.false3005:
// SIMD-ONLY0-NEXT:    [[TMP1379:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3006]]
// SIMD-ONLY0:       cond.end3006:
// SIMD-ONLY0-NEXT:    [[COND3007:%.*]] = phi i32 [ [[TMP1378]], [[COND_TRUE3004]] ], [ [[TMP1379]], [[COND_FALSE3005]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3007]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1380:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1381:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3008:%.*]] = icmp eq i32 [[TMP1380]], [[TMP1381]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3008]], label [[IF_THEN3010:%.*]], label [[IF_END3011:%.*]]
// SIMD-ONLY0:       if.then3010:
// SIMD-ONLY0-NEXT:    [[TMP1382:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1382]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3011]]
// SIMD-ONLY0:       if.end3011:
// SIMD-ONLY0-NEXT:    [[TMP1383:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1384:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3012:%.*]] = icmp eq i32 [[TMP1383]], [[TMP1384]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3012]], label [[IF_THEN3014:%.*]], label [[IF_END3015:%.*]]
// SIMD-ONLY0:       if.then3014:
// SIMD-ONLY0-NEXT:    [[TMP1385:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1385]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3015]]
// SIMD-ONLY0:       if.end3015:
// SIMD-ONLY0-NEXT:    [[TMP1386:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1387:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3016:%.*]] = icmp ugt i32 [[TMP1386]], [[TMP1387]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3016]], label [[COND_TRUE3018:%.*]], label [[COND_FALSE3019:%.*]]
// SIMD-ONLY0:       cond.true3018:
// SIMD-ONLY0-NEXT:    [[TMP1388:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3020:%.*]]
// SIMD-ONLY0:       cond.false3019:
// SIMD-ONLY0-NEXT:    [[TMP1389:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3020]]
// SIMD-ONLY0:       cond.end3020:
// SIMD-ONLY0-NEXT:    [[COND3021:%.*]] = phi i32 [ [[TMP1388]], [[COND_TRUE3018]] ], [ [[TMP1389]], [[COND_FALSE3019]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3021]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1390:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1391:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3022:%.*]] = icmp ult i32 [[TMP1390]], [[TMP1391]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3022]], label [[COND_TRUE3024:%.*]], label [[COND_FALSE3025:%.*]]
// SIMD-ONLY0:       cond.true3024:
// SIMD-ONLY0-NEXT:    [[TMP1392:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3026:%.*]]
// SIMD-ONLY0:       cond.false3025:
// SIMD-ONLY0-NEXT:    [[TMP1393:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3026]]
// SIMD-ONLY0:       cond.end3026:
// SIMD-ONLY0-NEXT:    [[COND3027:%.*]] = phi i32 [ [[TMP1392]], [[COND_TRUE3024]] ], [ [[TMP1393]], [[COND_FALSE3025]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3027]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1394:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1395:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3028:%.*]] = icmp ugt i32 [[TMP1394]], [[TMP1395]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3028]], label [[COND_TRUE3030:%.*]], label [[COND_FALSE3031:%.*]]
// SIMD-ONLY0:       cond.true3030:
// SIMD-ONLY0-NEXT:    [[TMP1396:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3032:%.*]]
// SIMD-ONLY0:       cond.false3031:
// SIMD-ONLY0-NEXT:    [[TMP1397:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3032]]
// SIMD-ONLY0:       cond.end3032:
// SIMD-ONLY0-NEXT:    [[COND3033:%.*]] = phi i32 [ [[TMP1396]], [[COND_TRUE3030]] ], [ [[TMP1397]], [[COND_FALSE3031]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3033]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1398:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1399:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3034:%.*]] = icmp ult i32 [[TMP1398]], [[TMP1399]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3034]], label [[COND_TRUE3036:%.*]], label [[COND_FALSE3037:%.*]]
// SIMD-ONLY0:       cond.true3036:
// SIMD-ONLY0-NEXT:    [[TMP1400:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3038:%.*]]
// SIMD-ONLY0:       cond.false3037:
// SIMD-ONLY0-NEXT:    [[TMP1401:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3038]]
// SIMD-ONLY0:       cond.end3038:
// SIMD-ONLY0-NEXT:    [[COND3039:%.*]] = phi i32 [ [[TMP1400]], [[COND_TRUE3036]] ], [ [[TMP1401]], [[COND_FALSE3037]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3039]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1402:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1403:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3040:%.*]] = icmp ugt i32 [[TMP1402]], [[TMP1403]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3040]], label [[IF_THEN3042:%.*]], label [[IF_END3043:%.*]]
// SIMD-ONLY0:       if.then3042:
// SIMD-ONLY0-NEXT:    [[TMP1404:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1404]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3043]]
// SIMD-ONLY0:       if.end3043:
// SIMD-ONLY0-NEXT:    [[TMP1405:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1406:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3044:%.*]] = icmp ult i32 [[TMP1405]], [[TMP1406]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3044]], label [[IF_THEN3046:%.*]], label [[IF_END3047:%.*]]
// SIMD-ONLY0:       if.then3046:
// SIMD-ONLY0-NEXT:    [[TMP1407:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1407]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3047]]
// SIMD-ONLY0:       if.end3047:
// SIMD-ONLY0-NEXT:    [[TMP1408:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1409:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3048:%.*]] = icmp ugt i32 [[TMP1408]], [[TMP1409]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3048]], label [[IF_THEN3050:%.*]], label [[IF_END3051:%.*]]
// SIMD-ONLY0:       if.then3050:
// SIMD-ONLY0-NEXT:    [[TMP1410:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1410]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3051]]
// SIMD-ONLY0:       if.end3051:
// SIMD-ONLY0-NEXT:    [[TMP1411:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1412:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3052:%.*]] = icmp ult i32 [[TMP1411]], [[TMP1412]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3052]], label [[IF_THEN3054:%.*]], label [[IF_END3055:%.*]]
// SIMD-ONLY0:       if.then3054:
// SIMD-ONLY0-NEXT:    [[TMP1413:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1413]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3055]]
// SIMD-ONLY0:       if.end3055:
// SIMD-ONLY0-NEXT:    [[TMP1414:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1415:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3056:%.*]] = icmp eq i32 [[TMP1414]], [[TMP1415]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3056]], label [[COND_TRUE3058:%.*]], label [[COND_FALSE3059:%.*]]
// SIMD-ONLY0:       cond.true3058:
// SIMD-ONLY0-NEXT:    [[TMP1416:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3060:%.*]]
// SIMD-ONLY0:       cond.false3059:
// SIMD-ONLY0-NEXT:    [[TMP1417:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3060]]
// SIMD-ONLY0:       cond.end3060:
// SIMD-ONLY0-NEXT:    [[COND3061:%.*]] = phi i32 [ [[TMP1416]], [[COND_TRUE3058]] ], [ [[TMP1417]], [[COND_FALSE3059]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3061]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1418:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1419:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3062:%.*]] = icmp eq i32 [[TMP1418]], [[TMP1419]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3062]], label [[COND_TRUE3064:%.*]], label [[COND_FALSE3065:%.*]]
// SIMD-ONLY0:       cond.true3064:
// SIMD-ONLY0-NEXT:    [[TMP1420:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3066:%.*]]
// SIMD-ONLY0:       cond.false3065:
// SIMD-ONLY0-NEXT:    [[TMP1421:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3066]]
// SIMD-ONLY0:       cond.end3066:
// SIMD-ONLY0-NEXT:    [[COND3067:%.*]] = phi i32 [ [[TMP1420]], [[COND_TRUE3064]] ], [ [[TMP1421]], [[COND_FALSE3065]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3067]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1422:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1423:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3068:%.*]] = icmp eq i32 [[TMP1422]], [[TMP1423]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3068]], label [[IF_THEN3070:%.*]], label [[IF_END3071:%.*]]
// SIMD-ONLY0:       if.then3070:
// SIMD-ONLY0-NEXT:    [[TMP1424:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1424]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3071]]
// SIMD-ONLY0:       if.end3071:
// SIMD-ONLY0-NEXT:    [[TMP1425:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1426:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3072:%.*]] = icmp eq i32 [[TMP1425]], [[TMP1426]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3072]], label [[IF_THEN3074:%.*]], label [[IF_END3075:%.*]]
// SIMD-ONLY0:       if.then3074:
// SIMD-ONLY0-NEXT:    [[TMP1427:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1427]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3075]]
// SIMD-ONLY0:       if.end3075:
// SIMD-ONLY0-NEXT:    [[TMP1428:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1429:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3076:%.*]] = icmp sgt i32 [[TMP1428]], [[TMP1429]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3076]], label [[COND_TRUE3078:%.*]], label [[COND_FALSE3079:%.*]]
// SIMD-ONLY0:       cond.true3078:
// SIMD-ONLY0-NEXT:    [[TMP1430:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3080:%.*]]
// SIMD-ONLY0:       cond.false3079:
// SIMD-ONLY0-NEXT:    [[TMP1431:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3080]]
// SIMD-ONLY0:       cond.end3080:
// SIMD-ONLY0-NEXT:    [[COND3081:%.*]] = phi i32 [ [[TMP1430]], [[COND_TRUE3078]] ], [ [[TMP1431]], [[COND_FALSE3079]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3081]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1432:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1433:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3082:%.*]] = icmp slt i32 [[TMP1432]], [[TMP1433]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3082]], label [[COND_TRUE3084:%.*]], label [[COND_FALSE3085:%.*]]
// SIMD-ONLY0:       cond.true3084:
// SIMD-ONLY0-NEXT:    [[TMP1434:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3086:%.*]]
// SIMD-ONLY0:       cond.false3085:
// SIMD-ONLY0-NEXT:    [[TMP1435:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3086]]
// SIMD-ONLY0:       cond.end3086:
// SIMD-ONLY0-NEXT:    [[COND3087:%.*]] = phi i32 [ [[TMP1434]], [[COND_TRUE3084]] ], [ [[TMP1435]], [[COND_FALSE3085]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3087]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1436:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1437:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3088:%.*]] = icmp sgt i32 [[TMP1436]], [[TMP1437]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3088]], label [[COND_TRUE3090:%.*]], label [[COND_FALSE3091:%.*]]
// SIMD-ONLY0:       cond.true3090:
// SIMD-ONLY0-NEXT:    [[TMP1438:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3092:%.*]]
// SIMD-ONLY0:       cond.false3091:
// SIMD-ONLY0-NEXT:    [[TMP1439:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3092]]
// SIMD-ONLY0:       cond.end3092:
// SIMD-ONLY0-NEXT:    [[COND3093:%.*]] = phi i32 [ [[TMP1438]], [[COND_TRUE3090]] ], [ [[TMP1439]], [[COND_FALSE3091]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3093]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1440:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1441:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3094:%.*]] = icmp slt i32 [[TMP1440]], [[TMP1441]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3094]], label [[COND_TRUE3096:%.*]], label [[COND_FALSE3097:%.*]]
// SIMD-ONLY0:       cond.true3096:
// SIMD-ONLY0-NEXT:    [[TMP1442:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3098:%.*]]
// SIMD-ONLY0:       cond.false3097:
// SIMD-ONLY0-NEXT:    [[TMP1443:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3098]]
// SIMD-ONLY0:       cond.end3098:
// SIMD-ONLY0-NEXT:    [[COND3099:%.*]] = phi i32 [ [[TMP1442]], [[COND_TRUE3096]] ], [ [[TMP1443]], [[COND_FALSE3097]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3099]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1444:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1445:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3100:%.*]] = icmp sgt i32 [[TMP1444]], [[TMP1445]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3100]], label [[IF_THEN3102:%.*]], label [[IF_END3103:%.*]]
// SIMD-ONLY0:       if.then3102:
// SIMD-ONLY0-NEXT:    [[TMP1446:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1446]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3103]]
// SIMD-ONLY0:       if.end3103:
// SIMD-ONLY0-NEXT:    [[TMP1447:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1448:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3104:%.*]] = icmp slt i32 [[TMP1447]], [[TMP1448]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3104]], label [[IF_THEN3106:%.*]], label [[IF_END3107:%.*]]
// SIMD-ONLY0:       if.then3106:
// SIMD-ONLY0-NEXT:    [[TMP1449:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1449]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3107]]
// SIMD-ONLY0:       if.end3107:
// SIMD-ONLY0-NEXT:    [[TMP1450:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1451:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3108:%.*]] = icmp sgt i32 [[TMP1450]], [[TMP1451]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3108]], label [[IF_THEN3110:%.*]], label [[IF_END3111:%.*]]
// SIMD-ONLY0:       if.then3110:
// SIMD-ONLY0-NEXT:    [[TMP1452:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1452]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3111]]
// SIMD-ONLY0:       if.end3111:
// SIMD-ONLY0-NEXT:    [[TMP1453:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1454:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3112:%.*]] = icmp slt i32 [[TMP1453]], [[TMP1454]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3112]], label [[IF_THEN3114:%.*]], label [[IF_END3115:%.*]]
// SIMD-ONLY0:       if.then3114:
// SIMD-ONLY0-NEXT:    [[TMP1455:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1455]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3115]]
// SIMD-ONLY0:       if.end3115:
// SIMD-ONLY0-NEXT:    [[TMP1456:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1457:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3116:%.*]] = icmp eq i32 [[TMP1456]], [[TMP1457]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3116]], label [[COND_TRUE3118:%.*]], label [[COND_FALSE3119:%.*]]
// SIMD-ONLY0:       cond.true3118:
// SIMD-ONLY0-NEXT:    [[TMP1458:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3120:%.*]]
// SIMD-ONLY0:       cond.false3119:
// SIMD-ONLY0-NEXT:    [[TMP1459:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3120]]
// SIMD-ONLY0:       cond.end3120:
// SIMD-ONLY0-NEXT:    [[COND3121:%.*]] = phi i32 [ [[TMP1458]], [[COND_TRUE3118]] ], [ [[TMP1459]], [[COND_FALSE3119]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3121]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1460:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1461:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3122:%.*]] = icmp eq i32 [[TMP1460]], [[TMP1461]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3122]], label [[COND_TRUE3124:%.*]], label [[COND_FALSE3125:%.*]]
// SIMD-ONLY0:       cond.true3124:
// SIMD-ONLY0-NEXT:    [[TMP1462:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3126:%.*]]
// SIMD-ONLY0:       cond.false3125:
// SIMD-ONLY0-NEXT:    [[TMP1463:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3126]]
// SIMD-ONLY0:       cond.end3126:
// SIMD-ONLY0-NEXT:    [[COND3127:%.*]] = phi i32 [ [[TMP1462]], [[COND_TRUE3124]] ], [ [[TMP1463]], [[COND_FALSE3125]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3127]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1464:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1465:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3128:%.*]] = icmp eq i32 [[TMP1464]], [[TMP1465]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3128]], label [[IF_THEN3130:%.*]], label [[IF_END3131:%.*]]
// SIMD-ONLY0:       if.then3130:
// SIMD-ONLY0-NEXT:    [[TMP1466:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1466]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3131]]
// SIMD-ONLY0:       if.end3131:
// SIMD-ONLY0-NEXT:    [[TMP1467:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1468:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3132:%.*]] = icmp eq i32 [[TMP1467]], [[TMP1468]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3132]], label [[IF_THEN3134:%.*]], label [[IF_END3135:%.*]]
// SIMD-ONLY0:       if.then3134:
// SIMD-ONLY0-NEXT:    [[TMP1469:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1469]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3135]]
// SIMD-ONLY0:       if.end3135:
// SIMD-ONLY0-NEXT:    [[TMP1470:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1471:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3136:%.*]] = icmp ugt i32 [[TMP1470]], [[TMP1471]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3136]], label [[COND_TRUE3138:%.*]], label [[COND_FALSE3139:%.*]]
// SIMD-ONLY0:       cond.true3138:
// SIMD-ONLY0-NEXT:    [[TMP1472:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3140:%.*]]
// SIMD-ONLY0:       cond.false3139:
// SIMD-ONLY0-NEXT:    [[TMP1473:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3140]]
// SIMD-ONLY0:       cond.end3140:
// SIMD-ONLY0-NEXT:    [[COND3141:%.*]] = phi i32 [ [[TMP1472]], [[COND_TRUE3138]] ], [ [[TMP1473]], [[COND_FALSE3139]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3141]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1474:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1475:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3142:%.*]] = icmp ult i32 [[TMP1474]], [[TMP1475]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3142]], label [[COND_TRUE3144:%.*]], label [[COND_FALSE3145:%.*]]
// SIMD-ONLY0:       cond.true3144:
// SIMD-ONLY0-NEXT:    [[TMP1476:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3146:%.*]]
// SIMD-ONLY0:       cond.false3145:
// SIMD-ONLY0-NEXT:    [[TMP1477:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3146]]
// SIMD-ONLY0:       cond.end3146:
// SIMD-ONLY0-NEXT:    [[COND3147:%.*]] = phi i32 [ [[TMP1476]], [[COND_TRUE3144]] ], [ [[TMP1477]], [[COND_FALSE3145]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3147]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1478:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1479:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3148:%.*]] = icmp ugt i32 [[TMP1478]], [[TMP1479]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3148]], label [[COND_TRUE3150:%.*]], label [[COND_FALSE3151:%.*]]
// SIMD-ONLY0:       cond.true3150:
// SIMD-ONLY0-NEXT:    [[TMP1480:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3152:%.*]]
// SIMD-ONLY0:       cond.false3151:
// SIMD-ONLY0-NEXT:    [[TMP1481:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3152]]
// SIMD-ONLY0:       cond.end3152:
// SIMD-ONLY0-NEXT:    [[COND3153:%.*]] = phi i32 [ [[TMP1480]], [[COND_TRUE3150]] ], [ [[TMP1481]], [[COND_FALSE3151]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3153]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1482:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1483:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3154:%.*]] = icmp ult i32 [[TMP1482]], [[TMP1483]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3154]], label [[COND_TRUE3156:%.*]], label [[COND_FALSE3157:%.*]]
// SIMD-ONLY0:       cond.true3156:
// SIMD-ONLY0-NEXT:    [[TMP1484:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3158:%.*]]
// SIMD-ONLY0:       cond.false3157:
// SIMD-ONLY0-NEXT:    [[TMP1485:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3158]]
// SIMD-ONLY0:       cond.end3158:
// SIMD-ONLY0-NEXT:    [[COND3159:%.*]] = phi i32 [ [[TMP1484]], [[COND_TRUE3156]] ], [ [[TMP1485]], [[COND_FALSE3157]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3159]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1486:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1487:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3160:%.*]] = icmp ugt i32 [[TMP1486]], [[TMP1487]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3160]], label [[IF_THEN3162:%.*]], label [[IF_END3163:%.*]]
// SIMD-ONLY0:       if.then3162:
// SIMD-ONLY0-NEXT:    [[TMP1488:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1488]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3163]]
// SIMD-ONLY0:       if.end3163:
// SIMD-ONLY0-NEXT:    [[TMP1489:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1490:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3164:%.*]] = icmp ult i32 [[TMP1489]], [[TMP1490]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3164]], label [[IF_THEN3166:%.*]], label [[IF_END3167:%.*]]
// SIMD-ONLY0:       if.then3166:
// SIMD-ONLY0-NEXT:    [[TMP1491:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1491]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3167]]
// SIMD-ONLY0:       if.end3167:
// SIMD-ONLY0-NEXT:    [[TMP1492:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1493:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3168:%.*]] = icmp ugt i32 [[TMP1492]], [[TMP1493]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3168]], label [[IF_THEN3170:%.*]], label [[IF_END3171:%.*]]
// SIMD-ONLY0:       if.then3170:
// SIMD-ONLY0-NEXT:    [[TMP1494:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1494]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3171]]
// SIMD-ONLY0:       if.end3171:
// SIMD-ONLY0-NEXT:    [[TMP1495:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1496:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3172:%.*]] = icmp ult i32 [[TMP1495]], [[TMP1496]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3172]], label [[IF_THEN3174:%.*]], label [[IF_END3175:%.*]]
// SIMD-ONLY0:       if.then3174:
// SIMD-ONLY0-NEXT:    [[TMP1497:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1497]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3175]]
// SIMD-ONLY0:       if.end3175:
// SIMD-ONLY0-NEXT:    [[TMP1498:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1499:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3176:%.*]] = icmp eq i32 [[TMP1498]], [[TMP1499]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3176]], label [[COND_TRUE3178:%.*]], label [[COND_FALSE3179:%.*]]
// SIMD-ONLY0:       cond.true3178:
// SIMD-ONLY0-NEXT:    [[TMP1500:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3180:%.*]]
// SIMD-ONLY0:       cond.false3179:
// SIMD-ONLY0-NEXT:    [[TMP1501:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3180]]
// SIMD-ONLY0:       cond.end3180:
// SIMD-ONLY0-NEXT:    [[COND3181:%.*]] = phi i32 [ [[TMP1500]], [[COND_TRUE3178]] ], [ [[TMP1501]], [[COND_FALSE3179]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3181]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1502:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1503:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3182:%.*]] = icmp eq i32 [[TMP1502]], [[TMP1503]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3182]], label [[COND_TRUE3184:%.*]], label [[COND_FALSE3185:%.*]]
// SIMD-ONLY0:       cond.true3184:
// SIMD-ONLY0-NEXT:    [[TMP1504:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3186:%.*]]
// SIMD-ONLY0:       cond.false3185:
// SIMD-ONLY0-NEXT:    [[TMP1505:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3186]]
// SIMD-ONLY0:       cond.end3186:
// SIMD-ONLY0-NEXT:    [[COND3187:%.*]] = phi i32 [ [[TMP1504]], [[COND_TRUE3184]] ], [ [[TMP1505]], [[COND_FALSE3185]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3187]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1506:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1507:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3188:%.*]] = icmp eq i32 [[TMP1506]], [[TMP1507]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3188]], label [[IF_THEN3190:%.*]], label [[IF_END3191:%.*]]
// SIMD-ONLY0:       if.then3190:
// SIMD-ONLY0-NEXT:    [[TMP1508:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1508]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3191]]
// SIMD-ONLY0:       if.end3191:
// SIMD-ONLY0-NEXT:    [[TMP1509:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1510:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3192:%.*]] = icmp eq i32 [[TMP1509]], [[TMP1510]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3192]], label [[IF_THEN3194:%.*]], label [[IF_END3195:%.*]]
// SIMD-ONLY0:       if.then3194:
// SIMD-ONLY0-NEXT:    [[TMP1511:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1511]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3195]]
// SIMD-ONLY0:       if.end3195:
// SIMD-ONLY0-NEXT:    [[TMP1512:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1513:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3196:%.*]] = icmp sgt i64 [[TMP1512]], [[TMP1513]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3196]], label [[COND_TRUE3198:%.*]], label [[COND_FALSE3199:%.*]]
// SIMD-ONLY0:       cond.true3198:
// SIMD-ONLY0-NEXT:    [[TMP1514:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3200:%.*]]
// SIMD-ONLY0:       cond.false3199:
// SIMD-ONLY0-NEXT:    [[TMP1515:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3200]]
// SIMD-ONLY0:       cond.end3200:
// SIMD-ONLY0-NEXT:    [[COND3201:%.*]] = phi i64 [ [[TMP1514]], [[COND_TRUE3198]] ], [ [[TMP1515]], [[COND_FALSE3199]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3201]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1516:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1517:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3202:%.*]] = icmp slt i64 [[TMP1516]], [[TMP1517]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3202]], label [[COND_TRUE3204:%.*]], label [[COND_FALSE3205:%.*]]
// SIMD-ONLY0:       cond.true3204:
// SIMD-ONLY0-NEXT:    [[TMP1518:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3206:%.*]]
// SIMD-ONLY0:       cond.false3205:
// SIMD-ONLY0-NEXT:    [[TMP1519:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3206]]
// SIMD-ONLY0:       cond.end3206:
// SIMD-ONLY0-NEXT:    [[COND3207:%.*]] = phi i64 [ [[TMP1518]], [[COND_TRUE3204]] ], [ [[TMP1519]], [[COND_FALSE3205]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3207]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1520:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1521:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3208:%.*]] = icmp sgt i64 [[TMP1520]], [[TMP1521]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3208]], label [[COND_TRUE3210:%.*]], label [[COND_FALSE3211:%.*]]
// SIMD-ONLY0:       cond.true3210:
// SIMD-ONLY0-NEXT:    [[TMP1522:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3212:%.*]]
// SIMD-ONLY0:       cond.false3211:
// SIMD-ONLY0-NEXT:    [[TMP1523:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3212]]
// SIMD-ONLY0:       cond.end3212:
// SIMD-ONLY0-NEXT:    [[COND3213:%.*]] = phi i64 [ [[TMP1522]], [[COND_TRUE3210]] ], [ [[TMP1523]], [[COND_FALSE3211]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3213]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1524:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1525:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3214:%.*]] = icmp slt i64 [[TMP1524]], [[TMP1525]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3214]], label [[COND_TRUE3216:%.*]], label [[COND_FALSE3217:%.*]]
// SIMD-ONLY0:       cond.true3216:
// SIMD-ONLY0-NEXT:    [[TMP1526:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3218:%.*]]
// SIMD-ONLY0:       cond.false3217:
// SIMD-ONLY0-NEXT:    [[TMP1527:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3218]]
// SIMD-ONLY0:       cond.end3218:
// SIMD-ONLY0-NEXT:    [[COND3219:%.*]] = phi i64 [ [[TMP1526]], [[COND_TRUE3216]] ], [ [[TMP1527]], [[COND_FALSE3217]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3219]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1528:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1529:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3220:%.*]] = icmp sgt i64 [[TMP1528]], [[TMP1529]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3220]], label [[IF_THEN3222:%.*]], label [[IF_END3223:%.*]]
// SIMD-ONLY0:       if.then3222:
// SIMD-ONLY0-NEXT:    [[TMP1530:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1530]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3223]]
// SIMD-ONLY0:       if.end3223:
// SIMD-ONLY0-NEXT:    [[TMP1531:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1532:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3224:%.*]] = icmp slt i64 [[TMP1531]], [[TMP1532]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3224]], label [[IF_THEN3226:%.*]], label [[IF_END3227:%.*]]
// SIMD-ONLY0:       if.then3226:
// SIMD-ONLY0-NEXT:    [[TMP1533:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1533]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3227]]
// SIMD-ONLY0:       if.end3227:
// SIMD-ONLY0-NEXT:    [[TMP1534:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1535:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3228:%.*]] = icmp sgt i64 [[TMP1534]], [[TMP1535]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3228]], label [[IF_THEN3230:%.*]], label [[IF_END3231:%.*]]
// SIMD-ONLY0:       if.then3230:
// SIMD-ONLY0-NEXT:    [[TMP1536:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1536]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3231]]
// SIMD-ONLY0:       if.end3231:
// SIMD-ONLY0-NEXT:    [[TMP1537:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1538:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3232:%.*]] = icmp slt i64 [[TMP1537]], [[TMP1538]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3232]], label [[IF_THEN3234:%.*]], label [[IF_END3235:%.*]]
// SIMD-ONLY0:       if.then3234:
// SIMD-ONLY0-NEXT:    [[TMP1539:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1539]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3235]]
// SIMD-ONLY0:       if.end3235:
// SIMD-ONLY0-NEXT:    [[TMP1540:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1541:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3236:%.*]] = icmp eq i64 [[TMP1540]], [[TMP1541]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3236]], label [[COND_TRUE3238:%.*]], label [[COND_FALSE3239:%.*]]
// SIMD-ONLY0:       cond.true3238:
// SIMD-ONLY0-NEXT:    [[TMP1542:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3240:%.*]]
// SIMD-ONLY0:       cond.false3239:
// SIMD-ONLY0-NEXT:    [[TMP1543:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3240]]
// SIMD-ONLY0:       cond.end3240:
// SIMD-ONLY0-NEXT:    [[COND3241:%.*]] = phi i64 [ [[TMP1542]], [[COND_TRUE3238]] ], [ [[TMP1543]], [[COND_FALSE3239]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3241]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1544:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1545:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3242:%.*]] = icmp eq i64 [[TMP1544]], [[TMP1545]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3242]], label [[COND_TRUE3244:%.*]], label [[COND_FALSE3245:%.*]]
// SIMD-ONLY0:       cond.true3244:
// SIMD-ONLY0-NEXT:    [[TMP1546:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3246:%.*]]
// SIMD-ONLY0:       cond.false3245:
// SIMD-ONLY0-NEXT:    [[TMP1547:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3246]]
// SIMD-ONLY0:       cond.end3246:
// SIMD-ONLY0-NEXT:    [[COND3247:%.*]] = phi i64 [ [[TMP1546]], [[COND_TRUE3244]] ], [ [[TMP1547]], [[COND_FALSE3245]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3247]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1548:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1549:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3248:%.*]] = icmp eq i64 [[TMP1548]], [[TMP1549]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3248]], label [[IF_THEN3250:%.*]], label [[IF_END3251:%.*]]
// SIMD-ONLY0:       if.then3250:
// SIMD-ONLY0-NEXT:    [[TMP1550:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1550]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3251]]
// SIMD-ONLY0:       if.end3251:
// SIMD-ONLY0-NEXT:    [[TMP1551:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1552:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3252:%.*]] = icmp eq i64 [[TMP1551]], [[TMP1552]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3252]], label [[IF_THEN3254:%.*]], label [[IF_END3255:%.*]]
// SIMD-ONLY0:       if.then3254:
// SIMD-ONLY0-NEXT:    [[TMP1553:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1553]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3255]]
// SIMD-ONLY0:       if.end3255:
// SIMD-ONLY0-NEXT:    [[TMP1554:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1555:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3256:%.*]] = icmp ugt i64 [[TMP1554]], [[TMP1555]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3256]], label [[COND_TRUE3258:%.*]], label [[COND_FALSE3259:%.*]]
// SIMD-ONLY0:       cond.true3258:
// SIMD-ONLY0-NEXT:    [[TMP1556:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3260:%.*]]
// SIMD-ONLY0:       cond.false3259:
// SIMD-ONLY0-NEXT:    [[TMP1557:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3260]]
// SIMD-ONLY0:       cond.end3260:
// SIMD-ONLY0-NEXT:    [[COND3261:%.*]] = phi i64 [ [[TMP1556]], [[COND_TRUE3258]] ], [ [[TMP1557]], [[COND_FALSE3259]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3261]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1558:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1559:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3262:%.*]] = icmp ult i64 [[TMP1558]], [[TMP1559]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3262]], label [[COND_TRUE3264:%.*]], label [[COND_FALSE3265:%.*]]
// SIMD-ONLY0:       cond.true3264:
// SIMD-ONLY0-NEXT:    [[TMP1560:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3266:%.*]]
// SIMD-ONLY0:       cond.false3265:
// SIMD-ONLY0-NEXT:    [[TMP1561:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3266]]
// SIMD-ONLY0:       cond.end3266:
// SIMD-ONLY0-NEXT:    [[COND3267:%.*]] = phi i64 [ [[TMP1560]], [[COND_TRUE3264]] ], [ [[TMP1561]], [[COND_FALSE3265]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3267]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1562:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1563:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3268:%.*]] = icmp ugt i64 [[TMP1562]], [[TMP1563]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3268]], label [[COND_TRUE3270:%.*]], label [[COND_FALSE3271:%.*]]
// SIMD-ONLY0:       cond.true3270:
// SIMD-ONLY0-NEXT:    [[TMP1564:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3272:%.*]]
// SIMD-ONLY0:       cond.false3271:
// SIMD-ONLY0-NEXT:    [[TMP1565:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3272]]
// SIMD-ONLY0:       cond.end3272:
// SIMD-ONLY0-NEXT:    [[COND3273:%.*]] = phi i64 [ [[TMP1564]], [[COND_TRUE3270]] ], [ [[TMP1565]], [[COND_FALSE3271]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3273]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1566:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1567:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3274:%.*]] = icmp ult i64 [[TMP1566]], [[TMP1567]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3274]], label [[COND_TRUE3276:%.*]], label [[COND_FALSE3277:%.*]]
// SIMD-ONLY0:       cond.true3276:
// SIMD-ONLY0-NEXT:    [[TMP1568:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3278:%.*]]
// SIMD-ONLY0:       cond.false3277:
// SIMD-ONLY0-NEXT:    [[TMP1569:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3278]]
// SIMD-ONLY0:       cond.end3278:
// SIMD-ONLY0-NEXT:    [[COND3279:%.*]] = phi i64 [ [[TMP1568]], [[COND_TRUE3276]] ], [ [[TMP1569]], [[COND_FALSE3277]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3279]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1570:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1571:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3280:%.*]] = icmp ugt i64 [[TMP1570]], [[TMP1571]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3280]], label [[IF_THEN3282:%.*]], label [[IF_END3283:%.*]]
// SIMD-ONLY0:       if.then3282:
// SIMD-ONLY0-NEXT:    [[TMP1572:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1572]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3283]]
// SIMD-ONLY0:       if.end3283:
// SIMD-ONLY0-NEXT:    [[TMP1573:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1574:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3284:%.*]] = icmp ult i64 [[TMP1573]], [[TMP1574]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3284]], label [[IF_THEN3286:%.*]], label [[IF_END3287:%.*]]
// SIMD-ONLY0:       if.then3286:
// SIMD-ONLY0-NEXT:    [[TMP1575:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1575]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3287]]
// SIMD-ONLY0:       if.end3287:
// SIMD-ONLY0-NEXT:    [[TMP1576:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1577:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3288:%.*]] = icmp ugt i64 [[TMP1576]], [[TMP1577]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3288]], label [[IF_THEN3290:%.*]], label [[IF_END3291:%.*]]
// SIMD-ONLY0:       if.then3290:
// SIMD-ONLY0-NEXT:    [[TMP1578:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1578]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3291]]
// SIMD-ONLY0:       if.end3291:
// SIMD-ONLY0-NEXT:    [[TMP1579:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1580:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3292:%.*]] = icmp ult i64 [[TMP1579]], [[TMP1580]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3292]], label [[IF_THEN3294:%.*]], label [[IF_END3295:%.*]]
// SIMD-ONLY0:       if.then3294:
// SIMD-ONLY0-NEXT:    [[TMP1581:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1581]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3295]]
// SIMD-ONLY0:       if.end3295:
// SIMD-ONLY0-NEXT:    [[TMP1582:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1583:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3296:%.*]] = icmp eq i64 [[TMP1582]], [[TMP1583]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3296]], label [[COND_TRUE3298:%.*]], label [[COND_FALSE3299:%.*]]
// SIMD-ONLY0:       cond.true3298:
// SIMD-ONLY0-NEXT:    [[TMP1584:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3300:%.*]]
// SIMD-ONLY0:       cond.false3299:
// SIMD-ONLY0-NEXT:    [[TMP1585:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3300]]
// SIMD-ONLY0:       cond.end3300:
// SIMD-ONLY0-NEXT:    [[COND3301:%.*]] = phi i64 [ [[TMP1584]], [[COND_TRUE3298]] ], [ [[TMP1585]], [[COND_FALSE3299]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3301]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1586:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1587:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3302:%.*]] = icmp eq i64 [[TMP1586]], [[TMP1587]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3302]], label [[COND_TRUE3304:%.*]], label [[COND_FALSE3305:%.*]]
// SIMD-ONLY0:       cond.true3304:
// SIMD-ONLY0-NEXT:    [[TMP1588:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3306:%.*]]
// SIMD-ONLY0:       cond.false3305:
// SIMD-ONLY0-NEXT:    [[TMP1589:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3306]]
// SIMD-ONLY0:       cond.end3306:
// SIMD-ONLY0-NEXT:    [[COND3307:%.*]] = phi i64 [ [[TMP1588]], [[COND_TRUE3304]] ], [ [[TMP1589]], [[COND_FALSE3305]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3307]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1590:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1591:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3308:%.*]] = icmp eq i64 [[TMP1590]], [[TMP1591]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3308]], label [[IF_THEN3310:%.*]], label [[IF_END3311:%.*]]
// SIMD-ONLY0:       if.then3310:
// SIMD-ONLY0-NEXT:    [[TMP1592:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1592]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3311]]
// SIMD-ONLY0:       if.end3311:
// SIMD-ONLY0-NEXT:    [[TMP1593:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1594:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3312:%.*]] = icmp eq i64 [[TMP1593]], [[TMP1594]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3312]], label [[IF_THEN3314:%.*]], label [[IF_END3315:%.*]]
// SIMD-ONLY0:       if.then3314:
// SIMD-ONLY0-NEXT:    [[TMP1595:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1595]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3315]]
// SIMD-ONLY0:       if.end3315:
// SIMD-ONLY0-NEXT:    [[TMP1596:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1597:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3316:%.*]] = icmp sgt i64 [[TMP1596]], [[TMP1597]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3316]], label [[COND_TRUE3318:%.*]], label [[COND_FALSE3319:%.*]]
// SIMD-ONLY0:       cond.true3318:
// SIMD-ONLY0-NEXT:    [[TMP1598:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3320:%.*]]
// SIMD-ONLY0:       cond.false3319:
// SIMD-ONLY0-NEXT:    [[TMP1599:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3320]]
// SIMD-ONLY0:       cond.end3320:
// SIMD-ONLY0-NEXT:    [[COND3321:%.*]] = phi i64 [ [[TMP1598]], [[COND_TRUE3318]] ], [ [[TMP1599]], [[COND_FALSE3319]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3321]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1600:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1601:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3322:%.*]] = icmp slt i64 [[TMP1600]], [[TMP1601]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3322]], label [[COND_TRUE3324:%.*]], label [[COND_FALSE3325:%.*]]
// SIMD-ONLY0:       cond.true3324:
// SIMD-ONLY0-NEXT:    [[TMP1602:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3326:%.*]]
// SIMD-ONLY0:       cond.false3325:
// SIMD-ONLY0-NEXT:    [[TMP1603:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3326]]
// SIMD-ONLY0:       cond.end3326:
// SIMD-ONLY0-NEXT:    [[COND3327:%.*]] = phi i64 [ [[TMP1602]], [[COND_TRUE3324]] ], [ [[TMP1603]], [[COND_FALSE3325]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3327]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1604:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1605:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3328:%.*]] = icmp sgt i64 [[TMP1604]], [[TMP1605]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3328]], label [[COND_TRUE3330:%.*]], label [[COND_FALSE3331:%.*]]
// SIMD-ONLY0:       cond.true3330:
// SIMD-ONLY0-NEXT:    [[TMP1606:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3332:%.*]]
// SIMD-ONLY0:       cond.false3331:
// SIMD-ONLY0-NEXT:    [[TMP1607:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3332]]
// SIMD-ONLY0:       cond.end3332:
// SIMD-ONLY0-NEXT:    [[COND3333:%.*]] = phi i64 [ [[TMP1606]], [[COND_TRUE3330]] ], [ [[TMP1607]], [[COND_FALSE3331]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3333]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1608:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1609:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3334:%.*]] = icmp slt i64 [[TMP1608]], [[TMP1609]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3334]], label [[COND_TRUE3336:%.*]], label [[COND_FALSE3337:%.*]]
// SIMD-ONLY0:       cond.true3336:
// SIMD-ONLY0-NEXT:    [[TMP1610:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3338:%.*]]
// SIMD-ONLY0:       cond.false3337:
// SIMD-ONLY0-NEXT:    [[TMP1611:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3338]]
// SIMD-ONLY0:       cond.end3338:
// SIMD-ONLY0-NEXT:    [[COND3339:%.*]] = phi i64 [ [[TMP1610]], [[COND_TRUE3336]] ], [ [[TMP1611]], [[COND_FALSE3337]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3339]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1612:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1613:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3340:%.*]] = icmp sgt i64 [[TMP1612]], [[TMP1613]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3340]], label [[IF_THEN3342:%.*]], label [[IF_END3343:%.*]]
// SIMD-ONLY0:       if.then3342:
// SIMD-ONLY0-NEXT:    [[TMP1614:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1614]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3343]]
// SIMD-ONLY0:       if.end3343:
// SIMD-ONLY0-NEXT:    [[TMP1615:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1616:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3344:%.*]] = icmp slt i64 [[TMP1615]], [[TMP1616]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3344]], label [[IF_THEN3346:%.*]], label [[IF_END3347:%.*]]
// SIMD-ONLY0:       if.then3346:
// SIMD-ONLY0-NEXT:    [[TMP1617:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1617]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3347]]
// SIMD-ONLY0:       if.end3347:
// SIMD-ONLY0-NEXT:    [[TMP1618:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1619:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3348:%.*]] = icmp sgt i64 [[TMP1618]], [[TMP1619]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3348]], label [[IF_THEN3350:%.*]], label [[IF_END3351:%.*]]
// SIMD-ONLY0:       if.then3350:
// SIMD-ONLY0-NEXT:    [[TMP1620:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1620]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3351]]
// SIMD-ONLY0:       if.end3351:
// SIMD-ONLY0-NEXT:    [[TMP1621:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1622:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3352:%.*]] = icmp slt i64 [[TMP1621]], [[TMP1622]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3352]], label [[IF_THEN3354:%.*]], label [[IF_END3355:%.*]]
// SIMD-ONLY0:       if.then3354:
// SIMD-ONLY0-NEXT:    [[TMP1623:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1623]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3355]]
// SIMD-ONLY0:       if.end3355:
// SIMD-ONLY0-NEXT:    [[TMP1624:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1625:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3356:%.*]] = icmp eq i64 [[TMP1624]], [[TMP1625]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3356]], label [[COND_TRUE3358:%.*]], label [[COND_FALSE3359:%.*]]
// SIMD-ONLY0:       cond.true3358:
// SIMD-ONLY0-NEXT:    [[TMP1626:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3360:%.*]]
// SIMD-ONLY0:       cond.false3359:
// SIMD-ONLY0-NEXT:    [[TMP1627:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3360]]
// SIMD-ONLY0:       cond.end3360:
// SIMD-ONLY0-NEXT:    [[COND3361:%.*]] = phi i64 [ [[TMP1626]], [[COND_TRUE3358]] ], [ [[TMP1627]], [[COND_FALSE3359]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3361]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1628:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1629:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3362:%.*]] = icmp eq i64 [[TMP1628]], [[TMP1629]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3362]], label [[COND_TRUE3364:%.*]], label [[COND_FALSE3365:%.*]]
// SIMD-ONLY0:       cond.true3364:
// SIMD-ONLY0-NEXT:    [[TMP1630:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3366:%.*]]
// SIMD-ONLY0:       cond.false3365:
// SIMD-ONLY0-NEXT:    [[TMP1631:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3366]]
// SIMD-ONLY0:       cond.end3366:
// SIMD-ONLY0-NEXT:    [[COND3367:%.*]] = phi i64 [ [[TMP1630]], [[COND_TRUE3364]] ], [ [[TMP1631]], [[COND_FALSE3365]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3367]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1632:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1633:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3368:%.*]] = icmp eq i64 [[TMP1632]], [[TMP1633]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3368]], label [[IF_THEN3370:%.*]], label [[IF_END3371:%.*]]
// SIMD-ONLY0:       if.then3370:
// SIMD-ONLY0-NEXT:    [[TMP1634:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1634]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3371]]
// SIMD-ONLY0:       if.end3371:
// SIMD-ONLY0-NEXT:    [[TMP1635:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1636:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3372:%.*]] = icmp eq i64 [[TMP1635]], [[TMP1636]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3372]], label [[IF_THEN3374:%.*]], label [[IF_END3375:%.*]]
// SIMD-ONLY0:       if.then3374:
// SIMD-ONLY0-NEXT:    [[TMP1637:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1637]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3375]]
// SIMD-ONLY0:       if.end3375:
// SIMD-ONLY0-NEXT:    [[TMP1638:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1639:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3376:%.*]] = icmp ugt i64 [[TMP1638]], [[TMP1639]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3376]], label [[COND_TRUE3378:%.*]], label [[COND_FALSE3379:%.*]]
// SIMD-ONLY0:       cond.true3378:
// SIMD-ONLY0-NEXT:    [[TMP1640:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3380:%.*]]
// SIMD-ONLY0:       cond.false3379:
// SIMD-ONLY0-NEXT:    [[TMP1641:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3380]]
// SIMD-ONLY0:       cond.end3380:
// SIMD-ONLY0-NEXT:    [[COND3381:%.*]] = phi i64 [ [[TMP1640]], [[COND_TRUE3378]] ], [ [[TMP1641]], [[COND_FALSE3379]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3381]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1642:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1643:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3382:%.*]] = icmp ult i64 [[TMP1642]], [[TMP1643]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3382]], label [[COND_TRUE3384:%.*]], label [[COND_FALSE3385:%.*]]
// SIMD-ONLY0:       cond.true3384:
// SIMD-ONLY0-NEXT:    [[TMP1644:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3386:%.*]]
// SIMD-ONLY0:       cond.false3385:
// SIMD-ONLY0-NEXT:    [[TMP1645:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3386]]
// SIMD-ONLY0:       cond.end3386:
// SIMD-ONLY0-NEXT:    [[COND3387:%.*]] = phi i64 [ [[TMP1644]], [[COND_TRUE3384]] ], [ [[TMP1645]], [[COND_FALSE3385]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3387]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1646:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1647:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3388:%.*]] = icmp ugt i64 [[TMP1646]], [[TMP1647]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3388]], label [[COND_TRUE3390:%.*]], label [[COND_FALSE3391:%.*]]
// SIMD-ONLY0:       cond.true3390:
// SIMD-ONLY0-NEXT:    [[TMP1648:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3392:%.*]]
// SIMD-ONLY0:       cond.false3391:
// SIMD-ONLY0-NEXT:    [[TMP1649:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3392]]
// SIMD-ONLY0:       cond.end3392:
// SIMD-ONLY0-NEXT:    [[COND3393:%.*]] = phi i64 [ [[TMP1648]], [[COND_TRUE3390]] ], [ [[TMP1649]], [[COND_FALSE3391]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3393]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1650:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1651:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3394:%.*]] = icmp ult i64 [[TMP1650]], [[TMP1651]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3394]], label [[COND_TRUE3396:%.*]], label [[COND_FALSE3397:%.*]]
// SIMD-ONLY0:       cond.true3396:
// SIMD-ONLY0-NEXT:    [[TMP1652:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3398:%.*]]
// SIMD-ONLY0:       cond.false3397:
// SIMD-ONLY0-NEXT:    [[TMP1653:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3398]]
// SIMD-ONLY0:       cond.end3398:
// SIMD-ONLY0-NEXT:    [[COND3399:%.*]] = phi i64 [ [[TMP1652]], [[COND_TRUE3396]] ], [ [[TMP1653]], [[COND_FALSE3397]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3399]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1654:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1655:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3400:%.*]] = icmp ugt i64 [[TMP1654]], [[TMP1655]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3400]], label [[IF_THEN3402:%.*]], label [[IF_END3403:%.*]]
// SIMD-ONLY0:       if.then3402:
// SIMD-ONLY0-NEXT:    [[TMP1656:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1656]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3403]]
// SIMD-ONLY0:       if.end3403:
// SIMD-ONLY0-NEXT:    [[TMP1657:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1658:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3404:%.*]] = icmp ult i64 [[TMP1657]], [[TMP1658]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3404]], label [[IF_THEN3406:%.*]], label [[IF_END3407:%.*]]
// SIMD-ONLY0:       if.then3406:
// SIMD-ONLY0-NEXT:    [[TMP1659:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1659]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3407]]
// SIMD-ONLY0:       if.end3407:
// SIMD-ONLY0-NEXT:    [[TMP1660:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1661:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3408:%.*]] = icmp ugt i64 [[TMP1660]], [[TMP1661]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3408]], label [[IF_THEN3410:%.*]], label [[IF_END3411:%.*]]
// SIMD-ONLY0:       if.then3410:
// SIMD-ONLY0-NEXT:    [[TMP1662:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1662]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3411]]
// SIMD-ONLY0:       if.end3411:
// SIMD-ONLY0-NEXT:    [[TMP1663:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1664:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3412:%.*]] = icmp ult i64 [[TMP1663]], [[TMP1664]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3412]], label [[IF_THEN3414:%.*]], label [[IF_END3415:%.*]]
// SIMD-ONLY0:       if.then3414:
// SIMD-ONLY0-NEXT:    [[TMP1665:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1665]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3415]]
// SIMD-ONLY0:       if.end3415:
// SIMD-ONLY0-NEXT:    [[TMP1666:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1667:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3416:%.*]] = icmp eq i64 [[TMP1666]], [[TMP1667]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3416]], label [[COND_TRUE3418:%.*]], label [[COND_FALSE3419:%.*]]
// SIMD-ONLY0:       cond.true3418:
// SIMD-ONLY0-NEXT:    [[TMP1668:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3420:%.*]]
// SIMD-ONLY0:       cond.false3419:
// SIMD-ONLY0-NEXT:    [[TMP1669:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3420]]
// SIMD-ONLY0:       cond.end3420:
// SIMD-ONLY0-NEXT:    [[COND3421:%.*]] = phi i64 [ [[TMP1668]], [[COND_TRUE3418]] ], [ [[TMP1669]], [[COND_FALSE3419]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3421]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1670:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1671:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3422:%.*]] = icmp eq i64 [[TMP1670]], [[TMP1671]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3422]], label [[COND_TRUE3424:%.*]], label [[COND_FALSE3425:%.*]]
// SIMD-ONLY0:       cond.true3424:
// SIMD-ONLY0-NEXT:    [[TMP1672:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3426:%.*]]
// SIMD-ONLY0:       cond.false3425:
// SIMD-ONLY0-NEXT:    [[TMP1673:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3426]]
// SIMD-ONLY0:       cond.end3426:
// SIMD-ONLY0-NEXT:    [[COND3427:%.*]] = phi i64 [ [[TMP1672]], [[COND_TRUE3424]] ], [ [[TMP1673]], [[COND_FALSE3425]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3427]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1674:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1675:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3428:%.*]] = icmp eq i64 [[TMP1674]], [[TMP1675]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3428]], label [[IF_THEN3430:%.*]], label [[IF_END3431:%.*]]
// SIMD-ONLY0:       if.then3430:
// SIMD-ONLY0-NEXT:    [[TMP1676:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1676]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3431]]
// SIMD-ONLY0:       if.end3431:
// SIMD-ONLY0-NEXT:    [[TMP1677:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1678:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3432:%.*]] = icmp eq i64 [[TMP1677]], [[TMP1678]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3432]], label [[IF_THEN3434:%.*]], label [[IF_END3435:%.*]]
// SIMD-ONLY0:       if.then3434:
// SIMD-ONLY0-NEXT:    [[TMP1679:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1679]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3435]]
// SIMD-ONLY0:       if.end3435:
// SIMD-ONLY0-NEXT:    [[TMP1680:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1681:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3436:%.*]] = icmp sgt i64 [[TMP1680]], [[TMP1681]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3436]], label [[COND_TRUE3438:%.*]], label [[COND_FALSE3439:%.*]]
// SIMD-ONLY0:       cond.true3438:
// SIMD-ONLY0-NEXT:    [[TMP1682:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3440:%.*]]
// SIMD-ONLY0:       cond.false3439:
// SIMD-ONLY0-NEXT:    [[TMP1683:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3440]]
// SIMD-ONLY0:       cond.end3440:
// SIMD-ONLY0-NEXT:    [[COND3441:%.*]] = phi i64 [ [[TMP1682]], [[COND_TRUE3438]] ], [ [[TMP1683]], [[COND_FALSE3439]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3441]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1684:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1685:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3442:%.*]] = icmp slt i64 [[TMP1684]], [[TMP1685]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3442]], label [[COND_TRUE3444:%.*]], label [[COND_FALSE3445:%.*]]
// SIMD-ONLY0:       cond.true3444:
// SIMD-ONLY0-NEXT:    [[TMP1686:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3446:%.*]]
// SIMD-ONLY0:       cond.false3445:
// SIMD-ONLY0-NEXT:    [[TMP1687:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3446]]
// SIMD-ONLY0:       cond.end3446:
// SIMD-ONLY0-NEXT:    [[COND3447:%.*]] = phi i64 [ [[TMP1686]], [[COND_TRUE3444]] ], [ [[TMP1687]], [[COND_FALSE3445]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3447]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1688:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1689:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3448:%.*]] = icmp sgt i64 [[TMP1688]], [[TMP1689]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3448]], label [[COND_TRUE3450:%.*]], label [[COND_FALSE3451:%.*]]
// SIMD-ONLY0:       cond.true3450:
// SIMD-ONLY0-NEXT:    [[TMP1690:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3452:%.*]]
// SIMD-ONLY0:       cond.false3451:
// SIMD-ONLY0-NEXT:    [[TMP1691:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3452]]
// SIMD-ONLY0:       cond.end3452:
// SIMD-ONLY0-NEXT:    [[COND3453:%.*]] = phi i64 [ [[TMP1690]], [[COND_TRUE3450]] ], [ [[TMP1691]], [[COND_FALSE3451]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3453]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1692:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1693:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3454:%.*]] = icmp slt i64 [[TMP1692]], [[TMP1693]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3454]], label [[COND_TRUE3456:%.*]], label [[COND_FALSE3457:%.*]]
// SIMD-ONLY0:       cond.true3456:
// SIMD-ONLY0-NEXT:    [[TMP1694:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3458:%.*]]
// SIMD-ONLY0:       cond.false3457:
// SIMD-ONLY0-NEXT:    [[TMP1695:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3458]]
// SIMD-ONLY0:       cond.end3458:
// SIMD-ONLY0-NEXT:    [[COND3459:%.*]] = phi i64 [ [[TMP1694]], [[COND_TRUE3456]] ], [ [[TMP1695]], [[COND_FALSE3457]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3459]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1696:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1697:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3460:%.*]] = icmp sgt i64 [[TMP1696]], [[TMP1697]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3460]], label [[IF_THEN3462:%.*]], label [[IF_END3463:%.*]]
// SIMD-ONLY0:       if.then3462:
// SIMD-ONLY0-NEXT:    [[TMP1698:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1698]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3463]]
// SIMD-ONLY0:       if.end3463:
// SIMD-ONLY0-NEXT:    [[TMP1699:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1700:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3464:%.*]] = icmp slt i64 [[TMP1699]], [[TMP1700]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3464]], label [[IF_THEN3466:%.*]], label [[IF_END3467:%.*]]
// SIMD-ONLY0:       if.then3466:
// SIMD-ONLY0-NEXT:    [[TMP1701:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1701]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3467]]
// SIMD-ONLY0:       if.end3467:
// SIMD-ONLY0-NEXT:    [[TMP1702:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1703:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3468:%.*]] = icmp sgt i64 [[TMP1702]], [[TMP1703]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3468]], label [[IF_THEN3470:%.*]], label [[IF_END3471:%.*]]
// SIMD-ONLY0:       if.then3470:
// SIMD-ONLY0-NEXT:    [[TMP1704:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1704]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3471]]
// SIMD-ONLY0:       if.end3471:
// SIMD-ONLY0-NEXT:    [[TMP1705:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1706:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3472:%.*]] = icmp slt i64 [[TMP1705]], [[TMP1706]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3472]], label [[IF_THEN3474:%.*]], label [[IF_END3475:%.*]]
// SIMD-ONLY0:       if.then3474:
// SIMD-ONLY0-NEXT:    [[TMP1707:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1707]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3475]]
// SIMD-ONLY0:       if.end3475:
// SIMD-ONLY0-NEXT:    [[TMP1708:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1709:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3476:%.*]] = icmp eq i64 [[TMP1708]], [[TMP1709]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3476]], label [[COND_TRUE3478:%.*]], label [[COND_FALSE3479:%.*]]
// SIMD-ONLY0:       cond.true3478:
// SIMD-ONLY0-NEXT:    [[TMP1710:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3480:%.*]]
// SIMD-ONLY0:       cond.false3479:
// SIMD-ONLY0-NEXT:    [[TMP1711:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3480]]
// SIMD-ONLY0:       cond.end3480:
// SIMD-ONLY0-NEXT:    [[COND3481:%.*]] = phi i64 [ [[TMP1710]], [[COND_TRUE3478]] ], [ [[TMP1711]], [[COND_FALSE3479]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3481]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1712:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1713:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3482:%.*]] = icmp eq i64 [[TMP1712]], [[TMP1713]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3482]], label [[COND_TRUE3484:%.*]], label [[COND_FALSE3485:%.*]]
// SIMD-ONLY0:       cond.true3484:
// SIMD-ONLY0-NEXT:    [[TMP1714:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3486:%.*]]
// SIMD-ONLY0:       cond.false3485:
// SIMD-ONLY0-NEXT:    [[TMP1715:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3486]]
// SIMD-ONLY0:       cond.end3486:
// SIMD-ONLY0-NEXT:    [[COND3487:%.*]] = phi i64 [ [[TMP1714]], [[COND_TRUE3484]] ], [ [[TMP1715]], [[COND_FALSE3485]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3487]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1716:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1717:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3488:%.*]] = icmp eq i64 [[TMP1716]], [[TMP1717]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3488]], label [[IF_THEN3490:%.*]], label [[IF_END3491:%.*]]
// SIMD-ONLY0:       if.then3490:
// SIMD-ONLY0-NEXT:    [[TMP1718:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1718]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3491]]
// SIMD-ONLY0:       if.end3491:
// SIMD-ONLY0-NEXT:    [[TMP1719:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1720:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3492:%.*]] = icmp eq i64 [[TMP1719]], [[TMP1720]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3492]], label [[IF_THEN3494:%.*]], label [[IF_END3495:%.*]]
// SIMD-ONLY0:       if.then3494:
// SIMD-ONLY0-NEXT:    [[TMP1721:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1721]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3495]]
// SIMD-ONLY0:       if.end3495:
// SIMD-ONLY0-NEXT:    [[TMP1722:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1723:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3496:%.*]] = icmp ugt i64 [[TMP1722]], [[TMP1723]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3496]], label [[COND_TRUE3498:%.*]], label [[COND_FALSE3499:%.*]]
// SIMD-ONLY0:       cond.true3498:
// SIMD-ONLY0-NEXT:    [[TMP1724:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3500:%.*]]
// SIMD-ONLY0:       cond.false3499:
// SIMD-ONLY0-NEXT:    [[TMP1725:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3500]]
// SIMD-ONLY0:       cond.end3500:
// SIMD-ONLY0-NEXT:    [[COND3501:%.*]] = phi i64 [ [[TMP1724]], [[COND_TRUE3498]] ], [ [[TMP1725]], [[COND_FALSE3499]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3501]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1726:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1727:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3502:%.*]] = icmp ult i64 [[TMP1726]], [[TMP1727]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3502]], label [[COND_TRUE3504:%.*]], label [[COND_FALSE3505:%.*]]
// SIMD-ONLY0:       cond.true3504:
// SIMD-ONLY0-NEXT:    [[TMP1728:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3506:%.*]]
// SIMD-ONLY0:       cond.false3505:
// SIMD-ONLY0-NEXT:    [[TMP1729:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3506]]
// SIMD-ONLY0:       cond.end3506:
// SIMD-ONLY0-NEXT:    [[COND3507:%.*]] = phi i64 [ [[TMP1728]], [[COND_TRUE3504]] ], [ [[TMP1729]], [[COND_FALSE3505]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3507]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1730:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1731:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3508:%.*]] = icmp ugt i64 [[TMP1730]], [[TMP1731]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3508]], label [[COND_TRUE3510:%.*]], label [[COND_FALSE3511:%.*]]
// SIMD-ONLY0:       cond.true3510:
// SIMD-ONLY0-NEXT:    [[TMP1732:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3512:%.*]]
// SIMD-ONLY0:       cond.false3511:
// SIMD-ONLY0-NEXT:    [[TMP1733:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3512]]
// SIMD-ONLY0:       cond.end3512:
// SIMD-ONLY0-NEXT:    [[COND3513:%.*]] = phi i64 [ [[TMP1732]], [[COND_TRUE3510]] ], [ [[TMP1733]], [[COND_FALSE3511]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3513]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1734:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1735:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3514:%.*]] = icmp ult i64 [[TMP1734]], [[TMP1735]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3514]], label [[COND_TRUE3516:%.*]], label [[COND_FALSE3517:%.*]]
// SIMD-ONLY0:       cond.true3516:
// SIMD-ONLY0-NEXT:    [[TMP1736:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3518:%.*]]
// SIMD-ONLY0:       cond.false3517:
// SIMD-ONLY0-NEXT:    [[TMP1737:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3518]]
// SIMD-ONLY0:       cond.end3518:
// SIMD-ONLY0-NEXT:    [[COND3519:%.*]] = phi i64 [ [[TMP1736]], [[COND_TRUE3516]] ], [ [[TMP1737]], [[COND_FALSE3517]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3519]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1738:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1739:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3520:%.*]] = icmp ugt i64 [[TMP1738]], [[TMP1739]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3520]], label [[IF_THEN3522:%.*]], label [[IF_END3523:%.*]]
// SIMD-ONLY0:       if.then3522:
// SIMD-ONLY0-NEXT:    [[TMP1740:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1740]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3523]]
// SIMD-ONLY0:       if.end3523:
// SIMD-ONLY0-NEXT:    [[TMP1741:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1742:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3524:%.*]] = icmp ult i64 [[TMP1741]], [[TMP1742]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3524]], label [[IF_THEN3526:%.*]], label [[IF_END3527:%.*]]
// SIMD-ONLY0:       if.then3526:
// SIMD-ONLY0-NEXT:    [[TMP1743:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1743]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3527]]
// SIMD-ONLY0:       if.end3527:
// SIMD-ONLY0-NEXT:    [[TMP1744:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1745:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3528:%.*]] = icmp ugt i64 [[TMP1744]], [[TMP1745]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3528]], label [[IF_THEN3530:%.*]], label [[IF_END3531:%.*]]
// SIMD-ONLY0:       if.then3530:
// SIMD-ONLY0-NEXT:    [[TMP1746:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1746]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3531]]
// SIMD-ONLY0:       if.end3531:
// SIMD-ONLY0-NEXT:    [[TMP1747:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1748:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3532:%.*]] = icmp ult i64 [[TMP1747]], [[TMP1748]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3532]], label [[IF_THEN3534:%.*]], label [[IF_END3535:%.*]]
// SIMD-ONLY0:       if.then3534:
// SIMD-ONLY0-NEXT:    [[TMP1749:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1749]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3535]]
// SIMD-ONLY0:       if.end3535:
// SIMD-ONLY0-NEXT:    [[TMP1750:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1751:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3536:%.*]] = icmp eq i64 [[TMP1750]], [[TMP1751]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3536]], label [[COND_TRUE3538:%.*]], label [[COND_FALSE3539:%.*]]
// SIMD-ONLY0:       cond.true3538:
// SIMD-ONLY0-NEXT:    [[TMP1752:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3540:%.*]]
// SIMD-ONLY0:       cond.false3539:
// SIMD-ONLY0-NEXT:    [[TMP1753:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3540]]
// SIMD-ONLY0:       cond.end3540:
// SIMD-ONLY0-NEXT:    [[COND3541:%.*]] = phi i64 [ [[TMP1752]], [[COND_TRUE3538]] ], [ [[TMP1753]], [[COND_FALSE3539]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3541]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1754:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1755:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3542:%.*]] = icmp eq i64 [[TMP1754]], [[TMP1755]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3542]], label [[COND_TRUE3544:%.*]], label [[COND_FALSE3545:%.*]]
// SIMD-ONLY0:       cond.true3544:
// SIMD-ONLY0-NEXT:    [[TMP1756:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3546:%.*]]
// SIMD-ONLY0:       cond.false3545:
// SIMD-ONLY0-NEXT:    [[TMP1757:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3546]]
// SIMD-ONLY0:       cond.end3546:
// SIMD-ONLY0-NEXT:    [[COND3547:%.*]] = phi i64 [ [[TMP1756]], [[COND_TRUE3544]] ], [ [[TMP1757]], [[COND_FALSE3545]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3547]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1758:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1759:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3548:%.*]] = icmp eq i64 [[TMP1758]], [[TMP1759]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3548]], label [[IF_THEN3550:%.*]], label [[IF_END3551:%.*]]
// SIMD-ONLY0:       if.then3550:
// SIMD-ONLY0-NEXT:    [[TMP1760:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1760]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3551]]
// SIMD-ONLY0:       if.end3551:
// SIMD-ONLY0-NEXT:    [[TMP1761:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1762:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3552:%.*]] = icmp eq i64 [[TMP1761]], [[TMP1762]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3552]], label [[IF_THEN3554:%.*]], label [[IF_END3555:%.*]]
// SIMD-ONLY0:       if.then3554:
// SIMD-ONLY0-NEXT:    [[TMP1763:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1763]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3555]]
// SIMD-ONLY0:       if.end3555:
// SIMD-ONLY0-NEXT:    [[TMP1764:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1765:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3556:%.*]] = icmp sgt i64 [[TMP1764]], [[TMP1765]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3556]], label [[COND_TRUE3558:%.*]], label [[COND_FALSE3559:%.*]]
// SIMD-ONLY0:       cond.true3558:
// SIMD-ONLY0-NEXT:    [[TMP1766:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3560:%.*]]
// SIMD-ONLY0:       cond.false3559:
// SIMD-ONLY0-NEXT:    [[TMP1767:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3560]]
// SIMD-ONLY0:       cond.end3560:
// SIMD-ONLY0-NEXT:    [[COND3561:%.*]] = phi i64 [ [[TMP1766]], [[COND_TRUE3558]] ], [ [[TMP1767]], [[COND_FALSE3559]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3561]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1768:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1769:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3562:%.*]] = icmp slt i64 [[TMP1768]], [[TMP1769]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3562]], label [[COND_TRUE3564:%.*]], label [[COND_FALSE3565:%.*]]
// SIMD-ONLY0:       cond.true3564:
// SIMD-ONLY0-NEXT:    [[TMP1770:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3566:%.*]]
// SIMD-ONLY0:       cond.false3565:
// SIMD-ONLY0-NEXT:    [[TMP1771:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3566]]
// SIMD-ONLY0:       cond.end3566:
// SIMD-ONLY0-NEXT:    [[COND3567:%.*]] = phi i64 [ [[TMP1770]], [[COND_TRUE3564]] ], [ [[TMP1771]], [[COND_FALSE3565]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3567]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1772:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1773:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3568:%.*]] = icmp sgt i64 [[TMP1772]], [[TMP1773]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3568]], label [[COND_TRUE3570:%.*]], label [[COND_FALSE3571:%.*]]
// SIMD-ONLY0:       cond.true3570:
// SIMD-ONLY0-NEXT:    [[TMP1774:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3572:%.*]]
// SIMD-ONLY0:       cond.false3571:
// SIMD-ONLY0-NEXT:    [[TMP1775:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3572]]
// SIMD-ONLY0:       cond.end3572:
// SIMD-ONLY0-NEXT:    [[COND3573:%.*]] = phi i64 [ [[TMP1774]], [[COND_TRUE3570]] ], [ [[TMP1775]], [[COND_FALSE3571]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3573]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1776:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1777:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3574:%.*]] = icmp slt i64 [[TMP1776]], [[TMP1777]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3574]], label [[COND_TRUE3576:%.*]], label [[COND_FALSE3577:%.*]]
// SIMD-ONLY0:       cond.true3576:
// SIMD-ONLY0-NEXT:    [[TMP1778:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3578:%.*]]
// SIMD-ONLY0:       cond.false3577:
// SIMD-ONLY0-NEXT:    [[TMP1779:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3578]]
// SIMD-ONLY0:       cond.end3578:
// SIMD-ONLY0-NEXT:    [[COND3579:%.*]] = phi i64 [ [[TMP1778]], [[COND_TRUE3576]] ], [ [[TMP1779]], [[COND_FALSE3577]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3579]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1780:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1781:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3580:%.*]] = icmp sgt i64 [[TMP1780]], [[TMP1781]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3580]], label [[IF_THEN3582:%.*]], label [[IF_END3583:%.*]]
// SIMD-ONLY0:       if.then3582:
// SIMD-ONLY0-NEXT:    [[TMP1782:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1782]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3583]]
// SIMD-ONLY0:       if.end3583:
// SIMD-ONLY0-NEXT:    [[TMP1783:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1784:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3584:%.*]] = icmp slt i64 [[TMP1783]], [[TMP1784]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3584]], label [[IF_THEN3586:%.*]], label [[IF_END3587:%.*]]
// SIMD-ONLY0:       if.then3586:
// SIMD-ONLY0-NEXT:    [[TMP1785:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1785]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3587]]
// SIMD-ONLY0:       if.end3587:
// SIMD-ONLY0-NEXT:    [[TMP1786:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1787:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3588:%.*]] = icmp sgt i64 [[TMP1786]], [[TMP1787]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3588]], label [[IF_THEN3590:%.*]], label [[IF_END3591:%.*]]
// SIMD-ONLY0:       if.then3590:
// SIMD-ONLY0-NEXT:    [[TMP1788:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1788]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3591]]
// SIMD-ONLY0:       if.end3591:
// SIMD-ONLY0-NEXT:    [[TMP1789:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1790:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3592:%.*]] = icmp slt i64 [[TMP1789]], [[TMP1790]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3592]], label [[IF_THEN3594:%.*]], label [[IF_END3595:%.*]]
// SIMD-ONLY0:       if.then3594:
// SIMD-ONLY0-NEXT:    [[TMP1791:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1791]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3595]]
// SIMD-ONLY0:       if.end3595:
// SIMD-ONLY0-NEXT:    [[TMP1792:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1793:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3596:%.*]] = icmp eq i64 [[TMP1792]], [[TMP1793]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3596]], label [[COND_TRUE3598:%.*]], label [[COND_FALSE3599:%.*]]
// SIMD-ONLY0:       cond.true3598:
// SIMD-ONLY0-NEXT:    [[TMP1794:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3600:%.*]]
// SIMD-ONLY0:       cond.false3599:
// SIMD-ONLY0-NEXT:    [[TMP1795:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3600]]
// SIMD-ONLY0:       cond.end3600:
// SIMD-ONLY0-NEXT:    [[COND3601:%.*]] = phi i64 [ [[TMP1794]], [[COND_TRUE3598]] ], [ [[TMP1795]], [[COND_FALSE3599]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3601]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1796:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1797:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3602:%.*]] = icmp eq i64 [[TMP1796]], [[TMP1797]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3602]], label [[COND_TRUE3604:%.*]], label [[COND_FALSE3605:%.*]]
// SIMD-ONLY0:       cond.true3604:
// SIMD-ONLY0-NEXT:    [[TMP1798:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3606:%.*]]
// SIMD-ONLY0:       cond.false3605:
// SIMD-ONLY0-NEXT:    [[TMP1799:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3606]]
// SIMD-ONLY0:       cond.end3606:
// SIMD-ONLY0-NEXT:    [[COND3607:%.*]] = phi i64 [ [[TMP1798]], [[COND_TRUE3604]] ], [ [[TMP1799]], [[COND_FALSE3605]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3607]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1800:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1801:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3608:%.*]] = icmp eq i64 [[TMP1800]], [[TMP1801]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3608]], label [[IF_THEN3610:%.*]], label [[IF_END3611:%.*]]
// SIMD-ONLY0:       if.then3610:
// SIMD-ONLY0-NEXT:    [[TMP1802:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1802]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3611]]
// SIMD-ONLY0:       if.end3611:
// SIMD-ONLY0-NEXT:    [[TMP1803:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1804:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3612:%.*]] = icmp eq i64 [[TMP1803]], [[TMP1804]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3612]], label [[IF_THEN3614:%.*]], label [[IF_END3615:%.*]]
// SIMD-ONLY0:       if.then3614:
// SIMD-ONLY0-NEXT:    [[TMP1805:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1805]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3615]]
// SIMD-ONLY0:       if.end3615:
// SIMD-ONLY0-NEXT:    [[TMP1806:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1807:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3616:%.*]] = icmp ugt i64 [[TMP1806]], [[TMP1807]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3616]], label [[COND_TRUE3618:%.*]], label [[COND_FALSE3619:%.*]]
// SIMD-ONLY0:       cond.true3618:
// SIMD-ONLY0-NEXT:    [[TMP1808:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3620:%.*]]
// SIMD-ONLY0:       cond.false3619:
// SIMD-ONLY0-NEXT:    [[TMP1809:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3620]]
// SIMD-ONLY0:       cond.end3620:
// SIMD-ONLY0-NEXT:    [[COND3621:%.*]] = phi i64 [ [[TMP1808]], [[COND_TRUE3618]] ], [ [[TMP1809]], [[COND_FALSE3619]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3621]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1810:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1811:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3622:%.*]] = icmp ult i64 [[TMP1810]], [[TMP1811]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3622]], label [[COND_TRUE3624:%.*]], label [[COND_FALSE3625:%.*]]
// SIMD-ONLY0:       cond.true3624:
// SIMD-ONLY0-NEXT:    [[TMP1812:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3626:%.*]]
// SIMD-ONLY0:       cond.false3625:
// SIMD-ONLY0-NEXT:    [[TMP1813:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3626]]
// SIMD-ONLY0:       cond.end3626:
// SIMD-ONLY0-NEXT:    [[COND3627:%.*]] = phi i64 [ [[TMP1812]], [[COND_TRUE3624]] ], [ [[TMP1813]], [[COND_FALSE3625]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3627]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1814:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1815:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3628:%.*]] = icmp ugt i64 [[TMP1814]], [[TMP1815]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3628]], label [[COND_TRUE3630:%.*]], label [[COND_FALSE3631:%.*]]
// SIMD-ONLY0:       cond.true3630:
// SIMD-ONLY0-NEXT:    [[TMP1816:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3632:%.*]]
// SIMD-ONLY0:       cond.false3631:
// SIMD-ONLY0-NEXT:    [[TMP1817:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3632]]
// SIMD-ONLY0:       cond.end3632:
// SIMD-ONLY0-NEXT:    [[COND3633:%.*]] = phi i64 [ [[TMP1816]], [[COND_TRUE3630]] ], [ [[TMP1817]], [[COND_FALSE3631]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3633]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1818:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1819:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3634:%.*]] = icmp ult i64 [[TMP1818]], [[TMP1819]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3634]], label [[COND_TRUE3636:%.*]], label [[COND_FALSE3637:%.*]]
// SIMD-ONLY0:       cond.true3636:
// SIMD-ONLY0-NEXT:    [[TMP1820:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3638:%.*]]
// SIMD-ONLY0:       cond.false3637:
// SIMD-ONLY0-NEXT:    [[TMP1821:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3638]]
// SIMD-ONLY0:       cond.end3638:
// SIMD-ONLY0-NEXT:    [[COND3639:%.*]] = phi i64 [ [[TMP1820]], [[COND_TRUE3636]] ], [ [[TMP1821]], [[COND_FALSE3637]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3639]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1822:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1823:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3640:%.*]] = icmp ugt i64 [[TMP1822]], [[TMP1823]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3640]], label [[IF_THEN3642:%.*]], label [[IF_END3643:%.*]]
// SIMD-ONLY0:       if.then3642:
// SIMD-ONLY0-NEXT:    [[TMP1824:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1824]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3643]]
// SIMD-ONLY0:       if.end3643:
// SIMD-ONLY0-NEXT:    [[TMP1825:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1826:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3644:%.*]] = icmp ult i64 [[TMP1825]], [[TMP1826]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3644]], label [[IF_THEN3646:%.*]], label [[IF_END3647:%.*]]
// SIMD-ONLY0:       if.then3646:
// SIMD-ONLY0-NEXT:    [[TMP1827:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1827]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3647]]
// SIMD-ONLY0:       if.end3647:
// SIMD-ONLY0-NEXT:    [[TMP1828:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1829:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3648:%.*]] = icmp ugt i64 [[TMP1828]], [[TMP1829]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3648]], label [[IF_THEN3650:%.*]], label [[IF_END3651:%.*]]
// SIMD-ONLY0:       if.then3650:
// SIMD-ONLY0-NEXT:    [[TMP1830:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1830]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3651]]
// SIMD-ONLY0:       if.end3651:
// SIMD-ONLY0-NEXT:    [[TMP1831:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1832:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3652:%.*]] = icmp ult i64 [[TMP1831]], [[TMP1832]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3652]], label [[IF_THEN3654:%.*]], label [[IF_END3655:%.*]]
// SIMD-ONLY0:       if.then3654:
// SIMD-ONLY0-NEXT:    [[TMP1833:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1833]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3655]]
// SIMD-ONLY0:       if.end3655:
// SIMD-ONLY0-NEXT:    [[TMP1834:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1835:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3656:%.*]] = icmp eq i64 [[TMP1834]], [[TMP1835]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3656]], label [[COND_TRUE3658:%.*]], label [[COND_FALSE3659:%.*]]
// SIMD-ONLY0:       cond.true3658:
// SIMD-ONLY0-NEXT:    [[TMP1836:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3660:%.*]]
// SIMD-ONLY0:       cond.false3659:
// SIMD-ONLY0-NEXT:    [[TMP1837:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3660]]
// SIMD-ONLY0:       cond.end3660:
// SIMD-ONLY0-NEXT:    [[COND3661:%.*]] = phi i64 [ [[TMP1836]], [[COND_TRUE3658]] ], [ [[TMP1837]], [[COND_FALSE3659]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3661]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1838:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1839:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3662:%.*]] = icmp eq i64 [[TMP1838]], [[TMP1839]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3662]], label [[COND_TRUE3664:%.*]], label [[COND_FALSE3665:%.*]]
// SIMD-ONLY0:       cond.true3664:
// SIMD-ONLY0-NEXT:    [[TMP1840:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3666:%.*]]
// SIMD-ONLY0:       cond.false3665:
// SIMD-ONLY0-NEXT:    [[TMP1841:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3666]]
// SIMD-ONLY0:       cond.end3666:
// SIMD-ONLY0-NEXT:    [[COND3667:%.*]] = phi i64 [ [[TMP1840]], [[COND_TRUE3664]] ], [ [[TMP1841]], [[COND_FALSE3665]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3667]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1842:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1843:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3668:%.*]] = icmp eq i64 [[TMP1842]], [[TMP1843]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3668]], label [[IF_THEN3670:%.*]], label [[IF_END3671:%.*]]
// SIMD-ONLY0:       if.then3670:
// SIMD-ONLY0-NEXT:    [[TMP1844:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1844]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3671]]
// SIMD-ONLY0:       if.end3671:
// SIMD-ONLY0-NEXT:    [[TMP1845:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1846:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3672:%.*]] = icmp eq i64 [[TMP1845]], [[TMP1846]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3672]], label [[IF_THEN3674:%.*]], label [[IF_END3675:%.*]]
// SIMD-ONLY0:       if.then3674:
// SIMD-ONLY0-NEXT:    [[TMP1847:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1847]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3675]]
// SIMD-ONLY0:       if.end3675:
// SIMD-ONLY0-NEXT:    [[TMP1848:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1849:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3676:%.*]] = icmp sgt i64 [[TMP1848]], [[TMP1849]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3676]], label [[COND_TRUE3678:%.*]], label [[COND_FALSE3679:%.*]]
// SIMD-ONLY0:       cond.true3678:
// SIMD-ONLY0-NEXT:    [[TMP1850:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3680:%.*]]
// SIMD-ONLY0:       cond.false3679:
// SIMD-ONLY0-NEXT:    [[TMP1851:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3680]]
// SIMD-ONLY0:       cond.end3680:
// SIMD-ONLY0-NEXT:    [[COND3681:%.*]] = phi i64 [ [[TMP1850]], [[COND_TRUE3678]] ], [ [[TMP1851]], [[COND_FALSE3679]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3681]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1852:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1853:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3682:%.*]] = icmp slt i64 [[TMP1852]], [[TMP1853]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3682]], label [[COND_TRUE3684:%.*]], label [[COND_FALSE3685:%.*]]
// SIMD-ONLY0:       cond.true3684:
// SIMD-ONLY0-NEXT:    [[TMP1854:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3686:%.*]]
// SIMD-ONLY0:       cond.false3685:
// SIMD-ONLY0-NEXT:    [[TMP1855:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3686]]
// SIMD-ONLY0:       cond.end3686:
// SIMD-ONLY0-NEXT:    [[COND3687:%.*]] = phi i64 [ [[TMP1854]], [[COND_TRUE3684]] ], [ [[TMP1855]], [[COND_FALSE3685]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3687]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1856:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1857:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3688:%.*]] = icmp sgt i64 [[TMP1856]], [[TMP1857]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3688]], label [[COND_TRUE3690:%.*]], label [[COND_FALSE3691:%.*]]
// SIMD-ONLY0:       cond.true3690:
// SIMD-ONLY0-NEXT:    [[TMP1858:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3692:%.*]]
// SIMD-ONLY0:       cond.false3691:
// SIMD-ONLY0-NEXT:    [[TMP1859:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3692]]
// SIMD-ONLY0:       cond.end3692:
// SIMD-ONLY0-NEXT:    [[COND3693:%.*]] = phi i64 [ [[TMP1858]], [[COND_TRUE3690]] ], [ [[TMP1859]], [[COND_FALSE3691]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3693]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1860:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1861:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3694:%.*]] = icmp slt i64 [[TMP1860]], [[TMP1861]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3694]], label [[COND_TRUE3696:%.*]], label [[COND_FALSE3697:%.*]]
// SIMD-ONLY0:       cond.true3696:
// SIMD-ONLY0-NEXT:    [[TMP1862:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3698:%.*]]
// SIMD-ONLY0:       cond.false3697:
// SIMD-ONLY0-NEXT:    [[TMP1863:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3698]]
// SIMD-ONLY0:       cond.end3698:
// SIMD-ONLY0-NEXT:    [[COND3699:%.*]] = phi i64 [ [[TMP1862]], [[COND_TRUE3696]] ], [ [[TMP1863]], [[COND_FALSE3697]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3699]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1864:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1865:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3700:%.*]] = icmp sgt i64 [[TMP1864]], [[TMP1865]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3700]], label [[IF_THEN3702:%.*]], label [[IF_END3703:%.*]]
// SIMD-ONLY0:       if.then3702:
// SIMD-ONLY0-NEXT:    [[TMP1866:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1866]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3703]]
// SIMD-ONLY0:       if.end3703:
// SIMD-ONLY0-NEXT:    [[TMP1867:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1868:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3704:%.*]] = icmp slt i64 [[TMP1867]], [[TMP1868]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3704]], label [[IF_THEN3706:%.*]], label [[IF_END3707:%.*]]
// SIMD-ONLY0:       if.then3706:
// SIMD-ONLY0-NEXT:    [[TMP1869:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1869]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3707]]
// SIMD-ONLY0:       if.end3707:
// SIMD-ONLY0-NEXT:    [[TMP1870:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1871:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3708:%.*]] = icmp sgt i64 [[TMP1870]], [[TMP1871]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3708]], label [[IF_THEN3710:%.*]], label [[IF_END3711:%.*]]
// SIMD-ONLY0:       if.then3710:
// SIMD-ONLY0-NEXT:    [[TMP1872:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1872]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3711]]
// SIMD-ONLY0:       if.end3711:
// SIMD-ONLY0-NEXT:    [[TMP1873:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1874:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3712:%.*]] = icmp slt i64 [[TMP1873]], [[TMP1874]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3712]], label [[IF_THEN3714:%.*]], label [[IF_END3715:%.*]]
// SIMD-ONLY0:       if.then3714:
// SIMD-ONLY0-NEXT:    [[TMP1875:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1875]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3715]]
// SIMD-ONLY0:       if.end3715:
// SIMD-ONLY0-NEXT:    [[TMP1876:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1877:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3716:%.*]] = icmp eq i64 [[TMP1876]], [[TMP1877]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3716]], label [[COND_TRUE3718:%.*]], label [[COND_FALSE3719:%.*]]
// SIMD-ONLY0:       cond.true3718:
// SIMD-ONLY0-NEXT:    [[TMP1878:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3720:%.*]]
// SIMD-ONLY0:       cond.false3719:
// SIMD-ONLY0-NEXT:    [[TMP1879:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3720]]
// SIMD-ONLY0:       cond.end3720:
// SIMD-ONLY0-NEXT:    [[COND3721:%.*]] = phi i64 [ [[TMP1878]], [[COND_TRUE3718]] ], [ [[TMP1879]], [[COND_FALSE3719]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3721]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1880:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1881:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3722:%.*]] = icmp eq i64 [[TMP1880]], [[TMP1881]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3722]], label [[COND_TRUE3724:%.*]], label [[COND_FALSE3725:%.*]]
// SIMD-ONLY0:       cond.true3724:
// SIMD-ONLY0-NEXT:    [[TMP1882:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3726:%.*]]
// SIMD-ONLY0:       cond.false3725:
// SIMD-ONLY0-NEXT:    [[TMP1883:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3726]]
// SIMD-ONLY0:       cond.end3726:
// SIMD-ONLY0-NEXT:    [[COND3727:%.*]] = phi i64 [ [[TMP1882]], [[COND_TRUE3724]] ], [ [[TMP1883]], [[COND_FALSE3725]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3727]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1884:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1885:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3728:%.*]] = icmp eq i64 [[TMP1884]], [[TMP1885]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3728]], label [[IF_THEN3730:%.*]], label [[IF_END3731:%.*]]
// SIMD-ONLY0:       if.then3730:
// SIMD-ONLY0-NEXT:    [[TMP1886:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1886]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3731]]
// SIMD-ONLY0:       if.end3731:
// SIMD-ONLY0-NEXT:    [[TMP1887:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1888:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3732:%.*]] = icmp eq i64 [[TMP1887]], [[TMP1888]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3732]], label [[IF_THEN3734:%.*]], label [[IF_END3735:%.*]]
// SIMD-ONLY0:       if.then3734:
// SIMD-ONLY0-NEXT:    [[TMP1889:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1889]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3735]]
// SIMD-ONLY0:       if.end3735:
// SIMD-ONLY0-NEXT:    [[TMP1890:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1891:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3736:%.*]] = icmp ugt i64 [[TMP1890]], [[TMP1891]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3736]], label [[COND_TRUE3738:%.*]], label [[COND_FALSE3739:%.*]]
// SIMD-ONLY0:       cond.true3738:
// SIMD-ONLY0-NEXT:    [[TMP1892:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3740:%.*]]
// SIMD-ONLY0:       cond.false3739:
// SIMD-ONLY0-NEXT:    [[TMP1893:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3740]]
// SIMD-ONLY0:       cond.end3740:
// SIMD-ONLY0-NEXT:    [[COND3741:%.*]] = phi i64 [ [[TMP1892]], [[COND_TRUE3738]] ], [ [[TMP1893]], [[COND_FALSE3739]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3741]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1894:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1895:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3742:%.*]] = icmp ult i64 [[TMP1894]], [[TMP1895]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3742]], label [[COND_TRUE3744:%.*]], label [[COND_FALSE3745:%.*]]
// SIMD-ONLY0:       cond.true3744:
// SIMD-ONLY0-NEXT:    [[TMP1896:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3746:%.*]]
// SIMD-ONLY0:       cond.false3745:
// SIMD-ONLY0-NEXT:    [[TMP1897:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3746]]
// SIMD-ONLY0:       cond.end3746:
// SIMD-ONLY0-NEXT:    [[COND3747:%.*]] = phi i64 [ [[TMP1896]], [[COND_TRUE3744]] ], [ [[TMP1897]], [[COND_FALSE3745]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3747]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1898:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1899:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3748:%.*]] = icmp ugt i64 [[TMP1898]], [[TMP1899]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3748]], label [[COND_TRUE3750:%.*]], label [[COND_FALSE3751:%.*]]
// SIMD-ONLY0:       cond.true3750:
// SIMD-ONLY0-NEXT:    [[TMP1900:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3752:%.*]]
// SIMD-ONLY0:       cond.false3751:
// SIMD-ONLY0-NEXT:    [[TMP1901:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3752]]
// SIMD-ONLY0:       cond.end3752:
// SIMD-ONLY0-NEXT:    [[COND3753:%.*]] = phi i64 [ [[TMP1900]], [[COND_TRUE3750]] ], [ [[TMP1901]], [[COND_FALSE3751]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3753]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1902:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1903:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3754:%.*]] = icmp ult i64 [[TMP1902]], [[TMP1903]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3754]], label [[COND_TRUE3756:%.*]], label [[COND_FALSE3757:%.*]]
// SIMD-ONLY0:       cond.true3756:
// SIMD-ONLY0-NEXT:    [[TMP1904:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3758:%.*]]
// SIMD-ONLY0:       cond.false3757:
// SIMD-ONLY0-NEXT:    [[TMP1905:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3758]]
// SIMD-ONLY0:       cond.end3758:
// SIMD-ONLY0-NEXT:    [[COND3759:%.*]] = phi i64 [ [[TMP1904]], [[COND_TRUE3756]] ], [ [[TMP1905]], [[COND_FALSE3757]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3759]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1906:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1907:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3760:%.*]] = icmp ugt i64 [[TMP1906]], [[TMP1907]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3760]], label [[IF_THEN3762:%.*]], label [[IF_END3763:%.*]]
// SIMD-ONLY0:       if.then3762:
// SIMD-ONLY0-NEXT:    [[TMP1908:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1908]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3763]]
// SIMD-ONLY0:       if.end3763:
// SIMD-ONLY0-NEXT:    [[TMP1909:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1910:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3764:%.*]] = icmp ult i64 [[TMP1909]], [[TMP1910]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3764]], label [[IF_THEN3766:%.*]], label [[IF_END3767:%.*]]
// SIMD-ONLY0:       if.then3766:
// SIMD-ONLY0-NEXT:    [[TMP1911:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1911]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3767]]
// SIMD-ONLY0:       if.end3767:
// SIMD-ONLY0-NEXT:    [[TMP1912:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1913:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3768:%.*]] = icmp ugt i64 [[TMP1912]], [[TMP1913]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3768]], label [[IF_THEN3770:%.*]], label [[IF_END3771:%.*]]
// SIMD-ONLY0:       if.then3770:
// SIMD-ONLY0-NEXT:    [[TMP1914:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1914]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3771]]
// SIMD-ONLY0:       if.end3771:
// SIMD-ONLY0-NEXT:    [[TMP1915:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1916:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3772:%.*]] = icmp ult i64 [[TMP1915]], [[TMP1916]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3772]], label [[IF_THEN3774:%.*]], label [[IF_END3775:%.*]]
// SIMD-ONLY0:       if.then3774:
// SIMD-ONLY0-NEXT:    [[TMP1917:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1917]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3775]]
// SIMD-ONLY0:       if.end3775:
// SIMD-ONLY0-NEXT:    [[TMP1918:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1919:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3776:%.*]] = icmp eq i64 [[TMP1918]], [[TMP1919]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3776]], label [[COND_TRUE3778:%.*]], label [[COND_FALSE3779:%.*]]
// SIMD-ONLY0:       cond.true3778:
// SIMD-ONLY0-NEXT:    [[TMP1920:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3780:%.*]]
// SIMD-ONLY0:       cond.false3779:
// SIMD-ONLY0-NEXT:    [[TMP1921:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3780]]
// SIMD-ONLY0:       cond.end3780:
// SIMD-ONLY0-NEXT:    [[COND3781:%.*]] = phi i64 [ [[TMP1920]], [[COND_TRUE3778]] ], [ [[TMP1921]], [[COND_FALSE3779]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3781]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1922:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1923:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3782:%.*]] = icmp eq i64 [[TMP1922]], [[TMP1923]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3782]], label [[COND_TRUE3784:%.*]], label [[COND_FALSE3785:%.*]]
// SIMD-ONLY0:       cond.true3784:
// SIMD-ONLY0-NEXT:    [[TMP1924:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3786:%.*]]
// SIMD-ONLY0:       cond.false3785:
// SIMD-ONLY0-NEXT:    [[TMP1925:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3786]]
// SIMD-ONLY0:       cond.end3786:
// SIMD-ONLY0-NEXT:    [[COND3787:%.*]] = phi i64 [ [[TMP1924]], [[COND_TRUE3784]] ], [ [[TMP1925]], [[COND_FALSE3785]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3787]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1926:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1927:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3788:%.*]] = icmp eq i64 [[TMP1926]], [[TMP1927]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3788]], label [[IF_THEN3790:%.*]], label [[IF_END3791:%.*]]
// SIMD-ONLY0:       if.then3790:
// SIMD-ONLY0-NEXT:    [[TMP1928:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1928]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3791]]
// SIMD-ONLY0:       if.end3791:
// SIMD-ONLY0-NEXT:    [[TMP1929:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1930:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3792:%.*]] = icmp eq i64 [[TMP1929]], [[TMP1930]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3792]], label [[IF_THEN3794:%.*]], label [[IF_END3795:%.*]]
// SIMD-ONLY0:       if.then3794:
// SIMD-ONLY0-NEXT:    [[TMP1931:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1931]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3795]]
// SIMD-ONLY0:       if.end3795:
// SIMD-ONLY0-NEXT:    [[TMP1932:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1933:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3796:%.*]] = icmp sgt i64 [[TMP1932]], [[TMP1933]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3796]], label [[COND_TRUE3798:%.*]], label [[COND_FALSE3799:%.*]]
// SIMD-ONLY0:       cond.true3798:
// SIMD-ONLY0-NEXT:    [[TMP1934:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3800:%.*]]
// SIMD-ONLY0:       cond.false3799:
// SIMD-ONLY0-NEXT:    [[TMP1935:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3800]]
// SIMD-ONLY0:       cond.end3800:
// SIMD-ONLY0-NEXT:    [[COND3801:%.*]] = phi i64 [ [[TMP1934]], [[COND_TRUE3798]] ], [ [[TMP1935]], [[COND_FALSE3799]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3801]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1936:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1937:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3802:%.*]] = icmp slt i64 [[TMP1936]], [[TMP1937]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3802]], label [[COND_TRUE3804:%.*]], label [[COND_FALSE3805:%.*]]
// SIMD-ONLY0:       cond.true3804:
// SIMD-ONLY0-NEXT:    [[TMP1938:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3806:%.*]]
// SIMD-ONLY0:       cond.false3805:
// SIMD-ONLY0-NEXT:    [[TMP1939:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3806]]
// SIMD-ONLY0:       cond.end3806:
// SIMD-ONLY0-NEXT:    [[COND3807:%.*]] = phi i64 [ [[TMP1938]], [[COND_TRUE3804]] ], [ [[TMP1939]], [[COND_FALSE3805]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3807]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1940:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1941:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3808:%.*]] = icmp sgt i64 [[TMP1940]], [[TMP1941]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3808]], label [[COND_TRUE3810:%.*]], label [[COND_FALSE3811:%.*]]
// SIMD-ONLY0:       cond.true3810:
// SIMD-ONLY0-NEXT:    [[TMP1942:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3812:%.*]]
// SIMD-ONLY0:       cond.false3811:
// SIMD-ONLY0-NEXT:    [[TMP1943:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3812]]
// SIMD-ONLY0:       cond.end3812:
// SIMD-ONLY0-NEXT:    [[COND3813:%.*]] = phi i64 [ [[TMP1942]], [[COND_TRUE3810]] ], [ [[TMP1943]], [[COND_FALSE3811]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3813]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1944:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1945:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3814:%.*]] = icmp slt i64 [[TMP1944]], [[TMP1945]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3814]], label [[COND_TRUE3816:%.*]], label [[COND_FALSE3817:%.*]]
// SIMD-ONLY0:       cond.true3816:
// SIMD-ONLY0-NEXT:    [[TMP1946:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3818:%.*]]
// SIMD-ONLY0:       cond.false3817:
// SIMD-ONLY0-NEXT:    [[TMP1947:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3818]]
// SIMD-ONLY0:       cond.end3818:
// SIMD-ONLY0-NEXT:    [[COND3819:%.*]] = phi i64 [ [[TMP1946]], [[COND_TRUE3816]] ], [ [[TMP1947]], [[COND_FALSE3817]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3819]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1948:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1949:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3820:%.*]] = icmp sgt i64 [[TMP1948]], [[TMP1949]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3820]], label [[IF_THEN3822:%.*]], label [[IF_END3823:%.*]]
// SIMD-ONLY0:       if.then3822:
// SIMD-ONLY0-NEXT:    [[TMP1950:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1950]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3823]]
// SIMD-ONLY0:       if.end3823:
// SIMD-ONLY0-NEXT:    [[TMP1951:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1952:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3824:%.*]] = icmp slt i64 [[TMP1951]], [[TMP1952]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3824]], label [[IF_THEN3826:%.*]], label [[IF_END3827:%.*]]
// SIMD-ONLY0:       if.then3826:
// SIMD-ONLY0-NEXT:    [[TMP1953:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1953]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3827]]
// SIMD-ONLY0:       if.end3827:
// SIMD-ONLY0-NEXT:    [[TMP1954:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1955:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3828:%.*]] = icmp sgt i64 [[TMP1954]], [[TMP1955]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3828]], label [[IF_THEN3830:%.*]], label [[IF_END3831:%.*]]
// SIMD-ONLY0:       if.then3830:
// SIMD-ONLY0-NEXT:    [[TMP1956:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1956]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3831]]
// SIMD-ONLY0:       if.end3831:
// SIMD-ONLY0-NEXT:    [[TMP1957:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1958:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3832:%.*]] = icmp slt i64 [[TMP1957]], [[TMP1958]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3832]], label [[IF_THEN3834:%.*]], label [[IF_END3835:%.*]]
// SIMD-ONLY0:       if.then3834:
// SIMD-ONLY0-NEXT:    [[TMP1959:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1959]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3835]]
// SIMD-ONLY0:       if.end3835:
// SIMD-ONLY0-NEXT:    [[TMP1960:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1961:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3836:%.*]] = icmp eq i64 [[TMP1960]], [[TMP1961]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3836]], label [[COND_TRUE3838:%.*]], label [[COND_FALSE3839:%.*]]
// SIMD-ONLY0:       cond.true3838:
// SIMD-ONLY0-NEXT:    [[TMP1962:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3840:%.*]]
// SIMD-ONLY0:       cond.false3839:
// SIMD-ONLY0-NEXT:    [[TMP1963:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3840]]
// SIMD-ONLY0:       cond.end3840:
// SIMD-ONLY0-NEXT:    [[COND3841:%.*]] = phi i64 [ [[TMP1962]], [[COND_TRUE3838]] ], [ [[TMP1963]], [[COND_FALSE3839]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3841]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1964:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1965:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3842:%.*]] = icmp eq i64 [[TMP1964]], [[TMP1965]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3842]], label [[COND_TRUE3844:%.*]], label [[COND_FALSE3845:%.*]]
// SIMD-ONLY0:       cond.true3844:
// SIMD-ONLY0-NEXT:    [[TMP1966:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3846:%.*]]
// SIMD-ONLY0:       cond.false3845:
// SIMD-ONLY0-NEXT:    [[TMP1967:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3846]]
// SIMD-ONLY0:       cond.end3846:
// SIMD-ONLY0-NEXT:    [[COND3847:%.*]] = phi i64 [ [[TMP1966]], [[COND_TRUE3844]] ], [ [[TMP1967]], [[COND_FALSE3845]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3847]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1968:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1969:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3848:%.*]] = icmp eq i64 [[TMP1968]], [[TMP1969]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3848]], label [[IF_THEN3850:%.*]], label [[IF_END3851:%.*]]
// SIMD-ONLY0:       if.then3850:
// SIMD-ONLY0-NEXT:    [[TMP1970:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1970]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3851]]
// SIMD-ONLY0:       if.end3851:
// SIMD-ONLY0-NEXT:    [[TMP1971:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1972:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3852:%.*]] = icmp eq i64 [[TMP1971]], [[TMP1972]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3852]], label [[IF_THEN3854:%.*]], label [[IF_END3855:%.*]]
// SIMD-ONLY0:       if.then3854:
// SIMD-ONLY0-NEXT:    [[TMP1973:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1973]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3855]]
// SIMD-ONLY0:       if.end3855:
// SIMD-ONLY0-NEXT:    [[TMP1974:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1975:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3856:%.*]] = icmp ugt i64 [[TMP1974]], [[TMP1975]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3856]], label [[COND_TRUE3858:%.*]], label [[COND_FALSE3859:%.*]]
// SIMD-ONLY0:       cond.true3858:
// SIMD-ONLY0-NEXT:    [[TMP1976:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3860:%.*]]
// SIMD-ONLY0:       cond.false3859:
// SIMD-ONLY0-NEXT:    [[TMP1977:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3860]]
// SIMD-ONLY0:       cond.end3860:
// SIMD-ONLY0-NEXT:    [[COND3861:%.*]] = phi i64 [ [[TMP1976]], [[COND_TRUE3858]] ], [ [[TMP1977]], [[COND_FALSE3859]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3861]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1978:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1979:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3862:%.*]] = icmp ult i64 [[TMP1978]], [[TMP1979]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3862]], label [[COND_TRUE3864:%.*]], label [[COND_FALSE3865:%.*]]
// SIMD-ONLY0:       cond.true3864:
// SIMD-ONLY0-NEXT:    [[TMP1980:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3866:%.*]]
// SIMD-ONLY0:       cond.false3865:
// SIMD-ONLY0-NEXT:    [[TMP1981:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3866]]
// SIMD-ONLY0:       cond.end3866:
// SIMD-ONLY0-NEXT:    [[COND3867:%.*]] = phi i64 [ [[TMP1980]], [[COND_TRUE3864]] ], [ [[TMP1981]], [[COND_FALSE3865]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3867]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1982:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1983:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3868:%.*]] = icmp ugt i64 [[TMP1982]], [[TMP1983]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3868]], label [[COND_TRUE3870:%.*]], label [[COND_FALSE3871:%.*]]
// SIMD-ONLY0:       cond.true3870:
// SIMD-ONLY0-NEXT:    [[TMP1984:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3872:%.*]]
// SIMD-ONLY0:       cond.false3871:
// SIMD-ONLY0-NEXT:    [[TMP1985:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3872]]
// SIMD-ONLY0:       cond.end3872:
// SIMD-ONLY0-NEXT:    [[COND3873:%.*]] = phi i64 [ [[TMP1984]], [[COND_TRUE3870]] ], [ [[TMP1985]], [[COND_FALSE3871]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3873]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1986:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1987:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3874:%.*]] = icmp ult i64 [[TMP1986]], [[TMP1987]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3874]], label [[COND_TRUE3876:%.*]], label [[COND_FALSE3877:%.*]]
// SIMD-ONLY0:       cond.true3876:
// SIMD-ONLY0-NEXT:    [[TMP1988:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3878:%.*]]
// SIMD-ONLY0:       cond.false3877:
// SIMD-ONLY0-NEXT:    [[TMP1989:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3878]]
// SIMD-ONLY0:       cond.end3878:
// SIMD-ONLY0-NEXT:    [[COND3879:%.*]] = phi i64 [ [[TMP1988]], [[COND_TRUE3876]] ], [ [[TMP1989]], [[COND_FALSE3877]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3879]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1990:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1991:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3880:%.*]] = icmp ugt i64 [[TMP1990]], [[TMP1991]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3880]], label [[IF_THEN3882:%.*]], label [[IF_END3883:%.*]]
// SIMD-ONLY0:       if.then3882:
// SIMD-ONLY0-NEXT:    [[TMP1992:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1992]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3883]]
// SIMD-ONLY0:       if.end3883:
// SIMD-ONLY0-NEXT:    [[TMP1993:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1994:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3884:%.*]] = icmp ult i64 [[TMP1993]], [[TMP1994]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3884]], label [[IF_THEN3886:%.*]], label [[IF_END3887:%.*]]
// SIMD-ONLY0:       if.then3886:
// SIMD-ONLY0-NEXT:    [[TMP1995:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1995]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3887]]
// SIMD-ONLY0:       if.end3887:
// SIMD-ONLY0-NEXT:    [[TMP1996:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1997:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3888:%.*]] = icmp ugt i64 [[TMP1996]], [[TMP1997]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3888]], label [[IF_THEN3890:%.*]], label [[IF_END3891:%.*]]
// SIMD-ONLY0:       if.then3890:
// SIMD-ONLY0-NEXT:    [[TMP1998:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1998]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3891]]
// SIMD-ONLY0:       if.end3891:
// SIMD-ONLY0-NEXT:    [[TMP1999:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2000:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3892:%.*]] = icmp ult i64 [[TMP1999]], [[TMP2000]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3892]], label [[IF_THEN3894:%.*]], label [[IF_END3895:%.*]]
// SIMD-ONLY0:       if.then3894:
// SIMD-ONLY0-NEXT:    [[TMP2001:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2001]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3895]]
// SIMD-ONLY0:       if.end3895:
// SIMD-ONLY0-NEXT:    [[TMP2002:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2003:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3896:%.*]] = icmp eq i64 [[TMP2002]], [[TMP2003]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3896]], label [[COND_TRUE3898:%.*]], label [[COND_FALSE3899:%.*]]
// SIMD-ONLY0:       cond.true3898:
// SIMD-ONLY0-NEXT:    [[TMP2004:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3900:%.*]]
// SIMD-ONLY0:       cond.false3899:
// SIMD-ONLY0-NEXT:    [[TMP2005:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3900]]
// SIMD-ONLY0:       cond.end3900:
// SIMD-ONLY0-NEXT:    [[COND3901:%.*]] = phi i64 [ [[TMP2004]], [[COND_TRUE3898]] ], [ [[TMP2005]], [[COND_FALSE3899]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3901]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2006:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2007:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3902:%.*]] = icmp eq i64 [[TMP2006]], [[TMP2007]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3902]], label [[COND_TRUE3904:%.*]], label [[COND_FALSE3905:%.*]]
// SIMD-ONLY0:       cond.true3904:
// SIMD-ONLY0-NEXT:    [[TMP2008:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3906:%.*]]
// SIMD-ONLY0:       cond.false3905:
// SIMD-ONLY0-NEXT:    [[TMP2009:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3906]]
// SIMD-ONLY0:       cond.end3906:
// SIMD-ONLY0-NEXT:    [[COND3907:%.*]] = phi i64 [ [[TMP2008]], [[COND_TRUE3904]] ], [ [[TMP2009]], [[COND_FALSE3905]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3907]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2010:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2011:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3908:%.*]] = icmp eq i64 [[TMP2010]], [[TMP2011]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3908]], label [[IF_THEN3910:%.*]], label [[IF_END3911:%.*]]
// SIMD-ONLY0:       if.then3910:
// SIMD-ONLY0-NEXT:    [[TMP2012:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2012]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3911]]
// SIMD-ONLY0:       if.end3911:
// SIMD-ONLY0-NEXT:    [[TMP2013:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2014:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3912:%.*]] = icmp eq i64 [[TMP2013]], [[TMP2014]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3912]], label [[IF_THEN3914:%.*]], label [[IF_END3915:%.*]]
// SIMD-ONLY0:       if.then3914:
// SIMD-ONLY0-NEXT:    [[TMP2015:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2015]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3915]]
// SIMD-ONLY0:       if.end3915:
// SIMD-ONLY0-NEXT:    [[TMP2016:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2017:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3916:%.*]] = icmp sgt i64 [[TMP2016]], [[TMP2017]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3916]], label [[COND_TRUE3918:%.*]], label [[COND_FALSE3919:%.*]]
// SIMD-ONLY0:       cond.true3918:
// SIMD-ONLY0-NEXT:    [[TMP2018:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3920:%.*]]
// SIMD-ONLY0:       cond.false3919:
// SIMD-ONLY0-NEXT:    [[TMP2019:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3920]]
// SIMD-ONLY0:       cond.end3920:
// SIMD-ONLY0-NEXT:    [[COND3921:%.*]] = phi i64 [ [[TMP2018]], [[COND_TRUE3918]] ], [ [[TMP2019]], [[COND_FALSE3919]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3921]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2020:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2021:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3922:%.*]] = icmp slt i64 [[TMP2020]], [[TMP2021]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3922]], label [[COND_TRUE3924:%.*]], label [[COND_FALSE3925:%.*]]
// SIMD-ONLY0:       cond.true3924:
// SIMD-ONLY0-NEXT:    [[TMP2022:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3926:%.*]]
// SIMD-ONLY0:       cond.false3925:
// SIMD-ONLY0-NEXT:    [[TMP2023:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3926]]
// SIMD-ONLY0:       cond.end3926:
// SIMD-ONLY0-NEXT:    [[COND3927:%.*]] = phi i64 [ [[TMP2022]], [[COND_TRUE3924]] ], [ [[TMP2023]], [[COND_FALSE3925]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3927]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2024:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2025:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3928:%.*]] = icmp sgt i64 [[TMP2024]], [[TMP2025]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3928]], label [[COND_TRUE3930:%.*]], label [[COND_FALSE3931:%.*]]
// SIMD-ONLY0:       cond.true3930:
// SIMD-ONLY0-NEXT:    [[TMP2026:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3932:%.*]]
// SIMD-ONLY0:       cond.false3931:
// SIMD-ONLY0-NEXT:    [[TMP2027:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3932]]
// SIMD-ONLY0:       cond.end3932:
// SIMD-ONLY0-NEXT:    [[COND3933:%.*]] = phi i64 [ [[TMP2026]], [[COND_TRUE3930]] ], [ [[TMP2027]], [[COND_FALSE3931]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3933]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2028:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2029:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3934:%.*]] = icmp slt i64 [[TMP2028]], [[TMP2029]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3934]], label [[COND_TRUE3936:%.*]], label [[COND_FALSE3937:%.*]]
// SIMD-ONLY0:       cond.true3936:
// SIMD-ONLY0-NEXT:    [[TMP2030:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3938:%.*]]
// SIMD-ONLY0:       cond.false3937:
// SIMD-ONLY0-NEXT:    [[TMP2031:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3938]]
// SIMD-ONLY0:       cond.end3938:
// SIMD-ONLY0-NEXT:    [[COND3939:%.*]] = phi i64 [ [[TMP2030]], [[COND_TRUE3936]] ], [ [[TMP2031]], [[COND_FALSE3937]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3939]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2032:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2033:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3940:%.*]] = icmp sgt i64 [[TMP2032]], [[TMP2033]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3940]], label [[IF_THEN3942:%.*]], label [[IF_END3943:%.*]]
// SIMD-ONLY0:       if.then3942:
// SIMD-ONLY0-NEXT:    [[TMP2034:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2034]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3943]]
// SIMD-ONLY0:       if.end3943:
// SIMD-ONLY0-NEXT:    [[TMP2035:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2036:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3944:%.*]] = icmp slt i64 [[TMP2035]], [[TMP2036]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3944]], label [[IF_THEN3946:%.*]], label [[IF_END3947:%.*]]
// SIMD-ONLY0:       if.then3946:
// SIMD-ONLY0-NEXT:    [[TMP2037:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2037]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3947]]
// SIMD-ONLY0:       if.end3947:
// SIMD-ONLY0-NEXT:    [[TMP2038:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2039:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3948:%.*]] = icmp sgt i64 [[TMP2038]], [[TMP2039]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3948]], label [[IF_THEN3950:%.*]], label [[IF_END3951:%.*]]
// SIMD-ONLY0:       if.then3950:
// SIMD-ONLY0-NEXT:    [[TMP2040:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2040]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3951]]
// SIMD-ONLY0:       if.end3951:
// SIMD-ONLY0-NEXT:    [[TMP2041:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2042:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3952:%.*]] = icmp slt i64 [[TMP2041]], [[TMP2042]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3952]], label [[IF_THEN3954:%.*]], label [[IF_END3955:%.*]]
// SIMD-ONLY0:       if.then3954:
// SIMD-ONLY0-NEXT:    [[TMP2043:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2043]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3955]]
// SIMD-ONLY0:       if.end3955:
// SIMD-ONLY0-NEXT:    [[TMP2044:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2045:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3956:%.*]] = icmp eq i64 [[TMP2044]], [[TMP2045]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3956]], label [[COND_TRUE3958:%.*]], label [[COND_FALSE3959:%.*]]
// SIMD-ONLY0:       cond.true3958:
// SIMD-ONLY0-NEXT:    [[TMP2046:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3960:%.*]]
// SIMD-ONLY0:       cond.false3959:
// SIMD-ONLY0-NEXT:    [[TMP2047:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3960]]
// SIMD-ONLY0:       cond.end3960:
// SIMD-ONLY0-NEXT:    [[COND3961:%.*]] = phi i64 [ [[TMP2046]], [[COND_TRUE3958]] ], [ [[TMP2047]], [[COND_FALSE3959]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3961]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2048:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2049:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3962:%.*]] = icmp eq i64 [[TMP2048]], [[TMP2049]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3962]], label [[COND_TRUE3964:%.*]], label [[COND_FALSE3965:%.*]]
// SIMD-ONLY0:       cond.true3964:
// SIMD-ONLY0-NEXT:    [[TMP2050:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3966:%.*]]
// SIMD-ONLY0:       cond.false3965:
// SIMD-ONLY0-NEXT:    [[TMP2051:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3966]]
// SIMD-ONLY0:       cond.end3966:
// SIMD-ONLY0-NEXT:    [[COND3967:%.*]] = phi i64 [ [[TMP2050]], [[COND_TRUE3964]] ], [ [[TMP2051]], [[COND_FALSE3965]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3967]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2052:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2053:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3968:%.*]] = icmp eq i64 [[TMP2052]], [[TMP2053]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3968]], label [[IF_THEN3970:%.*]], label [[IF_END3971:%.*]]
// SIMD-ONLY0:       if.then3970:
// SIMD-ONLY0-NEXT:    [[TMP2054:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2054]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3971]]
// SIMD-ONLY0:       if.end3971:
// SIMD-ONLY0-NEXT:    [[TMP2055:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2056:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3972:%.*]] = icmp eq i64 [[TMP2055]], [[TMP2056]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3972]], label [[IF_THEN3974:%.*]], label [[IF_END3975:%.*]]
// SIMD-ONLY0:       if.then3974:
// SIMD-ONLY0-NEXT:    [[TMP2057:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2057]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3975]]
// SIMD-ONLY0:       if.end3975:
// SIMD-ONLY0-NEXT:    [[TMP2058:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2059:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3976:%.*]] = icmp ugt i64 [[TMP2058]], [[TMP2059]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3976]], label [[COND_TRUE3978:%.*]], label [[COND_FALSE3979:%.*]]
// SIMD-ONLY0:       cond.true3978:
// SIMD-ONLY0-NEXT:    [[TMP2060:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3980:%.*]]
// SIMD-ONLY0:       cond.false3979:
// SIMD-ONLY0-NEXT:    [[TMP2061:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3980]]
// SIMD-ONLY0:       cond.end3980:
// SIMD-ONLY0-NEXT:    [[COND3981:%.*]] = phi i64 [ [[TMP2060]], [[COND_TRUE3978]] ], [ [[TMP2061]], [[COND_FALSE3979]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3981]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2062:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2063:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3982:%.*]] = icmp ult i64 [[TMP2062]], [[TMP2063]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3982]], label [[COND_TRUE3984:%.*]], label [[COND_FALSE3985:%.*]]
// SIMD-ONLY0:       cond.true3984:
// SIMD-ONLY0-NEXT:    [[TMP2064:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3986:%.*]]
// SIMD-ONLY0:       cond.false3985:
// SIMD-ONLY0-NEXT:    [[TMP2065:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3986]]
// SIMD-ONLY0:       cond.end3986:
// SIMD-ONLY0-NEXT:    [[COND3987:%.*]] = phi i64 [ [[TMP2064]], [[COND_TRUE3984]] ], [ [[TMP2065]], [[COND_FALSE3985]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3987]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2066:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2067:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3988:%.*]] = icmp ugt i64 [[TMP2066]], [[TMP2067]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3988]], label [[COND_TRUE3990:%.*]], label [[COND_FALSE3991:%.*]]
// SIMD-ONLY0:       cond.true3990:
// SIMD-ONLY0-NEXT:    [[TMP2068:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3992:%.*]]
// SIMD-ONLY0:       cond.false3991:
// SIMD-ONLY0-NEXT:    [[TMP2069:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3992]]
// SIMD-ONLY0:       cond.end3992:
// SIMD-ONLY0-NEXT:    [[COND3993:%.*]] = phi i64 [ [[TMP2068]], [[COND_TRUE3990]] ], [ [[TMP2069]], [[COND_FALSE3991]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3993]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2070:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2071:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3994:%.*]] = icmp ult i64 [[TMP2070]], [[TMP2071]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3994]], label [[COND_TRUE3996:%.*]], label [[COND_FALSE3997:%.*]]
// SIMD-ONLY0:       cond.true3996:
// SIMD-ONLY0-NEXT:    [[TMP2072:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3998:%.*]]
// SIMD-ONLY0:       cond.false3997:
// SIMD-ONLY0-NEXT:    [[TMP2073:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3998]]
// SIMD-ONLY0:       cond.end3998:
// SIMD-ONLY0-NEXT:    [[COND3999:%.*]] = phi i64 [ [[TMP2072]], [[COND_TRUE3996]] ], [ [[TMP2073]], [[COND_FALSE3997]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3999]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2074:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2075:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4000:%.*]] = icmp ugt i64 [[TMP2074]], [[TMP2075]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4000]], label [[IF_THEN4002:%.*]], label [[IF_END4003:%.*]]
// SIMD-ONLY0:       if.then4002:
// SIMD-ONLY0-NEXT:    [[TMP2076:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2076]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4003]]
// SIMD-ONLY0:       if.end4003:
// SIMD-ONLY0-NEXT:    [[TMP2077:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2078:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4004:%.*]] = icmp ult i64 [[TMP2077]], [[TMP2078]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4004]], label [[IF_THEN4006:%.*]], label [[IF_END4007:%.*]]
// SIMD-ONLY0:       if.then4006:
// SIMD-ONLY0-NEXT:    [[TMP2079:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2079]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4007]]
// SIMD-ONLY0:       if.end4007:
// SIMD-ONLY0-NEXT:    [[TMP2080:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2081:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4008:%.*]] = icmp ugt i64 [[TMP2080]], [[TMP2081]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4008]], label [[IF_THEN4010:%.*]], label [[IF_END4011:%.*]]
// SIMD-ONLY0:       if.then4010:
// SIMD-ONLY0-NEXT:    [[TMP2082:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2082]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4011]]
// SIMD-ONLY0:       if.end4011:
// SIMD-ONLY0-NEXT:    [[TMP2083:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2084:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4012:%.*]] = icmp ult i64 [[TMP2083]], [[TMP2084]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4012]], label [[IF_THEN4014:%.*]], label [[IF_END4015:%.*]]
// SIMD-ONLY0:       if.then4014:
// SIMD-ONLY0-NEXT:    [[TMP2085:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2085]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4015]]
// SIMD-ONLY0:       if.end4015:
// SIMD-ONLY0-NEXT:    [[TMP2086:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2087:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4016:%.*]] = icmp eq i64 [[TMP2086]], [[TMP2087]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4016]], label [[COND_TRUE4018:%.*]], label [[COND_FALSE4019:%.*]]
// SIMD-ONLY0:       cond.true4018:
// SIMD-ONLY0-NEXT:    [[TMP2088:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4020:%.*]]
// SIMD-ONLY0:       cond.false4019:
// SIMD-ONLY0-NEXT:    [[TMP2089:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4020]]
// SIMD-ONLY0:       cond.end4020:
// SIMD-ONLY0-NEXT:    [[COND4021:%.*]] = phi i64 [ [[TMP2088]], [[COND_TRUE4018]] ], [ [[TMP2089]], [[COND_FALSE4019]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4021]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2090:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2091:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4022:%.*]] = icmp eq i64 [[TMP2090]], [[TMP2091]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4022]], label [[COND_TRUE4024:%.*]], label [[COND_FALSE4025:%.*]]
// SIMD-ONLY0:       cond.true4024:
// SIMD-ONLY0-NEXT:    [[TMP2092:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4026:%.*]]
// SIMD-ONLY0:       cond.false4025:
// SIMD-ONLY0-NEXT:    [[TMP2093:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4026]]
// SIMD-ONLY0:       cond.end4026:
// SIMD-ONLY0-NEXT:    [[COND4027:%.*]] = phi i64 [ [[TMP2092]], [[COND_TRUE4024]] ], [ [[TMP2093]], [[COND_FALSE4025]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4027]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2094:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2095:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4028:%.*]] = icmp eq i64 [[TMP2094]], [[TMP2095]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4028]], label [[IF_THEN4030:%.*]], label [[IF_END4031:%.*]]
// SIMD-ONLY0:       if.then4030:
// SIMD-ONLY0-NEXT:    [[TMP2096:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2096]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4031]]
// SIMD-ONLY0:       if.end4031:
// SIMD-ONLY0-NEXT:    [[TMP2097:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2098:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4032:%.*]] = icmp eq i64 [[TMP2097]], [[TMP2098]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4032]], label [[IF_THEN4034:%.*]], label [[IF_END4035:%.*]]
// SIMD-ONLY0:       if.then4034:
// SIMD-ONLY0-NEXT:    [[TMP2099:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2099]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4035]]
// SIMD-ONLY0:       if.end4035:
// SIMD-ONLY0-NEXT:    [[TMP2100:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2101:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4036:%.*]] = icmp sgt i64 [[TMP2100]], [[TMP2101]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4036]], label [[COND_TRUE4038:%.*]], label [[COND_FALSE4039:%.*]]
// SIMD-ONLY0:       cond.true4038:
// SIMD-ONLY0-NEXT:    [[TMP2102:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4040:%.*]]
// SIMD-ONLY0:       cond.false4039:
// SIMD-ONLY0-NEXT:    [[TMP2103:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4040]]
// SIMD-ONLY0:       cond.end4040:
// SIMD-ONLY0-NEXT:    [[COND4041:%.*]] = phi i64 [ [[TMP2102]], [[COND_TRUE4038]] ], [ [[TMP2103]], [[COND_FALSE4039]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4041]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2104:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2105:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4042:%.*]] = icmp slt i64 [[TMP2104]], [[TMP2105]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4042]], label [[COND_TRUE4044:%.*]], label [[COND_FALSE4045:%.*]]
// SIMD-ONLY0:       cond.true4044:
// SIMD-ONLY0-NEXT:    [[TMP2106:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4046:%.*]]
// SIMD-ONLY0:       cond.false4045:
// SIMD-ONLY0-NEXT:    [[TMP2107:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4046]]
// SIMD-ONLY0:       cond.end4046:
// SIMD-ONLY0-NEXT:    [[COND4047:%.*]] = phi i64 [ [[TMP2106]], [[COND_TRUE4044]] ], [ [[TMP2107]], [[COND_FALSE4045]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4047]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2108:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2109:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4048:%.*]] = icmp sgt i64 [[TMP2108]], [[TMP2109]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4048]], label [[COND_TRUE4050:%.*]], label [[COND_FALSE4051:%.*]]
// SIMD-ONLY0:       cond.true4050:
// SIMD-ONLY0-NEXT:    [[TMP2110:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4052:%.*]]
// SIMD-ONLY0:       cond.false4051:
// SIMD-ONLY0-NEXT:    [[TMP2111:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4052]]
// SIMD-ONLY0:       cond.end4052:
// SIMD-ONLY0-NEXT:    [[COND4053:%.*]] = phi i64 [ [[TMP2110]], [[COND_TRUE4050]] ], [ [[TMP2111]], [[COND_FALSE4051]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4053]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2112:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2113:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4054:%.*]] = icmp slt i64 [[TMP2112]], [[TMP2113]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4054]], label [[COND_TRUE4056:%.*]], label [[COND_FALSE4057:%.*]]
// SIMD-ONLY0:       cond.true4056:
// SIMD-ONLY0-NEXT:    [[TMP2114:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4058:%.*]]
// SIMD-ONLY0:       cond.false4057:
// SIMD-ONLY0-NEXT:    [[TMP2115:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4058]]
// SIMD-ONLY0:       cond.end4058:
// SIMD-ONLY0-NEXT:    [[COND4059:%.*]] = phi i64 [ [[TMP2114]], [[COND_TRUE4056]] ], [ [[TMP2115]], [[COND_FALSE4057]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4059]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2116:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2117:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4060:%.*]] = icmp sgt i64 [[TMP2116]], [[TMP2117]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4060]], label [[IF_THEN4062:%.*]], label [[IF_END4063:%.*]]
// SIMD-ONLY0:       if.then4062:
// SIMD-ONLY0-NEXT:    [[TMP2118:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2118]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4063]]
// SIMD-ONLY0:       if.end4063:
// SIMD-ONLY0-NEXT:    [[TMP2119:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2120:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4064:%.*]] = icmp slt i64 [[TMP2119]], [[TMP2120]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4064]], label [[IF_THEN4066:%.*]], label [[IF_END4067:%.*]]
// SIMD-ONLY0:       if.then4066:
// SIMD-ONLY0-NEXT:    [[TMP2121:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2121]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4067]]
// SIMD-ONLY0:       if.end4067:
// SIMD-ONLY0-NEXT:    [[TMP2122:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2123:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4068:%.*]] = icmp sgt i64 [[TMP2122]], [[TMP2123]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4068]], label [[IF_THEN4070:%.*]], label [[IF_END4071:%.*]]
// SIMD-ONLY0:       if.then4070:
// SIMD-ONLY0-NEXT:    [[TMP2124:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2124]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4071]]
// SIMD-ONLY0:       if.end4071:
// SIMD-ONLY0-NEXT:    [[TMP2125:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2126:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4072:%.*]] = icmp slt i64 [[TMP2125]], [[TMP2126]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4072]], label [[IF_THEN4074:%.*]], label [[IF_END4075:%.*]]
// SIMD-ONLY0:       if.then4074:
// SIMD-ONLY0-NEXT:    [[TMP2127:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2127]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4075]]
// SIMD-ONLY0:       if.end4075:
// SIMD-ONLY0-NEXT:    [[TMP2128:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2129:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4076:%.*]] = icmp eq i64 [[TMP2128]], [[TMP2129]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4076]], label [[COND_TRUE4078:%.*]], label [[COND_FALSE4079:%.*]]
// SIMD-ONLY0:       cond.true4078:
// SIMD-ONLY0-NEXT:    [[TMP2130:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4080:%.*]]
// SIMD-ONLY0:       cond.false4079:
// SIMD-ONLY0-NEXT:    [[TMP2131:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4080]]
// SIMD-ONLY0:       cond.end4080:
// SIMD-ONLY0-NEXT:    [[COND4081:%.*]] = phi i64 [ [[TMP2130]], [[COND_TRUE4078]] ], [ [[TMP2131]], [[COND_FALSE4079]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4081]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2132:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2133:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4082:%.*]] = icmp eq i64 [[TMP2132]], [[TMP2133]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4082]], label [[COND_TRUE4084:%.*]], label [[COND_FALSE4085:%.*]]
// SIMD-ONLY0:       cond.true4084:
// SIMD-ONLY0-NEXT:    [[TMP2134:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4086:%.*]]
// SIMD-ONLY0:       cond.false4085:
// SIMD-ONLY0-NEXT:    [[TMP2135:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4086]]
// SIMD-ONLY0:       cond.end4086:
// SIMD-ONLY0-NEXT:    [[COND4087:%.*]] = phi i64 [ [[TMP2134]], [[COND_TRUE4084]] ], [ [[TMP2135]], [[COND_FALSE4085]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4087]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2136:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2137:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4088:%.*]] = icmp eq i64 [[TMP2136]], [[TMP2137]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4088]], label [[IF_THEN4090:%.*]], label [[IF_END4091:%.*]]
// SIMD-ONLY0:       if.then4090:
// SIMD-ONLY0-NEXT:    [[TMP2138:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2138]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4091]]
// SIMD-ONLY0:       if.end4091:
// SIMD-ONLY0-NEXT:    [[TMP2139:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2140:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4092:%.*]] = icmp eq i64 [[TMP2139]], [[TMP2140]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4092]], label [[IF_THEN4094:%.*]], label [[IF_END4095:%.*]]
// SIMD-ONLY0:       if.then4094:
// SIMD-ONLY0-NEXT:    [[TMP2141:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2141]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4095]]
// SIMD-ONLY0:       if.end4095:
// SIMD-ONLY0-NEXT:    [[TMP2142:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2143:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4096:%.*]] = icmp ugt i64 [[TMP2142]], [[TMP2143]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4096]], label [[COND_TRUE4098:%.*]], label [[COND_FALSE4099:%.*]]
// SIMD-ONLY0:       cond.true4098:
// SIMD-ONLY0-NEXT:    [[TMP2144:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4100:%.*]]
// SIMD-ONLY0:       cond.false4099:
// SIMD-ONLY0-NEXT:    [[TMP2145:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4100]]
// SIMD-ONLY0:       cond.end4100:
// SIMD-ONLY0-NEXT:    [[COND4101:%.*]] = phi i64 [ [[TMP2144]], [[COND_TRUE4098]] ], [ [[TMP2145]], [[COND_FALSE4099]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4101]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2146:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2147:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4102:%.*]] = icmp ult i64 [[TMP2146]], [[TMP2147]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4102]], label [[COND_TRUE4104:%.*]], label [[COND_FALSE4105:%.*]]
// SIMD-ONLY0:       cond.true4104:
// SIMD-ONLY0-NEXT:    [[TMP2148:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4106:%.*]]
// SIMD-ONLY0:       cond.false4105:
// SIMD-ONLY0-NEXT:    [[TMP2149:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4106]]
// SIMD-ONLY0:       cond.end4106:
// SIMD-ONLY0-NEXT:    [[COND4107:%.*]] = phi i64 [ [[TMP2148]], [[COND_TRUE4104]] ], [ [[TMP2149]], [[COND_FALSE4105]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4107]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2150:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2151:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4108:%.*]] = icmp ugt i64 [[TMP2150]], [[TMP2151]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4108]], label [[COND_TRUE4110:%.*]], label [[COND_FALSE4111:%.*]]
// SIMD-ONLY0:       cond.true4110:
// SIMD-ONLY0-NEXT:    [[TMP2152:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4112:%.*]]
// SIMD-ONLY0:       cond.false4111:
// SIMD-ONLY0-NEXT:    [[TMP2153:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4112]]
// SIMD-ONLY0:       cond.end4112:
// SIMD-ONLY0-NEXT:    [[COND4113:%.*]] = phi i64 [ [[TMP2152]], [[COND_TRUE4110]] ], [ [[TMP2153]], [[COND_FALSE4111]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4113]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2154:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2155:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4114:%.*]] = icmp ult i64 [[TMP2154]], [[TMP2155]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4114]], label [[COND_TRUE4116:%.*]], label [[COND_FALSE4117:%.*]]
// SIMD-ONLY0:       cond.true4116:
// SIMD-ONLY0-NEXT:    [[TMP2156:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4118:%.*]]
// SIMD-ONLY0:       cond.false4117:
// SIMD-ONLY0-NEXT:    [[TMP2157:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4118]]
// SIMD-ONLY0:       cond.end4118:
// SIMD-ONLY0-NEXT:    [[COND4119:%.*]] = phi i64 [ [[TMP2156]], [[COND_TRUE4116]] ], [ [[TMP2157]], [[COND_FALSE4117]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4119]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2158:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2159:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4120:%.*]] = icmp ugt i64 [[TMP2158]], [[TMP2159]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4120]], label [[IF_THEN4122:%.*]], label [[IF_END4123:%.*]]
// SIMD-ONLY0:       if.then4122:
// SIMD-ONLY0-NEXT:    [[TMP2160:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2160]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4123]]
// SIMD-ONLY0:       if.end4123:
// SIMD-ONLY0-NEXT:    [[TMP2161:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2162:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4124:%.*]] = icmp ult i64 [[TMP2161]], [[TMP2162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4124]], label [[IF_THEN4126:%.*]], label [[IF_END4127:%.*]]
// SIMD-ONLY0:       if.then4126:
// SIMD-ONLY0-NEXT:    [[TMP2163:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2163]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4127]]
// SIMD-ONLY0:       if.end4127:
// SIMD-ONLY0-NEXT:    [[TMP2164:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2165:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4128:%.*]] = icmp ugt i64 [[TMP2164]], [[TMP2165]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4128]], label [[IF_THEN4130:%.*]], label [[IF_END4131:%.*]]
// SIMD-ONLY0:       if.then4130:
// SIMD-ONLY0-NEXT:    [[TMP2166:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2166]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4131]]
// SIMD-ONLY0:       if.end4131:
// SIMD-ONLY0-NEXT:    [[TMP2167:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2168:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4132:%.*]] = icmp ult i64 [[TMP2167]], [[TMP2168]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4132]], label [[IF_THEN4134:%.*]], label [[IF_END4135:%.*]]
// SIMD-ONLY0:       if.then4134:
// SIMD-ONLY0-NEXT:    [[TMP2169:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2169]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4135]]
// SIMD-ONLY0:       if.end4135:
// SIMD-ONLY0-NEXT:    [[TMP2170:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2171:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4136:%.*]] = icmp eq i64 [[TMP2170]], [[TMP2171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4136]], label [[COND_TRUE4138:%.*]], label [[COND_FALSE4139:%.*]]
// SIMD-ONLY0:       cond.true4138:
// SIMD-ONLY0-NEXT:    [[TMP2172:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4140:%.*]]
// SIMD-ONLY0:       cond.false4139:
// SIMD-ONLY0-NEXT:    [[TMP2173:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4140]]
// SIMD-ONLY0:       cond.end4140:
// SIMD-ONLY0-NEXT:    [[COND4141:%.*]] = phi i64 [ [[TMP2172]], [[COND_TRUE4138]] ], [ [[TMP2173]], [[COND_FALSE4139]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4141]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2174:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2175:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4142:%.*]] = icmp eq i64 [[TMP2174]], [[TMP2175]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4142]], label [[COND_TRUE4144:%.*]], label [[COND_FALSE4145:%.*]]
// SIMD-ONLY0:       cond.true4144:
// SIMD-ONLY0-NEXT:    [[TMP2176:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4146:%.*]]
// SIMD-ONLY0:       cond.false4145:
// SIMD-ONLY0-NEXT:    [[TMP2177:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4146]]
// SIMD-ONLY0:       cond.end4146:
// SIMD-ONLY0-NEXT:    [[COND4147:%.*]] = phi i64 [ [[TMP2176]], [[COND_TRUE4144]] ], [ [[TMP2177]], [[COND_FALSE4145]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4147]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2178:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2179:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4148:%.*]] = icmp eq i64 [[TMP2178]], [[TMP2179]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4148]], label [[IF_THEN4150:%.*]], label [[IF_END4151:%.*]]
// SIMD-ONLY0:       if.then4150:
// SIMD-ONLY0-NEXT:    [[TMP2180:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2180]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4151]]
// SIMD-ONLY0:       if.end4151:
// SIMD-ONLY0-NEXT:    [[TMP2181:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2182:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4152:%.*]] = icmp eq i64 [[TMP2181]], [[TMP2182]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4152]], label [[IF_THEN4154:%.*]], label [[IF_END4155:%.*]]
// SIMD-ONLY0:       if.then4154:
// SIMD-ONLY0-NEXT:    [[TMP2183:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2183]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4155]]
// SIMD-ONLY0:       if.end4155:
// SIMD-ONLY0-NEXT:    [[TMP2184:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2185:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4156:%.*]] = icmp sgt i64 [[TMP2184]], [[TMP2185]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4156]], label [[COND_TRUE4158:%.*]], label [[COND_FALSE4159:%.*]]
// SIMD-ONLY0:       cond.true4158:
// SIMD-ONLY0-NEXT:    [[TMP2186:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4160:%.*]]
// SIMD-ONLY0:       cond.false4159:
// SIMD-ONLY0-NEXT:    [[TMP2187:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4160]]
// SIMD-ONLY0:       cond.end4160:
// SIMD-ONLY0-NEXT:    [[COND4161:%.*]] = phi i64 [ [[TMP2186]], [[COND_TRUE4158]] ], [ [[TMP2187]], [[COND_FALSE4159]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4161]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2188:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2189:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4162:%.*]] = icmp slt i64 [[TMP2188]], [[TMP2189]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4162]], label [[COND_TRUE4164:%.*]], label [[COND_FALSE4165:%.*]]
// SIMD-ONLY0:       cond.true4164:
// SIMD-ONLY0-NEXT:    [[TMP2190:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4166:%.*]]
// SIMD-ONLY0:       cond.false4165:
// SIMD-ONLY0-NEXT:    [[TMP2191:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4166]]
// SIMD-ONLY0:       cond.end4166:
// SIMD-ONLY0-NEXT:    [[COND4167:%.*]] = phi i64 [ [[TMP2190]], [[COND_TRUE4164]] ], [ [[TMP2191]], [[COND_FALSE4165]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4167]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2192:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2193:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4168:%.*]] = icmp sgt i64 [[TMP2192]], [[TMP2193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4168]], label [[COND_TRUE4170:%.*]], label [[COND_FALSE4171:%.*]]
// SIMD-ONLY0:       cond.true4170:
// SIMD-ONLY0-NEXT:    [[TMP2194:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4172:%.*]]
// SIMD-ONLY0:       cond.false4171:
// SIMD-ONLY0-NEXT:    [[TMP2195:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4172]]
// SIMD-ONLY0:       cond.end4172:
// SIMD-ONLY0-NEXT:    [[COND4173:%.*]] = phi i64 [ [[TMP2194]], [[COND_TRUE4170]] ], [ [[TMP2195]], [[COND_FALSE4171]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4173]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2196:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2197:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4174:%.*]] = icmp slt i64 [[TMP2196]], [[TMP2197]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4174]], label [[COND_TRUE4176:%.*]], label [[COND_FALSE4177:%.*]]
// SIMD-ONLY0:       cond.true4176:
// SIMD-ONLY0-NEXT:    [[TMP2198:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4178:%.*]]
// SIMD-ONLY0:       cond.false4177:
// SIMD-ONLY0-NEXT:    [[TMP2199:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4178]]
// SIMD-ONLY0:       cond.end4178:
// SIMD-ONLY0-NEXT:    [[COND4179:%.*]] = phi i64 [ [[TMP2198]], [[COND_TRUE4176]] ], [ [[TMP2199]], [[COND_FALSE4177]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4179]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2200:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2201:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4180:%.*]] = icmp sgt i64 [[TMP2200]], [[TMP2201]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4180]], label [[IF_THEN4182:%.*]], label [[IF_END4183:%.*]]
// SIMD-ONLY0:       if.then4182:
// SIMD-ONLY0-NEXT:    [[TMP2202:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2202]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4183]]
// SIMD-ONLY0:       if.end4183:
// SIMD-ONLY0-NEXT:    [[TMP2203:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2204:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4184:%.*]] = icmp slt i64 [[TMP2203]], [[TMP2204]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4184]], label [[IF_THEN4186:%.*]], label [[IF_END4187:%.*]]
// SIMD-ONLY0:       if.then4186:
// SIMD-ONLY0-NEXT:    [[TMP2205:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2205]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4187]]
// SIMD-ONLY0:       if.end4187:
// SIMD-ONLY0-NEXT:    [[TMP2206:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2207:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4188:%.*]] = icmp sgt i64 [[TMP2206]], [[TMP2207]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4188]], label [[IF_THEN4190:%.*]], label [[IF_END4191:%.*]]
// SIMD-ONLY0:       if.then4190:
// SIMD-ONLY0-NEXT:    [[TMP2208:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2208]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4191]]
// SIMD-ONLY0:       if.end4191:
// SIMD-ONLY0-NEXT:    [[TMP2209:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2210:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4192:%.*]] = icmp slt i64 [[TMP2209]], [[TMP2210]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4192]], label [[IF_THEN4194:%.*]], label [[IF_END4195:%.*]]
// SIMD-ONLY0:       if.then4194:
// SIMD-ONLY0-NEXT:    [[TMP2211:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2211]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4195]]
// SIMD-ONLY0:       if.end4195:
// SIMD-ONLY0-NEXT:    [[TMP2212:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2213:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4196:%.*]] = icmp eq i64 [[TMP2212]], [[TMP2213]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4196]], label [[COND_TRUE4198:%.*]], label [[COND_FALSE4199:%.*]]
// SIMD-ONLY0:       cond.true4198:
// SIMD-ONLY0-NEXT:    [[TMP2214:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4200:%.*]]
// SIMD-ONLY0:       cond.false4199:
// SIMD-ONLY0-NEXT:    [[TMP2215:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4200]]
// SIMD-ONLY0:       cond.end4200:
// SIMD-ONLY0-NEXT:    [[COND4201:%.*]] = phi i64 [ [[TMP2214]], [[COND_TRUE4198]] ], [ [[TMP2215]], [[COND_FALSE4199]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4201]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2216:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2217:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4202:%.*]] = icmp eq i64 [[TMP2216]], [[TMP2217]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4202]], label [[COND_TRUE4204:%.*]], label [[COND_FALSE4205:%.*]]
// SIMD-ONLY0:       cond.true4204:
// SIMD-ONLY0-NEXT:    [[TMP2218:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4206:%.*]]
// SIMD-ONLY0:       cond.false4205:
// SIMD-ONLY0-NEXT:    [[TMP2219:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4206]]
// SIMD-ONLY0:       cond.end4206:
// SIMD-ONLY0-NEXT:    [[COND4207:%.*]] = phi i64 [ [[TMP2218]], [[COND_TRUE4204]] ], [ [[TMP2219]], [[COND_FALSE4205]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4207]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2220:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2221:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4208:%.*]] = icmp eq i64 [[TMP2220]], [[TMP2221]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4208]], label [[IF_THEN4210:%.*]], label [[IF_END4211:%.*]]
// SIMD-ONLY0:       if.then4210:
// SIMD-ONLY0-NEXT:    [[TMP2222:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2222]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4211]]
// SIMD-ONLY0:       if.end4211:
// SIMD-ONLY0-NEXT:    [[TMP2223:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2224:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4212:%.*]] = icmp eq i64 [[TMP2223]], [[TMP2224]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4212]], label [[IF_THEN4214:%.*]], label [[IF_END4215:%.*]]
// SIMD-ONLY0:       if.then4214:
// SIMD-ONLY0-NEXT:    [[TMP2225:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2225]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4215]]
// SIMD-ONLY0:       if.end4215:
// SIMD-ONLY0-NEXT:    [[TMP2226:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2227:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4216:%.*]] = icmp ugt i64 [[TMP2226]], [[TMP2227]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4216]], label [[COND_TRUE4218:%.*]], label [[COND_FALSE4219:%.*]]
// SIMD-ONLY0:       cond.true4218:
// SIMD-ONLY0-NEXT:    [[TMP2228:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4220:%.*]]
// SIMD-ONLY0:       cond.false4219:
// SIMD-ONLY0-NEXT:    [[TMP2229:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4220]]
// SIMD-ONLY0:       cond.end4220:
// SIMD-ONLY0-NEXT:    [[COND4221:%.*]] = phi i64 [ [[TMP2228]], [[COND_TRUE4218]] ], [ [[TMP2229]], [[COND_FALSE4219]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4221]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2230:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2231:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4222:%.*]] = icmp ult i64 [[TMP2230]], [[TMP2231]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4222]], label [[COND_TRUE4224:%.*]], label [[COND_FALSE4225:%.*]]
// SIMD-ONLY0:       cond.true4224:
// SIMD-ONLY0-NEXT:    [[TMP2232:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4226:%.*]]
// SIMD-ONLY0:       cond.false4225:
// SIMD-ONLY0-NEXT:    [[TMP2233:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4226]]
// SIMD-ONLY0:       cond.end4226:
// SIMD-ONLY0-NEXT:    [[COND4227:%.*]] = phi i64 [ [[TMP2232]], [[COND_TRUE4224]] ], [ [[TMP2233]], [[COND_FALSE4225]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4227]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2234:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2235:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4228:%.*]] = icmp ugt i64 [[TMP2234]], [[TMP2235]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4228]], label [[COND_TRUE4230:%.*]], label [[COND_FALSE4231:%.*]]
// SIMD-ONLY0:       cond.true4230:
// SIMD-ONLY0-NEXT:    [[TMP2236:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4232:%.*]]
// SIMD-ONLY0:       cond.false4231:
// SIMD-ONLY0-NEXT:    [[TMP2237:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4232]]
// SIMD-ONLY0:       cond.end4232:
// SIMD-ONLY0-NEXT:    [[COND4233:%.*]] = phi i64 [ [[TMP2236]], [[COND_TRUE4230]] ], [ [[TMP2237]], [[COND_FALSE4231]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4233]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2238:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2239:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4234:%.*]] = icmp ult i64 [[TMP2238]], [[TMP2239]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4234]], label [[COND_TRUE4236:%.*]], label [[COND_FALSE4237:%.*]]
// SIMD-ONLY0:       cond.true4236:
// SIMD-ONLY0-NEXT:    [[TMP2240:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4238:%.*]]
// SIMD-ONLY0:       cond.false4237:
// SIMD-ONLY0-NEXT:    [[TMP2241:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4238]]
// SIMD-ONLY0:       cond.end4238:
// SIMD-ONLY0-NEXT:    [[COND4239:%.*]] = phi i64 [ [[TMP2240]], [[COND_TRUE4236]] ], [ [[TMP2241]], [[COND_FALSE4237]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4239]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2242:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2243:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4240:%.*]] = icmp ugt i64 [[TMP2242]], [[TMP2243]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4240]], label [[IF_THEN4242:%.*]], label [[IF_END4243:%.*]]
// SIMD-ONLY0:       if.then4242:
// SIMD-ONLY0-NEXT:    [[TMP2244:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2244]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4243]]
// SIMD-ONLY0:       if.end4243:
// SIMD-ONLY0-NEXT:    [[TMP2245:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2246:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4244:%.*]] = icmp ult i64 [[TMP2245]], [[TMP2246]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4244]], label [[IF_THEN4246:%.*]], label [[IF_END4247:%.*]]
// SIMD-ONLY0:       if.then4246:
// SIMD-ONLY0-NEXT:    [[TMP2247:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2247]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4247]]
// SIMD-ONLY0:       if.end4247:
// SIMD-ONLY0-NEXT:    [[TMP2248:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2249:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4248:%.*]] = icmp ugt i64 [[TMP2248]], [[TMP2249]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4248]], label [[IF_THEN4250:%.*]], label [[IF_END4251:%.*]]
// SIMD-ONLY0:       if.then4250:
// SIMD-ONLY0-NEXT:    [[TMP2250:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2250]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4251]]
// SIMD-ONLY0:       if.end4251:
// SIMD-ONLY0-NEXT:    [[TMP2251:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2252:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4252:%.*]] = icmp ult i64 [[TMP2251]], [[TMP2252]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4252]], label [[IF_THEN4254:%.*]], label [[IF_END4255:%.*]]
// SIMD-ONLY0:       if.then4254:
// SIMD-ONLY0-NEXT:    [[TMP2253:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2253]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4255]]
// SIMD-ONLY0:       if.end4255:
// SIMD-ONLY0-NEXT:    [[TMP2254:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2255:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4256:%.*]] = icmp eq i64 [[TMP2254]], [[TMP2255]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4256]], label [[COND_TRUE4258:%.*]], label [[COND_FALSE4259:%.*]]
// SIMD-ONLY0:       cond.true4258:
// SIMD-ONLY0-NEXT:    [[TMP2256:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4260:%.*]]
// SIMD-ONLY0:       cond.false4259:
// SIMD-ONLY0-NEXT:    [[TMP2257:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4260]]
// SIMD-ONLY0:       cond.end4260:
// SIMD-ONLY0-NEXT:    [[COND4261:%.*]] = phi i64 [ [[TMP2256]], [[COND_TRUE4258]] ], [ [[TMP2257]], [[COND_FALSE4259]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4261]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2258:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2259:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4262:%.*]] = icmp eq i64 [[TMP2258]], [[TMP2259]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4262]], label [[COND_TRUE4264:%.*]], label [[COND_FALSE4265:%.*]]
// SIMD-ONLY0:       cond.true4264:
// SIMD-ONLY0-NEXT:    [[TMP2260:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4266:%.*]]
// SIMD-ONLY0:       cond.false4265:
// SIMD-ONLY0-NEXT:    [[TMP2261:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4266]]
// SIMD-ONLY0:       cond.end4266:
// SIMD-ONLY0-NEXT:    [[COND4267:%.*]] = phi i64 [ [[TMP2260]], [[COND_TRUE4264]] ], [ [[TMP2261]], [[COND_FALSE4265]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4267]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2262:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2263:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4268:%.*]] = icmp eq i64 [[TMP2262]], [[TMP2263]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4268]], label [[IF_THEN4270:%.*]], label [[IF_END4271:%.*]]
// SIMD-ONLY0:       if.then4270:
// SIMD-ONLY0-NEXT:    [[TMP2264:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2264]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4271]]
// SIMD-ONLY0:       if.end4271:
// SIMD-ONLY0-NEXT:    [[TMP2265:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2266:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4272:%.*]] = icmp eq i64 [[TMP2265]], [[TMP2266]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4272]], label [[IF_THEN4274:%.*]], label [[IF_END4275:%.*]]
// SIMD-ONLY0:       if.then4274:
// SIMD-ONLY0-NEXT:    [[TMP2267:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2267]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4275]]
// SIMD-ONLY0:       if.end4275:
// SIMD-ONLY0-NEXT:    [[TMP2268:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2269:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4276:%.*]] = icmp sgt i64 [[TMP2268]], [[TMP2269]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4276]], label [[COND_TRUE4278:%.*]], label [[COND_FALSE4279:%.*]]
// SIMD-ONLY0:       cond.true4278:
// SIMD-ONLY0-NEXT:    [[TMP2270:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4280:%.*]]
// SIMD-ONLY0:       cond.false4279:
// SIMD-ONLY0-NEXT:    [[TMP2271:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4280]]
// SIMD-ONLY0:       cond.end4280:
// SIMD-ONLY0-NEXT:    [[COND4281:%.*]] = phi i64 [ [[TMP2270]], [[COND_TRUE4278]] ], [ [[TMP2271]], [[COND_FALSE4279]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4281]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2272:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2273:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4282:%.*]] = icmp slt i64 [[TMP2272]], [[TMP2273]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4282]], label [[COND_TRUE4284:%.*]], label [[COND_FALSE4285:%.*]]
// SIMD-ONLY0:       cond.true4284:
// SIMD-ONLY0-NEXT:    [[TMP2274:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4286:%.*]]
// SIMD-ONLY0:       cond.false4285:
// SIMD-ONLY0-NEXT:    [[TMP2275:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4286]]
// SIMD-ONLY0:       cond.end4286:
// SIMD-ONLY0-NEXT:    [[COND4287:%.*]] = phi i64 [ [[TMP2274]], [[COND_TRUE4284]] ], [ [[TMP2275]], [[COND_FALSE4285]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4287]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2276:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2277:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4288:%.*]] = icmp sgt i64 [[TMP2276]], [[TMP2277]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4288]], label [[COND_TRUE4290:%.*]], label [[COND_FALSE4291:%.*]]
// SIMD-ONLY0:       cond.true4290:
// SIMD-ONLY0-NEXT:    [[TMP2278:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4292:%.*]]
// SIMD-ONLY0:       cond.false4291:
// SIMD-ONLY0-NEXT:    [[TMP2279:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4292]]
// SIMD-ONLY0:       cond.end4292:
// SIMD-ONLY0-NEXT:    [[COND4293:%.*]] = phi i64 [ [[TMP2278]], [[COND_TRUE4290]] ], [ [[TMP2279]], [[COND_FALSE4291]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4293]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2280:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2281:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4294:%.*]] = icmp slt i64 [[TMP2280]], [[TMP2281]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4294]], label [[COND_TRUE4296:%.*]], label [[COND_FALSE4297:%.*]]
// SIMD-ONLY0:       cond.true4296:
// SIMD-ONLY0-NEXT:    [[TMP2282:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4298:%.*]]
// SIMD-ONLY0:       cond.false4297:
// SIMD-ONLY0-NEXT:    [[TMP2283:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4298]]
// SIMD-ONLY0:       cond.end4298:
// SIMD-ONLY0-NEXT:    [[COND4299:%.*]] = phi i64 [ [[TMP2282]], [[COND_TRUE4296]] ], [ [[TMP2283]], [[COND_FALSE4297]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4299]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2284:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2285:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4300:%.*]] = icmp sgt i64 [[TMP2284]], [[TMP2285]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4300]], label [[IF_THEN4302:%.*]], label [[IF_END4303:%.*]]
// SIMD-ONLY0:       if.then4302:
// SIMD-ONLY0-NEXT:    [[TMP2286:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2286]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4303]]
// SIMD-ONLY0:       if.end4303:
// SIMD-ONLY0-NEXT:    [[TMP2287:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2288:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4304:%.*]] = icmp slt i64 [[TMP2287]], [[TMP2288]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4304]], label [[IF_THEN4306:%.*]], label [[IF_END4307:%.*]]
// SIMD-ONLY0:       if.then4306:
// SIMD-ONLY0-NEXT:    [[TMP2289:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2289]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4307]]
// SIMD-ONLY0:       if.end4307:
// SIMD-ONLY0-NEXT:    [[TMP2290:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2291:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4308:%.*]] = icmp sgt i64 [[TMP2290]], [[TMP2291]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4308]], label [[IF_THEN4310:%.*]], label [[IF_END4311:%.*]]
// SIMD-ONLY0:       if.then4310:
// SIMD-ONLY0-NEXT:    [[TMP2292:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2292]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4311]]
// SIMD-ONLY0:       if.end4311:
// SIMD-ONLY0-NEXT:    [[TMP2293:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2294:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4312:%.*]] = icmp slt i64 [[TMP2293]], [[TMP2294]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4312]], label [[IF_THEN4314:%.*]], label [[IF_END4315:%.*]]
// SIMD-ONLY0:       if.then4314:
// SIMD-ONLY0-NEXT:    [[TMP2295:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2295]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4315]]
// SIMD-ONLY0:       if.end4315:
// SIMD-ONLY0-NEXT:    [[TMP2296:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2297:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4316:%.*]] = icmp eq i64 [[TMP2296]], [[TMP2297]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4316]], label [[COND_TRUE4318:%.*]], label [[COND_FALSE4319:%.*]]
// SIMD-ONLY0:       cond.true4318:
// SIMD-ONLY0-NEXT:    [[TMP2298:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4320:%.*]]
// SIMD-ONLY0:       cond.false4319:
// SIMD-ONLY0-NEXT:    [[TMP2299:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4320]]
// SIMD-ONLY0:       cond.end4320:
// SIMD-ONLY0-NEXT:    [[COND4321:%.*]] = phi i64 [ [[TMP2298]], [[COND_TRUE4318]] ], [ [[TMP2299]], [[COND_FALSE4319]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4321]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2300:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2301:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4322:%.*]] = icmp eq i64 [[TMP2300]], [[TMP2301]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4322]], label [[COND_TRUE4324:%.*]], label [[COND_FALSE4325:%.*]]
// SIMD-ONLY0:       cond.true4324:
// SIMD-ONLY0-NEXT:    [[TMP2302:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4326:%.*]]
// SIMD-ONLY0:       cond.false4325:
// SIMD-ONLY0-NEXT:    [[TMP2303:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4326]]
// SIMD-ONLY0:       cond.end4326:
// SIMD-ONLY0-NEXT:    [[COND4327:%.*]] = phi i64 [ [[TMP2302]], [[COND_TRUE4324]] ], [ [[TMP2303]], [[COND_FALSE4325]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4327]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2304:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2305:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4328:%.*]] = icmp eq i64 [[TMP2304]], [[TMP2305]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4328]], label [[IF_THEN4330:%.*]], label [[IF_END4331:%.*]]
// SIMD-ONLY0:       if.then4330:
// SIMD-ONLY0-NEXT:    [[TMP2306:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2306]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4331]]
// SIMD-ONLY0:       if.end4331:
// SIMD-ONLY0-NEXT:    [[TMP2307:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2308:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4332:%.*]] = icmp eq i64 [[TMP2307]], [[TMP2308]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4332]], label [[IF_THEN4334:%.*]], label [[IF_END4335:%.*]]
// SIMD-ONLY0:       if.then4334:
// SIMD-ONLY0-NEXT:    [[TMP2309:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2309]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4335]]
// SIMD-ONLY0:       if.end4335:
// SIMD-ONLY0-NEXT:    [[TMP2310:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2311:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4336:%.*]] = icmp ugt i64 [[TMP2310]], [[TMP2311]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4336]], label [[COND_TRUE4338:%.*]], label [[COND_FALSE4339:%.*]]
// SIMD-ONLY0:       cond.true4338:
// SIMD-ONLY0-NEXT:    [[TMP2312:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4340:%.*]]
// SIMD-ONLY0:       cond.false4339:
// SIMD-ONLY0-NEXT:    [[TMP2313:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4340]]
// SIMD-ONLY0:       cond.end4340:
// SIMD-ONLY0-NEXT:    [[COND4341:%.*]] = phi i64 [ [[TMP2312]], [[COND_TRUE4338]] ], [ [[TMP2313]], [[COND_FALSE4339]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4341]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2314:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2315:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4342:%.*]] = icmp ult i64 [[TMP2314]], [[TMP2315]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4342]], label [[COND_TRUE4344:%.*]], label [[COND_FALSE4345:%.*]]
// SIMD-ONLY0:       cond.true4344:
// SIMD-ONLY0-NEXT:    [[TMP2316:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4346:%.*]]
// SIMD-ONLY0:       cond.false4345:
// SIMD-ONLY0-NEXT:    [[TMP2317:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4346]]
// SIMD-ONLY0:       cond.end4346:
// SIMD-ONLY0-NEXT:    [[COND4347:%.*]] = phi i64 [ [[TMP2316]], [[COND_TRUE4344]] ], [ [[TMP2317]], [[COND_FALSE4345]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4347]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2318:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2319:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4348:%.*]] = icmp ugt i64 [[TMP2318]], [[TMP2319]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4348]], label [[COND_TRUE4350:%.*]], label [[COND_FALSE4351:%.*]]
// SIMD-ONLY0:       cond.true4350:
// SIMD-ONLY0-NEXT:    [[TMP2320:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4352:%.*]]
// SIMD-ONLY0:       cond.false4351:
// SIMD-ONLY0-NEXT:    [[TMP2321:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4352]]
// SIMD-ONLY0:       cond.end4352:
// SIMD-ONLY0-NEXT:    [[COND4353:%.*]] = phi i64 [ [[TMP2320]], [[COND_TRUE4350]] ], [ [[TMP2321]], [[COND_FALSE4351]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4353]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2322:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2323:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4354:%.*]] = icmp ult i64 [[TMP2322]], [[TMP2323]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4354]], label [[COND_TRUE4356:%.*]], label [[COND_FALSE4357:%.*]]
// SIMD-ONLY0:       cond.true4356:
// SIMD-ONLY0-NEXT:    [[TMP2324:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4358:%.*]]
// SIMD-ONLY0:       cond.false4357:
// SIMD-ONLY0-NEXT:    [[TMP2325:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4358]]
// SIMD-ONLY0:       cond.end4358:
// SIMD-ONLY0-NEXT:    [[COND4359:%.*]] = phi i64 [ [[TMP2324]], [[COND_TRUE4356]] ], [ [[TMP2325]], [[COND_FALSE4357]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4359]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2326:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2327:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4360:%.*]] = icmp ugt i64 [[TMP2326]], [[TMP2327]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4360]], label [[IF_THEN4362:%.*]], label [[IF_END4363:%.*]]
// SIMD-ONLY0:       if.then4362:
// SIMD-ONLY0-NEXT:    [[TMP2328:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2328]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4363]]
// SIMD-ONLY0:       if.end4363:
// SIMD-ONLY0-NEXT:    [[TMP2329:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2330:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4364:%.*]] = icmp ult i64 [[TMP2329]], [[TMP2330]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4364]], label [[IF_THEN4366:%.*]], label [[IF_END4367:%.*]]
// SIMD-ONLY0:       if.then4366:
// SIMD-ONLY0-NEXT:    [[TMP2331:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2331]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4367]]
// SIMD-ONLY0:       if.end4367:
// SIMD-ONLY0-NEXT:    [[TMP2332:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2333:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4368:%.*]] = icmp ugt i64 [[TMP2332]], [[TMP2333]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4368]], label [[IF_THEN4370:%.*]], label [[IF_END4371:%.*]]
// SIMD-ONLY0:       if.then4370:
// SIMD-ONLY0-NEXT:    [[TMP2334:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2334]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4371]]
// SIMD-ONLY0:       if.end4371:
// SIMD-ONLY0-NEXT:    [[TMP2335:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2336:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4372:%.*]] = icmp ult i64 [[TMP2335]], [[TMP2336]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4372]], label [[IF_THEN4374:%.*]], label [[IF_END4375:%.*]]
// SIMD-ONLY0:       if.then4374:
// SIMD-ONLY0-NEXT:    [[TMP2337:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2337]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4375]]
// SIMD-ONLY0:       if.end4375:
// SIMD-ONLY0-NEXT:    [[TMP2338:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2339:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4376:%.*]] = icmp eq i64 [[TMP2338]], [[TMP2339]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4376]], label [[COND_TRUE4378:%.*]], label [[COND_FALSE4379:%.*]]
// SIMD-ONLY0:       cond.true4378:
// SIMD-ONLY0-NEXT:    [[TMP2340:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4380:%.*]]
// SIMD-ONLY0:       cond.false4379:
// SIMD-ONLY0-NEXT:    [[TMP2341:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4380]]
// SIMD-ONLY0:       cond.end4380:
// SIMD-ONLY0-NEXT:    [[COND4381:%.*]] = phi i64 [ [[TMP2340]], [[COND_TRUE4378]] ], [ [[TMP2341]], [[COND_FALSE4379]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4381]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2342:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2343:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4382:%.*]] = icmp eq i64 [[TMP2342]], [[TMP2343]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4382]], label [[COND_TRUE4384:%.*]], label [[COND_FALSE4385:%.*]]
// SIMD-ONLY0:       cond.true4384:
// SIMD-ONLY0-NEXT:    [[TMP2344:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4386:%.*]]
// SIMD-ONLY0:       cond.false4385:
// SIMD-ONLY0-NEXT:    [[TMP2345:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4386]]
// SIMD-ONLY0:       cond.end4386:
// SIMD-ONLY0-NEXT:    [[COND4387:%.*]] = phi i64 [ [[TMP2344]], [[COND_TRUE4384]] ], [ [[TMP2345]], [[COND_FALSE4385]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4387]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2346:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2347:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4388:%.*]] = icmp eq i64 [[TMP2346]], [[TMP2347]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4388]], label [[IF_THEN4390:%.*]], label [[IF_END4391:%.*]]
// SIMD-ONLY0:       if.then4390:
// SIMD-ONLY0-NEXT:    [[TMP2348:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2348]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4391]]
// SIMD-ONLY0:       if.end4391:
// SIMD-ONLY0-NEXT:    [[TMP2349:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2350:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4392:%.*]] = icmp eq i64 [[TMP2349]], [[TMP2350]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4392]], label [[IF_THEN4394:%.*]], label [[IF_END4395:%.*]]
// SIMD-ONLY0:       if.then4394:
// SIMD-ONLY0-NEXT:    [[TMP2351:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2351]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4395]]
// SIMD-ONLY0:       if.end4395:
// SIMD-ONLY0-NEXT:    [[TMP2352:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2353:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4396:%.*]] = icmp sgt i64 [[TMP2352]], [[TMP2353]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4396]], label [[COND_TRUE4398:%.*]], label [[COND_FALSE4399:%.*]]
// SIMD-ONLY0:       cond.true4398:
// SIMD-ONLY0-NEXT:    [[TMP2354:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4400:%.*]]
// SIMD-ONLY0:       cond.false4399:
// SIMD-ONLY0-NEXT:    [[TMP2355:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4400]]
// SIMD-ONLY0:       cond.end4400:
// SIMD-ONLY0-NEXT:    [[COND4401:%.*]] = phi i64 [ [[TMP2354]], [[COND_TRUE4398]] ], [ [[TMP2355]], [[COND_FALSE4399]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4401]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2356:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2357:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4402:%.*]] = icmp slt i64 [[TMP2356]], [[TMP2357]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4402]], label [[COND_TRUE4404:%.*]], label [[COND_FALSE4405:%.*]]
// SIMD-ONLY0:       cond.true4404:
// SIMD-ONLY0-NEXT:    [[TMP2358:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4406:%.*]]
// SIMD-ONLY0:       cond.false4405:
// SIMD-ONLY0-NEXT:    [[TMP2359:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4406]]
// SIMD-ONLY0:       cond.end4406:
// SIMD-ONLY0-NEXT:    [[COND4407:%.*]] = phi i64 [ [[TMP2358]], [[COND_TRUE4404]] ], [ [[TMP2359]], [[COND_FALSE4405]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4407]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2360:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2361:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4408:%.*]] = icmp sgt i64 [[TMP2360]], [[TMP2361]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4408]], label [[COND_TRUE4410:%.*]], label [[COND_FALSE4411:%.*]]
// SIMD-ONLY0:       cond.true4410:
// SIMD-ONLY0-NEXT:    [[TMP2362:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4412:%.*]]
// SIMD-ONLY0:       cond.false4411:
// SIMD-ONLY0-NEXT:    [[TMP2363:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4412]]
// SIMD-ONLY0:       cond.end4412:
// SIMD-ONLY0-NEXT:    [[COND4413:%.*]] = phi i64 [ [[TMP2362]], [[COND_TRUE4410]] ], [ [[TMP2363]], [[COND_FALSE4411]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4413]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2364:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2365:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4414:%.*]] = icmp slt i64 [[TMP2364]], [[TMP2365]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4414]], label [[COND_TRUE4416:%.*]], label [[COND_FALSE4417:%.*]]
// SIMD-ONLY0:       cond.true4416:
// SIMD-ONLY0-NEXT:    [[TMP2366:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4418:%.*]]
// SIMD-ONLY0:       cond.false4417:
// SIMD-ONLY0-NEXT:    [[TMP2367:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4418]]
// SIMD-ONLY0:       cond.end4418:
// SIMD-ONLY0-NEXT:    [[COND4419:%.*]] = phi i64 [ [[TMP2366]], [[COND_TRUE4416]] ], [ [[TMP2367]], [[COND_FALSE4417]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4419]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2368:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2369:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4420:%.*]] = icmp sgt i64 [[TMP2368]], [[TMP2369]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4420]], label [[IF_THEN4422:%.*]], label [[IF_END4423:%.*]]
// SIMD-ONLY0:       if.then4422:
// SIMD-ONLY0-NEXT:    [[TMP2370:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2370]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4423]]
// SIMD-ONLY0:       if.end4423:
// SIMD-ONLY0-NEXT:    [[TMP2371:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2372:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4424:%.*]] = icmp slt i64 [[TMP2371]], [[TMP2372]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4424]], label [[IF_THEN4426:%.*]], label [[IF_END4427:%.*]]
// SIMD-ONLY0:       if.then4426:
// SIMD-ONLY0-NEXT:    [[TMP2373:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2373]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4427]]
// SIMD-ONLY0:       if.end4427:
// SIMD-ONLY0-NEXT:    [[TMP2374:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2375:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4428:%.*]] = icmp sgt i64 [[TMP2374]], [[TMP2375]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4428]], label [[IF_THEN4430:%.*]], label [[IF_END4431:%.*]]
// SIMD-ONLY0:       if.then4430:
// SIMD-ONLY0-NEXT:    [[TMP2376:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2376]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4431]]
// SIMD-ONLY0:       if.end4431:
// SIMD-ONLY0-NEXT:    [[TMP2377:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2378:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4432:%.*]] = icmp slt i64 [[TMP2377]], [[TMP2378]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4432]], label [[IF_THEN4434:%.*]], label [[IF_END4435:%.*]]
// SIMD-ONLY0:       if.then4434:
// SIMD-ONLY0-NEXT:    [[TMP2379:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2379]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4435]]
// SIMD-ONLY0:       if.end4435:
// SIMD-ONLY0-NEXT:    [[TMP2380:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2381:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4436:%.*]] = icmp eq i64 [[TMP2380]], [[TMP2381]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4436]], label [[COND_TRUE4438:%.*]], label [[COND_FALSE4439:%.*]]
// SIMD-ONLY0:       cond.true4438:
// SIMD-ONLY0-NEXT:    [[TMP2382:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4440:%.*]]
// SIMD-ONLY0:       cond.false4439:
// SIMD-ONLY0-NEXT:    [[TMP2383:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4440]]
// SIMD-ONLY0:       cond.end4440:
// SIMD-ONLY0-NEXT:    [[COND4441:%.*]] = phi i64 [ [[TMP2382]], [[COND_TRUE4438]] ], [ [[TMP2383]], [[COND_FALSE4439]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4441]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2384:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2385:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4442:%.*]] = icmp eq i64 [[TMP2384]], [[TMP2385]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4442]], label [[COND_TRUE4444:%.*]], label [[COND_FALSE4445:%.*]]
// SIMD-ONLY0:       cond.true4444:
// SIMD-ONLY0-NEXT:    [[TMP2386:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4446:%.*]]
// SIMD-ONLY0:       cond.false4445:
// SIMD-ONLY0-NEXT:    [[TMP2387:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4446]]
// SIMD-ONLY0:       cond.end4446:
// SIMD-ONLY0-NEXT:    [[COND4447:%.*]] = phi i64 [ [[TMP2386]], [[COND_TRUE4444]] ], [ [[TMP2387]], [[COND_FALSE4445]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4447]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2388:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2389:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4448:%.*]] = icmp eq i64 [[TMP2388]], [[TMP2389]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4448]], label [[IF_THEN4450:%.*]], label [[IF_END4451:%.*]]
// SIMD-ONLY0:       if.then4450:
// SIMD-ONLY0-NEXT:    [[TMP2390:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2390]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4451]]
// SIMD-ONLY0:       if.end4451:
// SIMD-ONLY0-NEXT:    [[TMP2391:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2392:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4452:%.*]] = icmp eq i64 [[TMP2391]], [[TMP2392]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4452]], label [[IF_THEN4454:%.*]], label [[IF_END4455:%.*]]
// SIMD-ONLY0:       if.then4454:
// SIMD-ONLY0-NEXT:    [[TMP2393:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2393]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4455]]
// SIMD-ONLY0:       if.end4455:
// SIMD-ONLY0-NEXT:    [[TMP2394:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2395:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4456:%.*]] = icmp ugt i64 [[TMP2394]], [[TMP2395]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4456]], label [[COND_TRUE4458:%.*]], label [[COND_FALSE4459:%.*]]
// SIMD-ONLY0:       cond.true4458:
// SIMD-ONLY0-NEXT:    [[TMP2396:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4460:%.*]]
// SIMD-ONLY0:       cond.false4459:
// SIMD-ONLY0-NEXT:    [[TMP2397:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4460]]
// SIMD-ONLY0:       cond.end4460:
// SIMD-ONLY0-NEXT:    [[COND4461:%.*]] = phi i64 [ [[TMP2396]], [[COND_TRUE4458]] ], [ [[TMP2397]], [[COND_FALSE4459]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4461]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2398:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2399:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4462:%.*]] = icmp ult i64 [[TMP2398]], [[TMP2399]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4462]], label [[COND_TRUE4464:%.*]], label [[COND_FALSE4465:%.*]]
// SIMD-ONLY0:       cond.true4464:
// SIMD-ONLY0-NEXT:    [[TMP2400:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4466:%.*]]
// SIMD-ONLY0:       cond.false4465:
// SIMD-ONLY0-NEXT:    [[TMP2401:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4466]]
// SIMD-ONLY0:       cond.end4466:
// SIMD-ONLY0-NEXT:    [[COND4467:%.*]] = phi i64 [ [[TMP2400]], [[COND_TRUE4464]] ], [ [[TMP2401]], [[COND_FALSE4465]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4467]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2402:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2403:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4468:%.*]] = icmp ugt i64 [[TMP2402]], [[TMP2403]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4468]], label [[COND_TRUE4470:%.*]], label [[COND_FALSE4471:%.*]]
// SIMD-ONLY0:       cond.true4470:
// SIMD-ONLY0-NEXT:    [[TMP2404:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4472:%.*]]
// SIMD-ONLY0:       cond.false4471:
// SIMD-ONLY0-NEXT:    [[TMP2405:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4472]]
// SIMD-ONLY0:       cond.end4472:
// SIMD-ONLY0-NEXT:    [[COND4473:%.*]] = phi i64 [ [[TMP2404]], [[COND_TRUE4470]] ], [ [[TMP2405]], [[COND_FALSE4471]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4473]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2406:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2407:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4474:%.*]] = icmp ult i64 [[TMP2406]], [[TMP2407]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4474]], label [[COND_TRUE4476:%.*]], label [[COND_FALSE4477:%.*]]
// SIMD-ONLY0:       cond.true4476:
// SIMD-ONLY0-NEXT:    [[TMP2408:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4478:%.*]]
// SIMD-ONLY0:       cond.false4477:
// SIMD-ONLY0-NEXT:    [[TMP2409:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4478]]
// SIMD-ONLY0:       cond.end4478:
// SIMD-ONLY0-NEXT:    [[COND4479:%.*]] = phi i64 [ [[TMP2408]], [[COND_TRUE4476]] ], [ [[TMP2409]], [[COND_FALSE4477]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4479]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2410:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2411:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4480:%.*]] = icmp ugt i64 [[TMP2410]], [[TMP2411]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4480]], label [[IF_THEN4482:%.*]], label [[IF_END4483:%.*]]
// SIMD-ONLY0:       if.then4482:
// SIMD-ONLY0-NEXT:    [[TMP2412:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2412]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4483]]
// SIMD-ONLY0:       if.end4483:
// SIMD-ONLY0-NEXT:    [[TMP2413:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2414:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4484:%.*]] = icmp ult i64 [[TMP2413]], [[TMP2414]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4484]], label [[IF_THEN4486:%.*]], label [[IF_END4487:%.*]]
// SIMD-ONLY0:       if.then4486:
// SIMD-ONLY0-NEXT:    [[TMP2415:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2415]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4487]]
// SIMD-ONLY0:       if.end4487:
// SIMD-ONLY0-NEXT:    [[TMP2416:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2417:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4488:%.*]] = icmp ugt i64 [[TMP2416]], [[TMP2417]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4488]], label [[IF_THEN4490:%.*]], label [[IF_END4491:%.*]]
// SIMD-ONLY0:       if.then4490:
// SIMD-ONLY0-NEXT:    [[TMP2418:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2418]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4491]]
// SIMD-ONLY0:       if.end4491:
// SIMD-ONLY0-NEXT:    [[TMP2419:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2420:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4492:%.*]] = icmp ult i64 [[TMP2419]], [[TMP2420]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4492]], label [[IF_THEN4494:%.*]], label [[IF_END4495:%.*]]
// SIMD-ONLY0:       if.then4494:
// SIMD-ONLY0-NEXT:    [[TMP2421:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2421]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4495]]
// SIMD-ONLY0:       if.end4495:
// SIMD-ONLY0-NEXT:    [[TMP2422:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2423:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4496:%.*]] = icmp eq i64 [[TMP2422]], [[TMP2423]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4496]], label [[COND_TRUE4498:%.*]], label [[COND_FALSE4499:%.*]]
// SIMD-ONLY0:       cond.true4498:
// SIMD-ONLY0-NEXT:    [[TMP2424:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4500:%.*]]
// SIMD-ONLY0:       cond.false4499:
// SIMD-ONLY0-NEXT:    [[TMP2425:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4500]]
// SIMD-ONLY0:       cond.end4500:
// SIMD-ONLY0-NEXT:    [[COND4501:%.*]] = phi i64 [ [[TMP2424]], [[COND_TRUE4498]] ], [ [[TMP2425]], [[COND_FALSE4499]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4501]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2426:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2427:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4502:%.*]] = icmp eq i64 [[TMP2426]], [[TMP2427]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4502]], label [[COND_TRUE4504:%.*]], label [[COND_FALSE4505:%.*]]
// SIMD-ONLY0:       cond.true4504:
// SIMD-ONLY0-NEXT:    [[TMP2428:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4506:%.*]]
// SIMD-ONLY0:       cond.false4505:
// SIMD-ONLY0-NEXT:    [[TMP2429:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4506]]
// SIMD-ONLY0:       cond.end4506:
// SIMD-ONLY0-NEXT:    [[COND4507:%.*]] = phi i64 [ [[TMP2428]], [[COND_TRUE4504]] ], [ [[TMP2429]], [[COND_FALSE4505]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4507]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2430:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2431:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4508:%.*]] = icmp eq i64 [[TMP2430]], [[TMP2431]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4508]], label [[IF_THEN4510:%.*]], label [[IF_END4511:%.*]]
// SIMD-ONLY0:       if.then4510:
// SIMD-ONLY0-NEXT:    [[TMP2432:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2432]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4511]]
// SIMD-ONLY0:       if.end4511:
// SIMD-ONLY0-NEXT:    [[TMP2433:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2434:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4512:%.*]] = icmp eq i64 [[TMP2433]], [[TMP2434]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4512]], label [[IF_THEN4514:%.*]], label [[IF_END4515:%.*]]
// SIMD-ONLY0:       if.then4514:
// SIMD-ONLY0-NEXT:    [[TMP2435:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2435]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4515]]
// SIMD-ONLY0:       if.end4515:
// SIMD-ONLY0-NEXT:    [[TMP2436:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2437:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4516:%.*]] = icmp sgt i64 [[TMP2436]], [[TMP2437]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4516]], label [[COND_TRUE4518:%.*]], label [[COND_FALSE4519:%.*]]
// SIMD-ONLY0:       cond.true4518:
// SIMD-ONLY0-NEXT:    [[TMP2438:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4520:%.*]]
// SIMD-ONLY0:       cond.false4519:
// SIMD-ONLY0-NEXT:    [[TMP2439:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4520]]
// SIMD-ONLY0:       cond.end4520:
// SIMD-ONLY0-NEXT:    [[COND4521:%.*]] = phi i64 [ [[TMP2438]], [[COND_TRUE4518]] ], [ [[TMP2439]], [[COND_FALSE4519]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4521]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2440:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2441:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4522:%.*]] = icmp slt i64 [[TMP2440]], [[TMP2441]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4522]], label [[COND_TRUE4524:%.*]], label [[COND_FALSE4525:%.*]]
// SIMD-ONLY0:       cond.true4524:
// SIMD-ONLY0-NEXT:    [[TMP2442:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4526:%.*]]
// SIMD-ONLY0:       cond.false4525:
// SIMD-ONLY0-NEXT:    [[TMP2443:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4526]]
// SIMD-ONLY0:       cond.end4526:
// SIMD-ONLY0-NEXT:    [[COND4527:%.*]] = phi i64 [ [[TMP2442]], [[COND_TRUE4524]] ], [ [[TMP2443]], [[COND_FALSE4525]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4527]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2444:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2445:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4528:%.*]] = icmp sgt i64 [[TMP2444]], [[TMP2445]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4528]], label [[COND_TRUE4530:%.*]], label [[COND_FALSE4531:%.*]]
// SIMD-ONLY0:       cond.true4530:
// SIMD-ONLY0-NEXT:    [[TMP2446:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4532:%.*]]
// SIMD-ONLY0:       cond.false4531:
// SIMD-ONLY0-NEXT:    [[TMP2447:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4532]]
// SIMD-ONLY0:       cond.end4532:
// SIMD-ONLY0-NEXT:    [[COND4533:%.*]] = phi i64 [ [[TMP2446]], [[COND_TRUE4530]] ], [ [[TMP2447]], [[COND_FALSE4531]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4533]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2448:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2449:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4534:%.*]] = icmp slt i64 [[TMP2448]], [[TMP2449]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4534]], label [[COND_TRUE4536:%.*]], label [[COND_FALSE4537:%.*]]
// SIMD-ONLY0:       cond.true4536:
// SIMD-ONLY0-NEXT:    [[TMP2450:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4538:%.*]]
// SIMD-ONLY0:       cond.false4537:
// SIMD-ONLY0-NEXT:    [[TMP2451:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4538]]
// SIMD-ONLY0:       cond.end4538:
// SIMD-ONLY0-NEXT:    [[COND4539:%.*]] = phi i64 [ [[TMP2450]], [[COND_TRUE4536]] ], [ [[TMP2451]], [[COND_FALSE4537]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4539]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2452:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2453:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4540:%.*]] = icmp sgt i64 [[TMP2452]], [[TMP2453]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4540]], label [[IF_THEN4542:%.*]], label [[IF_END4543:%.*]]
// SIMD-ONLY0:       if.then4542:
// SIMD-ONLY0-NEXT:    [[TMP2454:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2454]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4543]]
// SIMD-ONLY0:       if.end4543:
// SIMD-ONLY0-NEXT:    [[TMP2455:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2456:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4544:%.*]] = icmp slt i64 [[TMP2455]], [[TMP2456]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4544]], label [[IF_THEN4546:%.*]], label [[IF_END4547:%.*]]
// SIMD-ONLY0:       if.then4546:
// SIMD-ONLY0-NEXT:    [[TMP2457:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2457]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4547]]
// SIMD-ONLY0:       if.end4547:
// SIMD-ONLY0-NEXT:    [[TMP2458:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2459:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4548:%.*]] = icmp sgt i64 [[TMP2458]], [[TMP2459]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4548]], label [[IF_THEN4550:%.*]], label [[IF_END4551:%.*]]
// SIMD-ONLY0:       if.then4550:
// SIMD-ONLY0-NEXT:    [[TMP2460:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2460]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4551]]
// SIMD-ONLY0:       if.end4551:
// SIMD-ONLY0-NEXT:    [[TMP2461:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2462:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4552:%.*]] = icmp slt i64 [[TMP2461]], [[TMP2462]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4552]], label [[IF_THEN4554:%.*]], label [[IF_END4555:%.*]]
// SIMD-ONLY0:       if.then4554:
// SIMD-ONLY0-NEXT:    [[TMP2463:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2463]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4555]]
// SIMD-ONLY0:       if.end4555:
// SIMD-ONLY0-NEXT:    [[TMP2464:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2465:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4556:%.*]] = icmp eq i64 [[TMP2464]], [[TMP2465]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4556]], label [[COND_TRUE4558:%.*]], label [[COND_FALSE4559:%.*]]
// SIMD-ONLY0:       cond.true4558:
// SIMD-ONLY0-NEXT:    [[TMP2466:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4560:%.*]]
// SIMD-ONLY0:       cond.false4559:
// SIMD-ONLY0-NEXT:    [[TMP2467:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4560]]
// SIMD-ONLY0:       cond.end4560:
// SIMD-ONLY0-NEXT:    [[COND4561:%.*]] = phi i64 [ [[TMP2466]], [[COND_TRUE4558]] ], [ [[TMP2467]], [[COND_FALSE4559]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4561]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2468:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2469:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4562:%.*]] = icmp eq i64 [[TMP2468]], [[TMP2469]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4562]], label [[COND_TRUE4564:%.*]], label [[COND_FALSE4565:%.*]]
// SIMD-ONLY0:       cond.true4564:
// SIMD-ONLY0-NEXT:    [[TMP2470:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4566:%.*]]
// SIMD-ONLY0:       cond.false4565:
// SIMD-ONLY0-NEXT:    [[TMP2471:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4566]]
// SIMD-ONLY0:       cond.end4566:
// SIMD-ONLY0-NEXT:    [[COND4567:%.*]] = phi i64 [ [[TMP2470]], [[COND_TRUE4564]] ], [ [[TMP2471]], [[COND_FALSE4565]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4567]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2472:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2473:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4568:%.*]] = icmp eq i64 [[TMP2472]], [[TMP2473]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4568]], label [[IF_THEN4570:%.*]], label [[IF_END4571:%.*]]
// SIMD-ONLY0:       if.then4570:
// SIMD-ONLY0-NEXT:    [[TMP2474:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2474]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4571]]
// SIMD-ONLY0:       if.end4571:
// SIMD-ONLY0-NEXT:    [[TMP2475:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2476:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4572:%.*]] = icmp eq i64 [[TMP2475]], [[TMP2476]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4572]], label [[IF_THEN4574:%.*]], label [[IF_END4575:%.*]]
// SIMD-ONLY0:       if.then4574:
// SIMD-ONLY0-NEXT:    [[TMP2477:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2477]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4575]]
// SIMD-ONLY0:       if.end4575:
// SIMD-ONLY0-NEXT:    [[TMP2478:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2479:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4576:%.*]] = icmp ugt i64 [[TMP2478]], [[TMP2479]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4576]], label [[COND_TRUE4578:%.*]], label [[COND_FALSE4579:%.*]]
// SIMD-ONLY0:       cond.true4578:
// SIMD-ONLY0-NEXT:    [[TMP2480:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4580:%.*]]
// SIMD-ONLY0:       cond.false4579:
// SIMD-ONLY0-NEXT:    [[TMP2481:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4580]]
// SIMD-ONLY0:       cond.end4580:
// SIMD-ONLY0-NEXT:    [[COND4581:%.*]] = phi i64 [ [[TMP2480]], [[COND_TRUE4578]] ], [ [[TMP2481]], [[COND_FALSE4579]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4581]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2482:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2483:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4582:%.*]] = icmp ult i64 [[TMP2482]], [[TMP2483]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4582]], label [[COND_TRUE4584:%.*]], label [[COND_FALSE4585:%.*]]
// SIMD-ONLY0:       cond.true4584:
// SIMD-ONLY0-NEXT:    [[TMP2484:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4586:%.*]]
// SIMD-ONLY0:       cond.false4585:
// SIMD-ONLY0-NEXT:    [[TMP2485:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4586]]
// SIMD-ONLY0:       cond.end4586:
// SIMD-ONLY0-NEXT:    [[COND4587:%.*]] = phi i64 [ [[TMP2484]], [[COND_TRUE4584]] ], [ [[TMP2485]], [[COND_FALSE4585]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4587]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2486:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2487:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4588:%.*]] = icmp ugt i64 [[TMP2486]], [[TMP2487]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4588]], label [[COND_TRUE4590:%.*]], label [[COND_FALSE4591:%.*]]
// SIMD-ONLY0:       cond.true4590:
// SIMD-ONLY0-NEXT:    [[TMP2488:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4592:%.*]]
// SIMD-ONLY0:       cond.false4591:
// SIMD-ONLY0-NEXT:    [[TMP2489:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4592]]
// SIMD-ONLY0:       cond.end4592:
// SIMD-ONLY0-NEXT:    [[COND4593:%.*]] = phi i64 [ [[TMP2488]], [[COND_TRUE4590]] ], [ [[TMP2489]], [[COND_FALSE4591]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4593]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2490:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2491:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4594:%.*]] = icmp ult i64 [[TMP2490]], [[TMP2491]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4594]], label [[COND_TRUE4596:%.*]], label [[COND_FALSE4597:%.*]]
// SIMD-ONLY0:       cond.true4596:
// SIMD-ONLY0-NEXT:    [[TMP2492:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4598:%.*]]
// SIMD-ONLY0:       cond.false4597:
// SIMD-ONLY0-NEXT:    [[TMP2493:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4598]]
// SIMD-ONLY0:       cond.end4598:
// SIMD-ONLY0-NEXT:    [[COND4599:%.*]] = phi i64 [ [[TMP2492]], [[COND_TRUE4596]] ], [ [[TMP2493]], [[COND_FALSE4597]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4599]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2494:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2495:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4600:%.*]] = icmp ugt i64 [[TMP2494]], [[TMP2495]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4600]], label [[IF_THEN4602:%.*]], label [[IF_END4603:%.*]]
// SIMD-ONLY0:       if.then4602:
// SIMD-ONLY0-NEXT:    [[TMP2496:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2496]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4603]]
// SIMD-ONLY0:       if.end4603:
// SIMD-ONLY0-NEXT:    [[TMP2497:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2498:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4604:%.*]] = icmp ult i64 [[TMP2497]], [[TMP2498]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4604]], label [[IF_THEN4606:%.*]], label [[IF_END4607:%.*]]
// SIMD-ONLY0:       if.then4606:
// SIMD-ONLY0-NEXT:    [[TMP2499:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2499]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4607]]
// SIMD-ONLY0:       if.end4607:
// SIMD-ONLY0-NEXT:    [[TMP2500:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2501:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4608:%.*]] = icmp ugt i64 [[TMP2500]], [[TMP2501]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4608]], label [[IF_THEN4610:%.*]], label [[IF_END4611:%.*]]
// SIMD-ONLY0:       if.then4610:
// SIMD-ONLY0-NEXT:    [[TMP2502:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2502]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4611]]
// SIMD-ONLY0:       if.end4611:
// SIMD-ONLY0-NEXT:    [[TMP2503:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2504:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4612:%.*]] = icmp ult i64 [[TMP2503]], [[TMP2504]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4612]], label [[IF_THEN4614:%.*]], label [[IF_END4615:%.*]]
// SIMD-ONLY0:       if.then4614:
// SIMD-ONLY0-NEXT:    [[TMP2505:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2505]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4615]]
// SIMD-ONLY0:       if.end4615:
// SIMD-ONLY0-NEXT:    [[TMP2506:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2507:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4616:%.*]] = icmp eq i64 [[TMP2506]], [[TMP2507]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4616]], label [[COND_TRUE4618:%.*]], label [[COND_FALSE4619:%.*]]
// SIMD-ONLY0:       cond.true4618:
// SIMD-ONLY0-NEXT:    [[TMP2508:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4620:%.*]]
// SIMD-ONLY0:       cond.false4619:
// SIMD-ONLY0-NEXT:    [[TMP2509:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4620]]
// SIMD-ONLY0:       cond.end4620:
// SIMD-ONLY0-NEXT:    [[COND4621:%.*]] = phi i64 [ [[TMP2508]], [[COND_TRUE4618]] ], [ [[TMP2509]], [[COND_FALSE4619]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4621]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2510:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2511:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4622:%.*]] = icmp eq i64 [[TMP2510]], [[TMP2511]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4622]], label [[COND_TRUE4624:%.*]], label [[COND_FALSE4625:%.*]]
// SIMD-ONLY0:       cond.true4624:
// SIMD-ONLY0-NEXT:    [[TMP2512:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4626:%.*]]
// SIMD-ONLY0:       cond.false4625:
// SIMD-ONLY0-NEXT:    [[TMP2513:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4626]]
// SIMD-ONLY0:       cond.end4626:
// SIMD-ONLY0-NEXT:    [[COND4627:%.*]] = phi i64 [ [[TMP2512]], [[COND_TRUE4624]] ], [ [[TMP2513]], [[COND_FALSE4625]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4627]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2514:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2515:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4628:%.*]] = icmp eq i64 [[TMP2514]], [[TMP2515]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4628]], label [[IF_THEN4630:%.*]], label [[IF_END4631:%.*]]
// SIMD-ONLY0:       if.then4630:
// SIMD-ONLY0-NEXT:    [[TMP2516:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2516]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4631]]
// SIMD-ONLY0:       if.end4631:
// SIMD-ONLY0-NEXT:    [[TMP2517:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2518:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4632:%.*]] = icmp eq i64 [[TMP2517]], [[TMP2518]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4632]], label [[IF_THEN4634:%.*]], label [[IF_END4635:%.*]]
// SIMD-ONLY0:       if.then4634:
// SIMD-ONLY0-NEXT:    [[TMP2519:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2519]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4635]]
// SIMD-ONLY0:       if.end4635:
// SIMD-ONLY0-NEXT:    [[TMP2520:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2521:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4636:%.*]] = fcmp ogt float [[TMP2520]], [[TMP2521]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4636]], label [[COND_TRUE4638:%.*]], label [[COND_FALSE4639:%.*]]
// SIMD-ONLY0:       cond.true4638:
// SIMD-ONLY0-NEXT:    [[TMP2522:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4640:%.*]]
// SIMD-ONLY0:       cond.false4639:
// SIMD-ONLY0-NEXT:    [[TMP2523:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4640]]
// SIMD-ONLY0:       cond.end4640:
// SIMD-ONLY0-NEXT:    [[COND4641:%.*]] = phi float [ [[TMP2522]], [[COND_TRUE4638]] ], [ [[TMP2523]], [[COND_FALSE4639]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4641]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2524:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2525:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4642:%.*]] = fcmp olt float [[TMP2524]], [[TMP2525]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4642]], label [[COND_TRUE4644:%.*]], label [[COND_FALSE4645:%.*]]
// SIMD-ONLY0:       cond.true4644:
// SIMD-ONLY0-NEXT:    [[TMP2526:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4646:%.*]]
// SIMD-ONLY0:       cond.false4645:
// SIMD-ONLY0-NEXT:    [[TMP2527:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4646]]
// SIMD-ONLY0:       cond.end4646:
// SIMD-ONLY0-NEXT:    [[COND4647:%.*]] = phi float [ [[TMP2526]], [[COND_TRUE4644]] ], [ [[TMP2527]], [[COND_FALSE4645]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4647]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2528:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2529:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4648:%.*]] = fcmp ogt float [[TMP2528]], [[TMP2529]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4648]], label [[COND_TRUE4650:%.*]], label [[COND_FALSE4651:%.*]]
// SIMD-ONLY0:       cond.true4650:
// SIMD-ONLY0-NEXT:    [[TMP2530:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4652:%.*]]
// SIMD-ONLY0:       cond.false4651:
// SIMD-ONLY0-NEXT:    [[TMP2531:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4652]]
// SIMD-ONLY0:       cond.end4652:
// SIMD-ONLY0-NEXT:    [[COND4653:%.*]] = phi float [ [[TMP2530]], [[COND_TRUE4650]] ], [ [[TMP2531]], [[COND_FALSE4651]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4653]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2532:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2533:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4654:%.*]] = fcmp olt float [[TMP2532]], [[TMP2533]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4654]], label [[COND_TRUE4656:%.*]], label [[COND_FALSE4657:%.*]]
// SIMD-ONLY0:       cond.true4656:
// SIMD-ONLY0-NEXT:    [[TMP2534:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4658:%.*]]
// SIMD-ONLY0:       cond.false4657:
// SIMD-ONLY0-NEXT:    [[TMP2535:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4658]]
// SIMD-ONLY0:       cond.end4658:
// SIMD-ONLY0-NEXT:    [[COND4659:%.*]] = phi float [ [[TMP2534]], [[COND_TRUE4656]] ], [ [[TMP2535]], [[COND_FALSE4657]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4659]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2536:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2537:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4660:%.*]] = fcmp ogt float [[TMP2536]], [[TMP2537]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4660]], label [[IF_THEN4662:%.*]], label [[IF_END4663:%.*]]
// SIMD-ONLY0:       if.then4662:
// SIMD-ONLY0-NEXT:    [[TMP2538:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2538]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4663]]
// SIMD-ONLY0:       if.end4663:
// SIMD-ONLY0-NEXT:    [[TMP2539:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2540:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4664:%.*]] = fcmp olt float [[TMP2539]], [[TMP2540]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4664]], label [[IF_THEN4666:%.*]], label [[IF_END4667:%.*]]
// SIMD-ONLY0:       if.then4666:
// SIMD-ONLY0-NEXT:    [[TMP2541:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2541]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4667]]
// SIMD-ONLY0:       if.end4667:
// SIMD-ONLY0-NEXT:    [[TMP2542:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2543:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4668:%.*]] = fcmp ogt float [[TMP2542]], [[TMP2543]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4668]], label [[IF_THEN4670:%.*]], label [[IF_END4671:%.*]]
// SIMD-ONLY0:       if.then4670:
// SIMD-ONLY0-NEXT:    [[TMP2544:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2544]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4671]]
// SIMD-ONLY0:       if.end4671:
// SIMD-ONLY0-NEXT:    [[TMP2545:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2546:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4672:%.*]] = fcmp olt float [[TMP2545]], [[TMP2546]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4672]], label [[IF_THEN4674:%.*]], label [[IF_END4675:%.*]]
// SIMD-ONLY0:       if.then4674:
// SIMD-ONLY0-NEXT:    [[TMP2547:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2547]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4675]]
// SIMD-ONLY0:       if.end4675:
// SIMD-ONLY0-NEXT:    [[TMP2548:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2549:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4676:%.*]] = fcmp ogt float [[TMP2548]], [[TMP2549]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4676]], label [[COND_TRUE4678:%.*]], label [[COND_FALSE4679:%.*]]
// SIMD-ONLY0:       cond.true4678:
// SIMD-ONLY0-NEXT:    [[TMP2550:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4680:%.*]]
// SIMD-ONLY0:       cond.false4679:
// SIMD-ONLY0-NEXT:    [[TMP2551:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4680]]
// SIMD-ONLY0:       cond.end4680:
// SIMD-ONLY0-NEXT:    [[COND4681:%.*]] = phi float [ [[TMP2550]], [[COND_TRUE4678]] ], [ [[TMP2551]], [[COND_FALSE4679]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4681]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2552:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2553:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4682:%.*]] = fcmp olt float [[TMP2552]], [[TMP2553]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4682]], label [[COND_TRUE4684:%.*]], label [[COND_FALSE4685:%.*]]
// SIMD-ONLY0:       cond.true4684:
// SIMD-ONLY0-NEXT:    [[TMP2554:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4686:%.*]]
// SIMD-ONLY0:       cond.false4685:
// SIMD-ONLY0-NEXT:    [[TMP2555:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4686]]
// SIMD-ONLY0:       cond.end4686:
// SIMD-ONLY0-NEXT:    [[COND4687:%.*]] = phi float [ [[TMP2554]], [[COND_TRUE4684]] ], [ [[TMP2555]], [[COND_FALSE4685]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4687]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2556:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2557:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4688:%.*]] = fcmp ogt float [[TMP2556]], [[TMP2557]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4688]], label [[COND_TRUE4690:%.*]], label [[COND_FALSE4691:%.*]]
// SIMD-ONLY0:       cond.true4690:
// SIMD-ONLY0-NEXT:    [[TMP2558:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4692:%.*]]
// SIMD-ONLY0:       cond.false4691:
// SIMD-ONLY0-NEXT:    [[TMP2559:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4692]]
// SIMD-ONLY0:       cond.end4692:
// SIMD-ONLY0-NEXT:    [[COND4693:%.*]] = phi float [ [[TMP2558]], [[COND_TRUE4690]] ], [ [[TMP2559]], [[COND_FALSE4691]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4693]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2560:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2561:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4694:%.*]] = fcmp olt float [[TMP2560]], [[TMP2561]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4694]], label [[COND_TRUE4696:%.*]], label [[COND_FALSE4697:%.*]]
// SIMD-ONLY0:       cond.true4696:
// SIMD-ONLY0-NEXT:    [[TMP2562:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4698:%.*]]
// SIMD-ONLY0:       cond.false4697:
// SIMD-ONLY0-NEXT:    [[TMP2563:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4698]]
// SIMD-ONLY0:       cond.end4698:
// SIMD-ONLY0-NEXT:    [[COND4699:%.*]] = phi float [ [[TMP2562]], [[COND_TRUE4696]] ], [ [[TMP2563]], [[COND_FALSE4697]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4699]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2564:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2565:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4700:%.*]] = fcmp ogt float [[TMP2564]], [[TMP2565]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4700]], label [[IF_THEN4702:%.*]], label [[IF_END4703:%.*]]
// SIMD-ONLY0:       if.then4702:
// SIMD-ONLY0-NEXT:    [[TMP2566:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2566]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4703]]
// SIMD-ONLY0:       if.end4703:
// SIMD-ONLY0-NEXT:    [[TMP2567:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2568:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4704:%.*]] = fcmp olt float [[TMP2567]], [[TMP2568]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4704]], label [[IF_THEN4706:%.*]], label [[IF_END4707:%.*]]
// SIMD-ONLY0:       if.then4706:
// SIMD-ONLY0-NEXT:    [[TMP2569:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2569]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4707]]
// SIMD-ONLY0:       if.end4707:
// SIMD-ONLY0-NEXT:    [[TMP2570:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2571:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4708:%.*]] = fcmp ogt float [[TMP2570]], [[TMP2571]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4708]], label [[IF_THEN4710:%.*]], label [[IF_END4711:%.*]]
// SIMD-ONLY0:       if.then4710:
// SIMD-ONLY0-NEXT:    [[TMP2572:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2572]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4711]]
// SIMD-ONLY0:       if.end4711:
// SIMD-ONLY0-NEXT:    [[TMP2573:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2574:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4712:%.*]] = fcmp olt float [[TMP2573]], [[TMP2574]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4712]], label [[IF_THEN4714:%.*]], label [[IF_END4715:%.*]]
// SIMD-ONLY0:       if.then4714:
// SIMD-ONLY0-NEXT:    [[TMP2575:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2575]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4715]]
// SIMD-ONLY0:       if.end4715:
// SIMD-ONLY0-NEXT:    [[TMP2576:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2577:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4716:%.*]] = fcmp ogt float [[TMP2576]], [[TMP2577]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4716]], label [[COND_TRUE4718:%.*]], label [[COND_FALSE4719:%.*]]
// SIMD-ONLY0:       cond.true4718:
// SIMD-ONLY0-NEXT:    [[TMP2578:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4720:%.*]]
// SIMD-ONLY0:       cond.false4719:
// SIMD-ONLY0-NEXT:    [[TMP2579:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4720]]
// SIMD-ONLY0:       cond.end4720:
// SIMD-ONLY0-NEXT:    [[COND4721:%.*]] = phi float [ [[TMP2578]], [[COND_TRUE4718]] ], [ [[TMP2579]], [[COND_FALSE4719]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4721]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2580:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2581:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4722:%.*]] = fcmp olt float [[TMP2580]], [[TMP2581]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4722]], label [[COND_TRUE4724:%.*]], label [[COND_FALSE4725:%.*]]
// SIMD-ONLY0:       cond.true4724:
// SIMD-ONLY0-NEXT:    [[TMP2582:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4726:%.*]]
// SIMD-ONLY0:       cond.false4725:
// SIMD-ONLY0-NEXT:    [[TMP2583:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4726]]
// SIMD-ONLY0:       cond.end4726:
// SIMD-ONLY0-NEXT:    [[COND4727:%.*]] = phi float [ [[TMP2582]], [[COND_TRUE4724]] ], [ [[TMP2583]], [[COND_FALSE4725]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4727]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2584:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2585:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4728:%.*]] = fcmp ogt float [[TMP2584]], [[TMP2585]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4728]], label [[COND_TRUE4730:%.*]], label [[COND_FALSE4731:%.*]]
// SIMD-ONLY0:       cond.true4730:
// SIMD-ONLY0-NEXT:    [[TMP2586:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4732:%.*]]
// SIMD-ONLY0:       cond.false4731:
// SIMD-ONLY0-NEXT:    [[TMP2587:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4732]]
// SIMD-ONLY0:       cond.end4732:
// SIMD-ONLY0-NEXT:    [[COND4733:%.*]] = phi float [ [[TMP2586]], [[COND_TRUE4730]] ], [ [[TMP2587]], [[COND_FALSE4731]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4733]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2588:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2589:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4734:%.*]] = fcmp olt float [[TMP2588]], [[TMP2589]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4734]], label [[COND_TRUE4736:%.*]], label [[COND_FALSE4737:%.*]]
// SIMD-ONLY0:       cond.true4736:
// SIMD-ONLY0-NEXT:    [[TMP2590:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4738:%.*]]
// SIMD-ONLY0:       cond.false4737:
// SIMD-ONLY0-NEXT:    [[TMP2591:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4738]]
// SIMD-ONLY0:       cond.end4738:
// SIMD-ONLY0-NEXT:    [[COND4739:%.*]] = phi float [ [[TMP2590]], [[COND_TRUE4736]] ], [ [[TMP2591]], [[COND_FALSE4737]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4739]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2592:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2593:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4740:%.*]] = fcmp ogt float [[TMP2592]], [[TMP2593]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4740]], label [[IF_THEN4742:%.*]], label [[IF_END4743:%.*]]
// SIMD-ONLY0:       if.then4742:
// SIMD-ONLY0-NEXT:    [[TMP2594:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2594]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4743]]
// SIMD-ONLY0:       if.end4743:
// SIMD-ONLY0-NEXT:    [[TMP2595:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2596:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4744:%.*]] = fcmp olt float [[TMP2595]], [[TMP2596]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4744]], label [[IF_THEN4746:%.*]], label [[IF_END4747:%.*]]
// SIMD-ONLY0:       if.then4746:
// SIMD-ONLY0-NEXT:    [[TMP2597:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2597]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4747]]
// SIMD-ONLY0:       if.end4747:
// SIMD-ONLY0-NEXT:    [[TMP2598:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2599:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4748:%.*]] = fcmp ogt float [[TMP2598]], [[TMP2599]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4748]], label [[IF_THEN4750:%.*]], label [[IF_END4751:%.*]]
// SIMD-ONLY0:       if.then4750:
// SIMD-ONLY0-NEXT:    [[TMP2600:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2600]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4751]]
// SIMD-ONLY0:       if.end4751:
// SIMD-ONLY0-NEXT:    [[TMP2601:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2602:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4752:%.*]] = fcmp olt float [[TMP2601]], [[TMP2602]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4752]], label [[IF_THEN4754:%.*]], label [[IF_END4755:%.*]]
// SIMD-ONLY0:       if.then4754:
// SIMD-ONLY0-NEXT:    [[TMP2603:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2603]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4755]]
// SIMD-ONLY0:       if.end4755:
// SIMD-ONLY0-NEXT:    [[TMP2604:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2605:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4756:%.*]] = fcmp ogt float [[TMP2604]], [[TMP2605]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4756]], label [[COND_TRUE4758:%.*]], label [[COND_FALSE4759:%.*]]
// SIMD-ONLY0:       cond.true4758:
// SIMD-ONLY0-NEXT:    [[TMP2606:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4760:%.*]]
// SIMD-ONLY0:       cond.false4759:
// SIMD-ONLY0-NEXT:    [[TMP2607:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4760]]
// SIMD-ONLY0:       cond.end4760:
// SIMD-ONLY0-NEXT:    [[COND4761:%.*]] = phi float [ [[TMP2606]], [[COND_TRUE4758]] ], [ [[TMP2607]], [[COND_FALSE4759]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4761]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2608:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2609:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4762:%.*]] = fcmp olt float [[TMP2608]], [[TMP2609]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4762]], label [[COND_TRUE4764:%.*]], label [[COND_FALSE4765:%.*]]
// SIMD-ONLY0:       cond.true4764:
// SIMD-ONLY0-NEXT:    [[TMP2610:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4766:%.*]]
// SIMD-ONLY0:       cond.false4765:
// SIMD-ONLY0-NEXT:    [[TMP2611:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4766]]
// SIMD-ONLY0:       cond.end4766:
// SIMD-ONLY0-NEXT:    [[COND4767:%.*]] = phi float [ [[TMP2610]], [[COND_TRUE4764]] ], [ [[TMP2611]], [[COND_FALSE4765]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4767]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2612:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2613:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4768:%.*]] = fcmp ogt float [[TMP2612]], [[TMP2613]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4768]], label [[COND_TRUE4770:%.*]], label [[COND_FALSE4771:%.*]]
// SIMD-ONLY0:       cond.true4770:
// SIMD-ONLY0-NEXT:    [[TMP2614:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4772:%.*]]
// SIMD-ONLY0:       cond.false4771:
// SIMD-ONLY0-NEXT:    [[TMP2615:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4772]]
// SIMD-ONLY0:       cond.end4772:
// SIMD-ONLY0-NEXT:    [[COND4773:%.*]] = phi float [ [[TMP2614]], [[COND_TRUE4770]] ], [ [[TMP2615]], [[COND_FALSE4771]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4773]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2616:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2617:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4774:%.*]] = fcmp olt float [[TMP2616]], [[TMP2617]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4774]], label [[COND_TRUE4776:%.*]], label [[COND_FALSE4777:%.*]]
// SIMD-ONLY0:       cond.true4776:
// SIMD-ONLY0-NEXT:    [[TMP2618:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4778:%.*]]
// SIMD-ONLY0:       cond.false4777:
// SIMD-ONLY0-NEXT:    [[TMP2619:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4778]]
// SIMD-ONLY0:       cond.end4778:
// SIMD-ONLY0-NEXT:    [[COND4779:%.*]] = phi float [ [[TMP2618]], [[COND_TRUE4776]] ], [ [[TMP2619]], [[COND_FALSE4777]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4779]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2620:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2621:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4780:%.*]] = fcmp ogt float [[TMP2620]], [[TMP2621]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4780]], label [[IF_THEN4782:%.*]], label [[IF_END4783:%.*]]
// SIMD-ONLY0:       if.then4782:
// SIMD-ONLY0-NEXT:    [[TMP2622:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2622]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4783]]
// SIMD-ONLY0:       if.end4783:
// SIMD-ONLY0-NEXT:    [[TMP2623:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2624:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4784:%.*]] = fcmp olt float [[TMP2623]], [[TMP2624]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4784]], label [[IF_THEN4786:%.*]], label [[IF_END4787:%.*]]
// SIMD-ONLY0:       if.then4786:
// SIMD-ONLY0-NEXT:    [[TMP2625:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2625]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4787]]
// SIMD-ONLY0:       if.end4787:
// SIMD-ONLY0-NEXT:    [[TMP2626:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2627:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4788:%.*]] = fcmp ogt float [[TMP2626]], [[TMP2627]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4788]], label [[IF_THEN4790:%.*]], label [[IF_END4791:%.*]]
// SIMD-ONLY0:       if.then4790:
// SIMD-ONLY0-NEXT:    [[TMP2628:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2628]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4791]]
// SIMD-ONLY0:       if.end4791:
// SIMD-ONLY0-NEXT:    [[TMP2629:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2630:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4792:%.*]] = fcmp olt float [[TMP2629]], [[TMP2630]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4792]], label [[IF_THEN4794:%.*]], label [[IF_END4795:%.*]]
// SIMD-ONLY0:       if.then4794:
// SIMD-ONLY0-NEXT:    [[TMP2631:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2631]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4795]]
// SIMD-ONLY0:       if.end4795:
// SIMD-ONLY0-NEXT:    [[TMP2632:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2633:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4796:%.*]] = fcmp ogt float [[TMP2632]], [[TMP2633]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4796]], label [[COND_TRUE4798:%.*]], label [[COND_FALSE4799:%.*]]
// SIMD-ONLY0:       cond.true4798:
// SIMD-ONLY0-NEXT:    [[TMP2634:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4800:%.*]]
// SIMD-ONLY0:       cond.false4799:
// SIMD-ONLY0-NEXT:    [[TMP2635:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4800]]
// SIMD-ONLY0:       cond.end4800:
// SIMD-ONLY0-NEXT:    [[COND4801:%.*]] = phi float [ [[TMP2634]], [[COND_TRUE4798]] ], [ [[TMP2635]], [[COND_FALSE4799]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4801]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2636:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2637:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4802:%.*]] = fcmp olt float [[TMP2636]], [[TMP2637]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4802]], label [[COND_TRUE4804:%.*]], label [[COND_FALSE4805:%.*]]
// SIMD-ONLY0:       cond.true4804:
// SIMD-ONLY0-NEXT:    [[TMP2638:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4806:%.*]]
// SIMD-ONLY0:       cond.false4805:
// SIMD-ONLY0-NEXT:    [[TMP2639:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4806]]
// SIMD-ONLY0:       cond.end4806:
// SIMD-ONLY0-NEXT:    [[COND4807:%.*]] = phi float [ [[TMP2638]], [[COND_TRUE4804]] ], [ [[TMP2639]], [[COND_FALSE4805]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4807]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2640:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2641:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4808:%.*]] = fcmp ogt float [[TMP2640]], [[TMP2641]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4808]], label [[COND_TRUE4810:%.*]], label [[COND_FALSE4811:%.*]]
// SIMD-ONLY0:       cond.true4810:
// SIMD-ONLY0-NEXT:    [[TMP2642:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4812:%.*]]
// SIMD-ONLY0:       cond.false4811:
// SIMD-ONLY0-NEXT:    [[TMP2643:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4812]]
// SIMD-ONLY0:       cond.end4812:
// SIMD-ONLY0-NEXT:    [[COND4813:%.*]] = phi float [ [[TMP2642]], [[COND_TRUE4810]] ], [ [[TMP2643]], [[COND_FALSE4811]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4813]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2644:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2645:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4814:%.*]] = fcmp olt float [[TMP2644]], [[TMP2645]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4814]], label [[COND_TRUE4816:%.*]], label [[COND_FALSE4817:%.*]]
// SIMD-ONLY0:       cond.true4816:
// SIMD-ONLY0-NEXT:    [[TMP2646:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4818:%.*]]
// SIMD-ONLY0:       cond.false4817:
// SIMD-ONLY0-NEXT:    [[TMP2647:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4818]]
// SIMD-ONLY0:       cond.end4818:
// SIMD-ONLY0-NEXT:    [[COND4819:%.*]] = phi float [ [[TMP2646]], [[COND_TRUE4816]] ], [ [[TMP2647]], [[COND_FALSE4817]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4819]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2648:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2649:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4820:%.*]] = fcmp ogt float [[TMP2648]], [[TMP2649]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4820]], label [[IF_THEN4822:%.*]], label [[IF_END4823:%.*]]
// SIMD-ONLY0:       if.then4822:
// SIMD-ONLY0-NEXT:    [[TMP2650:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2650]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4823]]
// SIMD-ONLY0:       if.end4823:
// SIMD-ONLY0-NEXT:    [[TMP2651:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2652:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4824:%.*]] = fcmp olt float [[TMP2651]], [[TMP2652]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4824]], label [[IF_THEN4826:%.*]], label [[IF_END4827:%.*]]
// SIMD-ONLY0:       if.then4826:
// SIMD-ONLY0-NEXT:    [[TMP2653:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2653]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4827]]
// SIMD-ONLY0:       if.end4827:
// SIMD-ONLY0-NEXT:    [[TMP2654:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2655:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4828:%.*]] = fcmp ogt float [[TMP2654]], [[TMP2655]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4828]], label [[IF_THEN4830:%.*]], label [[IF_END4831:%.*]]
// SIMD-ONLY0:       if.then4830:
// SIMD-ONLY0-NEXT:    [[TMP2656:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2656]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4831]]
// SIMD-ONLY0:       if.end4831:
// SIMD-ONLY0-NEXT:    [[TMP2657:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2658:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4832:%.*]] = fcmp olt float [[TMP2657]], [[TMP2658]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4832]], label [[IF_THEN4834:%.*]], label [[IF_END4835:%.*]]
// SIMD-ONLY0:       if.then4834:
// SIMD-ONLY0-NEXT:    [[TMP2659:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2659]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4835]]
// SIMD-ONLY0:       if.end4835:
// SIMD-ONLY0-NEXT:    [[TMP2660:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2661:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4836:%.*]] = fcmp ogt float [[TMP2660]], [[TMP2661]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4836]], label [[COND_TRUE4838:%.*]], label [[COND_FALSE4839:%.*]]
// SIMD-ONLY0:       cond.true4838:
// SIMD-ONLY0-NEXT:    [[TMP2662:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4840:%.*]]
// SIMD-ONLY0:       cond.false4839:
// SIMD-ONLY0-NEXT:    [[TMP2663:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4840]]
// SIMD-ONLY0:       cond.end4840:
// SIMD-ONLY0-NEXT:    [[COND4841:%.*]] = phi float [ [[TMP2662]], [[COND_TRUE4838]] ], [ [[TMP2663]], [[COND_FALSE4839]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4841]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2664:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2665:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4842:%.*]] = fcmp olt float [[TMP2664]], [[TMP2665]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4842]], label [[COND_TRUE4844:%.*]], label [[COND_FALSE4845:%.*]]
// SIMD-ONLY0:       cond.true4844:
// SIMD-ONLY0-NEXT:    [[TMP2666:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4846:%.*]]
// SIMD-ONLY0:       cond.false4845:
// SIMD-ONLY0-NEXT:    [[TMP2667:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4846]]
// SIMD-ONLY0:       cond.end4846:
// SIMD-ONLY0-NEXT:    [[COND4847:%.*]] = phi float [ [[TMP2666]], [[COND_TRUE4844]] ], [ [[TMP2667]], [[COND_FALSE4845]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4847]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2668:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2669:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4848:%.*]] = fcmp ogt float [[TMP2668]], [[TMP2669]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4848]], label [[COND_TRUE4850:%.*]], label [[COND_FALSE4851:%.*]]
// SIMD-ONLY0:       cond.true4850:
// SIMD-ONLY0-NEXT:    [[TMP2670:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4852:%.*]]
// SIMD-ONLY0:       cond.false4851:
// SIMD-ONLY0-NEXT:    [[TMP2671:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4852]]
// SIMD-ONLY0:       cond.end4852:
// SIMD-ONLY0-NEXT:    [[COND4853:%.*]] = phi float [ [[TMP2670]], [[COND_TRUE4850]] ], [ [[TMP2671]], [[COND_FALSE4851]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4853]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2672:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2673:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4854:%.*]] = fcmp olt float [[TMP2672]], [[TMP2673]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4854]], label [[COND_TRUE4856:%.*]], label [[COND_FALSE4857:%.*]]
// SIMD-ONLY0:       cond.true4856:
// SIMD-ONLY0-NEXT:    [[TMP2674:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4858:%.*]]
// SIMD-ONLY0:       cond.false4857:
// SIMD-ONLY0-NEXT:    [[TMP2675:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4858]]
// SIMD-ONLY0:       cond.end4858:
// SIMD-ONLY0-NEXT:    [[COND4859:%.*]] = phi float [ [[TMP2674]], [[COND_TRUE4856]] ], [ [[TMP2675]], [[COND_FALSE4857]] ]
// SIMD-ONLY0-NEXT:    store float [[COND4859]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2676:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2677:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4860:%.*]] = fcmp ogt float [[TMP2676]], [[TMP2677]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4860]], label [[IF_THEN4862:%.*]], label [[IF_END4863:%.*]]
// SIMD-ONLY0:       if.then4862:
// SIMD-ONLY0-NEXT:    [[TMP2678:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2678]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4863]]
// SIMD-ONLY0:       if.end4863:
// SIMD-ONLY0-NEXT:    [[TMP2679:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2680:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4864:%.*]] = fcmp olt float [[TMP2679]], [[TMP2680]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4864]], label [[IF_THEN4866:%.*]], label [[IF_END4867:%.*]]
// SIMD-ONLY0:       if.then4866:
// SIMD-ONLY0-NEXT:    [[TMP2681:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2681]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4867]]
// SIMD-ONLY0:       if.end4867:
// SIMD-ONLY0-NEXT:    [[TMP2682:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2683:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4868:%.*]] = fcmp ogt float [[TMP2682]], [[TMP2683]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4868]], label [[IF_THEN4870:%.*]], label [[IF_END4871:%.*]]
// SIMD-ONLY0:       if.then4870:
// SIMD-ONLY0-NEXT:    [[TMP2684:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2684]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4871]]
// SIMD-ONLY0:       if.end4871:
// SIMD-ONLY0-NEXT:    [[TMP2685:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2686:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4872:%.*]] = fcmp olt float [[TMP2685]], [[TMP2686]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4872]], label [[IF_THEN4874:%.*]], label [[IF_END4875:%.*]]
// SIMD-ONLY0:       if.then4874:
// SIMD-ONLY0-NEXT:    [[TMP2687:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2687]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4875]]
// SIMD-ONLY0:       if.end4875:
// SIMD-ONLY0-NEXT:    [[TMP2688:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2689:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4876:%.*]] = fcmp ogt double [[TMP2688]], [[TMP2689]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4876]], label [[COND_TRUE4878:%.*]], label [[COND_FALSE4879:%.*]]
// SIMD-ONLY0:       cond.true4878:
// SIMD-ONLY0-NEXT:    [[TMP2690:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4880:%.*]]
// SIMD-ONLY0:       cond.false4879:
// SIMD-ONLY0-NEXT:    [[TMP2691:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4880]]
// SIMD-ONLY0:       cond.end4880:
// SIMD-ONLY0-NEXT:    [[COND4881:%.*]] = phi double [ [[TMP2690]], [[COND_TRUE4878]] ], [ [[TMP2691]], [[COND_FALSE4879]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4881]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2692:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2693:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4882:%.*]] = fcmp olt double [[TMP2692]], [[TMP2693]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4882]], label [[COND_TRUE4884:%.*]], label [[COND_FALSE4885:%.*]]
// SIMD-ONLY0:       cond.true4884:
// SIMD-ONLY0-NEXT:    [[TMP2694:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4886:%.*]]
// SIMD-ONLY0:       cond.false4885:
// SIMD-ONLY0-NEXT:    [[TMP2695:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4886]]
// SIMD-ONLY0:       cond.end4886:
// SIMD-ONLY0-NEXT:    [[COND4887:%.*]] = phi double [ [[TMP2694]], [[COND_TRUE4884]] ], [ [[TMP2695]], [[COND_FALSE4885]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4887]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2696:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2697:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4888:%.*]] = fcmp ogt double [[TMP2696]], [[TMP2697]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4888]], label [[COND_TRUE4890:%.*]], label [[COND_FALSE4891:%.*]]
// SIMD-ONLY0:       cond.true4890:
// SIMD-ONLY0-NEXT:    [[TMP2698:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4892:%.*]]
// SIMD-ONLY0:       cond.false4891:
// SIMD-ONLY0-NEXT:    [[TMP2699:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4892]]
// SIMD-ONLY0:       cond.end4892:
// SIMD-ONLY0-NEXT:    [[COND4893:%.*]] = phi double [ [[TMP2698]], [[COND_TRUE4890]] ], [ [[TMP2699]], [[COND_FALSE4891]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4893]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2700:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2701:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4894:%.*]] = fcmp olt double [[TMP2700]], [[TMP2701]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4894]], label [[COND_TRUE4896:%.*]], label [[COND_FALSE4897:%.*]]
// SIMD-ONLY0:       cond.true4896:
// SIMD-ONLY0-NEXT:    [[TMP2702:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4898:%.*]]
// SIMD-ONLY0:       cond.false4897:
// SIMD-ONLY0-NEXT:    [[TMP2703:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4898]]
// SIMD-ONLY0:       cond.end4898:
// SIMD-ONLY0-NEXT:    [[COND4899:%.*]] = phi double [ [[TMP2702]], [[COND_TRUE4896]] ], [ [[TMP2703]], [[COND_FALSE4897]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4899]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2704:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2705:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4900:%.*]] = fcmp ogt double [[TMP2704]], [[TMP2705]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4900]], label [[IF_THEN4902:%.*]], label [[IF_END4903:%.*]]
// SIMD-ONLY0:       if.then4902:
// SIMD-ONLY0-NEXT:    [[TMP2706:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2706]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4903]]
// SIMD-ONLY0:       if.end4903:
// SIMD-ONLY0-NEXT:    [[TMP2707:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2708:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4904:%.*]] = fcmp olt double [[TMP2707]], [[TMP2708]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4904]], label [[IF_THEN4906:%.*]], label [[IF_END4907:%.*]]
// SIMD-ONLY0:       if.then4906:
// SIMD-ONLY0-NEXT:    [[TMP2709:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2709]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4907]]
// SIMD-ONLY0:       if.end4907:
// SIMD-ONLY0-NEXT:    [[TMP2710:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2711:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4908:%.*]] = fcmp ogt double [[TMP2710]], [[TMP2711]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4908]], label [[IF_THEN4910:%.*]], label [[IF_END4911:%.*]]
// SIMD-ONLY0:       if.then4910:
// SIMD-ONLY0-NEXT:    [[TMP2712:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2712]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4911]]
// SIMD-ONLY0:       if.end4911:
// SIMD-ONLY0-NEXT:    [[TMP2713:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2714:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4912:%.*]] = fcmp olt double [[TMP2713]], [[TMP2714]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4912]], label [[IF_THEN4914:%.*]], label [[IF_END4915:%.*]]
// SIMD-ONLY0:       if.then4914:
// SIMD-ONLY0-NEXT:    [[TMP2715:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2715]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4915]]
// SIMD-ONLY0:       if.end4915:
// SIMD-ONLY0-NEXT:    [[TMP2716:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2717:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4916:%.*]] = fcmp ogt double [[TMP2716]], [[TMP2717]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4916]], label [[COND_TRUE4918:%.*]], label [[COND_FALSE4919:%.*]]
// SIMD-ONLY0:       cond.true4918:
// SIMD-ONLY0-NEXT:    [[TMP2718:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4920:%.*]]
// SIMD-ONLY0:       cond.false4919:
// SIMD-ONLY0-NEXT:    [[TMP2719:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4920]]
// SIMD-ONLY0:       cond.end4920:
// SIMD-ONLY0-NEXT:    [[COND4921:%.*]] = phi double [ [[TMP2718]], [[COND_TRUE4918]] ], [ [[TMP2719]], [[COND_FALSE4919]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4921]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2720:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2721:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4922:%.*]] = fcmp olt double [[TMP2720]], [[TMP2721]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4922]], label [[COND_TRUE4924:%.*]], label [[COND_FALSE4925:%.*]]
// SIMD-ONLY0:       cond.true4924:
// SIMD-ONLY0-NEXT:    [[TMP2722:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4926:%.*]]
// SIMD-ONLY0:       cond.false4925:
// SIMD-ONLY0-NEXT:    [[TMP2723:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4926]]
// SIMD-ONLY0:       cond.end4926:
// SIMD-ONLY0-NEXT:    [[COND4927:%.*]] = phi double [ [[TMP2722]], [[COND_TRUE4924]] ], [ [[TMP2723]], [[COND_FALSE4925]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4927]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2724:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2725:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4928:%.*]] = fcmp ogt double [[TMP2724]], [[TMP2725]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4928]], label [[COND_TRUE4930:%.*]], label [[COND_FALSE4931:%.*]]
// SIMD-ONLY0:       cond.true4930:
// SIMD-ONLY0-NEXT:    [[TMP2726:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4932:%.*]]
// SIMD-ONLY0:       cond.false4931:
// SIMD-ONLY0-NEXT:    [[TMP2727:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4932]]
// SIMD-ONLY0:       cond.end4932:
// SIMD-ONLY0-NEXT:    [[COND4933:%.*]] = phi double [ [[TMP2726]], [[COND_TRUE4930]] ], [ [[TMP2727]], [[COND_FALSE4931]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4933]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2728:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2729:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4934:%.*]] = fcmp olt double [[TMP2728]], [[TMP2729]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4934]], label [[COND_TRUE4936:%.*]], label [[COND_FALSE4937:%.*]]
// SIMD-ONLY0:       cond.true4936:
// SIMD-ONLY0-NEXT:    [[TMP2730:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4938:%.*]]
// SIMD-ONLY0:       cond.false4937:
// SIMD-ONLY0-NEXT:    [[TMP2731:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4938]]
// SIMD-ONLY0:       cond.end4938:
// SIMD-ONLY0-NEXT:    [[COND4939:%.*]] = phi double [ [[TMP2730]], [[COND_TRUE4936]] ], [ [[TMP2731]], [[COND_FALSE4937]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4939]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2732:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2733:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4940:%.*]] = fcmp ogt double [[TMP2732]], [[TMP2733]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4940]], label [[IF_THEN4942:%.*]], label [[IF_END4943:%.*]]
// SIMD-ONLY0:       if.then4942:
// SIMD-ONLY0-NEXT:    [[TMP2734:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2734]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4943]]
// SIMD-ONLY0:       if.end4943:
// SIMD-ONLY0-NEXT:    [[TMP2735:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2736:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4944:%.*]] = fcmp olt double [[TMP2735]], [[TMP2736]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4944]], label [[IF_THEN4946:%.*]], label [[IF_END4947:%.*]]
// SIMD-ONLY0:       if.then4946:
// SIMD-ONLY0-NEXT:    [[TMP2737:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2737]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4947]]
// SIMD-ONLY0:       if.end4947:
// SIMD-ONLY0-NEXT:    [[TMP2738:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2739:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4948:%.*]] = fcmp ogt double [[TMP2738]], [[TMP2739]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4948]], label [[IF_THEN4950:%.*]], label [[IF_END4951:%.*]]
// SIMD-ONLY0:       if.then4950:
// SIMD-ONLY0-NEXT:    [[TMP2740:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2740]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4951]]
// SIMD-ONLY0:       if.end4951:
// SIMD-ONLY0-NEXT:    [[TMP2741:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2742:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4952:%.*]] = fcmp olt double [[TMP2741]], [[TMP2742]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4952]], label [[IF_THEN4954:%.*]], label [[IF_END4955:%.*]]
// SIMD-ONLY0:       if.then4954:
// SIMD-ONLY0-NEXT:    [[TMP2743:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2743]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4955]]
// SIMD-ONLY0:       if.end4955:
// SIMD-ONLY0-NEXT:    [[TMP2744:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2745:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4956:%.*]] = fcmp ogt double [[TMP2744]], [[TMP2745]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4956]], label [[COND_TRUE4958:%.*]], label [[COND_FALSE4959:%.*]]
// SIMD-ONLY0:       cond.true4958:
// SIMD-ONLY0-NEXT:    [[TMP2746:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4960:%.*]]
// SIMD-ONLY0:       cond.false4959:
// SIMD-ONLY0-NEXT:    [[TMP2747:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4960]]
// SIMD-ONLY0:       cond.end4960:
// SIMD-ONLY0-NEXT:    [[COND4961:%.*]] = phi double [ [[TMP2746]], [[COND_TRUE4958]] ], [ [[TMP2747]], [[COND_FALSE4959]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4961]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2748:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2749:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4962:%.*]] = fcmp olt double [[TMP2748]], [[TMP2749]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4962]], label [[COND_TRUE4964:%.*]], label [[COND_FALSE4965:%.*]]
// SIMD-ONLY0:       cond.true4964:
// SIMD-ONLY0-NEXT:    [[TMP2750:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4966:%.*]]
// SIMD-ONLY0:       cond.false4965:
// SIMD-ONLY0-NEXT:    [[TMP2751:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4966]]
// SIMD-ONLY0:       cond.end4966:
// SIMD-ONLY0-NEXT:    [[COND4967:%.*]] = phi double [ [[TMP2750]], [[COND_TRUE4964]] ], [ [[TMP2751]], [[COND_FALSE4965]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4967]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2752:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2753:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4968:%.*]] = fcmp ogt double [[TMP2752]], [[TMP2753]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4968]], label [[COND_TRUE4970:%.*]], label [[COND_FALSE4971:%.*]]
// SIMD-ONLY0:       cond.true4970:
// SIMD-ONLY0-NEXT:    [[TMP2754:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4972:%.*]]
// SIMD-ONLY0:       cond.false4971:
// SIMD-ONLY0-NEXT:    [[TMP2755:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4972]]
// SIMD-ONLY0:       cond.end4972:
// SIMD-ONLY0-NEXT:    [[COND4973:%.*]] = phi double [ [[TMP2754]], [[COND_TRUE4970]] ], [ [[TMP2755]], [[COND_FALSE4971]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4973]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2756:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2757:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4974:%.*]] = fcmp olt double [[TMP2756]], [[TMP2757]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4974]], label [[COND_TRUE4976:%.*]], label [[COND_FALSE4977:%.*]]
// SIMD-ONLY0:       cond.true4976:
// SIMD-ONLY0-NEXT:    [[TMP2758:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4978:%.*]]
// SIMD-ONLY0:       cond.false4977:
// SIMD-ONLY0-NEXT:    [[TMP2759:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4978]]
// SIMD-ONLY0:       cond.end4978:
// SIMD-ONLY0-NEXT:    [[COND4979:%.*]] = phi double [ [[TMP2758]], [[COND_TRUE4976]] ], [ [[TMP2759]], [[COND_FALSE4977]] ]
// SIMD-ONLY0-NEXT:    store double [[COND4979]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2760:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2761:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4980:%.*]] = fcmp ogt double [[TMP2760]], [[TMP2761]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4980]], label [[IF_THEN4982:%.*]], label [[IF_END4983:%.*]]
// SIMD-ONLY0:       if.then4982:
// SIMD-ONLY0-NEXT:    [[TMP2762:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2762]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4983]]
// SIMD-ONLY0:       if.end4983:
// SIMD-ONLY0-NEXT:    [[TMP2763:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2764:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4984:%.*]] = fcmp olt double [[TMP2763]], [[TMP2764]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4984]], label [[IF_THEN4986:%.*]], label [[IF_END4987:%.*]]
// SIMD-ONLY0:       if.then4986:
// SIMD-ONLY0-NEXT:    [[TMP2765:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2765]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4987]]
// SIMD-ONLY0:       if.end4987:
// SIMD-ONLY0-NEXT:    [[TMP2766:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2767:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4988:%.*]] = fcmp ogt double [[TMP2766]], [[TMP2767]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4988]], label [[IF_THEN4990:%.*]], label [[IF_END4991:%.*]]
// SIMD-ONLY0:       if.then4990:
// SIMD-ONLY0-NEXT:    [[TMP2768:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2768]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4991]]
// SIMD-ONLY0:       if.end4991:
// SIMD-ONLY0-NEXT:    [[TMP2769:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2770:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4992:%.*]] = fcmp olt double [[TMP2769]], [[TMP2770]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4992]], label [[IF_THEN4994:%.*]], label [[IF_END4995:%.*]]
// SIMD-ONLY0:       if.then4994:
// SIMD-ONLY0-NEXT:    [[TMP2771:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2771]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4995]]
// SIMD-ONLY0:       if.end4995:
// SIMD-ONLY0-NEXT:    [[TMP2772:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2773:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4996:%.*]] = fcmp ogt double [[TMP2772]], [[TMP2773]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4996]], label [[COND_TRUE4998:%.*]], label [[COND_FALSE4999:%.*]]
// SIMD-ONLY0:       cond.true4998:
// SIMD-ONLY0-NEXT:    [[TMP2774:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5000:%.*]]
// SIMD-ONLY0:       cond.false4999:
// SIMD-ONLY0-NEXT:    [[TMP2775:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5000]]
// SIMD-ONLY0:       cond.end5000:
// SIMD-ONLY0-NEXT:    [[COND5001:%.*]] = phi double [ [[TMP2774]], [[COND_TRUE4998]] ], [ [[TMP2775]], [[COND_FALSE4999]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5001]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2776:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2777:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5002:%.*]] = fcmp olt double [[TMP2776]], [[TMP2777]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5002]], label [[COND_TRUE5004:%.*]], label [[COND_FALSE5005:%.*]]
// SIMD-ONLY0:       cond.true5004:
// SIMD-ONLY0-NEXT:    [[TMP2778:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5006:%.*]]
// SIMD-ONLY0:       cond.false5005:
// SIMD-ONLY0-NEXT:    [[TMP2779:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5006]]
// SIMD-ONLY0:       cond.end5006:
// SIMD-ONLY0-NEXT:    [[COND5007:%.*]] = phi double [ [[TMP2778]], [[COND_TRUE5004]] ], [ [[TMP2779]], [[COND_FALSE5005]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5007]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2780:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2781:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5008:%.*]] = fcmp ogt double [[TMP2780]], [[TMP2781]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5008]], label [[COND_TRUE5010:%.*]], label [[COND_FALSE5011:%.*]]
// SIMD-ONLY0:       cond.true5010:
// SIMD-ONLY0-NEXT:    [[TMP2782:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5012:%.*]]
// SIMD-ONLY0:       cond.false5011:
// SIMD-ONLY0-NEXT:    [[TMP2783:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5012]]
// SIMD-ONLY0:       cond.end5012:
// SIMD-ONLY0-NEXT:    [[COND5013:%.*]] = phi double [ [[TMP2782]], [[COND_TRUE5010]] ], [ [[TMP2783]], [[COND_FALSE5011]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5013]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2784:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2785:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5014:%.*]] = fcmp olt double [[TMP2784]], [[TMP2785]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5014]], label [[COND_TRUE5016:%.*]], label [[COND_FALSE5017:%.*]]
// SIMD-ONLY0:       cond.true5016:
// SIMD-ONLY0-NEXT:    [[TMP2786:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5018:%.*]]
// SIMD-ONLY0:       cond.false5017:
// SIMD-ONLY0-NEXT:    [[TMP2787:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5018]]
// SIMD-ONLY0:       cond.end5018:
// SIMD-ONLY0-NEXT:    [[COND5019:%.*]] = phi double [ [[TMP2786]], [[COND_TRUE5016]] ], [ [[TMP2787]], [[COND_FALSE5017]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5019]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2788:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2789:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5020:%.*]] = fcmp ogt double [[TMP2788]], [[TMP2789]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5020]], label [[IF_THEN5022:%.*]], label [[IF_END5023:%.*]]
// SIMD-ONLY0:       if.then5022:
// SIMD-ONLY0-NEXT:    [[TMP2790:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2790]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5023]]
// SIMD-ONLY0:       if.end5023:
// SIMD-ONLY0-NEXT:    [[TMP2791:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2792:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5024:%.*]] = fcmp olt double [[TMP2791]], [[TMP2792]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5024]], label [[IF_THEN5026:%.*]], label [[IF_END5027:%.*]]
// SIMD-ONLY0:       if.then5026:
// SIMD-ONLY0-NEXT:    [[TMP2793:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2793]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5027]]
// SIMD-ONLY0:       if.end5027:
// SIMD-ONLY0-NEXT:    [[TMP2794:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2795:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5028:%.*]] = fcmp ogt double [[TMP2794]], [[TMP2795]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5028]], label [[IF_THEN5030:%.*]], label [[IF_END5031:%.*]]
// SIMD-ONLY0:       if.then5030:
// SIMD-ONLY0-NEXT:    [[TMP2796:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2796]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5031]]
// SIMD-ONLY0:       if.end5031:
// SIMD-ONLY0-NEXT:    [[TMP2797:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2798:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5032:%.*]] = fcmp olt double [[TMP2797]], [[TMP2798]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5032]], label [[IF_THEN5034:%.*]], label [[IF_END5035:%.*]]
// SIMD-ONLY0:       if.then5034:
// SIMD-ONLY0-NEXT:    [[TMP2799:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2799]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5035]]
// SIMD-ONLY0:       if.end5035:
// SIMD-ONLY0-NEXT:    [[TMP2800:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2801:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5036:%.*]] = fcmp ogt double [[TMP2800]], [[TMP2801]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5036]], label [[COND_TRUE5038:%.*]], label [[COND_FALSE5039:%.*]]
// SIMD-ONLY0:       cond.true5038:
// SIMD-ONLY0-NEXT:    [[TMP2802:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5040:%.*]]
// SIMD-ONLY0:       cond.false5039:
// SIMD-ONLY0-NEXT:    [[TMP2803:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5040]]
// SIMD-ONLY0:       cond.end5040:
// SIMD-ONLY0-NEXT:    [[COND5041:%.*]] = phi double [ [[TMP2802]], [[COND_TRUE5038]] ], [ [[TMP2803]], [[COND_FALSE5039]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5041]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2804:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2805:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5042:%.*]] = fcmp olt double [[TMP2804]], [[TMP2805]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5042]], label [[COND_TRUE5044:%.*]], label [[COND_FALSE5045:%.*]]
// SIMD-ONLY0:       cond.true5044:
// SIMD-ONLY0-NEXT:    [[TMP2806:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5046:%.*]]
// SIMD-ONLY0:       cond.false5045:
// SIMD-ONLY0-NEXT:    [[TMP2807:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5046]]
// SIMD-ONLY0:       cond.end5046:
// SIMD-ONLY0-NEXT:    [[COND5047:%.*]] = phi double [ [[TMP2806]], [[COND_TRUE5044]] ], [ [[TMP2807]], [[COND_FALSE5045]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5047]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2808:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2809:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5048:%.*]] = fcmp ogt double [[TMP2808]], [[TMP2809]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5048]], label [[COND_TRUE5050:%.*]], label [[COND_FALSE5051:%.*]]
// SIMD-ONLY0:       cond.true5050:
// SIMD-ONLY0-NEXT:    [[TMP2810:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5052:%.*]]
// SIMD-ONLY0:       cond.false5051:
// SIMD-ONLY0-NEXT:    [[TMP2811:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5052]]
// SIMD-ONLY0:       cond.end5052:
// SIMD-ONLY0-NEXT:    [[COND5053:%.*]] = phi double [ [[TMP2810]], [[COND_TRUE5050]] ], [ [[TMP2811]], [[COND_FALSE5051]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5053]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2812:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2813:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5054:%.*]] = fcmp olt double [[TMP2812]], [[TMP2813]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5054]], label [[COND_TRUE5056:%.*]], label [[COND_FALSE5057:%.*]]
// SIMD-ONLY0:       cond.true5056:
// SIMD-ONLY0-NEXT:    [[TMP2814:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5058:%.*]]
// SIMD-ONLY0:       cond.false5057:
// SIMD-ONLY0-NEXT:    [[TMP2815:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5058]]
// SIMD-ONLY0:       cond.end5058:
// SIMD-ONLY0-NEXT:    [[COND5059:%.*]] = phi double [ [[TMP2814]], [[COND_TRUE5056]] ], [ [[TMP2815]], [[COND_FALSE5057]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5059]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2816:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2817:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5060:%.*]] = fcmp ogt double [[TMP2816]], [[TMP2817]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5060]], label [[IF_THEN5062:%.*]], label [[IF_END5063:%.*]]
// SIMD-ONLY0:       if.then5062:
// SIMD-ONLY0-NEXT:    [[TMP2818:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2818]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5063]]
// SIMD-ONLY0:       if.end5063:
// SIMD-ONLY0-NEXT:    [[TMP2819:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2820:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5064:%.*]] = fcmp olt double [[TMP2819]], [[TMP2820]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5064]], label [[IF_THEN5066:%.*]], label [[IF_END5067:%.*]]
// SIMD-ONLY0:       if.then5066:
// SIMD-ONLY0-NEXT:    [[TMP2821:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2821]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5067]]
// SIMD-ONLY0:       if.end5067:
// SIMD-ONLY0-NEXT:    [[TMP2822:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2823:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5068:%.*]] = fcmp ogt double [[TMP2822]], [[TMP2823]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5068]], label [[IF_THEN5070:%.*]], label [[IF_END5071:%.*]]
// SIMD-ONLY0:       if.then5070:
// SIMD-ONLY0-NEXT:    [[TMP2824:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2824]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5071]]
// SIMD-ONLY0:       if.end5071:
// SIMD-ONLY0-NEXT:    [[TMP2825:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2826:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5072:%.*]] = fcmp olt double [[TMP2825]], [[TMP2826]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5072]], label [[IF_THEN5074:%.*]], label [[IF_END5075:%.*]]
// SIMD-ONLY0:       if.then5074:
// SIMD-ONLY0-NEXT:    [[TMP2827:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2827]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5075]]
// SIMD-ONLY0:       if.end5075:
// SIMD-ONLY0-NEXT:    [[TMP2828:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2829:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5076:%.*]] = fcmp ogt double [[TMP2828]], [[TMP2829]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5076]], label [[COND_TRUE5078:%.*]], label [[COND_FALSE5079:%.*]]
// SIMD-ONLY0:       cond.true5078:
// SIMD-ONLY0-NEXT:    [[TMP2830:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5080:%.*]]
// SIMD-ONLY0:       cond.false5079:
// SIMD-ONLY0-NEXT:    [[TMP2831:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5080]]
// SIMD-ONLY0:       cond.end5080:
// SIMD-ONLY0-NEXT:    [[COND5081:%.*]] = phi double [ [[TMP2830]], [[COND_TRUE5078]] ], [ [[TMP2831]], [[COND_FALSE5079]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5081]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2832:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2833:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5082:%.*]] = fcmp olt double [[TMP2832]], [[TMP2833]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5082]], label [[COND_TRUE5084:%.*]], label [[COND_FALSE5085:%.*]]
// SIMD-ONLY0:       cond.true5084:
// SIMD-ONLY0-NEXT:    [[TMP2834:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5086:%.*]]
// SIMD-ONLY0:       cond.false5085:
// SIMD-ONLY0-NEXT:    [[TMP2835:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5086]]
// SIMD-ONLY0:       cond.end5086:
// SIMD-ONLY0-NEXT:    [[COND5087:%.*]] = phi double [ [[TMP2834]], [[COND_TRUE5084]] ], [ [[TMP2835]], [[COND_FALSE5085]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5087]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2836:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2837:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5088:%.*]] = fcmp ogt double [[TMP2836]], [[TMP2837]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5088]], label [[COND_TRUE5090:%.*]], label [[COND_FALSE5091:%.*]]
// SIMD-ONLY0:       cond.true5090:
// SIMD-ONLY0-NEXT:    [[TMP2838:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5092:%.*]]
// SIMD-ONLY0:       cond.false5091:
// SIMD-ONLY0-NEXT:    [[TMP2839:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5092]]
// SIMD-ONLY0:       cond.end5092:
// SIMD-ONLY0-NEXT:    [[COND5093:%.*]] = phi double [ [[TMP2838]], [[COND_TRUE5090]] ], [ [[TMP2839]], [[COND_FALSE5091]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5093]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2840:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2841:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5094:%.*]] = fcmp olt double [[TMP2840]], [[TMP2841]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5094]], label [[COND_TRUE5096:%.*]], label [[COND_FALSE5097:%.*]]
// SIMD-ONLY0:       cond.true5096:
// SIMD-ONLY0-NEXT:    [[TMP2842:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5098:%.*]]
// SIMD-ONLY0:       cond.false5097:
// SIMD-ONLY0-NEXT:    [[TMP2843:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5098]]
// SIMD-ONLY0:       cond.end5098:
// SIMD-ONLY0-NEXT:    [[COND5099:%.*]] = phi double [ [[TMP2842]], [[COND_TRUE5096]] ], [ [[TMP2843]], [[COND_FALSE5097]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5099]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2844:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2845:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5100:%.*]] = fcmp ogt double [[TMP2844]], [[TMP2845]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5100]], label [[IF_THEN5102:%.*]], label [[IF_END5103:%.*]]
// SIMD-ONLY0:       if.then5102:
// SIMD-ONLY0-NEXT:    [[TMP2846:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2846]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5103]]
// SIMD-ONLY0:       if.end5103:
// SIMD-ONLY0-NEXT:    [[TMP2847:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2848:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5104:%.*]] = fcmp olt double [[TMP2847]], [[TMP2848]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5104]], label [[IF_THEN5106:%.*]], label [[IF_END5107:%.*]]
// SIMD-ONLY0:       if.then5106:
// SIMD-ONLY0-NEXT:    [[TMP2849:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2849]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5107]]
// SIMD-ONLY0:       if.end5107:
// SIMD-ONLY0-NEXT:    [[TMP2850:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2851:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5108:%.*]] = fcmp ogt double [[TMP2850]], [[TMP2851]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5108]], label [[IF_THEN5110:%.*]], label [[IF_END5111:%.*]]
// SIMD-ONLY0:       if.then5110:
// SIMD-ONLY0-NEXT:    [[TMP2852:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2852]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5111]]
// SIMD-ONLY0:       if.end5111:
// SIMD-ONLY0-NEXT:    [[TMP2853:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2854:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5112:%.*]] = fcmp olt double [[TMP2853]], [[TMP2854]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5112]], label [[IF_THEN5114:%.*]], label [[IF_END5115:%.*]]
// SIMD-ONLY0:       if.then5114:
// SIMD-ONLY0-NEXT:    [[TMP2855:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2855]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5115]]
// SIMD-ONLY0:       if.end5115:
// SIMD-ONLY0-NEXT:    ret void
//
//
// SIMD-ONLY0-LABEL: @bar(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[CX:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[CV:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[CR:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[CE:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[CD:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCX:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCV:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCR:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCE:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCD:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[SX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SV:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SR:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USV:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USR:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[IX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IV:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IR:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[ID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIV:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIR:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[LX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LR:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULR:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLR:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLR:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[FX:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FV:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FE:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FD:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[DX:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DV:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DE:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DD:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON1]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON2]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON3]], ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON4:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON4]], ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON5:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON5]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON6:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON6]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON7:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON7]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON8:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON8]], ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON9:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON9]], ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON10:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON10]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON11:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON11]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON12:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON12]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON13:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON13]], ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON14:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON14]], ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON15:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON15]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON16:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON16]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON17:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON17]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON18:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON18]], ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON19:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON19]], ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON20:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON20]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON21:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON21]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON22:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON22]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON23:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON23]], ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON24:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON24]], ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON25:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON25]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON26:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON26]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON27:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON27]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON28:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON28]], ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON29:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON29]], ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON30:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON30]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON31:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON31]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON32:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON32]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON33:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON33]], ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON34:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON34]], ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON35:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON35]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON36:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON36]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON37:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON37]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON38:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON38]], ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON39:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON39]], ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON40:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON40]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON41:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON41]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON42:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON42]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON43:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON43]], ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON44:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON44]], ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON45:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON45]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON46:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON46]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON47:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON47]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON48:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON48]], ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON49:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON49]], ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON50:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON50]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON51:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON51]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON52:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON52]], ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON53:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON53]], ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON54:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON54]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON55:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON55]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON56:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON56]], ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON57:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON57]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP0]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = sext i8 [[TMP1]] to i32
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV58:%.*]] = sext i8 [[TMP2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV]], [[CONV58]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// SIMD-ONLY0:       if.then:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP3]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END]]
// SIMD-ONLY0:       if.end:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP4]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV60:%.*]] = sext i8 [[TMP5]] to i32
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV61:%.*]] = sext i8 [[TMP6]] to i32
// SIMD-ONLY0-NEXT:    [[CMP62:%.*]] = icmp sgt i32 [[CONV60]], [[CONV61]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP62]], label [[IF_THEN64:%.*]], label [[IF_END65:%.*]]
// SIMD-ONLY0:       if.then64:
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP7]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END65]]
// SIMD-ONLY0:       if.end65:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP8]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV66:%.*]] = sext i8 [[TMP9]] to i32
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV67:%.*]] = sext i8 [[TMP10]] to i32
// SIMD-ONLY0-NEXT:    [[CMP68:%.*]] = icmp slt i32 [[CONV66]], [[CONV67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP68]], label [[IF_THEN70:%.*]], label [[IF_END71:%.*]]
// SIMD-ONLY0:       if.then70:
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP11]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END71]]
// SIMD-ONLY0:       if.end71:
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP12]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV72:%.*]] = sext i8 [[TMP13]] to i32
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV73:%.*]] = sext i8 [[TMP14]] to i32
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp slt i32 [[CONV72]], [[CONV73]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[IF_THEN76:%.*]], label [[IF_END77:%.*]]
// SIMD-ONLY0:       if.then76:
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP15]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END77]]
// SIMD-ONLY0:       if.end77:
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP16]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV78:%.*]] = sext i8 [[TMP17]] to i32
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV79:%.*]] = sext i8 [[TMP18]] to i32
// SIMD-ONLY0-NEXT:    [[CMP80:%.*]] = icmp eq i32 [[CONV78]], [[CONV79]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP80]], label [[IF_THEN82:%.*]], label [[IF_END83:%.*]]
// SIMD-ONLY0:       if.then82:
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP19]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END83]]
// SIMD-ONLY0:       if.end83:
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP20]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV84:%.*]] = sext i8 [[TMP21]] to i32
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV85:%.*]] = sext i8 [[TMP22]] to i32
// SIMD-ONLY0-NEXT:    [[CMP86:%.*]] = icmp eq i32 [[CONV84]], [[CONV85]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP86]], label [[IF_THEN88:%.*]], label [[IF_END89:%.*]]
// SIMD-ONLY0:       if.then88:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP23]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END89]]
// SIMD-ONLY0:       if.end89:
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV90:%.*]] = sext i8 [[TMP24]] to i32
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV91:%.*]] = sext i8 [[TMP25]] to i32
// SIMD-ONLY0-NEXT:    [[CMP92:%.*]] = icmp sgt i32 [[CONV90]], [[CONV91]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP92]], label [[IF_THEN94:%.*]], label [[IF_END95:%.*]]
// SIMD-ONLY0:       if.then94:
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP26]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END95]]
// SIMD-ONLY0:       if.end95:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP27]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV96:%.*]] = sext i8 [[TMP28]] to i32
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV97:%.*]] = sext i8 [[TMP29]] to i32
// SIMD-ONLY0-NEXT:    [[CMP98:%.*]] = icmp sgt i32 [[CONV96]], [[CONV97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP98]], label [[IF_THEN100:%.*]], label [[IF_END101:%.*]]
// SIMD-ONLY0:       if.then100:
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP30]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END101]]
// SIMD-ONLY0:       if.end101:
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP31]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV102:%.*]] = sext i8 [[TMP32]] to i32
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV103:%.*]] = sext i8 [[TMP33]] to i32
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = icmp slt i32 [[CONV102]], [[CONV103]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[IF_THEN106:%.*]], label [[IF_END107:%.*]]
// SIMD-ONLY0:       if.then106:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP34]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END107]]
// SIMD-ONLY0:       if.end107:
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP35]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV108:%.*]] = sext i8 [[TMP36]] to i32
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV109:%.*]] = sext i8 [[TMP37]] to i32
// SIMD-ONLY0-NEXT:    [[CMP110:%.*]] = icmp slt i32 [[CONV108]], [[CONV109]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP110]], label [[IF_THEN112:%.*]], label [[IF_END113:%.*]]
// SIMD-ONLY0:       if.then112:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP38]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END113]]
// SIMD-ONLY0:       if.end113:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP39]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV114:%.*]] = sext i8 [[TMP40]] to i32
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = sext i8 [[TMP41]] to i32
// SIMD-ONLY0-NEXT:    [[CMP116:%.*]] = icmp eq i32 [[CONV114]], [[CONV115]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP116]], label [[IF_THEN118:%.*]], label [[IF_END119:%.*]]
// SIMD-ONLY0:       if.then118:
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP42]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END119]]
// SIMD-ONLY0:       if.end119:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP43]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV120:%.*]] = sext i8 [[TMP44]] to i32
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV121:%.*]] = sext i8 [[TMP45]] to i32
// SIMD-ONLY0-NEXT:    [[CMP122:%.*]] = icmp eq i32 [[CONV120]], [[CONV121]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP122]], label [[IF_THEN124:%.*]], label [[IF_END125:%.*]]
// SIMD-ONLY0:       if.then124:
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP46]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END125]]
// SIMD-ONLY0:       if.end125:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP47]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = sext i8 [[TMP48]] to i32
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV127:%.*]] = sext i8 [[TMP49]] to i32
// SIMD-ONLY0-NEXT:    [[CMP128:%.*]] = icmp eq i32 [[CONV126]], [[CONV127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP128]], label [[IF_THEN130:%.*]], label [[IF_ELSE:%.*]]
// SIMD-ONLY0:       if.then130:
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP50]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END131:%.*]]
// SIMD-ONLY0:       if.else:
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP51]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END131]]
// SIMD-ONLY0:       if.end131:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV132:%.*]] = sext i8 [[TMP52]] to i32
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV133:%.*]] = sext i8 [[TMP53]] to i32
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = icmp eq i32 [[CONV132]], [[CONV133]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[IF_THEN136:%.*]], label [[IF_ELSE137:%.*]]
// SIMD-ONLY0:       if.then136:
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP54]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END138:%.*]]
// SIMD-ONLY0:       if.else137:
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP55]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END138]]
// SIMD-ONLY0:       if.end138:
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV139:%.*]] = sext i8 [[TMP56]] to i32
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV140:%.*]] = sext i8 [[TMP57]] to i32
// SIMD-ONLY0-NEXT:    [[CMP141:%.*]] = icmp eq i32 [[CONV139]], [[CONV140]]
// SIMD-ONLY0-NEXT:    [[CONV142:%.*]] = zext i1 [[CMP141]] to i32
// SIMD-ONLY0-NEXT:    [[CONV143:%.*]] = trunc i32 [[CONV142]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV143]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL:%.*]] = icmp ne i8 [[TMP58]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL]], label [[IF_THEN144:%.*]], label [[IF_END145:%.*]]
// SIMD-ONLY0:       if.then144:
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP59]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END145]]
// SIMD-ONLY0:       if.end145:
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV146:%.*]] = sext i8 [[TMP60]] to i32
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV147:%.*]] = sext i8 [[TMP61]] to i32
// SIMD-ONLY0-NEXT:    [[CMP148:%.*]] = icmp eq i32 [[CONV146]], [[CONV147]]
// SIMD-ONLY0-NEXT:    [[CONV149:%.*]] = zext i1 [[CMP148]] to i32
// SIMD-ONLY0-NEXT:    [[CONV150:%.*]] = trunc i32 [[CONV149]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV150]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL151:%.*]] = icmp ne i8 [[TMP62]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL151]], label [[IF_THEN152:%.*]], label [[IF_END153:%.*]]
// SIMD-ONLY0:       if.then152:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP63]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END153]]
// SIMD-ONLY0:       if.end153:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV154:%.*]] = sext i8 [[TMP64]] to i32
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV155:%.*]] = sext i8 [[TMP65]] to i32
// SIMD-ONLY0-NEXT:    [[CMP156:%.*]] = icmp eq i32 [[CONV154]], [[CONV155]]
// SIMD-ONLY0-NEXT:    [[CONV157:%.*]] = zext i1 [[CMP156]] to i32
// SIMD-ONLY0-NEXT:    [[CONV158:%.*]] = trunc i32 [[CONV157]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV158]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL159:%.*]] = icmp ne i8 [[TMP66]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL159]], label [[IF_THEN160:%.*]], label [[IF_ELSE161:%.*]]
// SIMD-ONLY0:       if.then160:
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP67]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END162:%.*]]
// SIMD-ONLY0:       if.else161:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP68]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END162]]
// SIMD-ONLY0:       if.end162:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV163:%.*]] = sext i8 [[TMP69]] to i32
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV164:%.*]] = sext i8 [[TMP70]] to i32
// SIMD-ONLY0-NEXT:    [[CMP165:%.*]] = icmp eq i32 [[CONV163]], [[CONV164]]
// SIMD-ONLY0-NEXT:    [[CONV166:%.*]] = zext i1 [[CMP165]] to i32
// SIMD-ONLY0-NEXT:    [[CONV167:%.*]] = trunc i32 [[CONV166]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV167]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL168:%.*]] = icmp ne i8 [[TMP71]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL168]], label [[IF_THEN169:%.*]], label [[IF_ELSE170:%.*]]
// SIMD-ONLY0:       if.then169:
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP72]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END171:%.*]]
// SIMD-ONLY0:       if.else170:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP73]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END171]]
// SIMD-ONLY0:       if.end171:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP74]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV172:%.*]] = sext i8 [[TMP75]] to i32
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV173:%.*]] = sext i8 [[TMP76]] to i32
// SIMD-ONLY0-NEXT:    [[CMP174:%.*]] = icmp sgt i32 [[CONV172]], [[CONV173]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP174]], label [[IF_THEN176:%.*]], label [[IF_END177:%.*]]
// SIMD-ONLY0:       if.then176:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP77]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END177]]
// SIMD-ONLY0:       if.end177:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP78]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV178:%.*]] = sext i8 [[TMP79]] to i32
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV179:%.*]] = sext i8 [[TMP80]] to i32
// SIMD-ONLY0-NEXT:    [[CMP180:%.*]] = icmp sgt i32 [[CONV178]], [[CONV179]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP180]], label [[IF_THEN182:%.*]], label [[IF_END183:%.*]]
// SIMD-ONLY0:       if.then182:
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP81]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END183]]
// SIMD-ONLY0:       if.end183:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP82]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV184:%.*]] = sext i8 [[TMP83]] to i32
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV185:%.*]] = sext i8 [[TMP84]] to i32
// SIMD-ONLY0-NEXT:    [[CMP186:%.*]] = icmp slt i32 [[CONV184]], [[CONV185]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP186]], label [[IF_THEN188:%.*]], label [[IF_END189:%.*]]
// SIMD-ONLY0:       if.then188:
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP85]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END189]]
// SIMD-ONLY0:       if.end189:
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP86]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV190:%.*]] = sext i8 [[TMP87]] to i32
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV191:%.*]] = sext i8 [[TMP88]] to i32
// SIMD-ONLY0-NEXT:    [[CMP192:%.*]] = icmp slt i32 [[CONV190]], [[CONV191]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP192]], label [[IF_THEN194:%.*]], label [[IF_END195:%.*]]
// SIMD-ONLY0:       if.then194:
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP89]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END195]]
// SIMD-ONLY0:       if.end195:
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP90]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV196:%.*]] = sext i8 [[TMP91]] to i32
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV197:%.*]] = sext i8 [[TMP92]] to i32
// SIMD-ONLY0-NEXT:    [[CMP198:%.*]] = icmp eq i32 [[CONV196]], [[CONV197]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP198]], label [[IF_THEN200:%.*]], label [[IF_END201:%.*]]
// SIMD-ONLY0:       if.then200:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP93]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END201]]
// SIMD-ONLY0:       if.end201:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP94]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV202:%.*]] = sext i8 [[TMP95]] to i32
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV203:%.*]] = sext i8 [[TMP96]] to i32
// SIMD-ONLY0-NEXT:    [[CMP204:%.*]] = icmp eq i32 [[CONV202]], [[CONV203]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP204]], label [[IF_THEN206:%.*]], label [[IF_END207:%.*]]
// SIMD-ONLY0:       if.then206:
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP97]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END207]]
// SIMD-ONLY0:       if.end207:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV208:%.*]] = sext i8 [[TMP98]] to i32
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV209:%.*]] = sext i8 [[TMP99]] to i32
// SIMD-ONLY0-NEXT:    [[CMP210:%.*]] = icmp sgt i32 [[CONV208]], [[CONV209]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP210]], label [[IF_THEN212:%.*]], label [[IF_END213:%.*]]
// SIMD-ONLY0:       if.then212:
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP100]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END213]]
// SIMD-ONLY0:       if.end213:
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP101]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV214:%.*]] = sext i8 [[TMP102]] to i32
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV215:%.*]] = sext i8 [[TMP103]] to i32
// SIMD-ONLY0-NEXT:    [[CMP216:%.*]] = icmp sgt i32 [[CONV214]], [[CONV215]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP216]], label [[IF_THEN218:%.*]], label [[IF_END219:%.*]]
// SIMD-ONLY0:       if.then218:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP104]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END219]]
// SIMD-ONLY0:       if.end219:
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP105]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV220:%.*]] = sext i8 [[TMP106]] to i32
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV221:%.*]] = sext i8 [[TMP107]] to i32
// SIMD-ONLY0-NEXT:    [[CMP222:%.*]] = icmp slt i32 [[CONV220]], [[CONV221]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP222]], label [[IF_THEN224:%.*]], label [[IF_END225:%.*]]
// SIMD-ONLY0:       if.then224:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP108]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END225]]
// SIMD-ONLY0:       if.end225:
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP109]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV226:%.*]] = sext i8 [[TMP110]] to i32
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV227:%.*]] = sext i8 [[TMP111]] to i32
// SIMD-ONLY0-NEXT:    [[CMP228:%.*]] = icmp slt i32 [[CONV226]], [[CONV227]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP228]], label [[IF_THEN230:%.*]], label [[IF_END231:%.*]]
// SIMD-ONLY0:       if.then230:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP112]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END231]]
// SIMD-ONLY0:       if.end231:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP113]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV232:%.*]] = sext i8 [[TMP114]] to i32
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV233:%.*]] = sext i8 [[TMP115]] to i32
// SIMD-ONLY0-NEXT:    [[CMP234:%.*]] = icmp eq i32 [[CONV232]], [[CONV233]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP234]], label [[IF_THEN236:%.*]], label [[IF_END237:%.*]]
// SIMD-ONLY0:       if.then236:
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP116]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END237]]
// SIMD-ONLY0:       if.end237:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP117]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV238:%.*]] = sext i8 [[TMP118]] to i32
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV239:%.*]] = sext i8 [[TMP119]] to i32
// SIMD-ONLY0-NEXT:    [[CMP240:%.*]] = icmp eq i32 [[CONV238]], [[CONV239]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP240]], label [[IF_THEN242:%.*]], label [[IF_END243:%.*]]
// SIMD-ONLY0:       if.then242:
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP120]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END243]]
// SIMD-ONLY0:       if.end243:
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP121]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV244:%.*]] = sext i8 [[TMP122]] to i32
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV245:%.*]] = sext i8 [[TMP123]] to i32
// SIMD-ONLY0-NEXT:    [[CMP246:%.*]] = icmp eq i32 [[CONV244]], [[CONV245]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP246]], label [[IF_THEN248:%.*]], label [[IF_ELSE249:%.*]]
// SIMD-ONLY0:       if.then248:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP124]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END250:%.*]]
// SIMD-ONLY0:       if.else249:
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP125]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END250]]
// SIMD-ONLY0:       if.end250:
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV251:%.*]] = sext i8 [[TMP126]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV252:%.*]] = sext i8 [[TMP127]] to i32
// SIMD-ONLY0-NEXT:    [[CMP253:%.*]] = icmp eq i32 [[CONV251]], [[CONV252]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP253]], label [[IF_THEN255:%.*]], label [[IF_ELSE256:%.*]]
// SIMD-ONLY0:       if.then255:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP128]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END257:%.*]]
// SIMD-ONLY0:       if.else256:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP129]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END257]]
// SIMD-ONLY0:       if.end257:
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV258:%.*]] = sext i8 [[TMP130]] to i32
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV259:%.*]] = sext i8 [[TMP131]] to i32
// SIMD-ONLY0-NEXT:    [[CMP260:%.*]] = icmp eq i32 [[CONV258]], [[CONV259]]
// SIMD-ONLY0-NEXT:    [[CONV261:%.*]] = zext i1 [[CMP260]] to i32
// SIMD-ONLY0-NEXT:    [[CONV262:%.*]] = trunc i32 [[CONV261]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV262]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL263:%.*]] = icmp ne i8 [[TMP132]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL263]], label [[IF_THEN264:%.*]], label [[IF_END265:%.*]]
// SIMD-ONLY0:       if.then264:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP133]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END265]]
// SIMD-ONLY0:       if.end265:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV266:%.*]] = sext i8 [[TMP134]] to i32
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV267:%.*]] = sext i8 [[TMP135]] to i32
// SIMD-ONLY0-NEXT:    [[CMP268:%.*]] = icmp eq i32 [[CONV266]], [[CONV267]]
// SIMD-ONLY0-NEXT:    [[CONV269:%.*]] = zext i1 [[CMP268]] to i32
// SIMD-ONLY0-NEXT:    [[CONV270:%.*]] = trunc i32 [[CONV269]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV270]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL271:%.*]] = icmp ne i8 [[TMP136]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL271]], label [[IF_THEN272:%.*]], label [[IF_END273:%.*]]
// SIMD-ONLY0:       if.then272:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP137]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END273]]
// SIMD-ONLY0:       if.end273:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV274:%.*]] = sext i8 [[TMP138]] to i32
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV275:%.*]] = sext i8 [[TMP139]] to i32
// SIMD-ONLY0-NEXT:    [[CMP276:%.*]] = icmp eq i32 [[CONV274]], [[CONV275]]
// SIMD-ONLY0-NEXT:    [[CONV277:%.*]] = zext i1 [[CMP276]] to i32
// SIMD-ONLY0-NEXT:    [[CONV278:%.*]] = trunc i32 [[CONV277]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV278]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL279:%.*]] = icmp ne i8 [[TMP140]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL279]], label [[IF_THEN280:%.*]], label [[IF_ELSE281:%.*]]
// SIMD-ONLY0:       if.then280:
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP141]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END282:%.*]]
// SIMD-ONLY0:       if.else281:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP142]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END282]]
// SIMD-ONLY0:       if.end282:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV283:%.*]] = sext i8 [[TMP143]] to i32
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV284:%.*]] = sext i8 [[TMP144]] to i32
// SIMD-ONLY0-NEXT:    [[CMP285:%.*]] = icmp eq i32 [[CONV283]], [[CONV284]]
// SIMD-ONLY0-NEXT:    [[CONV286:%.*]] = zext i1 [[CMP285]] to i32
// SIMD-ONLY0-NEXT:    [[CONV287:%.*]] = trunc i32 [[CONV286]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV287]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL288:%.*]] = icmp ne i8 [[TMP145]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL288]], label [[IF_THEN289:%.*]], label [[IF_ELSE290:%.*]]
// SIMD-ONLY0:       if.then289:
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP146]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END291:%.*]]
// SIMD-ONLY0:       if.else290:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP147]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END291]]
// SIMD-ONLY0:       if.end291:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP148]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV292:%.*]] = sext i8 [[TMP149]] to i32
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV293:%.*]] = sext i8 [[TMP150]] to i32
// SIMD-ONLY0-NEXT:    [[CMP294:%.*]] = icmp sgt i32 [[CONV292]], [[CONV293]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP294]], label [[IF_THEN296:%.*]], label [[IF_END297:%.*]]
// SIMD-ONLY0:       if.then296:
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP151]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END297]]
// SIMD-ONLY0:       if.end297:
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP152]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV298:%.*]] = sext i8 [[TMP153]] to i32
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV299:%.*]] = sext i8 [[TMP154]] to i32
// SIMD-ONLY0-NEXT:    [[CMP300:%.*]] = icmp sgt i32 [[CONV298]], [[CONV299]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP300]], label [[IF_THEN302:%.*]], label [[IF_END303:%.*]]
// SIMD-ONLY0:       if.then302:
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP155]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END303]]
// SIMD-ONLY0:       if.end303:
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP156]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV304:%.*]] = sext i8 [[TMP157]] to i32
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV305:%.*]] = sext i8 [[TMP158]] to i32
// SIMD-ONLY0-NEXT:    [[CMP306:%.*]] = icmp slt i32 [[CONV304]], [[CONV305]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP306]], label [[IF_THEN308:%.*]], label [[IF_END309:%.*]]
// SIMD-ONLY0:       if.then308:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP159]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END309]]
// SIMD-ONLY0:       if.end309:
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP160]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV310:%.*]] = sext i8 [[TMP161]] to i32
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV311:%.*]] = sext i8 [[TMP162]] to i32
// SIMD-ONLY0-NEXT:    [[CMP312:%.*]] = icmp slt i32 [[CONV310]], [[CONV311]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP312]], label [[IF_THEN314:%.*]], label [[IF_END315:%.*]]
// SIMD-ONLY0:       if.then314:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP163]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END315]]
// SIMD-ONLY0:       if.end315:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP164]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV316:%.*]] = sext i8 [[TMP165]] to i32
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV317:%.*]] = sext i8 [[TMP166]] to i32
// SIMD-ONLY0-NEXT:    [[CMP318:%.*]] = icmp eq i32 [[CONV316]], [[CONV317]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP318]], label [[IF_THEN320:%.*]], label [[IF_END321:%.*]]
// SIMD-ONLY0:       if.then320:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP167]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END321]]
// SIMD-ONLY0:       if.end321:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP168]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV322:%.*]] = sext i8 [[TMP169]] to i32
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV323:%.*]] = sext i8 [[TMP170]] to i32
// SIMD-ONLY0-NEXT:    [[CMP324:%.*]] = icmp eq i32 [[CONV322]], [[CONV323]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP324]], label [[IF_THEN326:%.*]], label [[IF_END327:%.*]]
// SIMD-ONLY0:       if.then326:
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP171]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END327]]
// SIMD-ONLY0:       if.end327:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV328:%.*]] = sext i8 [[TMP172]] to i32
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV329:%.*]] = sext i8 [[TMP173]] to i32
// SIMD-ONLY0-NEXT:    [[CMP330:%.*]] = icmp sgt i32 [[CONV328]], [[CONV329]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP330]], label [[IF_THEN332:%.*]], label [[IF_END333:%.*]]
// SIMD-ONLY0:       if.then332:
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP174]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END333]]
// SIMD-ONLY0:       if.end333:
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP175]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV334:%.*]] = sext i8 [[TMP176]] to i32
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV335:%.*]] = sext i8 [[TMP177]] to i32
// SIMD-ONLY0-NEXT:    [[CMP336:%.*]] = icmp sgt i32 [[CONV334]], [[CONV335]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP336]], label [[IF_THEN338:%.*]], label [[IF_END339:%.*]]
// SIMD-ONLY0:       if.then338:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP178]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END339]]
// SIMD-ONLY0:       if.end339:
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP179]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV340:%.*]] = sext i8 [[TMP180]] to i32
// SIMD-ONLY0-NEXT:    [[TMP181:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV341:%.*]] = sext i8 [[TMP181]] to i32
// SIMD-ONLY0-NEXT:    [[CMP342:%.*]] = icmp slt i32 [[CONV340]], [[CONV341]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP342]], label [[IF_THEN344:%.*]], label [[IF_END345:%.*]]
// SIMD-ONLY0:       if.then344:
// SIMD-ONLY0-NEXT:    [[TMP182:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP182]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END345]]
// SIMD-ONLY0:       if.end345:
// SIMD-ONLY0-NEXT:    [[TMP183:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP183]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP184:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV346:%.*]] = sext i8 [[TMP184]] to i32
// SIMD-ONLY0-NEXT:    [[TMP185:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV347:%.*]] = sext i8 [[TMP185]] to i32
// SIMD-ONLY0-NEXT:    [[CMP348:%.*]] = icmp slt i32 [[CONV346]], [[CONV347]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP348]], label [[IF_THEN350:%.*]], label [[IF_END351:%.*]]
// SIMD-ONLY0:       if.then350:
// SIMD-ONLY0-NEXT:    [[TMP186:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP186]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END351]]
// SIMD-ONLY0:       if.end351:
// SIMD-ONLY0-NEXT:    [[TMP187:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP187]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP188:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV352:%.*]] = sext i8 [[TMP188]] to i32
// SIMD-ONLY0-NEXT:    [[TMP189:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV353:%.*]] = sext i8 [[TMP189]] to i32
// SIMD-ONLY0-NEXT:    [[CMP354:%.*]] = icmp eq i32 [[CONV352]], [[CONV353]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP354]], label [[IF_THEN356:%.*]], label [[IF_END357:%.*]]
// SIMD-ONLY0:       if.then356:
// SIMD-ONLY0-NEXT:    [[TMP190:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP190]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END357]]
// SIMD-ONLY0:       if.end357:
// SIMD-ONLY0-NEXT:    [[TMP191:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP191]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP192:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV358:%.*]] = sext i8 [[TMP192]] to i32
// SIMD-ONLY0-NEXT:    [[TMP193:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV359:%.*]] = sext i8 [[TMP193]] to i32
// SIMD-ONLY0-NEXT:    [[CMP360:%.*]] = icmp eq i32 [[CONV358]], [[CONV359]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP360]], label [[IF_THEN362:%.*]], label [[IF_END363:%.*]]
// SIMD-ONLY0:       if.then362:
// SIMD-ONLY0-NEXT:    [[TMP194:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP194]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END363]]
// SIMD-ONLY0:       if.end363:
// SIMD-ONLY0-NEXT:    [[TMP195:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP195]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP196:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV364:%.*]] = sext i8 [[TMP196]] to i32
// SIMD-ONLY0-NEXT:    [[TMP197:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV365:%.*]] = sext i8 [[TMP197]] to i32
// SIMD-ONLY0-NEXT:    [[CMP366:%.*]] = icmp eq i32 [[CONV364]], [[CONV365]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP366]], label [[IF_THEN368:%.*]], label [[IF_ELSE369:%.*]]
// SIMD-ONLY0:       if.then368:
// SIMD-ONLY0-NEXT:    [[TMP198:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP198]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END370:%.*]]
// SIMD-ONLY0:       if.else369:
// SIMD-ONLY0-NEXT:    [[TMP199:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP199]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END370]]
// SIMD-ONLY0:       if.end370:
// SIMD-ONLY0-NEXT:    [[TMP200:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV371:%.*]] = sext i8 [[TMP200]] to i32
// SIMD-ONLY0-NEXT:    [[TMP201:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV372:%.*]] = sext i8 [[TMP201]] to i32
// SIMD-ONLY0-NEXT:    [[CMP373:%.*]] = icmp eq i32 [[CONV371]], [[CONV372]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP373]], label [[IF_THEN375:%.*]], label [[IF_ELSE376:%.*]]
// SIMD-ONLY0:       if.then375:
// SIMD-ONLY0-NEXT:    [[TMP202:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP202]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END377:%.*]]
// SIMD-ONLY0:       if.else376:
// SIMD-ONLY0-NEXT:    [[TMP203:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP203]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END377]]
// SIMD-ONLY0:       if.end377:
// SIMD-ONLY0-NEXT:    [[TMP204:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV378:%.*]] = sext i8 [[TMP204]] to i32
// SIMD-ONLY0-NEXT:    [[TMP205:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV379:%.*]] = sext i8 [[TMP205]] to i32
// SIMD-ONLY0-NEXT:    [[CMP380:%.*]] = icmp eq i32 [[CONV378]], [[CONV379]]
// SIMD-ONLY0-NEXT:    [[CONV381:%.*]] = zext i1 [[CMP380]] to i32
// SIMD-ONLY0-NEXT:    [[CONV382:%.*]] = trunc i32 [[CONV381]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV382]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP206:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL383:%.*]] = icmp ne i8 [[TMP206]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL383]], label [[IF_THEN384:%.*]], label [[IF_END385:%.*]]
// SIMD-ONLY0:       if.then384:
// SIMD-ONLY0-NEXT:    [[TMP207:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP207]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END385]]
// SIMD-ONLY0:       if.end385:
// SIMD-ONLY0-NEXT:    [[TMP208:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV386:%.*]] = sext i8 [[TMP208]] to i32
// SIMD-ONLY0-NEXT:    [[TMP209:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV387:%.*]] = sext i8 [[TMP209]] to i32
// SIMD-ONLY0-NEXT:    [[CMP388:%.*]] = icmp eq i32 [[CONV386]], [[CONV387]]
// SIMD-ONLY0-NEXT:    [[CONV389:%.*]] = zext i1 [[CMP388]] to i32
// SIMD-ONLY0-NEXT:    [[CONV390:%.*]] = trunc i32 [[CONV389]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV390]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP210:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL391:%.*]] = icmp ne i8 [[TMP210]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL391]], label [[IF_THEN392:%.*]], label [[IF_END393:%.*]]
// SIMD-ONLY0:       if.then392:
// SIMD-ONLY0-NEXT:    [[TMP211:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP211]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END393]]
// SIMD-ONLY0:       if.end393:
// SIMD-ONLY0-NEXT:    [[TMP212:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV394:%.*]] = sext i8 [[TMP212]] to i32
// SIMD-ONLY0-NEXT:    [[TMP213:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV395:%.*]] = sext i8 [[TMP213]] to i32
// SIMD-ONLY0-NEXT:    [[CMP396:%.*]] = icmp eq i32 [[CONV394]], [[CONV395]]
// SIMD-ONLY0-NEXT:    [[CONV397:%.*]] = zext i1 [[CMP396]] to i32
// SIMD-ONLY0-NEXT:    [[CONV398:%.*]] = trunc i32 [[CONV397]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV398]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP214:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL399:%.*]] = icmp ne i8 [[TMP214]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL399]], label [[IF_THEN400:%.*]], label [[IF_ELSE401:%.*]]
// SIMD-ONLY0:       if.then400:
// SIMD-ONLY0-NEXT:    [[TMP215:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP215]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END402:%.*]]
// SIMD-ONLY0:       if.else401:
// SIMD-ONLY0-NEXT:    [[TMP216:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP216]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END402]]
// SIMD-ONLY0:       if.end402:
// SIMD-ONLY0-NEXT:    [[TMP217:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV403:%.*]] = sext i8 [[TMP217]] to i32
// SIMD-ONLY0-NEXT:    [[TMP218:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV404:%.*]] = sext i8 [[TMP218]] to i32
// SIMD-ONLY0-NEXT:    [[CMP405:%.*]] = icmp eq i32 [[CONV403]], [[CONV404]]
// SIMD-ONLY0-NEXT:    [[CONV406:%.*]] = zext i1 [[CMP405]] to i32
// SIMD-ONLY0-NEXT:    [[CONV407:%.*]] = trunc i32 [[CONV406]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV407]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP219:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL408:%.*]] = icmp ne i8 [[TMP219]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL408]], label [[IF_THEN409:%.*]], label [[IF_ELSE410:%.*]]
// SIMD-ONLY0:       if.then409:
// SIMD-ONLY0-NEXT:    [[TMP220:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP220]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END411:%.*]]
// SIMD-ONLY0:       if.else410:
// SIMD-ONLY0-NEXT:    [[TMP221:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP221]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END411]]
// SIMD-ONLY0:       if.end411:
// SIMD-ONLY0-NEXT:    [[TMP222:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP222]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP223:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV412:%.*]] = sext i8 [[TMP223]] to i32
// SIMD-ONLY0-NEXT:    [[TMP224:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV413:%.*]] = sext i8 [[TMP224]] to i32
// SIMD-ONLY0-NEXT:    [[CMP414:%.*]] = icmp sgt i32 [[CONV412]], [[CONV413]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP414]], label [[IF_THEN416:%.*]], label [[IF_END417:%.*]]
// SIMD-ONLY0:       if.then416:
// SIMD-ONLY0-NEXT:    [[TMP225:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP225]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END417]]
// SIMD-ONLY0:       if.end417:
// SIMD-ONLY0-NEXT:    [[TMP226:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP226]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP227:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV418:%.*]] = sext i8 [[TMP227]] to i32
// SIMD-ONLY0-NEXT:    [[TMP228:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV419:%.*]] = sext i8 [[TMP228]] to i32
// SIMD-ONLY0-NEXT:    [[CMP420:%.*]] = icmp sgt i32 [[CONV418]], [[CONV419]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP420]], label [[IF_THEN422:%.*]], label [[IF_END423:%.*]]
// SIMD-ONLY0:       if.then422:
// SIMD-ONLY0-NEXT:    [[TMP229:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP229]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END423]]
// SIMD-ONLY0:       if.end423:
// SIMD-ONLY0-NEXT:    [[TMP230:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP230]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP231:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV424:%.*]] = sext i8 [[TMP231]] to i32
// SIMD-ONLY0-NEXT:    [[TMP232:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV425:%.*]] = sext i8 [[TMP232]] to i32
// SIMD-ONLY0-NEXT:    [[CMP426:%.*]] = icmp slt i32 [[CONV424]], [[CONV425]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP426]], label [[IF_THEN428:%.*]], label [[IF_END429:%.*]]
// SIMD-ONLY0:       if.then428:
// SIMD-ONLY0-NEXT:    [[TMP233:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP233]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END429]]
// SIMD-ONLY0:       if.end429:
// SIMD-ONLY0-NEXT:    [[TMP234:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP234]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP235:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV430:%.*]] = sext i8 [[TMP235]] to i32
// SIMD-ONLY0-NEXT:    [[TMP236:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV431:%.*]] = sext i8 [[TMP236]] to i32
// SIMD-ONLY0-NEXT:    [[CMP432:%.*]] = icmp slt i32 [[CONV430]], [[CONV431]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP432]], label [[IF_THEN434:%.*]], label [[IF_END435:%.*]]
// SIMD-ONLY0:       if.then434:
// SIMD-ONLY0-NEXT:    [[TMP237:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP237]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END435]]
// SIMD-ONLY0:       if.end435:
// SIMD-ONLY0-NEXT:    [[TMP238:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP238]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP239:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV436:%.*]] = sext i8 [[TMP239]] to i32
// SIMD-ONLY0-NEXT:    [[TMP240:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV437:%.*]] = sext i8 [[TMP240]] to i32
// SIMD-ONLY0-NEXT:    [[CMP438:%.*]] = icmp eq i32 [[CONV436]], [[CONV437]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP438]], label [[IF_THEN440:%.*]], label [[IF_END441:%.*]]
// SIMD-ONLY0:       if.then440:
// SIMD-ONLY0-NEXT:    [[TMP241:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP241]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END441]]
// SIMD-ONLY0:       if.end441:
// SIMD-ONLY0-NEXT:    [[TMP242:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP242]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP243:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV442:%.*]] = sext i8 [[TMP243]] to i32
// SIMD-ONLY0-NEXT:    [[TMP244:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV443:%.*]] = sext i8 [[TMP244]] to i32
// SIMD-ONLY0-NEXT:    [[CMP444:%.*]] = icmp eq i32 [[CONV442]], [[CONV443]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP444]], label [[IF_THEN446:%.*]], label [[IF_END447:%.*]]
// SIMD-ONLY0:       if.then446:
// SIMD-ONLY0-NEXT:    [[TMP245:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP245]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END447]]
// SIMD-ONLY0:       if.end447:
// SIMD-ONLY0-NEXT:    [[TMP246:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV448:%.*]] = sext i8 [[TMP246]] to i32
// SIMD-ONLY0-NEXT:    [[TMP247:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV449:%.*]] = sext i8 [[TMP247]] to i32
// SIMD-ONLY0-NEXT:    [[CMP450:%.*]] = icmp sgt i32 [[CONV448]], [[CONV449]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP450]], label [[IF_THEN452:%.*]], label [[IF_END453:%.*]]
// SIMD-ONLY0:       if.then452:
// SIMD-ONLY0-NEXT:    [[TMP248:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP248]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END453]]
// SIMD-ONLY0:       if.end453:
// SIMD-ONLY0-NEXT:    [[TMP249:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP249]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP250:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV454:%.*]] = sext i8 [[TMP250]] to i32
// SIMD-ONLY0-NEXT:    [[TMP251:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV455:%.*]] = sext i8 [[TMP251]] to i32
// SIMD-ONLY0-NEXT:    [[CMP456:%.*]] = icmp sgt i32 [[CONV454]], [[CONV455]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP456]], label [[IF_THEN458:%.*]], label [[IF_END459:%.*]]
// SIMD-ONLY0:       if.then458:
// SIMD-ONLY0-NEXT:    [[TMP252:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP252]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END459]]
// SIMD-ONLY0:       if.end459:
// SIMD-ONLY0-NEXT:    [[TMP253:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP253]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP254:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV460:%.*]] = sext i8 [[TMP254]] to i32
// SIMD-ONLY0-NEXT:    [[TMP255:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV461:%.*]] = sext i8 [[TMP255]] to i32
// SIMD-ONLY0-NEXT:    [[CMP462:%.*]] = icmp slt i32 [[CONV460]], [[CONV461]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP462]], label [[IF_THEN464:%.*]], label [[IF_END465:%.*]]
// SIMD-ONLY0:       if.then464:
// SIMD-ONLY0-NEXT:    [[TMP256:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP256]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END465]]
// SIMD-ONLY0:       if.end465:
// SIMD-ONLY0-NEXT:    [[TMP257:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP257]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP258:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV466:%.*]] = sext i8 [[TMP258]] to i32
// SIMD-ONLY0-NEXT:    [[TMP259:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV467:%.*]] = sext i8 [[TMP259]] to i32
// SIMD-ONLY0-NEXT:    [[CMP468:%.*]] = icmp slt i32 [[CONV466]], [[CONV467]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP468]], label [[IF_THEN470:%.*]], label [[IF_END471:%.*]]
// SIMD-ONLY0:       if.then470:
// SIMD-ONLY0-NEXT:    [[TMP260:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP260]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END471]]
// SIMD-ONLY0:       if.end471:
// SIMD-ONLY0-NEXT:    [[TMP261:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP261]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP262:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV472:%.*]] = sext i8 [[TMP262]] to i32
// SIMD-ONLY0-NEXT:    [[TMP263:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV473:%.*]] = sext i8 [[TMP263]] to i32
// SIMD-ONLY0-NEXT:    [[CMP474:%.*]] = icmp eq i32 [[CONV472]], [[CONV473]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP474]], label [[IF_THEN476:%.*]], label [[IF_END477:%.*]]
// SIMD-ONLY0:       if.then476:
// SIMD-ONLY0-NEXT:    [[TMP264:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP264]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END477]]
// SIMD-ONLY0:       if.end477:
// SIMD-ONLY0-NEXT:    [[TMP265:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP265]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP266:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV478:%.*]] = sext i8 [[TMP266]] to i32
// SIMD-ONLY0-NEXT:    [[TMP267:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV479:%.*]] = sext i8 [[TMP267]] to i32
// SIMD-ONLY0-NEXT:    [[CMP480:%.*]] = icmp eq i32 [[CONV478]], [[CONV479]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP480]], label [[IF_THEN482:%.*]], label [[IF_END483:%.*]]
// SIMD-ONLY0:       if.then482:
// SIMD-ONLY0-NEXT:    [[TMP268:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP268]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END483]]
// SIMD-ONLY0:       if.end483:
// SIMD-ONLY0-NEXT:    [[TMP269:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP269]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP270:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV484:%.*]] = sext i8 [[TMP270]] to i32
// SIMD-ONLY0-NEXT:    [[TMP271:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV485:%.*]] = sext i8 [[TMP271]] to i32
// SIMD-ONLY0-NEXT:    [[CMP486:%.*]] = icmp eq i32 [[CONV484]], [[CONV485]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP486]], label [[IF_THEN488:%.*]], label [[IF_ELSE489:%.*]]
// SIMD-ONLY0:       if.then488:
// SIMD-ONLY0-NEXT:    [[TMP272:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP272]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END490:%.*]]
// SIMD-ONLY0:       if.else489:
// SIMD-ONLY0-NEXT:    [[TMP273:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP273]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END490]]
// SIMD-ONLY0:       if.end490:
// SIMD-ONLY0-NEXT:    [[TMP274:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV491:%.*]] = sext i8 [[TMP274]] to i32
// SIMD-ONLY0-NEXT:    [[TMP275:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV492:%.*]] = sext i8 [[TMP275]] to i32
// SIMD-ONLY0-NEXT:    [[CMP493:%.*]] = icmp eq i32 [[CONV491]], [[CONV492]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP493]], label [[IF_THEN495:%.*]], label [[IF_ELSE496:%.*]]
// SIMD-ONLY0:       if.then495:
// SIMD-ONLY0-NEXT:    [[TMP276:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP276]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END497:%.*]]
// SIMD-ONLY0:       if.else496:
// SIMD-ONLY0-NEXT:    [[TMP277:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP277]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END497]]
// SIMD-ONLY0:       if.end497:
// SIMD-ONLY0-NEXT:    [[TMP278:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV498:%.*]] = sext i8 [[TMP278]] to i32
// SIMD-ONLY0-NEXT:    [[TMP279:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV499:%.*]] = sext i8 [[TMP279]] to i32
// SIMD-ONLY0-NEXT:    [[CMP500:%.*]] = icmp eq i32 [[CONV498]], [[CONV499]]
// SIMD-ONLY0-NEXT:    [[CONV501:%.*]] = zext i1 [[CMP500]] to i32
// SIMD-ONLY0-NEXT:    [[CONV502:%.*]] = trunc i32 [[CONV501]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV502]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP280:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL503:%.*]] = icmp ne i8 [[TMP280]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL503]], label [[IF_THEN504:%.*]], label [[IF_END505:%.*]]
// SIMD-ONLY0:       if.then504:
// SIMD-ONLY0-NEXT:    [[TMP281:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP281]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END505]]
// SIMD-ONLY0:       if.end505:
// SIMD-ONLY0-NEXT:    [[TMP282:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV506:%.*]] = sext i8 [[TMP282]] to i32
// SIMD-ONLY0-NEXT:    [[TMP283:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV507:%.*]] = sext i8 [[TMP283]] to i32
// SIMD-ONLY0-NEXT:    [[CMP508:%.*]] = icmp eq i32 [[CONV506]], [[CONV507]]
// SIMD-ONLY0-NEXT:    [[CONV509:%.*]] = zext i1 [[CMP508]] to i32
// SIMD-ONLY0-NEXT:    [[CONV510:%.*]] = trunc i32 [[CONV509]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV510]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP284:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL511:%.*]] = icmp ne i8 [[TMP284]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL511]], label [[IF_THEN512:%.*]], label [[IF_END513:%.*]]
// SIMD-ONLY0:       if.then512:
// SIMD-ONLY0-NEXT:    [[TMP285:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP285]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END513]]
// SIMD-ONLY0:       if.end513:
// SIMD-ONLY0-NEXT:    [[TMP286:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV514:%.*]] = sext i8 [[TMP286]] to i32
// SIMD-ONLY0-NEXT:    [[TMP287:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV515:%.*]] = sext i8 [[TMP287]] to i32
// SIMD-ONLY0-NEXT:    [[CMP516:%.*]] = icmp eq i32 [[CONV514]], [[CONV515]]
// SIMD-ONLY0-NEXT:    [[CONV517:%.*]] = zext i1 [[CMP516]] to i32
// SIMD-ONLY0-NEXT:    [[CONV518:%.*]] = trunc i32 [[CONV517]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV518]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP288:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL519:%.*]] = icmp ne i8 [[TMP288]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL519]], label [[IF_THEN520:%.*]], label [[IF_ELSE521:%.*]]
// SIMD-ONLY0:       if.then520:
// SIMD-ONLY0-NEXT:    [[TMP289:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP289]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END522:%.*]]
// SIMD-ONLY0:       if.else521:
// SIMD-ONLY0-NEXT:    [[TMP290:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP290]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END522]]
// SIMD-ONLY0:       if.end522:
// SIMD-ONLY0-NEXT:    [[TMP291:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV523:%.*]] = sext i8 [[TMP291]] to i32
// SIMD-ONLY0-NEXT:    [[TMP292:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV524:%.*]] = sext i8 [[TMP292]] to i32
// SIMD-ONLY0-NEXT:    [[CMP525:%.*]] = icmp eq i32 [[CONV523]], [[CONV524]]
// SIMD-ONLY0-NEXT:    [[CONV526:%.*]] = zext i1 [[CMP525]] to i32
// SIMD-ONLY0-NEXT:    [[CONV527:%.*]] = trunc i32 [[CONV526]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV527]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP293:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL528:%.*]] = icmp ne i8 [[TMP293]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL528]], label [[IF_THEN529:%.*]], label [[IF_ELSE530:%.*]]
// SIMD-ONLY0:       if.then529:
// SIMD-ONLY0-NEXT:    [[TMP294:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP294]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END531:%.*]]
// SIMD-ONLY0:       if.else530:
// SIMD-ONLY0-NEXT:    [[TMP295:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP295]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END531]]
// SIMD-ONLY0:       if.end531:
// SIMD-ONLY0-NEXT:    [[TMP296:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP296]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP297:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV532:%.*]] = sext i8 [[TMP297]] to i32
// SIMD-ONLY0-NEXT:    [[TMP298:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV533:%.*]] = sext i8 [[TMP298]] to i32
// SIMD-ONLY0-NEXT:    [[CMP534:%.*]] = icmp sgt i32 [[CONV532]], [[CONV533]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP534]], label [[IF_THEN536:%.*]], label [[IF_END537:%.*]]
// SIMD-ONLY0:       if.then536:
// SIMD-ONLY0-NEXT:    [[TMP299:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP299]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END537]]
// SIMD-ONLY0:       if.end537:
// SIMD-ONLY0-NEXT:    [[TMP300:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP300]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP301:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV538:%.*]] = sext i8 [[TMP301]] to i32
// SIMD-ONLY0-NEXT:    [[TMP302:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV539:%.*]] = sext i8 [[TMP302]] to i32
// SIMD-ONLY0-NEXT:    [[CMP540:%.*]] = icmp sgt i32 [[CONV538]], [[CONV539]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP540]], label [[IF_THEN542:%.*]], label [[IF_END543:%.*]]
// SIMD-ONLY0:       if.then542:
// SIMD-ONLY0-NEXT:    [[TMP303:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP303]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END543]]
// SIMD-ONLY0:       if.end543:
// SIMD-ONLY0-NEXT:    [[TMP304:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP304]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP305:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV544:%.*]] = sext i8 [[TMP305]] to i32
// SIMD-ONLY0-NEXT:    [[TMP306:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV545:%.*]] = sext i8 [[TMP306]] to i32
// SIMD-ONLY0-NEXT:    [[CMP546:%.*]] = icmp slt i32 [[CONV544]], [[CONV545]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP546]], label [[IF_THEN548:%.*]], label [[IF_END549:%.*]]
// SIMD-ONLY0:       if.then548:
// SIMD-ONLY0-NEXT:    [[TMP307:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP307]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END549]]
// SIMD-ONLY0:       if.end549:
// SIMD-ONLY0-NEXT:    [[TMP308:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP308]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP309:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV550:%.*]] = sext i8 [[TMP309]] to i32
// SIMD-ONLY0-NEXT:    [[TMP310:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV551:%.*]] = sext i8 [[TMP310]] to i32
// SIMD-ONLY0-NEXT:    [[CMP552:%.*]] = icmp slt i32 [[CONV550]], [[CONV551]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP552]], label [[IF_THEN554:%.*]], label [[IF_END555:%.*]]
// SIMD-ONLY0:       if.then554:
// SIMD-ONLY0-NEXT:    [[TMP311:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP311]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END555]]
// SIMD-ONLY0:       if.end555:
// SIMD-ONLY0-NEXT:    [[TMP312:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP312]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP313:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV556:%.*]] = sext i8 [[TMP313]] to i32
// SIMD-ONLY0-NEXT:    [[TMP314:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV557:%.*]] = sext i8 [[TMP314]] to i32
// SIMD-ONLY0-NEXT:    [[CMP558:%.*]] = icmp eq i32 [[CONV556]], [[CONV557]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP558]], label [[IF_THEN560:%.*]], label [[IF_END561:%.*]]
// SIMD-ONLY0:       if.then560:
// SIMD-ONLY0-NEXT:    [[TMP315:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP315]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END561]]
// SIMD-ONLY0:       if.end561:
// SIMD-ONLY0-NEXT:    [[TMP316:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP316]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP317:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV562:%.*]] = sext i8 [[TMP317]] to i32
// SIMD-ONLY0-NEXT:    [[TMP318:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV563:%.*]] = sext i8 [[TMP318]] to i32
// SIMD-ONLY0-NEXT:    [[CMP564:%.*]] = icmp eq i32 [[CONV562]], [[CONV563]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP564]], label [[IF_THEN566:%.*]], label [[IF_END567:%.*]]
// SIMD-ONLY0:       if.then566:
// SIMD-ONLY0-NEXT:    [[TMP319:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP319]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END567]]
// SIMD-ONLY0:       if.end567:
// SIMD-ONLY0-NEXT:    [[TMP320:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV568:%.*]] = sext i8 [[TMP320]] to i32
// SIMD-ONLY0-NEXT:    [[TMP321:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV569:%.*]] = sext i8 [[TMP321]] to i32
// SIMD-ONLY0-NEXT:    [[CMP570:%.*]] = icmp sgt i32 [[CONV568]], [[CONV569]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP570]], label [[IF_THEN572:%.*]], label [[IF_END573:%.*]]
// SIMD-ONLY0:       if.then572:
// SIMD-ONLY0-NEXT:    [[TMP322:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP322]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END573]]
// SIMD-ONLY0:       if.end573:
// SIMD-ONLY0-NEXT:    [[TMP323:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP323]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP324:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV574:%.*]] = sext i8 [[TMP324]] to i32
// SIMD-ONLY0-NEXT:    [[TMP325:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV575:%.*]] = sext i8 [[TMP325]] to i32
// SIMD-ONLY0-NEXT:    [[CMP576:%.*]] = icmp sgt i32 [[CONV574]], [[CONV575]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP576]], label [[IF_THEN578:%.*]], label [[IF_END579:%.*]]
// SIMD-ONLY0:       if.then578:
// SIMD-ONLY0-NEXT:    [[TMP326:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP326]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END579]]
// SIMD-ONLY0:       if.end579:
// SIMD-ONLY0-NEXT:    [[TMP327:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP327]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP328:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV580:%.*]] = sext i8 [[TMP328]] to i32
// SIMD-ONLY0-NEXT:    [[TMP329:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV581:%.*]] = sext i8 [[TMP329]] to i32
// SIMD-ONLY0-NEXT:    [[CMP582:%.*]] = icmp slt i32 [[CONV580]], [[CONV581]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP582]], label [[IF_THEN584:%.*]], label [[IF_END585:%.*]]
// SIMD-ONLY0:       if.then584:
// SIMD-ONLY0-NEXT:    [[TMP330:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP330]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END585]]
// SIMD-ONLY0:       if.end585:
// SIMD-ONLY0-NEXT:    [[TMP331:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP331]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP332:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV586:%.*]] = sext i8 [[TMP332]] to i32
// SIMD-ONLY0-NEXT:    [[TMP333:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV587:%.*]] = sext i8 [[TMP333]] to i32
// SIMD-ONLY0-NEXT:    [[CMP588:%.*]] = icmp slt i32 [[CONV586]], [[CONV587]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP588]], label [[IF_THEN590:%.*]], label [[IF_END591:%.*]]
// SIMD-ONLY0:       if.then590:
// SIMD-ONLY0-NEXT:    [[TMP334:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP334]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END591]]
// SIMD-ONLY0:       if.end591:
// SIMD-ONLY0-NEXT:    [[TMP335:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP335]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP336:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV592:%.*]] = sext i8 [[TMP336]] to i32
// SIMD-ONLY0-NEXT:    [[TMP337:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV593:%.*]] = sext i8 [[TMP337]] to i32
// SIMD-ONLY0-NEXT:    [[CMP594:%.*]] = icmp eq i32 [[CONV592]], [[CONV593]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP594]], label [[IF_THEN596:%.*]], label [[IF_END597:%.*]]
// SIMD-ONLY0:       if.then596:
// SIMD-ONLY0-NEXT:    [[TMP338:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP338]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END597]]
// SIMD-ONLY0:       if.end597:
// SIMD-ONLY0-NEXT:    [[TMP339:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP339]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP340:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV598:%.*]] = sext i8 [[TMP340]] to i32
// SIMD-ONLY0-NEXT:    [[TMP341:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV599:%.*]] = sext i8 [[TMP341]] to i32
// SIMD-ONLY0-NEXT:    [[CMP600:%.*]] = icmp eq i32 [[CONV598]], [[CONV599]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP600]], label [[IF_THEN602:%.*]], label [[IF_END603:%.*]]
// SIMD-ONLY0:       if.then602:
// SIMD-ONLY0-NEXT:    [[TMP342:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP342]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END603]]
// SIMD-ONLY0:       if.end603:
// SIMD-ONLY0-NEXT:    [[TMP343:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP343]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP344:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV604:%.*]] = sext i8 [[TMP344]] to i32
// SIMD-ONLY0-NEXT:    [[TMP345:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV605:%.*]] = sext i8 [[TMP345]] to i32
// SIMD-ONLY0-NEXT:    [[CMP606:%.*]] = icmp eq i32 [[CONV604]], [[CONV605]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP606]], label [[IF_THEN608:%.*]], label [[IF_ELSE609:%.*]]
// SIMD-ONLY0:       if.then608:
// SIMD-ONLY0-NEXT:    [[TMP346:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP346]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END610:%.*]]
// SIMD-ONLY0:       if.else609:
// SIMD-ONLY0-NEXT:    [[TMP347:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP347]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END610]]
// SIMD-ONLY0:       if.end610:
// SIMD-ONLY0-NEXT:    [[TMP348:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV611:%.*]] = sext i8 [[TMP348]] to i32
// SIMD-ONLY0-NEXT:    [[TMP349:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV612:%.*]] = sext i8 [[TMP349]] to i32
// SIMD-ONLY0-NEXT:    [[CMP613:%.*]] = icmp eq i32 [[CONV611]], [[CONV612]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP613]], label [[IF_THEN615:%.*]], label [[IF_ELSE616:%.*]]
// SIMD-ONLY0:       if.then615:
// SIMD-ONLY0-NEXT:    [[TMP350:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP350]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END617:%.*]]
// SIMD-ONLY0:       if.else616:
// SIMD-ONLY0-NEXT:    [[TMP351:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP351]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END617]]
// SIMD-ONLY0:       if.end617:
// SIMD-ONLY0-NEXT:    [[TMP352:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV618:%.*]] = sext i8 [[TMP352]] to i32
// SIMD-ONLY0-NEXT:    [[TMP353:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV619:%.*]] = sext i8 [[TMP353]] to i32
// SIMD-ONLY0-NEXT:    [[CMP620:%.*]] = icmp eq i32 [[CONV618]], [[CONV619]]
// SIMD-ONLY0-NEXT:    [[CONV621:%.*]] = zext i1 [[CMP620]] to i32
// SIMD-ONLY0-NEXT:    [[CONV622:%.*]] = trunc i32 [[CONV621]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV622]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP354:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL623:%.*]] = icmp ne i8 [[TMP354]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL623]], label [[IF_THEN624:%.*]], label [[IF_END625:%.*]]
// SIMD-ONLY0:       if.then624:
// SIMD-ONLY0-NEXT:    [[TMP355:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP355]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END625]]
// SIMD-ONLY0:       if.end625:
// SIMD-ONLY0-NEXT:    [[TMP356:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV626:%.*]] = sext i8 [[TMP356]] to i32
// SIMD-ONLY0-NEXT:    [[TMP357:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV627:%.*]] = sext i8 [[TMP357]] to i32
// SIMD-ONLY0-NEXT:    [[CMP628:%.*]] = icmp eq i32 [[CONV626]], [[CONV627]]
// SIMD-ONLY0-NEXT:    [[CONV629:%.*]] = zext i1 [[CMP628]] to i32
// SIMD-ONLY0-NEXT:    [[CONV630:%.*]] = trunc i32 [[CONV629]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV630]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP358:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL631:%.*]] = icmp ne i8 [[TMP358]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL631]], label [[IF_THEN632:%.*]], label [[IF_END633:%.*]]
// SIMD-ONLY0:       if.then632:
// SIMD-ONLY0-NEXT:    [[TMP359:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP359]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END633]]
// SIMD-ONLY0:       if.end633:
// SIMD-ONLY0-NEXT:    [[TMP360:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV634:%.*]] = sext i8 [[TMP360]] to i32
// SIMD-ONLY0-NEXT:    [[TMP361:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV635:%.*]] = sext i8 [[TMP361]] to i32
// SIMD-ONLY0-NEXT:    [[CMP636:%.*]] = icmp eq i32 [[CONV634]], [[CONV635]]
// SIMD-ONLY0-NEXT:    [[CONV637:%.*]] = zext i1 [[CMP636]] to i32
// SIMD-ONLY0-NEXT:    [[CONV638:%.*]] = trunc i32 [[CONV637]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV638]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP362:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL639:%.*]] = icmp ne i8 [[TMP362]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL639]], label [[IF_THEN640:%.*]], label [[IF_ELSE641:%.*]]
// SIMD-ONLY0:       if.then640:
// SIMD-ONLY0-NEXT:    [[TMP363:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP363]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END642:%.*]]
// SIMD-ONLY0:       if.else641:
// SIMD-ONLY0-NEXT:    [[TMP364:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP364]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END642]]
// SIMD-ONLY0:       if.end642:
// SIMD-ONLY0-NEXT:    [[TMP365:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV643:%.*]] = sext i8 [[TMP365]] to i32
// SIMD-ONLY0-NEXT:    [[TMP366:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV644:%.*]] = sext i8 [[TMP366]] to i32
// SIMD-ONLY0-NEXT:    [[CMP645:%.*]] = icmp eq i32 [[CONV643]], [[CONV644]]
// SIMD-ONLY0-NEXT:    [[CONV646:%.*]] = zext i1 [[CMP645]] to i32
// SIMD-ONLY0-NEXT:    [[CONV647:%.*]] = trunc i32 [[CONV646]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV647]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP367:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL648:%.*]] = icmp ne i8 [[TMP367]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL648]], label [[IF_THEN649:%.*]], label [[IF_ELSE650:%.*]]
// SIMD-ONLY0:       if.then649:
// SIMD-ONLY0-NEXT:    [[TMP368:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP368]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END651:%.*]]
// SIMD-ONLY0:       if.else650:
// SIMD-ONLY0-NEXT:    [[TMP369:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP369]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END651]]
// SIMD-ONLY0:       if.end651:
// SIMD-ONLY0-NEXT:    [[TMP370:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP370]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP371:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV652:%.*]] = sext i8 [[TMP371]] to i32
// SIMD-ONLY0-NEXT:    [[TMP372:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV653:%.*]] = sext i8 [[TMP372]] to i32
// SIMD-ONLY0-NEXT:    [[CMP654:%.*]] = icmp sgt i32 [[CONV652]], [[CONV653]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP654]], label [[IF_THEN656:%.*]], label [[IF_END657:%.*]]
// SIMD-ONLY0:       if.then656:
// SIMD-ONLY0-NEXT:    [[TMP373:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP373]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END657]]
// SIMD-ONLY0:       if.end657:
// SIMD-ONLY0-NEXT:    [[TMP374:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP374]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP375:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV658:%.*]] = sext i8 [[TMP375]] to i32
// SIMD-ONLY0-NEXT:    [[TMP376:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV659:%.*]] = sext i8 [[TMP376]] to i32
// SIMD-ONLY0-NEXT:    [[CMP660:%.*]] = icmp sgt i32 [[CONV658]], [[CONV659]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP660]], label [[IF_THEN662:%.*]], label [[IF_END663:%.*]]
// SIMD-ONLY0:       if.then662:
// SIMD-ONLY0-NEXT:    [[TMP377:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP377]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END663]]
// SIMD-ONLY0:       if.end663:
// SIMD-ONLY0-NEXT:    [[TMP378:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP378]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP379:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV664:%.*]] = sext i8 [[TMP379]] to i32
// SIMD-ONLY0-NEXT:    [[TMP380:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV665:%.*]] = sext i8 [[TMP380]] to i32
// SIMD-ONLY0-NEXT:    [[CMP666:%.*]] = icmp slt i32 [[CONV664]], [[CONV665]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP666]], label [[IF_THEN668:%.*]], label [[IF_END669:%.*]]
// SIMD-ONLY0:       if.then668:
// SIMD-ONLY0-NEXT:    [[TMP381:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP381]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END669]]
// SIMD-ONLY0:       if.end669:
// SIMD-ONLY0-NEXT:    [[TMP382:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP382]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP383:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV670:%.*]] = sext i8 [[TMP383]] to i32
// SIMD-ONLY0-NEXT:    [[TMP384:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV671:%.*]] = sext i8 [[TMP384]] to i32
// SIMD-ONLY0-NEXT:    [[CMP672:%.*]] = icmp slt i32 [[CONV670]], [[CONV671]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP672]], label [[IF_THEN674:%.*]], label [[IF_END675:%.*]]
// SIMD-ONLY0:       if.then674:
// SIMD-ONLY0-NEXT:    [[TMP385:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP385]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END675]]
// SIMD-ONLY0:       if.end675:
// SIMD-ONLY0-NEXT:    [[TMP386:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP386]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP387:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV676:%.*]] = sext i8 [[TMP387]] to i32
// SIMD-ONLY0-NEXT:    [[TMP388:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV677:%.*]] = sext i8 [[TMP388]] to i32
// SIMD-ONLY0-NEXT:    [[CMP678:%.*]] = icmp eq i32 [[CONV676]], [[CONV677]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP678]], label [[IF_THEN680:%.*]], label [[IF_END681:%.*]]
// SIMD-ONLY0:       if.then680:
// SIMD-ONLY0-NEXT:    [[TMP389:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP389]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END681]]
// SIMD-ONLY0:       if.end681:
// SIMD-ONLY0-NEXT:    [[TMP390:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP390]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP391:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV682:%.*]] = sext i8 [[TMP391]] to i32
// SIMD-ONLY0-NEXT:    [[TMP392:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV683:%.*]] = sext i8 [[TMP392]] to i32
// SIMD-ONLY0-NEXT:    [[CMP684:%.*]] = icmp eq i32 [[CONV682]], [[CONV683]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP684]], label [[IF_THEN686:%.*]], label [[IF_END687:%.*]]
// SIMD-ONLY0:       if.then686:
// SIMD-ONLY0-NEXT:    [[TMP393:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP393]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END687]]
// SIMD-ONLY0:       if.end687:
// SIMD-ONLY0-NEXT:    [[TMP394:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV688:%.*]] = sext i8 [[TMP394]] to i32
// SIMD-ONLY0-NEXT:    [[TMP395:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV689:%.*]] = sext i8 [[TMP395]] to i32
// SIMD-ONLY0-NEXT:    [[CMP690:%.*]] = icmp sgt i32 [[CONV688]], [[CONV689]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP690]], label [[IF_THEN692:%.*]], label [[IF_END693:%.*]]
// SIMD-ONLY0:       if.then692:
// SIMD-ONLY0-NEXT:    [[TMP396:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP396]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END693]]
// SIMD-ONLY0:       if.end693:
// SIMD-ONLY0-NEXT:    [[TMP397:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP397]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP398:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV694:%.*]] = sext i8 [[TMP398]] to i32
// SIMD-ONLY0-NEXT:    [[TMP399:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV695:%.*]] = sext i8 [[TMP399]] to i32
// SIMD-ONLY0-NEXT:    [[CMP696:%.*]] = icmp sgt i32 [[CONV694]], [[CONV695]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP696]], label [[IF_THEN698:%.*]], label [[IF_END699:%.*]]
// SIMD-ONLY0:       if.then698:
// SIMD-ONLY0-NEXT:    [[TMP400:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP400]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END699]]
// SIMD-ONLY0:       if.end699:
// SIMD-ONLY0-NEXT:    [[TMP401:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP401]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP402:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV700:%.*]] = sext i8 [[TMP402]] to i32
// SIMD-ONLY0-NEXT:    [[TMP403:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV701:%.*]] = sext i8 [[TMP403]] to i32
// SIMD-ONLY0-NEXT:    [[CMP702:%.*]] = icmp slt i32 [[CONV700]], [[CONV701]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP702]], label [[IF_THEN704:%.*]], label [[IF_END705:%.*]]
// SIMD-ONLY0:       if.then704:
// SIMD-ONLY0-NEXT:    [[TMP404:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP404]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END705]]
// SIMD-ONLY0:       if.end705:
// SIMD-ONLY0-NEXT:    [[TMP405:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP405]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP406:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV706:%.*]] = sext i8 [[TMP406]] to i32
// SIMD-ONLY0-NEXT:    [[TMP407:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV707:%.*]] = sext i8 [[TMP407]] to i32
// SIMD-ONLY0-NEXT:    [[CMP708:%.*]] = icmp slt i32 [[CONV706]], [[CONV707]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP708]], label [[IF_THEN710:%.*]], label [[IF_END711:%.*]]
// SIMD-ONLY0:       if.then710:
// SIMD-ONLY0-NEXT:    [[TMP408:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP408]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END711]]
// SIMD-ONLY0:       if.end711:
// SIMD-ONLY0-NEXT:    [[TMP409:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP409]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP410:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV712:%.*]] = sext i8 [[TMP410]] to i32
// SIMD-ONLY0-NEXT:    [[TMP411:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV713:%.*]] = sext i8 [[TMP411]] to i32
// SIMD-ONLY0-NEXT:    [[CMP714:%.*]] = icmp eq i32 [[CONV712]], [[CONV713]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP714]], label [[IF_THEN716:%.*]], label [[IF_END717:%.*]]
// SIMD-ONLY0:       if.then716:
// SIMD-ONLY0-NEXT:    [[TMP412:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP412]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END717]]
// SIMD-ONLY0:       if.end717:
// SIMD-ONLY0-NEXT:    [[TMP413:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP413]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP414:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV718:%.*]] = sext i8 [[TMP414]] to i32
// SIMD-ONLY0-NEXT:    [[TMP415:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV719:%.*]] = sext i8 [[TMP415]] to i32
// SIMD-ONLY0-NEXT:    [[CMP720:%.*]] = icmp eq i32 [[CONV718]], [[CONV719]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP720]], label [[IF_THEN722:%.*]], label [[IF_END723:%.*]]
// SIMD-ONLY0:       if.then722:
// SIMD-ONLY0-NEXT:    [[TMP416:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP416]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END723]]
// SIMD-ONLY0:       if.end723:
// SIMD-ONLY0-NEXT:    [[TMP417:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP417]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP418:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV724:%.*]] = sext i8 [[TMP418]] to i32
// SIMD-ONLY0-NEXT:    [[TMP419:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV725:%.*]] = sext i8 [[TMP419]] to i32
// SIMD-ONLY0-NEXT:    [[CMP726:%.*]] = icmp eq i32 [[CONV724]], [[CONV725]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP726]], label [[IF_THEN728:%.*]], label [[IF_ELSE729:%.*]]
// SIMD-ONLY0:       if.then728:
// SIMD-ONLY0-NEXT:    [[TMP420:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP420]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END730:%.*]]
// SIMD-ONLY0:       if.else729:
// SIMD-ONLY0-NEXT:    [[TMP421:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP421]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END730]]
// SIMD-ONLY0:       if.end730:
// SIMD-ONLY0-NEXT:    [[TMP422:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV731:%.*]] = sext i8 [[TMP422]] to i32
// SIMD-ONLY0-NEXT:    [[TMP423:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV732:%.*]] = sext i8 [[TMP423]] to i32
// SIMD-ONLY0-NEXT:    [[CMP733:%.*]] = icmp eq i32 [[CONV731]], [[CONV732]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP733]], label [[IF_THEN735:%.*]], label [[IF_ELSE736:%.*]]
// SIMD-ONLY0:       if.then735:
// SIMD-ONLY0-NEXT:    [[TMP424:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP424]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END737:%.*]]
// SIMD-ONLY0:       if.else736:
// SIMD-ONLY0-NEXT:    [[TMP425:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP425]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END737]]
// SIMD-ONLY0:       if.end737:
// SIMD-ONLY0-NEXT:    [[TMP426:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV738:%.*]] = sext i8 [[TMP426]] to i32
// SIMD-ONLY0-NEXT:    [[TMP427:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV739:%.*]] = sext i8 [[TMP427]] to i32
// SIMD-ONLY0-NEXT:    [[CMP740:%.*]] = icmp eq i32 [[CONV738]], [[CONV739]]
// SIMD-ONLY0-NEXT:    [[CONV741:%.*]] = zext i1 [[CMP740]] to i32
// SIMD-ONLY0-NEXT:    [[CONV742:%.*]] = trunc i32 [[CONV741]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV742]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP428:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL743:%.*]] = icmp ne i8 [[TMP428]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL743]], label [[IF_THEN744:%.*]], label [[IF_END745:%.*]]
// SIMD-ONLY0:       if.then744:
// SIMD-ONLY0-NEXT:    [[TMP429:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP429]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END745]]
// SIMD-ONLY0:       if.end745:
// SIMD-ONLY0-NEXT:    [[TMP430:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV746:%.*]] = sext i8 [[TMP430]] to i32
// SIMD-ONLY0-NEXT:    [[TMP431:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV747:%.*]] = sext i8 [[TMP431]] to i32
// SIMD-ONLY0-NEXT:    [[CMP748:%.*]] = icmp eq i32 [[CONV746]], [[CONV747]]
// SIMD-ONLY0-NEXT:    [[CONV749:%.*]] = zext i1 [[CMP748]] to i32
// SIMD-ONLY0-NEXT:    [[CONV750:%.*]] = trunc i32 [[CONV749]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV750]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP432:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL751:%.*]] = icmp ne i8 [[TMP432]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL751]], label [[IF_THEN752:%.*]], label [[IF_END753:%.*]]
// SIMD-ONLY0:       if.then752:
// SIMD-ONLY0-NEXT:    [[TMP433:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP433]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END753]]
// SIMD-ONLY0:       if.end753:
// SIMD-ONLY0-NEXT:    [[TMP434:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV754:%.*]] = sext i8 [[TMP434]] to i32
// SIMD-ONLY0-NEXT:    [[TMP435:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV755:%.*]] = sext i8 [[TMP435]] to i32
// SIMD-ONLY0-NEXT:    [[CMP756:%.*]] = icmp eq i32 [[CONV754]], [[CONV755]]
// SIMD-ONLY0-NEXT:    [[CONV757:%.*]] = zext i1 [[CMP756]] to i32
// SIMD-ONLY0-NEXT:    [[CONV758:%.*]] = trunc i32 [[CONV757]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV758]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP436:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL759:%.*]] = icmp ne i8 [[TMP436]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL759]], label [[IF_THEN760:%.*]], label [[IF_ELSE761:%.*]]
// SIMD-ONLY0:       if.then760:
// SIMD-ONLY0-NEXT:    [[TMP437:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP437]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END762:%.*]]
// SIMD-ONLY0:       if.else761:
// SIMD-ONLY0-NEXT:    [[TMP438:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP438]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END762]]
// SIMD-ONLY0:       if.end762:
// SIMD-ONLY0-NEXT:    [[TMP439:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV763:%.*]] = sext i8 [[TMP439]] to i32
// SIMD-ONLY0-NEXT:    [[TMP440:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV764:%.*]] = sext i8 [[TMP440]] to i32
// SIMD-ONLY0-NEXT:    [[CMP765:%.*]] = icmp eq i32 [[CONV763]], [[CONV764]]
// SIMD-ONLY0-NEXT:    [[CONV766:%.*]] = zext i1 [[CMP765]] to i32
// SIMD-ONLY0-NEXT:    [[CONV767:%.*]] = trunc i32 [[CONV766]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV767]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP441:%.*]] = load i8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL768:%.*]] = icmp ne i8 [[TMP441]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL768]], label [[IF_THEN769:%.*]], label [[IF_ELSE770:%.*]]
// SIMD-ONLY0:       if.then769:
// SIMD-ONLY0-NEXT:    [[TMP442:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP442]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END771:%.*]]
// SIMD-ONLY0:       if.else770:
// SIMD-ONLY0-NEXT:    [[TMP443:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP443]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END771]]
// SIMD-ONLY0:       if.end771:
// SIMD-ONLY0-NEXT:    [[TMP444:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP444]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP445:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV772:%.*]] = zext i8 [[TMP445]] to i32
// SIMD-ONLY0-NEXT:    [[TMP446:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV773:%.*]] = zext i8 [[TMP446]] to i32
// SIMD-ONLY0-NEXT:    [[CMP774:%.*]] = icmp sgt i32 [[CONV772]], [[CONV773]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP774]], label [[IF_THEN776:%.*]], label [[IF_END777:%.*]]
// SIMD-ONLY0:       if.then776:
// SIMD-ONLY0-NEXT:    [[TMP447:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP447]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END777]]
// SIMD-ONLY0:       if.end777:
// SIMD-ONLY0-NEXT:    [[TMP448:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP448]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP449:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV778:%.*]] = zext i8 [[TMP449]] to i32
// SIMD-ONLY0-NEXT:    [[TMP450:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV779:%.*]] = zext i8 [[TMP450]] to i32
// SIMD-ONLY0-NEXT:    [[CMP780:%.*]] = icmp sgt i32 [[CONV778]], [[CONV779]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP780]], label [[IF_THEN782:%.*]], label [[IF_END783:%.*]]
// SIMD-ONLY0:       if.then782:
// SIMD-ONLY0-NEXT:    [[TMP451:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP451]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END783]]
// SIMD-ONLY0:       if.end783:
// SIMD-ONLY0-NEXT:    [[TMP452:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP452]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP453:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV784:%.*]] = zext i8 [[TMP453]] to i32
// SIMD-ONLY0-NEXT:    [[TMP454:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV785:%.*]] = zext i8 [[TMP454]] to i32
// SIMD-ONLY0-NEXT:    [[CMP786:%.*]] = icmp slt i32 [[CONV784]], [[CONV785]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP786]], label [[IF_THEN788:%.*]], label [[IF_END789:%.*]]
// SIMD-ONLY0:       if.then788:
// SIMD-ONLY0-NEXT:    [[TMP455:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP455]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END789]]
// SIMD-ONLY0:       if.end789:
// SIMD-ONLY0-NEXT:    [[TMP456:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP456]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP457:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV790:%.*]] = zext i8 [[TMP457]] to i32
// SIMD-ONLY0-NEXT:    [[TMP458:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV791:%.*]] = zext i8 [[TMP458]] to i32
// SIMD-ONLY0-NEXT:    [[CMP792:%.*]] = icmp slt i32 [[CONV790]], [[CONV791]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP792]], label [[IF_THEN794:%.*]], label [[IF_END795:%.*]]
// SIMD-ONLY0:       if.then794:
// SIMD-ONLY0-NEXT:    [[TMP459:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP459]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END795]]
// SIMD-ONLY0:       if.end795:
// SIMD-ONLY0-NEXT:    [[TMP460:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP460]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP461:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV796:%.*]] = zext i8 [[TMP461]] to i32
// SIMD-ONLY0-NEXT:    [[TMP462:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV797:%.*]] = zext i8 [[TMP462]] to i32
// SIMD-ONLY0-NEXT:    [[CMP798:%.*]] = icmp eq i32 [[CONV796]], [[CONV797]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP798]], label [[IF_THEN800:%.*]], label [[IF_END801:%.*]]
// SIMD-ONLY0:       if.then800:
// SIMD-ONLY0-NEXT:    [[TMP463:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP463]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END801]]
// SIMD-ONLY0:       if.end801:
// SIMD-ONLY0-NEXT:    [[TMP464:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP464]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP465:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV802:%.*]] = zext i8 [[TMP465]] to i32
// SIMD-ONLY0-NEXT:    [[TMP466:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV803:%.*]] = zext i8 [[TMP466]] to i32
// SIMD-ONLY0-NEXT:    [[CMP804:%.*]] = icmp eq i32 [[CONV802]], [[CONV803]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP804]], label [[IF_THEN806:%.*]], label [[IF_END807:%.*]]
// SIMD-ONLY0:       if.then806:
// SIMD-ONLY0-NEXT:    [[TMP467:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP467]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END807]]
// SIMD-ONLY0:       if.end807:
// SIMD-ONLY0-NEXT:    [[TMP468:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV808:%.*]] = zext i8 [[TMP468]] to i32
// SIMD-ONLY0-NEXT:    [[TMP469:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV809:%.*]] = zext i8 [[TMP469]] to i32
// SIMD-ONLY0-NEXT:    [[CMP810:%.*]] = icmp sgt i32 [[CONV808]], [[CONV809]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP810]], label [[IF_THEN812:%.*]], label [[IF_END813:%.*]]
// SIMD-ONLY0:       if.then812:
// SIMD-ONLY0-NEXT:    [[TMP470:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP470]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END813]]
// SIMD-ONLY0:       if.end813:
// SIMD-ONLY0-NEXT:    [[TMP471:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP471]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP472:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV814:%.*]] = zext i8 [[TMP472]] to i32
// SIMD-ONLY0-NEXT:    [[TMP473:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV815:%.*]] = zext i8 [[TMP473]] to i32
// SIMD-ONLY0-NEXT:    [[CMP816:%.*]] = icmp sgt i32 [[CONV814]], [[CONV815]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP816]], label [[IF_THEN818:%.*]], label [[IF_END819:%.*]]
// SIMD-ONLY0:       if.then818:
// SIMD-ONLY0-NEXT:    [[TMP474:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP474]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END819]]
// SIMD-ONLY0:       if.end819:
// SIMD-ONLY0-NEXT:    [[TMP475:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP475]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP476:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV820:%.*]] = zext i8 [[TMP476]] to i32
// SIMD-ONLY0-NEXT:    [[TMP477:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV821:%.*]] = zext i8 [[TMP477]] to i32
// SIMD-ONLY0-NEXT:    [[CMP822:%.*]] = icmp slt i32 [[CONV820]], [[CONV821]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP822]], label [[IF_THEN824:%.*]], label [[IF_END825:%.*]]
// SIMD-ONLY0:       if.then824:
// SIMD-ONLY0-NEXT:    [[TMP478:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP478]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END825]]
// SIMD-ONLY0:       if.end825:
// SIMD-ONLY0-NEXT:    [[TMP479:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP479]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP480:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV826:%.*]] = zext i8 [[TMP480]] to i32
// SIMD-ONLY0-NEXT:    [[TMP481:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV827:%.*]] = zext i8 [[TMP481]] to i32
// SIMD-ONLY0-NEXT:    [[CMP828:%.*]] = icmp slt i32 [[CONV826]], [[CONV827]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP828]], label [[IF_THEN830:%.*]], label [[IF_END831:%.*]]
// SIMD-ONLY0:       if.then830:
// SIMD-ONLY0-NEXT:    [[TMP482:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP482]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END831]]
// SIMD-ONLY0:       if.end831:
// SIMD-ONLY0-NEXT:    [[TMP483:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP483]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP484:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV832:%.*]] = zext i8 [[TMP484]] to i32
// SIMD-ONLY0-NEXT:    [[TMP485:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV833:%.*]] = zext i8 [[TMP485]] to i32
// SIMD-ONLY0-NEXT:    [[CMP834:%.*]] = icmp eq i32 [[CONV832]], [[CONV833]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP834]], label [[IF_THEN836:%.*]], label [[IF_END837:%.*]]
// SIMD-ONLY0:       if.then836:
// SIMD-ONLY0-NEXT:    [[TMP486:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP486]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END837]]
// SIMD-ONLY0:       if.end837:
// SIMD-ONLY0-NEXT:    [[TMP487:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP487]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP488:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV838:%.*]] = zext i8 [[TMP488]] to i32
// SIMD-ONLY0-NEXT:    [[TMP489:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV839:%.*]] = zext i8 [[TMP489]] to i32
// SIMD-ONLY0-NEXT:    [[CMP840:%.*]] = icmp eq i32 [[CONV838]], [[CONV839]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP840]], label [[IF_THEN842:%.*]], label [[IF_END843:%.*]]
// SIMD-ONLY0:       if.then842:
// SIMD-ONLY0-NEXT:    [[TMP490:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP490]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END843]]
// SIMD-ONLY0:       if.end843:
// SIMD-ONLY0-NEXT:    [[TMP491:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP491]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP492:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV844:%.*]] = zext i8 [[TMP492]] to i32
// SIMD-ONLY0-NEXT:    [[TMP493:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV845:%.*]] = zext i8 [[TMP493]] to i32
// SIMD-ONLY0-NEXT:    [[CMP846:%.*]] = icmp eq i32 [[CONV844]], [[CONV845]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP846]], label [[IF_THEN848:%.*]], label [[IF_ELSE849:%.*]]
// SIMD-ONLY0:       if.then848:
// SIMD-ONLY0-NEXT:    [[TMP494:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP494]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END850:%.*]]
// SIMD-ONLY0:       if.else849:
// SIMD-ONLY0-NEXT:    [[TMP495:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP495]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END850]]
// SIMD-ONLY0:       if.end850:
// SIMD-ONLY0-NEXT:    [[TMP496:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV851:%.*]] = zext i8 [[TMP496]] to i32
// SIMD-ONLY0-NEXT:    [[TMP497:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV852:%.*]] = zext i8 [[TMP497]] to i32
// SIMD-ONLY0-NEXT:    [[CMP853:%.*]] = icmp eq i32 [[CONV851]], [[CONV852]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP853]], label [[IF_THEN855:%.*]], label [[IF_ELSE856:%.*]]
// SIMD-ONLY0:       if.then855:
// SIMD-ONLY0-NEXT:    [[TMP498:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP498]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END857:%.*]]
// SIMD-ONLY0:       if.else856:
// SIMD-ONLY0-NEXT:    [[TMP499:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP499]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END857]]
// SIMD-ONLY0:       if.end857:
// SIMD-ONLY0-NEXT:    [[TMP500:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV858:%.*]] = zext i8 [[TMP500]] to i32
// SIMD-ONLY0-NEXT:    [[TMP501:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV859:%.*]] = zext i8 [[TMP501]] to i32
// SIMD-ONLY0-NEXT:    [[CMP860:%.*]] = icmp eq i32 [[CONV858]], [[CONV859]]
// SIMD-ONLY0-NEXT:    [[CONV861:%.*]] = zext i1 [[CMP860]] to i32
// SIMD-ONLY0-NEXT:    [[CONV862:%.*]] = trunc i32 [[CONV861]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV862]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP502:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL863:%.*]] = icmp ne i8 [[TMP502]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL863]], label [[IF_THEN864:%.*]], label [[IF_END865:%.*]]
// SIMD-ONLY0:       if.then864:
// SIMD-ONLY0-NEXT:    [[TMP503:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP503]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END865]]
// SIMD-ONLY0:       if.end865:
// SIMD-ONLY0-NEXT:    [[TMP504:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV866:%.*]] = zext i8 [[TMP504]] to i32
// SIMD-ONLY0-NEXT:    [[TMP505:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV867:%.*]] = zext i8 [[TMP505]] to i32
// SIMD-ONLY0-NEXT:    [[CMP868:%.*]] = icmp eq i32 [[CONV866]], [[CONV867]]
// SIMD-ONLY0-NEXT:    [[CONV869:%.*]] = zext i1 [[CMP868]] to i32
// SIMD-ONLY0-NEXT:    [[CONV870:%.*]] = trunc i32 [[CONV869]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV870]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP506:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL871:%.*]] = icmp ne i8 [[TMP506]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL871]], label [[IF_THEN872:%.*]], label [[IF_END873:%.*]]
// SIMD-ONLY0:       if.then872:
// SIMD-ONLY0-NEXT:    [[TMP507:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP507]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END873]]
// SIMD-ONLY0:       if.end873:
// SIMD-ONLY0-NEXT:    [[TMP508:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV874:%.*]] = zext i8 [[TMP508]] to i32
// SIMD-ONLY0-NEXT:    [[TMP509:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV875:%.*]] = zext i8 [[TMP509]] to i32
// SIMD-ONLY0-NEXT:    [[CMP876:%.*]] = icmp eq i32 [[CONV874]], [[CONV875]]
// SIMD-ONLY0-NEXT:    [[CONV877:%.*]] = zext i1 [[CMP876]] to i32
// SIMD-ONLY0-NEXT:    [[CONV878:%.*]] = trunc i32 [[CONV877]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV878]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP510:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL879:%.*]] = icmp ne i8 [[TMP510]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL879]], label [[IF_THEN880:%.*]], label [[IF_ELSE881:%.*]]
// SIMD-ONLY0:       if.then880:
// SIMD-ONLY0-NEXT:    [[TMP511:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP511]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END882:%.*]]
// SIMD-ONLY0:       if.else881:
// SIMD-ONLY0-NEXT:    [[TMP512:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP512]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END882]]
// SIMD-ONLY0:       if.end882:
// SIMD-ONLY0-NEXT:    [[TMP513:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV883:%.*]] = zext i8 [[TMP513]] to i32
// SIMD-ONLY0-NEXT:    [[TMP514:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV884:%.*]] = zext i8 [[TMP514]] to i32
// SIMD-ONLY0-NEXT:    [[CMP885:%.*]] = icmp eq i32 [[CONV883]], [[CONV884]]
// SIMD-ONLY0-NEXT:    [[CONV886:%.*]] = zext i1 [[CMP885]] to i32
// SIMD-ONLY0-NEXT:    [[CONV887:%.*]] = trunc i32 [[CONV886]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV887]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP515:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL888:%.*]] = icmp ne i8 [[TMP515]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL888]], label [[IF_THEN889:%.*]], label [[IF_ELSE890:%.*]]
// SIMD-ONLY0:       if.then889:
// SIMD-ONLY0-NEXT:    [[TMP516:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP516]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END891:%.*]]
// SIMD-ONLY0:       if.else890:
// SIMD-ONLY0-NEXT:    [[TMP517:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP517]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END891]]
// SIMD-ONLY0:       if.end891:
// SIMD-ONLY0-NEXT:    [[TMP518:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP518]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP519:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV892:%.*]] = zext i8 [[TMP519]] to i32
// SIMD-ONLY0-NEXT:    [[TMP520:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV893:%.*]] = zext i8 [[TMP520]] to i32
// SIMD-ONLY0-NEXT:    [[CMP894:%.*]] = icmp sgt i32 [[CONV892]], [[CONV893]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP894]], label [[IF_THEN896:%.*]], label [[IF_END897:%.*]]
// SIMD-ONLY0:       if.then896:
// SIMD-ONLY0-NEXT:    [[TMP521:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP521]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END897]]
// SIMD-ONLY0:       if.end897:
// SIMD-ONLY0-NEXT:    [[TMP522:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP522]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP523:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV898:%.*]] = zext i8 [[TMP523]] to i32
// SIMD-ONLY0-NEXT:    [[TMP524:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV899:%.*]] = zext i8 [[TMP524]] to i32
// SIMD-ONLY0-NEXT:    [[CMP900:%.*]] = icmp sgt i32 [[CONV898]], [[CONV899]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP900]], label [[IF_THEN902:%.*]], label [[IF_END903:%.*]]
// SIMD-ONLY0:       if.then902:
// SIMD-ONLY0-NEXT:    [[TMP525:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP525]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END903]]
// SIMD-ONLY0:       if.end903:
// SIMD-ONLY0-NEXT:    [[TMP526:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP526]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP527:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV904:%.*]] = zext i8 [[TMP527]] to i32
// SIMD-ONLY0-NEXT:    [[TMP528:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV905:%.*]] = zext i8 [[TMP528]] to i32
// SIMD-ONLY0-NEXT:    [[CMP906:%.*]] = icmp slt i32 [[CONV904]], [[CONV905]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP906]], label [[IF_THEN908:%.*]], label [[IF_END909:%.*]]
// SIMD-ONLY0:       if.then908:
// SIMD-ONLY0-NEXT:    [[TMP529:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP529]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END909]]
// SIMD-ONLY0:       if.end909:
// SIMD-ONLY0-NEXT:    [[TMP530:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP530]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP531:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV910:%.*]] = zext i8 [[TMP531]] to i32
// SIMD-ONLY0-NEXT:    [[TMP532:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV911:%.*]] = zext i8 [[TMP532]] to i32
// SIMD-ONLY0-NEXT:    [[CMP912:%.*]] = icmp slt i32 [[CONV910]], [[CONV911]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP912]], label [[IF_THEN914:%.*]], label [[IF_END915:%.*]]
// SIMD-ONLY0:       if.then914:
// SIMD-ONLY0-NEXT:    [[TMP533:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP533]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END915]]
// SIMD-ONLY0:       if.end915:
// SIMD-ONLY0-NEXT:    [[TMP534:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP534]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP535:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV916:%.*]] = zext i8 [[TMP535]] to i32
// SIMD-ONLY0-NEXT:    [[TMP536:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV917:%.*]] = zext i8 [[TMP536]] to i32
// SIMD-ONLY0-NEXT:    [[CMP918:%.*]] = icmp eq i32 [[CONV916]], [[CONV917]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP918]], label [[IF_THEN920:%.*]], label [[IF_END921:%.*]]
// SIMD-ONLY0:       if.then920:
// SIMD-ONLY0-NEXT:    [[TMP537:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP537]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END921]]
// SIMD-ONLY0:       if.end921:
// SIMD-ONLY0-NEXT:    [[TMP538:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP538]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP539:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV922:%.*]] = zext i8 [[TMP539]] to i32
// SIMD-ONLY0-NEXT:    [[TMP540:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV923:%.*]] = zext i8 [[TMP540]] to i32
// SIMD-ONLY0-NEXT:    [[CMP924:%.*]] = icmp eq i32 [[CONV922]], [[CONV923]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP924]], label [[IF_THEN926:%.*]], label [[IF_END927:%.*]]
// SIMD-ONLY0:       if.then926:
// SIMD-ONLY0-NEXT:    [[TMP541:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP541]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END927]]
// SIMD-ONLY0:       if.end927:
// SIMD-ONLY0-NEXT:    [[TMP542:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV928:%.*]] = zext i8 [[TMP542]] to i32
// SIMD-ONLY0-NEXT:    [[TMP543:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV929:%.*]] = zext i8 [[TMP543]] to i32
// SIMD-ONLY0-NEXT:    [[CMP930:%.*]] = icmp sgt i32 [[CONV928]], [[CONV929]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP930]], label [[IF_THEN932:%.*]], label [[IF_END933:%.*]]
// SIMD-ONLY0:       if.then932:
// SIMD-ONLY0-NEXT:    [[TMP544:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP544]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END933]]
// SIMD-ONLY0:       if.end933:
// SIMD-ONLY0-NEXT:    [[TMP545:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP545]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP546:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV934:%.*]] = zext i8 [[TMP546]] to i32
// SIMD-ONLY0-NEXT:    [[TMP547:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV935:%.*]] = zext i8 [[TMP547]] to i32
// SIMD-ONLY0-NEXT:    [[CMP936:%.*]] = icmp sgt i32 [[CONV934]], [[CONV935]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP936]], label [[IF_THEN938:%.*]], label [[IF_END939:%.*]]
// SIMD-ONLY0:       if.then938:
// SIMD-ONLY0-NEXT:    [[TMP548:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP548]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END939]]
// SIMD-ONLY0:       if.end939:
// SIMD-ONLY0-NEXT:    [[TMP549:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP549]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP550:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV940:%.*]] = zext i8 [[TMP550]] to i32
// SIMD-ONLY0-NEXT:    [[TMP551:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV941:%.*]] = zext i8 [[TMP551]] to i32
// SIMD-ONLY0-NEXT:    [[CMP942:%.*]] = icmp slt i32 [[CONV940]], [[CONV941]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP942]], label [[IF_THEN944:%.*]], label [[IF_END945:%.*]]
// SIMD-ONLY0:       if.then944:
// SIMD-ONLY0-NEXT:    [[TMP552:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP552]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END945]]
// SIMD-ONLY0:       if.end945:
// SIMD-ONLY0-NEXT:    [[TMP553:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP553]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP554:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV946:%.*]] = zext i8 [[TMP554]] to i32
// SIMD-ONLY0-NEXT:    [[TMP555:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV947:%.*]] = zext i8 [[TMP555]] to i32
// SIMD-ONLY0-NEXT:    [[CMP948:%.*]] = icmp slt i32 [[CONV946]], [[CONV947]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP948]], label [[IF_THEN950:%.*]], label [[IF_END951:%.*]]
// SIMD-ONLY0:       if.then950:
// SIMD-ONLY0-NEXT:    [[TMP556:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP556]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END951]]
// SIMD-ONLY0:       if.end951:
// SIMD-ONLY0-NEXT:    [[TMP557:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP557]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP558:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV952:%.*]] = zext i8 [[TMP558]] to i32
// SIMD-ONLY0-NEXT:    [[TMP559:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV953:%.*]] = zext i8 [[TMP559]] to i32
// SIMD-ONLY0-NEXT:    [[CMP954:%.*]] = icmp eq i32 [[CONV952]], [[CONV953]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP954]], label [[IF_THEN956:%.*]], label [[IF_END957:%.*]]
// SIMD-ONLY0:       if.then956:
// SIMD-ONLY0-NEXT:    [[TMP560:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP560]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END957]]
// SIMD-ONLY0:       if.end957:
// SIMD-ONLY0-NEXT:    [[TMP561:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP561]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP562:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV958:%.*]] = zext i8 [[TMP562]] to i32
// SIMD-ONLY0-NEXT:    [[TMP563:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV959:%.*]] = zext i8 [[TMP563]] to i32
// SIMD-ONLY0-NEXT:    [[CMP960:%.*]] = icmp eq i32 [[CONV958]], [[CONV959]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP960]], label [[IF_THEN962:%.*]], label [[IF_END963:%.*]]
// SIMD-ONLY0:       if.then962:
// SIMD-ONLY0-NEXT:    [[TMP564:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP564]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END963]]
// SIMD-ONLY0:       if.end963:
// SIMD-ONLY0-NEXT:    [[TMP565:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP565]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP566:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV964:%.*]] = zext i8 [[TMP566]] to i32
// SIMD-ONLY0-NEXT:    [[TMP567:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV965:%.*]] = zext i8 [[TMP567]] to i32
// SIMD-ONLY0-NEXT:    [[CMP966:%.*]] = icmp eq i32 [[CONV964]], [[CONV965]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP966]], label [[IF_THEN968:%.*]], label [[IF_ELSE969:%.*]]
// SIMD-ONLY0:       if.then968:
// SIMD-ONLY0-NEXT:    [[TMP568:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP568]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END970:%.*]]
// SIMD-ONLY0:       if.else969:
// SIMD-ONLY0-NEXT:    [[TMP569:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP569]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END970]]
// SIMD-ONLY0:       if.end970:
// SIMD-ONLY0-NEXT:    [[TMP570:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV971:%.*]] = zext i8 [[TMP570]] to i32
// SIMD-ONLY0-NEXT:    [[TMP571:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV972:%.*]] = zext i8 [[TMP571]] to i32
// SIMD-ONLY0-NEXT:    [[CMP973:%.*]] = icmp eq i32 [[CONV971]], [[CONV972]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP973]], label [[IF_THEN975:%.*]], label [[IF_ELSE976:%.*]]
// SIMD-ONLY0:       if.then975:
// SIMD-ONLY0-NEXT:    [[TMP572:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP572]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END977:%.*]]
// SIMD-ONLY0:       if.else976:
// SIMD-ONLY0-NEXT:    [[TMP573:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP573]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END977]]
// SIMD-ONLY0:       if.end977:
// SIMD-ONLY0-NEXT:    [[TMP574:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV978:%.*]] = zext i8 [[TMP574]] to i32
// SIMD-ONLY0-NEXT:    [[TMP575:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV979:%.*]] = zext i8 [[TMP575]] to i32
// SIMD-ONLY0-NEXT:    [[CMP980:%.*]] = icmp eq i32 [[CONV978]], [[CONV979]]
// SIMD-ONLY0-NEXT:    [[CONV981:%.*]] = zext i1 [[CMP980]] to i32
// SIMD-ONLY0-NEXT:    [[CONV982:%.*]] = trunc i32 [[CONV981]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV982]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP576:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL983:%.*]] = icmp ne i8 [[TMP576]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL983]], label [[IF_THEN984:%.*]], label [[IF_END985:%.*]]
// SIMD-ONLY0:       if.then984:
// SIMD-ONLY0-NEXT:    [[TMP577:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP577]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END985]]
// SIMD-ONLY0:       if.end985:
// SIMD-ONLY0-NEXT:    [[TMP578:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV986:%.*]] = zext i8 [[TMP578]] to i32
// SIMD-ONLY0-NEXT:    [[TMP579:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV987:%.*]] = zext i8 [[TMP579]] to i32
// SIMD-ONLY0-NEXT:    [[CMP988:%.*]] = icmp eq i32 [[CONV986]], [[CONV987]]
// SIMD-ONLY0-NEXT:    [[CONV989:%.*]] = zext i1 [[CMP988]] to i32
// SIMD-ONLY0-NEXT:    [[CONV990:%.*]] = trunc i32 [[CONV989]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV990]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP580:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL991:%.*]] = icmp ne i8 [[TMP580]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL991]], label [[IF_THEN992:%.*]], label [[IF_END993:%.*]]
// SIMD-ONLY0:       if.then992:
// SIMD-ONLY0-NEXT:    [[TMP581:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP581]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END993]]
// SIMD-ONLY0:       if.end993:
// SIMD-ONLY0-NEXT:    [[TMP582:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV994:%.*]] = zext i8 [[TMP582]] to i32
// SIMD-ONLY0-NEXT:    [[TMP583:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV995:%.*]] = zext i8 [[TMP583]] to i32
// SIMD-ONLY0-NEXT:    [[CMP996:%.*]] = icmp eq i32 [[CONV994]], [[CONV995]]
// SIMD-ONLY0-NEXT:    [[CONV997:%.*]] = zext i1 [[CMP996]] to i32
// SIMD-ONLY0-NEXT:    [[CONV998:%.*]] = trunc i32 [[CONV997]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV998]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP584:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL999:%.*]] = icmp ne i8 [[TMP584]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL999]], label [[IF_THEN1000:%.*]], label [[IF_ELSE1001:%.*]]
// SIMD-ONLY0:       if.then1000:
// SIMD-ONLY0-NEXT:    [[TMP585:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP585]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1002:%.*]]
// SIMD-ONLY0:       if.else1001:
// SIMD-ONLY0-NEXT:    [[TMP586:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP586]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1002]]
// SIMD-ONLY0:       if.end1002:
// SIMD-ONLY0-NEXT:    [[TMP587:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1003:%.*]] = zext i8 [[TMP587]] to i32
// SIMD-ONLY0-NEXT:    [[TMP588:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1004:%.*]] = zext i8 [[TMP588]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1005:%.*]] = icmp eq i32 [[CONV1003]], [[CONV1004]]
// SIMD-ONLY0-NEXT:    [[CONV1006:%.*]] = zext i1 [[CMP1005]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1007:%.*]] = trunc i32 [[CONV1006]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1007]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP589:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1008:%.*]] = icmp ne i8 [[TMP589]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1008]], label [[IF_THEN1009:%.*]], label [[IF_ELSE1010:%.*]]
// SIMD-ONLY0:       if.then1009:
// SIMD-ONLY0-NEXT:    [[TMP590:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP590]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1011:%.*]]
// SIMD-ONLY0:       if.else1010:
// SIMD-ONLY0-NEXT:    [[TMP591:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP591]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1011]]
// SIMD-ONLY0:       if.end1011:
// SIMD-ONLY0-NEXT:    [[TMP592:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP592]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP593:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1012:%.*]] = zext i8 [[TMP593]] to i32
// SIMD-ONLY0-NEXT:    [[TMP594:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1013:%.*]] = zext i8 [[TMP594]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1014:%.*]] = icmp sgt i32 [[CONV1012]], [[CONV1013]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1014]], label [[IF_THEN1016:%.*]], label [[IF_END1017:%.*]]
// SIMD-ONLY0:       if.then1016:
// SIMD-ONLY0-NEXT:    [[TMP595:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP595]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1017]]
// SIMD-ONLY0:       if.end1017:
// SIMD-ONLY0-NEXT:    [[TMP596:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP596]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP597:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1018:%.*]] = zext i8 [[TMP597]] to i32
// SIMD-ONLY0-NEXT:    [[TMP598:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1019:%.*]] = zext i8 [[TMP598]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1020:%.*]] = icmp sgt i32 [[CONV1018]], [[CONV1019]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1020]], label [[IF_THEN1022:%.*]], label [[IF_END1023:%.*]]
// SIMD-ONLY0:       if.then1022:
// SIMD-ONLY0-NEXT:    [[TMP599:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP599]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1023]]
// SIMD-ONLY0:       if.end1023:
// SIMD-ONLY0-NEXT:    [[TMP600:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP600]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP601:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1024:%.*]] = zext i8 [[TMP601]] to i32
// SIMD-ONLY0-NEXT:    [[TMP602:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1025:%.*]] = zext i8 [[TMP602]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1026:%.*]] = icmp slt i32 [[CONV1024]], [[CONV1025]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1026]], label [[IF_THEN1028:%.*]], label [[IF_END1029:%.*]]
// SIMD-ONLY0:       if.then1028:
// SIMD-ONLY0-NEXT:    [[TMP603:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP603]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1029]]
// SIMD-ONLY0:       if.end1029:
// SIMD-ONLY0-NEXT:    [[TMP604:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP604]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP605:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1030:%.*]] = zext i8 [[TMP605]] to i32
// SIMD-ONLY0-NEXT:    [[TMP606:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1031:%.*]] = zext i8 [[TMP606]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1032:%.*]] = icmp slt i32 [[CONV1030]], [[CONV1031]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1032]], label [[IF_THEN1034:%.*]], label [[IF_END1035:%.*]]
// SIMD-ONLY0:       if.then1034:
// SIMD-ONLY0-NEXT:    [[TMP607:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP607]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1035]]
// SIMD-ONLY0:       if.end1035:
// SIMD-ONLY0-NEXT:    [[TMP608:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP608]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP609:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1036:%.*]] = zext i8 [[TMP609]] to i32
// SIMD-ONLY0-NEXT:    [[TMP610:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1037:%.*]] = zext i8 [[TMP610]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1038:%.*]] = icmp eq i32 [[CONV1036]], [[CONV1037]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1038]], label [[IF_THEN1040:%.*]], label [[IF_END1041:%.*]]
// SIMD-ONLY0:       if.then1040:
// SIMD-ONLY0-NEXT:    [[TMP611:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP611]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1041]]
// SIMD-ONLY0:       if.end1041:
// SIMD-ONLY0-NEXT:    [[TMP612:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP612]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP613:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1042:%.*]] = zext i8 [[TMP613]] to i32
// SIMD-ONLY0-NEXT:    [[TMP614:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1043:%.*]] = zext i8 [[TMP614]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1044:%.*]] = icmp eq i32 [[CONV1042]], [[CONV1043]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1044]], label [[IF_THEN1046:%.*]], label [[IF_END1047:%.*]]
// SIMD-ONLY0:       if.then1046:
// SIMD-ONLY0-NEXT:    [[TMP615:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP615]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1047]]
// SIMD-ONLY0:       if.end1047:
// SIMD-ONLY0-NEXT:    [[TMP616:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1048:%.*]] = zext i8 [[TMP616]] to i32
// SIMD-ONLY0-NEXT:    [[TMP617:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1049:%.*]] = zext i8 [[TMP617]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1050:%.*]] = icmp sgt i32 [[CONV1048]], [[CONV1049]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1050]], label [[IF_THEN1052:%.*]], label [[IF_END1053:%.*]]
// SIMD-ONLY0:       if.then1052:
// SIMD-ONLY0-NEXT:    [[TMP618:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP618]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1053]]
// SIMD-ONLY0:       if.end1053:
// SIMD-ONLY0-NEXT:    [[TMP619:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP619]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP620:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1054:%.*]] = zext i8 [[TMP620]] to i32
// SIMD-ONLY0-NEXT:    [[TMP621:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1055:%.*]] = zext i8 [[TMP621]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1056:%.*]] = icmp sgt i32 [[CONV1054]], [[CONV1055]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1056]], label [[IF_THEN1058:%.*]], label [[IF_END1059:%.*]]
// SIMD-ONLY0:       if.then1058:
// SIMD-ONLY0-NEXT:    [[TMP622:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP622]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1059]]
// SIMD-ONLY0:       if.end1059:
// SIMD-ONLY0-NEXT:    [[TMP623:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP623]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP624:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1060:%.*]] = zext i8 [[TMP624]] to i32
// SIMD-ONLY0-NEXT:    [[TMP625:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1061:%.*]] = zext i8 [[TMP625]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1062:%.*]] = icmp slt i32 [[CONV1060]], [[CONV1061]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1062]], label [[IF_THEN1064:%.*]], label [[IF_END1065:%.*]]
// SIMD-ONLY0:       if.then1064:
// SIMD-ONLY0-NEXT:    [[TMP626:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP626]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1065]]
// SIMD-ONLY0:       if.end1065:
// SIMD-ONLY0-NEXT:    [[TMP627:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP627]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP628:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1066:%.*]] = zext i8 [[TMP628]] to i32
// SIMD-ONLY0-NEXT:    [[TMP629:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1067:%.*]] = zext i8 [[TMP629]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1068:%.*]] = icmp slt i32 [[CONV1066]], [[CONV1067]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1068]], label [[IF_THEN1070:%.*]], label [[IF_END1071:%.*]]
// SIMD-ONLY0:       if.then1070:
// SIMD-ONLY0-NEXT:    [[TMP630:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP630]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1071]]
// SIMD-ONLY0:       if.end1071:
// SIMD-ONLY0-NEXT:    [[TMP631:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP631]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP632:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1072:%.*]] = zext i8 [[TMP632]] to i32
// SIMD-ONLY0-NEXT:    [[TMP633:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1073:%.*]] = zext i8 [[TMP633]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1074:%.*]] = icmp eq i32 [[CONV1072]], [[CONV1073]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1074]], label [[IF_THEN1076:%.*]], label [[IF_END1077:%.*]]
// SIMD-ONLY0:       if.then1076:
// SIMD-ONLY0-NEXT:    [[TMP634:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP634]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1077]]
// SIMD-ONLY0:       if.end1077:
// SIMD-ONLY0-NEXT:    [[TMP635:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP635]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP636:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1078:%.*]] = zext i8 [[TMP636]] to i32
// SIMD-ONLY0-NEXT:    [[TMP637:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1079:%.*]] = zext i8 [[TMP637]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1080:%.*]] = icmp eq i32 [[CONV1078]], [[CONV1079]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1080]], label [[IF_THEN1082:%.*]], label [[IF_END1083:%.*]]
// SIMD-ONLY0:       if.then1082:
// SIMD-ONLY0-NEXT:    [[TMP638:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP638]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1083]]
// SIMD-ONLY0:       if.end1083:
// SIMD-ONLY0-NEXT:    [[TMP639:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP639]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP640:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1084:%.*]] = zext i8 [[TMP640]] to i32
// SIMD-ONLY0-NEXT:    [[TMP641:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1085:%.*]] = zext i8 [[TMP641]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1086:%.*]] = icmp eq i32 [[CONV1084]], [[CONV1085]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1086]], label [[IF_THEN1088:%.*]], label [[IF_ELSE1089:%.*]]
// SIMD-ONLY0:       if.then1088:
// SIMD-ONLY0-NEXT:    [[TMP642:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP642]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1090:%.*]]
// SIMD-ONLY0:       if.else1089:
// SIMD-ONLY0-NEXT:    [[TMP643:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP643]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1090]]
// SIMD-ONLY0:       if.end1090:
// SIMD-ONLY0-NEXT:    [[TMP644:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1091:%.*]] = zext i8 [[TMP644]] to i32
// SIMD-ONLY0-NEXT:    [[TMP645:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1092:%.*]] = zext i8 [[TMP645]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1093:%.*]] = icmp eq i32 [[CONV1091]], [[CONV1092]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1093]], label [[IF_THEN1095:%.*]], label [[IF_ELSE1096:%.*]]
// SIMD-ONLY0:       if.then1095:
// SIMD-ONLY0-NEXT:    [[TMP646:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP646]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1097:%.*]]
// SIMD-ONLY0:       if.else1096:
// SIMD-ONLY0-NEXT:    [[TMP647:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP647]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1097]]
// SIMD-ONLY0:       if.end1097:
// SIMD-ONLY0-NEXT:    [[TMP648:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1098:%.*]] = zext i8 [[TMP648]] to i32
// SIMD-ONLY0-NEXT:    [[TMP649:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1099:%.*]] = zext i8 [[TMP649]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1100:%.*]] = icmp eq i32 [[CONV1098]], [[CONV1099]]
// SIMD-ONLY0-NEXT:    [[CONV1101:%.*]] = zext i1 [[CMP1100]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1102:%.*]] = trunc i32 [[CONV1101]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1102]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP650:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1103:%.*]] = icmp ne i8 [[TMP650]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1103]], label [[IF_THEN1104:%.*]], label [[IF_END1105:%.*]]
// SIMD-ONLY0:       if.then1104:
// SIMD-ONLY0-NEXT:    [[TMP651:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP651]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1105]]
// SIMD-ONLY0:       if.end1105:
// SIMD-ONLY0-NEXT:    [[TMP652:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1106:%.*]] = zext i8 [[TMP652]] to i32
// SIMD-ONLY0-NEXT:    [[TMP653:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1107:%.*]] = zext i8 [[TMP653]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1108:%.*]] = icmp eq i32 [[CONV1106]], [[CONV1107]]
// SIMD-ONLY0-NEXT:    [[CONV1109:%.*]] = zext i1 [[CMP1108]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1110:%.*]] = trunc i32 [[CONV1109]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1110]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP654:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1111:%.*]] = icmp ne i8 [[TMP654]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1111]], label [[IF_THEN1112:%.*]], label [[IF_END1113:%.*]]
// SIMD-ONLY0:       if.then1112:
// SIMD-ONLY0-NEXT:    [[TMP655:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP655]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1113]]
// SIMD-ONLY0:       if.end1113:
// SIMD-ONLY0-NEXT:    [[TMP656:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1114:%.*]] = zext i8 [[TMP656]] to i32
// SIMD-ONLY0-NEXT:    [[TMP657:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1115:%.*]] = zext i8 [[TMP657]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1116:%.*]] = icmp eq i32 [[CONV1114]], [[CONV1115]]
// SIMD-ONLY0-NEXT:    [[CONV1117:%.*]] = zext i1 [[CMP1116]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1118:%.*]] = trunc i32 [[CONV1117]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1118]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP658:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1119:%.*]] = icmp ne i8 [[TMP658]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1119]], label [[IF_THEN1120:%.*]], label [[IF_ELSE1121:%.*]]
// SIMD-ONLY0:       if.then1120:
// SIMD-ONLY0-NEXT:    [[TMP659:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP659]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1122:%.*]]
// SIMD-ONLY0:       if.else1121:
// SIMD-ONLY0-NEXT:    [[TMP660:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP660]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1122]]
// SIMD-ONLY0:       if.end1122:
// SIMD-ONLY0-NEXT:    [[TMP661:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1123:%.*]] = zext i8 [[TMP661]] to i32
// SIMD-ONLY0-NEXT:    [[TMP662:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1124:%.*]] = zext i8 [[TMP662]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1125:%.*]] = icmp eq i32 [[CONV1123]], [[CONV1124]]
// SIMD-ONLY0-NEXT:    [[CONV1126:%.*]] = zext i1 [[CMP1125]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1127:%.*]] = trunc i32 [[CONV1126]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1127]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP663:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1128:%.*]] = icmp ne i8 [[TMP663]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1128]], label [[IF_THEN1129:%.*]], label [[IF_ELSE1130:%.*]]
// SIMD-ONLY0:       if.then1129:
// SIMD-ONLY0-NEXT:    [[TMP664:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP664]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1131:%.*]]
// SIMD-ONLY0:       if.else1130:
// SIMD-ONLY0-NEXT:    [[TMP665:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP665]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1131]]
// SIMD-ONLY0:       if.end1131:
// SIMD-ONLY0-NEXT:    [[TMP666:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP666]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP667:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1132:%.*]] = zext i8 [[TMP667]] to i32
// SIMD-ONLY0-NEXT:    [[TMP668:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1133:%.*]] = zext i8 [[TMP668]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1134:%.*]] = icmp sgt i32 [[CONV1132]], [[CONV1133]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1134]], label [[IF_THEN1136:%.*]], label [[IF_END1137:%.*]]
// SIMD-ONLY0:       if.then1136:
// SIMD-ONLY0-NEXT:    [[TMP669:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP669]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1137]]
// SIMD-ONLY0:       if.end1137:
// SIMD-ONLY0-NEXT:    [[TMP670:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP670]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP671:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1138:%.*]] = zext i8 [[TMP671]] to i32
// SIMD-ONLY0-NEXT:    [[TMP672:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1139:%.*]] = zext i8 [[TMP672]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1140:%.*]] = icmp sgt i32 [[CONV1138]], [[CONV1139]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1140]], label [[IF_THEN1142:%.*]], label [[IF_END1143:%.*]]
// SIMD-ONLY0:       if.then1142:
// SIMD-ONLY0-NEXT:    [[TMP673:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP673]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1143]]
// SIMD-ONLY0:       if.end1143:
// SIMD-ONLY0-NEXT:    [[TMP674:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP674]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP675:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1144:%.*]] = zext i8 [[TMP675]] to i32
// SIMD-ONLY0-NEXT:    [[TMP676:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1145:%.*]] = zext i8 [[TMP676]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1146:%.*]] = icmp slt i32 [[CONV1144]], [[CONV1145]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1146]], label [[IF_THEN1148:%.*]], label [[IF_END1149:%.*]]
// SIMD-ONLY0:       if.then1148:
// SIMD-ONLY0-NEXT:    [[TMP677:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP677]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1149]]
// SIMD-ONLY0:       if.end1149:
// SIMD-ONLY0-NEXT:    [[TMP678:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP678]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP679:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1150:%.*]] = zext i8 [[TMP679]] to i32
// SIMD-ONLY0-NEXT:    [[TMP680:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1151:%.*]] = zext i8 [[TMP680]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1152:%.*]] = icmp slt i32 [[CONV1150]], [[CONV1151]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1152]], label [[IF_THEN1154:%.*]], label [[IF_END1155:%.*]]
// SIMD-ONLY0:       if.then1154:
// SIMD-ONLY0-NEXT:    [[TMP681:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP681]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1155]]
// SIMD-ONLY0:       if.end1155:
// SIMD-ONLY0-NEXT:    [[TMP682:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP682]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP683:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1156:%.*]] = zext i8 [[TMP683]] to i32
// SIMD-ONLY0-NEXT:    [[TMP684:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1157:%.*]] = zext i8 [[TMP684]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1158:%.*]] = icmp eq i32 [[CONV1156]], [[CONV1157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1158]], label [[IF_THEN1160:%.*]], label [[IF_END1161:%.*]]
// SIMD-ONLY0:       if.then1160:
// SIMD-ONLY0-NEXT:    [[TMP685:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP685]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1161]]
// SIMD-ONLY0:       if.end1161:
// SIMD-ONLY0-NEXT:    [[TMP686:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP686]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP687:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1162:%.*]] = zext i8 [[TMP687]] to i32
// SIMD-ONLY0-NEXT:    [[TMP688:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1163:%.*]] = zext i8 [[TMP688]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1164:%.*]] = icmp eq i32 [[CONV1162]], [[CONV1163]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1164]], label [[IF_THEN1166:%.*]], label [[IF_END1167:%.*]]
// SIMD-ONLY0:       if.then1166:
// SIMD-ONLY0-NEXT:    [[TMP689:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP689]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1167]]
// SIMD-ONLY0:       if.end1167:
// SIMD-ONLY0-NEXT:    [[TMP690:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1168:%.*]] = zext i8 [[TMP690]] to i32
// SIMD-ONLY0-NEXT:    [[TMP691:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1169:%.*]] = zext i8 [[TMP691]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1170:%.*]] = icmp sgt i32 [[CONV1168]], [[CONV1169]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1170]], label [[IF_THEN1172:%.*]], label [[IF_END1173:%.*]]
// SIMD-ONLY0:       if.then1172:
// SIMD-ONLY0-NEXT:    [[TMP692:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP692]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1173]]
// SIMD-ONLY0:       if.end1173:
// SIMD-ONLY0-NEXT:    [[TMP693:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP693]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP694:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1174:%.*]] = zext i8 [[TMP694]] to i32
// SIMD-ONLY0-NEXT:    [[TMP695:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1175:%.*]] = zext i8 [[TMP695]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1176:%.*]] = icmp sgt i32 [[CONV1174]], [[CONV1175]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1176]], label [[IF_THEN1178:%.*]], label [[IF_END1179:%.*]]
// SIMD-ONLY0:       if.then1178:
// SIMD-ONLY0-NEXT:    [[TMP696:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP696]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1179]]
// SIMD-ONLY0:       if.end1179:
// SIMD-ONLY0-NEXT:    [[TMP697:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP697]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP698:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1180:%.*]] = zext i8 [[TMP698]] to i32
// SIMD-ONLY0-NEXT:    [[TMP699:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1181:%.*]] = zext i8 [[TMP699]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1182:%.*]] = icmp slt i32 [[CONV1180]], [[CONV1181]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1182]], label [[IF_THEN1184:%.*]], label [[IF_END1185:%.*]]
// SIMD-ONLY0:       if.then1184:
// SIMD-ONLY0-NEXT:    [[TMP700:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP700]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1185]]
// SIMD-ONLY0:       if.end1185:
// SIMD-ONLY0-NEXT:    [[TMP701:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP701]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP702:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1186:%.*]] = zext i8 [[TMP702]] to i32
// SIMD-ONLY0-NEXT:    [[TMP703:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1187:%.*]] = zext i8 [[TMP703]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1188:%.*]] = icmp slt i32 [[CONV1186]], [[CONV1187]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1188]], label [[IF_THEN1190:%.*]], label [[IF_END1191:%.*]]
// SIMD-ONLY0:       if.then1190:
// SIMD-ONLY0-NEXT:    [[TMP704:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP704]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1191]]
// SIMD-ONLY0:       if.end1191:
// SIMD-ONLY0-NEXT:    [[TMP705:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP705]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP706:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1192:%.*]] = zext i8 [[TMP706]] to i32
// SIMD-ONLY0-NEXT:    [[TMP707:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1193:%.*]] = zext i8 [[TMP707]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1194:%.*]] = icmp eq i32 [[CONV1192]], [[CONV1193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1194]], label [[IF_THEN1196:%.*]], label [[IF_END1197:%.*]]
// SIMD-ONLY0:       if.then1196:
// SIMD-ONLY0-NEXT:    [[TMP708:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP708]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1197]]
// SIMD-ONLY0:       if.end1197:
// SIMD-ONLY0-NEXT:    [[TMP709:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP709]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP710:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1198:%.*]] = zext i8 [[TMP710]] to i32
// SIMD-ONLY0-NEXT:    [[TMP711:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1199:%.*]] = zext i8 [[TMP711]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1200:%.*]] = icmp eq i32 [[CONV1198]], [[CONV1199]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1200]], label [[IF_THEN1202:%.*]], label [[IF_END1203:%.*]]
// SIMD-ONLY0:       if.then1202:
// SIMD-ONLY0-NEXT:    [[TMP712:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP712]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1203]]
// SIMD-ONLY0:       if.end1203:
// SIMD-ONLY0-NEXT:    [[TMP713:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP713]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP714:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1204:%.*]] = zext i8 [[TMP714]] to i32
// SIMD-ONLY0-NEXT:    [[TMP715:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1205:%.*]] = zext i8 [[TMP715]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1206:%.*]] = icmp eq i32 [[CONV1204]], [[CONV1205]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1206]], label [[IF_THEN1208:%.*]], label [[IF_ELSE1209:%.*]]
// SIMD-ONLY0:       if.then1208:
// SIMD-ONLY0-NEXT:    [[TMP716:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP716]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1210:%.*]]
// SIMD-ONLY0:       if.else1209:
// SIMD-ONLY0-NEXT:    [[TMP717:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP717]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1210]]
// SIMD-ONLY0:       if.end1210:
// SIMD-ONLY0-NEXT:    [[TMP718:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1211:%.*]] = zext i8 [[TMP718]] to i32
// SIMD-ONLY0-NEXT:    [[TMP719:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1212:%.*]] = zext i8 [[TMP719]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1213:%.*]] = icmp eq i32 [[CONV1211]], [[CONV1212]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1213]], label [[IF_THEN1215:%.*]], label [[IF_ELSE1216:%.*]]
// SIMD-ONLY0:       if.then1215:
// SIMD-ONLY0-NEXT:    [[TMP720:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP720]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1217:%.*]]
// SIMD-ONLY0:       if.else1216:
// SIMD-ONLY0-NEXT:    [[TMP721:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP721]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1217]]
// SIMD-ONLY0:       if.end1217:
// SIMD-ONLY0-NEXT:    [[TMP722:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1218:%.*]] = zext i8 [[TMP722]] to i32
// SIMD-ONLY0-NEXT:    [[TMP723:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1219:%.*]] = zext i8 [[TMP723]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1220:%.*]] = icmp eq i32 [[CONV1218]], [[CONV1219]]
// SIMD-ONLY0-NEXT:    [[CONV1221:%.*]] = zext i1 [[CMP1220]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1222:%.*]] = trunc i32 [[CONV1221]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1222]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP724:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1223:%.*]] = icmp ne i8 [[TMP724]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1223]], label [[IF_THEN1224:%.*]], label [[IF_END1225:%.*]]
// SIMD-ONLY0:       if.then1224:
// SIMD-ONLY0-NEXT:    [[TMP725:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP725]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1225]]
// SIMD-ONLY0:       if.end1225:
// SIMD-ONLY0-NEXT:    [[TMP726:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1226:%.*]] = zext i8 [[TMP726]] to i32
// SIMD-ONLY0-NEXT:    [[TMP727:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1227:%.*]] = zext i8 [[TMP727]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1228:%.*]] = icmp eq i32 [[CONV1226]], [[CONV1227]]
// SIMD-ONLY0-NEXT:    [[CONV1229:%.*]] = zext i1 [[CMP1228]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1230:%.*]] = trunc i32 [[CONV1229]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1230]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP728:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1231:%.*]] = icmp ne i8 [[TMP728]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1231]], label [[IF_THEN1232:%.*]], label [[IF_END1233:%.*]]
// SIMD-ONLY0:       if.then1232:
// SIMD-ONLY0-NEXT:    [[TMP729:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP729]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1233]]
// SIMD-ONLY0:       if.end1233:
// SIMD-ONLY0-NEXT:    [[TMP730:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1234:%.*]] = zext i8 [[TMP730]] to i32
// SIMD-ONLY0-NEXT:    [[TMP731:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1235:%.*]] = zext i8 [[TMP731]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1236:%.*]] = icmp eq i32 [[CONV1234]], [[CONV1235]]
// SIMD-ONLY0-NEXT:    [[CONV1237:%.*]] = zext i1 [[CMP1236]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1238:%.*]] = trunc i32 [[CONV1237]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1238]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP732:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1239:%.*]] = icmp ne i8 [[TMP732]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1239]], label [[IF_THEN1240:%.*]], label [[IF_ELSE1241:%.*]]
// SIMD-ONLY0:       if.then1240:
// SIMD-ONLY0-NEXT:    [[TMP733:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP733]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1242:%.*]]
// SIMD-ONLY0:       if.else1241:
// SIMD-ONLY0-NEXT:    [[TMP734:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP734]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1242]]
// SIMD-ONLY0:       if.end1242:
// SIMD-ONLY0-NEXT:    [[TMP735:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1243:%.*]] = zext i8 [[TMP735]] to i32
// SIMD-ONLY0-NEXT:    [[TMP736:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1244:%.*]] = zext i8 [[TMP736]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1245:%.*]] = icmp eq i32 [[CONV1243]], [[CONV1244]]
// SIMD-ONLY0-NEXT:    [[CONV1246:%.*]] = zext i1 [[CMP1245]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1247:%.*]] = trunc i32 [[CONV1246]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1247]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP737:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1248:%.*]] = icmp ne i8 [[TMP737]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1248]], label [[IF_THEN1249:%.*]], label [[IF_ELSE1250:%.*]]
// SIMD-ONLY0:       if.then1249:
// SIMD-ONLY0-NEXT:    [[TMP738:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP738]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1251:%.*]]
// SIMD-ONLY0:       if.else1250:
// SIMD-ONLY0-NEXT:    [[TMP739:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP739]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1251]]
// SIMD-ONLY0:       if.end1251:
// SIMD-ONLY0-NEXT:    [[TMP740:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP740]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP741:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1252:%.*]] = zext i8 [[TMP741]] to i32
// SIMD-ONLY0-NEXT:    [[TMP742:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1253:%.*]] = zext i8 [[TMP742]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1254:%.*]] = icmp sgt i32 [[CONV1252]], [[CONV1253]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1254]], label [[IF_THEN1256:%.*]], label [[IF_END1257:%.*]]
// SIMD-ONLY0:       if.then1256:
// SIMD-ONLY0-NEXT:    [[TMP743:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP743]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1257]]
// SIMD-ONLY0:       if.end1257:
// SIMD-ONLY0-NEXT:    [[TMP744:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP744]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP745:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1258:%.*]] = zext i8 [[TMP745]] to i32
// SIMD-ONLY0-NEXT:    [[TMP746:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1259:%.*]] = zext i8 [[TMP746]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1260:%.*]] = icmp sgt i32 [[CONV1258]], [[CONV1259]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1260]], label [[IF_THEN1262:%.*]], label [[IF_END1263:%.*]]
// SIMD-ONLY0:       if.then1262:
// SIMD-ONLY0-NEXT:    [[TMP747:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP747]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1263]]
// SIMD-ONLY0:       if.end1263:
// SIMD-ONLY0-NEXT:    [[TMP748:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP748]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP749:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1264:%.*]] = zext i8 [[TMP749]] to i32
// SIMD-ONLY0-NEXT:    [[TMP750:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1265:%.*]] = zext i8 [[TMP750]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1266:%.*]] = icmp slt i32 [[CONV1264]], [[CONV1265]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1266]], label [[IF_THEN1268:%.*]], label [[IF_END1269:%.*]]
// SIMD-ONLY0:       if.then1268:
// SIMD-ONLY0-NEXT:    [[TMP751:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP751]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1269]]
// SIMD-ONLY0:       if.end1269:
// SIMD-ONLY0-NEXT:    [[TMP752:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP752]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP753:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1270:%.*]] = zext i8 [[TMP753]] to i32
// SIMD-ONLY0-NEXT:    [[TMP754:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1271:%.*]] = zext i8 [[TMP754]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1272:%.*]] = icmp slt i32 [[CONV1270]], [[CONV1271]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1272]], label [[IF_THEN1274:%.*]], label [[IF_END1275:%.*]]
// SIMD-ONLY0:       if.then1274:
// SIMD-ONLY0-NEXT:    [[TMP755:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP755]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1275]]
// SIMD-ONLY0:       if.end1275:
// SIMD-ONLY0-NEXT:    [[TMP756:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP756]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP757:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1276:%.*]] = zext i8 [[TMP757]] to i32
// SIMD-ONLY0-NEXT:    [[TMP758:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1277:%.*]] = zext i8 [[TMP758]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1278:%.*]] = icmp eq i32 [[CONV1276]], [[CONV1277]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1278]], label [[IF_THEN1280:%.*]], label [[IF_END1281:%.*]]
// SIMD-ONLY0:       if.then1280:
// SIMD-ONLY0-NEXT:    [[TMP759:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP759]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1281]]
// SIMD-ONLY0:       if.end1281:
// SIMD-ONLY0-NEXT:    [[TMP760:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP760]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP761:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1282:%.*]] = zext i8 [[TMP761]] to i32
// SIMD-ONLY0-NEXT:    [[TMP762:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1283:%.*]] = zext i8 [[TMP762]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1284:%.*]] = icmp eq i32 [[CONV1282]], [[CONV1283]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1284]], label [[IF_THEN1286:%.*]], label [[IF_END1287:%.*]]
// SIMD-ONLY0:       if.then1286:
// SIMD-ONLY0-NEXT:    [[TMP763:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP763]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1287]]
// SIMD-ONLY0:       if.end1287:
// SIMD-ONLY0-NEXT:    [[TMP764:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1288:%.*]] = zext i8 [[TMP764]] to i32
// SIMD-ONLY0-NEXT:    [[TMP765:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1289:%.*]] = zext i8 [[TMP765]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1290:%.*]] = icmp sgt i32 [[CONV1288]], [[CONV1289]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1290]], label [[IF_THEN1292:%.*]], label [[IF_END1293:%.*]]
// SIMD-ONLY0:       if.then1292:
// SIMD-ONLY0-NEXT:    [[TMP766:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP766]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1293]]
// SIMD-ONLY0:       if.end1293:
// SIMD-ONLY0-NEXT:    [[TMP767:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP767]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP768:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1294:%.*]] = zext i8 [[TMP768]] to i32
// SIMD-ONLY0-NEXT:    [[TMP769:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1295:%.*]] = zext i8 [[TMP769]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1296:%.*]] = icmp sgt i32 [[CONV1294]], [[CONV1295]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1296]], label [[IF_THEN1298:%.*]], label [[IF_END1299:%.*]]
// SIMD-ONLY0:       if.then1298:
// SIMD-ONLY0-NEXT:    [[TMP770:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP770]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1299]]
// SIMD-ONLY0:       if.end1299:
// SIMD-ONLY0-NEXT:    [[TMP771:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP771]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP772:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1300:%.*]] = zext i8 [[TMP772]] to i32
// SIMD-ONLY0-NEXT:    [[TMP773:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1301:%.*]] = zext i8 [[TMP773]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1302:%.*]] = icmp slt i32 [[CONV1300]], [[CONV1301]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1302]], label [[IF_THEN1304:%.*]], label [[IF_END1305:%.*]]
// SIMD-ONLY0:       if.then1304:
// SIMD-ONLY0-NEXT:    [[TMP774:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP774]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1305]]
// SIMD-ONLY0:       if.end1305:
// SIMD-ONLY0-NEXT:    [[TMP775:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP775]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP776:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1306:%.*]] = zext i8 [[TMP776]] to i32
// SIMD-ONLY0-NEXT:    [[TMP777:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1307:%.*]] = zext i8 [[TMP777]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1308:%.*]] = icmp slt i32 [[CONV1306]], [[CONV1307]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1308]], label [[IF_THEN1310:%.*]], label [[IF_END1311:%.*]]
// SIMD-ONLY0:       if.then1310:
// SIMD-ONLY0-NEXT:    [[TMP778:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP778]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1311]]
// SIMD-ONLY0:       if.end1311:
// SIMD-ONLY0-NEXT:    [[TMP779:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP779]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP780:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1312:%.*]] = zext i8 [[TMP780]] to i32
// SIMD-ONLY0-NEXT:    [[TMP781:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1313:%.*]] = zext i8 [[TMP781]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1314:%.*]] = icmp eq i32 [[CONV1312]], [[CONV1313]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1314]], label [[IF_THEN1316:%.*]], label [[IF_END1317:%.*]]
// SIMD-ONLY0:       if.then1316:
// SIMD-ONLY0-NEXT:    [[TMP782:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP782]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1317]]
// SIMD-ONLY0:       if.end1317:
// SIMD-ONLY0-NEXT:    [[TMP783:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP783]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP784:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1318:%.*]] = zext i8 [[TMP784]] to i32
// SIMD-ONLY0-NEXT:    [[TMP785:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1319:%.*]] = zext i8 [[TMP785]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1320:%.*]] = icmp eq i32 [[CONV1318]], [[CONV1319]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1320]], label [[IF_THEN1322:%.*]], label [[IF_END1323:%.*]]
// SIMD-ONLY0:       if.then1322:
// SIMD-ONLY0-NEXT:    [[TMP786:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP786]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1323]]
// SIMD-ONLY0:       if.end1323:
// SIMD-ONLY0-NEXT:    [[TMP787:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP787]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP788:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1324:%.*]] = zext i8 [[TMP788]] to i32
// SIMD-ONLY0-NEXT:    [[TMP789:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1325:%.*]] = zext i8 [[TMP789]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1326:%.*]] = icmp eq i32 [[CONV1324]], [[CONV1325]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1326]], label [[IF_THEN1328:%.*]], label [[IF_ELSE1329:%.*]]
// SIMD-ONLY0:       if.then1328:
// SIMD-ONLY0-NEXT:    [[TMP790:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP790]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1330:%.*]]
// SIMD-ONLY0:       if.else1329:
// SIMD-ONLY0-NEXT:    [[TMP791:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP791]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1330]]
// SIMD-ONLY0:       if.end1330:
// SIMD-ONLY0-NEXT:    [[TMP792:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1331:%.*]] = zext i8 [[TMP792]] to i32
// SIMD-ONLY0-NEXT:    [[TMP793:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1332:%.*]] = zext i8 [[TMP793]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1333:%.*]] = icmp eq i32 [[CONV1331]], [[CONV1332]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1333]], label [[IF_THEN1335:%.*]], label [[IF_ELSE1336:%.*]]
// SIMD-ONLY0:       if.then1335:
// SIMD-ONLY0-NEXT:    [[TMP794:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP794]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1337:%.*]]
// SIMD-ONLY0:       if.else1336:
// SIMD-ONLY0-NEXT:    [[TMP795:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP795]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1337]]
// SIMD-ONLY0:       if.end1337:
// SIMD-ONLY0-NEXT:    [[TMP796:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1338:%.*]] = zext i8 [[TMP796]] to i32
// SIMD-ONLY0-NEXT:    [[TMP797:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1339:%.*]] = zext i8 [[TMP797]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1340:%.*]] = icmp eq i32 [[CONV1338]], [[CONV1339]]
// SIMD-ONLY0-NEXT:    [[CONV1341:%.*]] = zext i1 [[CMP1340]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1342:%.*]] = trunc i32 [[CONV1341]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1342]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP798:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1343:%.*]] = icmp ne i8 [[TMP798]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1343]], label [[IF_THEN1344:%.*]], label [[IF_END1345:%.*]]
// SIMD-ONLY0:       if.then1344:
// SIMD-ONLY0-NEXT:    [[TMP799:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP799]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1345]]
// SIMD-ONLY0:       if.end1345:
// SIMD-ONLY0-NEXT:    [[TMP800:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1346:%.*]] = zext i8 [[TMP800]] to i32
// SIMD-ONLY0-NEXT:    [[TMP801:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1347:%.*]] = zext i8 [[TMP801]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1348:%.*]] = icmp eq i32 [[CONV1346]], [[CONV1347]]
// SIMD-ONLY0-NEXT:    [[CONV1349:%.*]] = zext i1 [[CMP1348]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1350:%.*]] = trunc i32 [[CONV1349]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1350]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP802:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1351:%.*]] = icmp ne i8 [[TMP802]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1351]], label [[IF_THEN1352:%.*]], label [[IF_END1353:%.*]]
// SIMD-ONLY0:       if.then1352:
// SIMD-ONLY0-NEXT:    [[TMP803:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP803]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1353]]
// SIMD-ONLY0:       if.end1353:
// SIMD-ONLY0-NEXT:    [[TMP804:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1354:%.*]] = zext i8 [[TMP804]] to i32
// SIMD-ONLY0-NEXT:    [[TMP805:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1355:%.*]] = zext i8 [[TMP805]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1356:%.*]] = icmp eq i32 [[CONV1354]], [[CONV1355]]
// SIMD-ONLY0-NEXT:    [[CONV1357:%.*]] = zext i1 [[CMP1356]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1358:%.*]] = trunc i32 [[CONV1357]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1358]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP806:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1359:%.*]] = icmp ne i8 [[TMP806]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1359]], label [[IF_THEN1360:%.*]], label [[IF_ELSE1361:%.*]]
// SIMD-ONLY0:       if.then1360:
// SIMD-ONLY0-NEXT:    [[TMP807:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP807]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1362:%.*]]
// SIMD-ONLY0:       if.else1361:
// SIMD-ONLY0-NEXT:    [[TMP808:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP808]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1362]]
// SIMD-ONLY0:       if.end1362:
// SIMD-ONLY0-NEXT:    [[TMP809:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1363:%.*]] = zext i8 [[TMP809]] to i32
// SIMD-ONLY0-NEXT:    [[TMP810:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1364:%.*]] = zext i8 [[TMP810]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1365:%.*]] = icmp eq i32 [[CONV1363]], [[CONV1364]]
// SIMD-ONLY0-NEXT:    [[CONV1366:%.*]] = zext i1 [[CMP1365]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1367:%.*]] = trunc i32 [[CONV1366]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1367]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP811:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1368:%.*]] = icmp ne i8 [[TMP811]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1368]], label [[IF_THEN1369:%.*]], label [[IF_ELSE1370:%.*]]
// SIMD-ONLY0:       if.then1369:
// SIMD-ONLY0-NEXT:    [[TMP812:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP812]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1371:%.*]]
// SIMD-ONLY0:       if.else1370:
// SIMD-ONLY0-NEXT:    [[TMP813:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP813]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1371]]
// SIMD-ONLY0:       if.end1371:
// SIMD-ONLY0-NEXT:    [[TMP814:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP814]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP815:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1372:%.*]] = zext i8 [[TMP815]] to i32
// SIMD-ONLY0-NEXT:    [[TMP816:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1373:%.*]] = zext i8 [[TMP816]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1374:%.*]] = icmp sgt i32 [[CONV1372]], [[CONV1373]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1374]], label [[IF_THEN1376:%.*]], label [[IF_END1377:%.*]]
// SIMD-ONLY0:       if.then1376:
// SIMD-ONLY0-NEXT:    [[TMP817:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP817]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1377]]
// SIMD-ONLY0:       if.end1377:
// SIMD-ONLY0-NEXT:    [[TMP818:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP818]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP819:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1378:%.*]] = zext i8 [[TMP819]] to i32
// SIMD-ONLY0-NEXT:    [[TMP820:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1379:%.*]] = zext i8 [[TMP820]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1380:%.*]] = icmp sgt i32 [[CONV1378]], [[CONV1379]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1380]], label [[IF_THEN1382:%.*]], label [[IF_END1383:%.*]]
// SIMD-ONLY0:       if.then1382:
// SIMD-ONLY0-NEXT:    [[TMP821:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP821]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1383]]
// SIMD-ONLY0:       if.end1383:
// SIMD-ONLY0-NEXT:    [[TMP822:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP822]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP823:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1384:%.*]] = zext i8 [[TMP823]] to i32
// SIMD-ONLY0-NEXT:    [[TMP824:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1385:%.*]] = zext i8 [[TMP824]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1386:%.*]] = icmp slt i32 [[CONV1384]], [[CONV1385]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1386]], label [[IF_THEN1388:%.*]], label [[IF_END1389:%.*]]
// SIMD-ONLY0:       if.then1388:
// SIMD-ONLY0-NEXT:    [[TMP825:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP825]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1389]]
// SIMD-ONLY0:       if.end1389:
// SIMD-ONLY0-NEXT:    [[TMP826:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP826]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP827:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1390:%.*]] = zext i8 [[TMP827]] to i32
// SIMD-ONLY0-NEXT:    [[TMP828:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1391:%.*]] = zext i8 [[TMP828]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1392:%.*]] = icmp slt i32 [[CONV1390]], [[CONV1391]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1392]], label [[IF_THEN1394:%.*]], label [[IF_END1395:%.*]]
// SIMD-ONLY0:       if.then1394:
// SIMD-ONLY0-NEXT:    [[TMP829:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP829]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1395]]
// SIMD-ONLY0:       if.end1395:
// SIMD-ONLY0-NEXT:    [[TMP830:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP830]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP831:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1396:%.*]] = zext i8 [[TMP831]] to i32
// SIMD-ONLY0-NEXT:    [[TMP832:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1397:%.*]] = zext i8 [[TMP832]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1398:%.*]] = icmp eq i32 [[CONV1396]], [[CONV1397]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1398]], label [[IF_THEN1400:%.*]], label [[IF_END1401:%.*]]
// SIMD-ONLY0:       if.then1400:
// SIMD-ONLY0-NEXT:    [[TMP833:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP833]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1401]]
// SIMD-ONLY0:       if.end1401:
// SIMD-ONLY0-NEXT:    [[TMP834:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP834]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP835:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1402:%.*]] = zext i8 [[TMP835]] to i32
// SIMD-ONLY0-NEXT:    [[TMP836:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1403:%.*]] = zext i8 [[TMP836]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1404:%.*]] = icmp eq i32 [[CONV1402]], [[CONV1403]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1404]], label [[IF_THEN1406:%.*]], label [[IF_END1407:%.*]]
// SIMD-ONLY0:       if.then1406:
// SIMD-ONLY0-NEXT:    [[TMP837:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP837]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1407]]
// SIMD-ONLY0:       if.end1407:
// SIMD-ONLY0-NEXT:    [[TMP838:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1408:%.*]] = zext i8 [[TMP838]] to i32
// SIMD-ONLY0-NEXT:    [[TMP839:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1409:%.*]] = zext i8 [[TMP839]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1410:%.*]] = icmp sgt i32 [[CONV1408]], [[CONV1409]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1410]], label [[IF_THEN1412:%.*]], label [[IF_END1413:%.*]]
// SIMD-ONLY0:       if.then1412:
// SIMD-ONLY0-NEXT:    [[TMP840:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP840]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1413]]
// SIMD-ONLY0:       if.end1413:
// SIMD-ONLY0-NEXT:    [[TMP841:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP841]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP842:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1414:%.*]] = zext i8 [[TMP842]] to i32
// SIMD-ONLY0-NEXT:    [[TMP843:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1415:%.*]] = zext i8 [[TMP843]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1416:%.*]] = icmp sgt i32 [[CONV1414]], [[CONV1415]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1416]], label [[IF_THEN1418:%.*]], label [[IF_END1419:%.*]]
// SIMD-ONLY0:       if.then1418:
// SIMD-ONLY0-NEXT:    [[TMP844:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP844]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1419]]
// SIMD-ONLY0:       if.end1419:
// SIMD-ONLY0-NEXT:    [[TMP845:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP845]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP846:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1420:%.*]] = zext i8 [[TMP846]] to i32
// SIMD-ONLY0-NEXT:    [[TMP847:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1421:%.*]] = zext i8 [[TMP847]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1422:%.*]] = icmp slt i32 [[CONV1420]], [[CONV1421]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1422]], label [[IF_THEN1424:%.*]], label [[IF_END1425:%.*]]
// SIMD-ONLY0:       if.then1424:
// SIMD-ONLY0-NEXT:    [[TMP848:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP848]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1425]]
// SIMD-ONLY0:       if.end1425:
// SIMD-ONLY0-NEXT:    [[TMP849:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP849]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP850:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1426:%.*]] = zext i8 [[TMP850]] to i32
// SIMD-ONLY0-NEXT:    [[TMP851:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1427:%.*]] = zext i8 [[TMP851]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1428:%.*]] = icmp slt i32 [[CONV1426]], [[CONV1427]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1428]], label [[IF_THEN1430:%.*]], label [[IF_END1431:%.*]]
// SIMD-ONLY0:       if.then1430:
// SIMD-ONLY0-NEXT:    [[TMP852:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP852]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1431]]
// SIMD-ONLY0:       if.end1431:
// SIMD-ONLY0-NEXT:    [[TMP853:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP853]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP854:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1432:%.*]] = zext i8 [[TMP854]] to i32
// SIMD-ONLY0-NEXT:    [[TMP855:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1433:%.*]] = zext i8 [[TMP855]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1434:%.*]] = icmp eq i32 [[CONV1432]], [[CONV1433]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1434]], label [[IF_THEN1436:%.*]], label [[IF_END1437:%.*]]
// SIMD-ONLY0:       if.then1436:
// SIMD-ONLY0-NEXT:    [[TMP856:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP856]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1437]]
// SIMD-ONLY0:       if.end1437:
// SIMD-ONLY0-NEXT:    [[TMP857:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP857]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP858:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1438:%.*]] = zext i8 [[TMP858]] to i32
// SIMD-ONLY0-NEXT:    [[TMP859:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1439:%.*]] = zext i8 [[TMP859]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1440:%.*]] = icmp eq i32 [[CONV1438]], [[CONV1439]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1440]], label [[IF_THEN1442:%.*]], label [[IF_END1443:%.*]]
// SIMD-ONLY0:       if.then1442:
// SIMD-ONLY0-NEXT:    [[TMP860:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP860]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1443]]
// SIMD-ONLY0:       if.end1443:
// SIMD-ONLY0-NEXT:    [[TMP861:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP861]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP862:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1444:%.*]] = zext i8 [[TMP862]] to i32
// SIMD-ONLY0-NEXT:    [[TMP863:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1445:%.*]] = zext i8 [[TMP863]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1446:%.*]] = icmp eq i32 [[CONV1444]], [[CONV1445]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1446]], label [[IF_THEN1448:%.*]], label [[IF_ELSE1449:%.*]]
// SIMD-ONLY0:       if.then1448:
// SIMD-ONLY0-NEXT:    [[TMP864:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP864]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1450:%.*]]
// SIMD-ONLY0:       if.else1449:
// SIMD-ONLY0-NEXT:    [[TMP865:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP865]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1450]]
// SIMD-ONLY0:       if.end1450:
// SIMD-ONLY0-NEXT:    [[TMP866:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1451:%.*]] = zext i8 [[TMP866]] to i32
// SIMD-ONLY0-NEXT:    [[TMP867:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1452:%.*]] = zext i8 [[TMP867]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1453:%.*]] = icmp eq i32 [[CONV1451]], [[CONV1452]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1453]], label [[IF_THEN1455:%.*]], label [[IF_ELSE1456:%.*]]
// SIMD-ONLY0:       if.then1455:
// SIMD-ONLY0-NEXT:    [[TMP868:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP868]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1457:%.*]]
// SIMD-ONLY0:       if.else1456:
// SIMD-ONLY0-NEXT:    [[TMP869:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP869]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1457]]
// SIMD-ONLY0:       if.end1457:
// SIMD-ONLY0-NEXT:    [[TMP870:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1458:%.*]] = zext i8 [[TMP870]] to i32
// SIMD-ONLY0-NEXT:    [[TMP871:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1459:%.*]] = zext i8 [[TMP871]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1460:%.*]] = icmp eq i32 [[CONV1458]], [[CONV1459]]
// SIMD-ONLY0-NEXT:    [[CONV1461:%.*]] = zext i1 [[CMP1460]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1462:%.*]] = trunc i32 [[CONV1461]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1462]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP872:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1463:%.*]] = icmp ne i8 [[TMP872]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1463]], label [[IF_THEN1464:%.*]], label [[IF_END1465:%.*]]
// SIMD-ONLY0:       if.then1464:
// SIMD-ONLY0-NEXT:    [[TMP873:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP873]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1465]]
// SIMD-ONLY0:       if.end1465:
// SIMD-ONLY0-NEXT:    [[TMP874:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1466:%.*]] = zext i8 [[TMP874]] to i32
// SIMD-ONLY0-NEXT:    [[TMP875:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1467:%.*]] = zext i8 [[TMP875]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1468:%.*]] = icmp eq i32 [[CONV1466]], [[CONV1467]]
// SIMD-ONLY0-NEXT:    [[CONV1469:%.*]] = zext i1 [[CMP1468]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1470:%.*]] = trunc i32 [[CONV1469]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1470]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP876:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1471:%.*]] = icmp ne i8 [[TMP876]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1471]], label [[IF_THEN1472:%.*]], label [[IF_END1473:%.*]]
// SIMD-ONLY0:       if.then1472:
// SIMD-ONLY0-NEXT:    [[TMP877:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP877]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1473]]
// SIMD-ONLY0:       if.end1473:
// SIMD-ONLY0-NEXT:    [[TMP878:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1474:%.*]] = zext i8 [[TMP878]] to i32
// SIMD-ONLY0-NEXT:    [[TMP879:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1475:%.*]] = zext i8 [[TMP879]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1476:%.*]] = icmp eq i32 [[CONV1474]], [[CONV1475]]
// SIMD-ONLY0-NEXT:    [[CONV1477:%.*]] = zext i1 [[CMP1476]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1478:%.*]] = trunc i32 [[CONV1477]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1478]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP880:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1479:%.*]] = icmp ne i8 [[TMP880]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1479]], label [[IF_THEN1480:%.*]], label [[IF_ELSE1481:%.*]]
// SIMD-ONLY0:       if.then1480:
// SIMD-ONLY0-NEXT:    [[TMP881:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP881]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1482:%.*]]
// SIMD-ONLY0:       if.else1481:
// SIMD-ONLY0-NEXT:    [[TMP882:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP882]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1482]]
// SIMD-ONLY0:       if.end1482:
// SIMD-ONLY0-NEXT:    [[TMP883:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1483:%.*]] = zext i8 [[TMP883]] to i32
// SIMD-ONLY0-NEXT:    [[TMP884:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1484:%.*]] = zext i8 [[TMP884]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1485:%.*]] = icmp eq i32 [[CONV1483]], [[CONV1484]]
// SIMD-ONLY0-NEXT:    [[CONV1486:%.*]] = zext i1 [[CMP1485]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1487:%.*]] = trunc i32 [[CONV1486]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV1487]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP885:%.*]] = load i8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TOBOOL1488:%.*]] = icmp ne i8 [[TMP885]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1488]], label [[IF_THEN1489:%.*]], label [[IF_ELSE1490:%.*]]
// SIMD-ONLY0:       if.then1489:
// SIMD-ONLY0-NEXT:    [[TMP886:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP886]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1491:%.*]]
// SIMD-ONLY0:       if.else1490:
// SIMD-ONLY0-NEXT:    [[TMP887:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP887]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1491]]
// SIMD-ONLY0:       if.end1491:
// SIMD-ONLY0-NEXT:    [[TMP888:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP888]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP889:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1492:%.*]] = sext i16 [[TMP889]] to i32
// SIMD-ONLY0-NEXT:    [[TMP890:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1493:%.*]] = sext i16 [[TMP890]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1494:%.*]] = icmp sgt i32 [[CONV1492]], [[CONV1493]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1494]], label [[IF_THEN1496:%.*]], label [[IF_END1497:%.*]]
// SIMD-ONLY0:       if.then1496:
// SIMD-ONLY0-NEXT:    [[TMP891:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP891]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1497]]
// SIMD-ONLY0:       if.end1497:
// SIMD-ONLY0-NEXT:    [[TMP892:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP892]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP893:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1498:%.*]] = sext i16 [[TMP893]] to i32
// SIMD-ONLY0-NEXT:    [[TMP894:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1499:%.*]] = sext i16 [[TMP894]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1500:%.*]] = icmp sgt i32 [[CONV1498]], [[CONV1499]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1500]], label [[IF_THEN1502:%.*]], label [[IF_END1503:%.*]]
// SIMD-ONLY0:       if.then1502:
// SIMD-ONLY0-NEXT:    [[TMP895:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP895]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1503]]
// SIMD-ONLY0:       if.end1503:
// SIMD-ONLY0-NEXT:    [[TMP896:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP896]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP897:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1504:%.*]] = sext i16 [[TMP897]] to i32
// SIMD-ONLY0-NEXT:    [[TMP898:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1505:%.*]] = sext i16 [[TMP898]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1506:%.*]] = icmp slt i32 [[CONV1504]], [[CONV1505]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1506]], label [[IF_THEN1508:%.*]], label [[IF_END1509:%.*]]
// SIMD-ONLY0:       if.then1508:
// SIMD-ONLY0-NEXT:    [[TMP899:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP899]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1509]]
// SIMD-ONLY0:       if.end1509:
// SIMD-ONLY0-NEXT:    [[TMP900:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP900]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP901:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1510:%.*]] = sext i16 [[TMP901]] to i32
// SIMD-ONLY0-NEXT:    [[TMP902:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1511:%.*]] = sext i16 [[TMP902]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1512:%.*]] = icmp slt i32 [[CONV1510]], [[CONV1511]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1512]], label [[IF_THEN1514:%.*]], label [[IF_END1515:%.*]]
// SIMD-ONLY0:       if.then1514:
// SIMD-ONLY0-NEXT:    [[TMP903:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP903]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1515]]
// SIMD-ONLY0:       if.end1515:
// SIMD-ONLY0-NEXT:    [[TMP904:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP904]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP905:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1516:%.*]] = sext i16 [[TMP905]] to i32
// SIMD-ONLY0-NEXT:    [[TMP906:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1517:%.*]] = sext i16 [[TMP906]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1518:%.*]] = icmp eq i32 [[CONV1516]], [[CONV1517]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1518]], label [[IF_THEN1520:%.*]], label [[IF_END1521:%.*]]
// SIMD-ONLY0:       if.then1520:
// SIMD-ONLY0-NEXT:    [[TMP907:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP907]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1521]]
// SIMD-ONLY0:       if.end1521:
// SIMD-ONLY0-NEXT:    [[TMP908:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP908]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP909:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1522:%.*]] = sext i16 [[TMP909]] to i32
// SIMD-ONLY0-NEXT:    [[TMP910:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1523:%.*]] = sext i16 [[TMP910]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1524:%.*]] = icmp eq i32 [[CONV1522]], [[CONV1523]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1524]], label [[IF_THEN1526:%.*]], label [[IF_END1527:%.*]]
// SIMD-ONLY0:       if.then1526:
// SIMD-ONLY0-NEXT:    [[TMP911:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP911]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1527]]
// SIMD-ONLY0:       if.end1527:
// SIMD-ONLY0-NEXT:    [[TMP912:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1528:%.*]] = sext i16 [[TMP912]] to i32
// SIMD-ONLY0-NEXT:    [[TMP913:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1529:%.*]] = sext i16 [[TMP913]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1530:%.*]] = icmp sgt i32 [[CONV1528]], [[CONV1529]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1530]], label [[IF_THEN1532:%.*]], label [[IF_END1533:%.*]]
// SIMD-ONLY0:       if.then1532:
// SIMD-ONLY0-NEXT:    [[TMP914:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP914]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1533]]
// SIMD-ONLY0:       if.end1533:
// SIMD-ONLY0-NEXT:    [[TMP915:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP915]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP916:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1534:%.*]] = sext i16 [[TMP916]] to i32
// SIMD-ONLY0-NEXT:    [[TMP917:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1535:%.*]] = sext i16 [[TMP917]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1536:%.*]] = icmp sgt i32 [[CONV1534]], [[CONV1535]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1536]], label [[IF_THEN1538:%.*]], label [[IF_END1539:%.*]]
// SIMD-ONLY0:       if.then1538:
// SIMD-ONLY0-NEXT:    [[TMP918:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP918]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1539]]
// SIMD-ONLY0:       if.end1539:
// SIMD-ONLY0-NEXT:    [[TMP919:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP919]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP920:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1540:%.*]] = sext i16 [[TMP920]] to i32
// SIMD-ONLY0-NEXT:    [[TMP921:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1541:%.*]] = sext i16 [[TMP921]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1542:%.*]] = icmp slt i32 [[CONV1540]], [[CONV1541]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1542]], label [[IF_THEN1544:%.*]], label [[IF_END1545:%.*]]
// SIMD-ONLY0:       if.then1544:
// SIMD-ONLY0-NEXT:    [[TMP922:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP922]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1545]]
// SIMD-ONLY0:       if.end1545:
// SIMD-ONLY0-NEXT:    [[TMP923:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP923]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP924:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1546:%.*]] = sext i16 [[TMP924]] to i32
// SIMD-ONLY0-NEXT:    [[TMP925:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1547:%.*]] = sext i16 [[TMP925]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1548:%.*]] = icmp slt i32 [[CONV1546]], [[CONV1547]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1548]], label [[IF_THEN1550:%.*]], label [[IF_END1551:%.*]]
// SIMD-ONLY0:       if.then1550:
// SIMD-ONLY0-NEXT:    [[TMP926:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP926]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1551]]
// SIMD-ONLY0:       if.end1551:
// SIMD-ONLY0-NEXT:    [[TMP927:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP927]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP928:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1552:%.*]] = sext i16 [[TMP928]] to i32
// SIMD-ONLY0-NEXT:    [[TMP929:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1553:%.*]] = sext i16 [[TMP929]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1554:%.*]] = icmp eq i32 [[CONV1552]], [[CONV1553]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1554]], label [[IF_THEN1556:%.*]], label [[IF_END1557:%.*]]
// SIMD-ONLY0:       if.then1556:
// SIMD-ONLY0-NEXT:    [[TMP930:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP930]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1557]]
// SIMD-ONLY0:       if.end1557:
// SIMD-ONLY0-NEXT:    [[TMP931:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP931]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP932:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1558:%.*]] = sext i16 [[TMP932]] to i32
// SIMD-ONLY0-NEXT:    [[TMP933:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1559:%.*]] = sext i16 [[TMP933]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1560:%.*]] = icmp eq i32 [[CONV1558]], [[CONV1559]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1560]], label [[IF_THEN1562:%.*]], label [[IF_END1563:%.*]]
// SIMD-ONLY0:       if.then1562:
// SIMD-ONLY0-NEXT:    [[TMP934:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP934]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1563]]
// SIMD-ONLY0:       if.end1563:
// SIMD-ONLY0-NEXT:    [[TMP935:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP935]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP936:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1564:%.*]] = sext i16 [[TMP936]] to i32
// SIMD-ONLY0-NEXT:    [[TMP937:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1565:%.*]] = sext i16 [[TMP937]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1566:%.*]] = icmp eq i32 [[CONV1564]], [[CONV1565]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1566]], label [[IF_THEN1568:%.*]], label [[IF_ELSE1569:%.*]]
// SIMD-ONLY0:       if.then1568:
// SIMD-ONLY0-NEXT:    [[TMP938:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP938]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1570:%.*]]
// SIMD-ONLY0:       if.else1569:
// SIMD-ONLY0-NEXT:    [[TMP939:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP939]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1570]]
// SIMD-ONLY0:       if.end1570:
// SIMD-ONLY0-NEXT:    [[TMP940:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1571:%.*]] = sext i16 [[TMP940]] to i32
// SIMD-ONLY0-NEXT:    [[TMP941:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1572:%.*]] = sext i16 [[TMP941]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1573:%.*]] = icmp eq i32 [[CONV1571]], [[CONV1572]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1573]], label [[IF_THEN1575:%.*]], label [[IF_ELSE1576:%.*]]
// SIMD-ONLY0:       if.then1575:
// SIMD-ONLY0-NEXT:    [[TMP942:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP942]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1577:%.*]]
// SIMD-ONLY0:       if.else1576:
// SIMD-ONLY0-NEXT:    [[TMP943:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP943]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1577]]
// SIMD-ONLY0:       if.end1577:
// SIMD-ONLY0-NEXT:    [[TMP944:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1578:%.*]] = sext i16 [[TMP944]] to i32
// SIMD-ONLY0-NEXT:    [[TMP945:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1579:%.*]] = sext i16 [[TMP945]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1580:%.*]] = icmp eq i32 [[CONV1578]], [[CONV1579]]
// SIMD-ONLY0-NEXT:    [[CONV1581:%.*]] = zext i1 [[CMP1580]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1582:%.*]] = trunc i32 [[CONV1581]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1582]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP946:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1583:%.*]] = icmp ne i16 [[TMP946]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1583]], label [[IF_THEN1584:%.*]], label [[IF_END1585:%.*]]
// SIMD-ONLY0:       if.then1584:
// SIMD-ONLY0-NEXT:    [[TMP947:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP947]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1585]]
// SIMD-ONLY0:       if.end1585:
// SIMD-ONLY0-NEXT:    [[TMP948:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1586:%.*]] = sext i16 [[TMP948]] to i32
// SIMD-ONLY0-NEXT:    [[TMP949:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1587:%.*]] = sext i16 [[TMP949]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1588:%.*]] = icmp eq i32 [[CONV1586]], [[CONV1587]]
// SIMD-ONLY0-NEXT:    [[CONV1589:%.*]] = zext i1 [[CMP1588]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1590:%.*]] = trunc i32 [[CONV1589]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1590]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP950:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1591:%.*]] = icmp ne i16 [[TMP950]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1591]], label [[IF_THEN1592:%.*]], label [[IF_END1593:%.*]]
// SIMD-ONLY0:       if.then1592:
// SIMD-ONLY0-NEXT:    [[TMP951:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP951]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1593]]
// SIMD-ONLY0:       if.end1593:
// SIMD-ONLY0-NEXT:    [[TMP952:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1594:%.*]] = sext i16 [[TMP952]] to i32
// SIMD-ONLY0-NEXT:    [[TMP953:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1595:%.*]] = sext i16 [[TMP953]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1596:%.*]] = icmp eq i32 [[CONV1594]], [[CONV1595]]
// SIMD-ONLY0-NEXT:    [[CONV1597:%.*]] = zext i1 [[CMP1596]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1598:%.*]] = trunc i32 [[CONV1597]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1598]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP954:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1599:%.*]] = icmp ne i16 [[TMP954]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1599]], label [[IF_THEN1600:%.*]], label [[IF_ELSE1601:%.*]]
// SIMD-ONLY0:       if.then1600:
// SIMD-ONLY0-NEXT:    [[TMP955:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP955]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1602:%.*]]
// SIMD-ONLY0:       if.else1601:
// SIMD-ONLY0-NEXT:    [[TMP956:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP956]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1602]]
// SIMD-ONLY0:       if.end1602:
// SIMD-ONLY0-NEXT:    [[TMP957:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1603:%.*]] = sext i16 [[TMP957]] to i32
// SIMD-ONLY0-NEXT:    [[TMP958:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1604:%.*]] = sext i16 [[TMP958]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1605:%.*]] = icmp eq i32 [[CONV1603]], [[CONV1604]]
// SIMD-ONLY0-NEXT:    [[CONV1606:%.*]] = zext i1 [[CMP1605]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1607:%.*]] = trunc i32 [[CONV1606]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1607]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP959:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1608:%.*]] = icmp ne i16 [[TMP959]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1608]], label [[IF_THEN1609:%.*]], label [[IF_ELSE1610:%.*]]
// SIMD-ONLY0:       if.then1609:
// SIMD-ONLY0-NEXT:    [[TMP960:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP960]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1611:%.*]]
// SIMD-ONLY0:       if.else1610:
// SIMD-ONLY0-NEXT:    [[TMP961:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP961]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1611]]
// SIMD-ONLY0:       if.end1611:
// SIMD-ONLY0-NEXT:    [[TMP962:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP962]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP963:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1612:%.*]] = sext i16 [[TMP963]] to i32
// SIMD-ONLY0-NEXT:    [[TMP964:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1613:%.*]] = sext i16 [[TMP964]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1614:%.*]] = icmp sgt i32 [[CONV1612]], [[CONV1613]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1614]], label [[IF_THEN1616:%.*]], label [[IF_END1617:%.*]]
// SIMD-ONLY0:       if.then1616:
// SIMD-ONLY0-NEXT:    [[TMP965:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP965]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1617]]
// SIMD-ONLY0:       if.end1617:
// SIMD-ONLY0-NEXT:    [[TMP966:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP966]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP967:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1618:%.*]] = sext i16 [[TMP967]] to i32
// SIMD-ONLY0-NEXT:    [[TMP968:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1619:%.*]] = sext i16 [[TMP968]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1620:%.*]] = icmp sgt i32 [[CONV1618]], [[CONV1619]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1620]], label [[IF_THEN1622:%.*]], label [[IF_END1623:%.*]]
// SIMD-ONLY0:       if.then1622:
// SIMD-ONLY0-NEXT:    [[TMP969:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP969]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1623]]
// SIMD-ONLY0:       if.end1623:
// SIMD-ONLY0-NEXT:    [[TMP970:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP970]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP971:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1624:%.*]] = sext i16 [[TMP971]] to i32
// SIMD-ONLY0-NEXT:    [[TMP972:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1625:%.*]] = sext i16 [[TMP972]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1626:%.*]] = icmp slt i32 [[CONV1624]], [[CONV1625]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1626]], label [[IF_THEN1628:%.*]], label [[IF_END1629:%.*]]
// SIMD-ONLY0:       if.then1628:
// SIMD-ONLY0-NEXT:    [[TMP973:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP973]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1629]]
// SIMD-ONLY0:       if.end1629:
// SIMD-ONLY0-NEXT:    [[TMP974:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP974]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP975:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1630:%.*]] = sext i16 [[TMP975]] to i32
// SIMD-ONLY0-NEXT:    [[TMP976:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1631:%.*]] = sext i16 [[TMP976]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1632:%.*]] = icmp slt i32 [[CONV1630]], [[CONV1631]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1632]], label [[IF_THEN1634:%.*]], label [[IF_END1635:%.*]]
// SIMD-ONLY0:       if.then1634:
// SIMD-ONLY0-NEXT:    [[TMP977:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP977]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1635]]
// SIMD-ONLY0:       if.end1635:
// SIMD-ONLY0-NEXT:    [[TMP978:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP978]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP979:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1636:%.*]] = sext i16 [[TMP979]] to i32
// SIMD-ONLY0-NEXT:    [[TMP980:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1637:%.*]] = sext i16 [[TMP980]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1638:%.*]] = icmp eq i32 [[CONV1636]], [[CONV1637]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1638]], label [[IF_THEN1640:%.*]], label [[IF_END1641:%.*]]
// SIMD-ONLY0:       if.then1640:
// SIMD-ONLY0-NEXT:    [[TMP981:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP981]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1641]]
// SIMD-ONLY0:       if.end1641:
// SIMD-ONLY0-NEXT:    [[TMP982:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP982]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP983:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1642:%.*]] = sext i16 [[TMP983]] to i32
// SIMD-ONLY0-NEXT:    [[TMP984:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1643:%.*]] = sext i16 [[TMP984]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1644:%.*]] = icmp eq i32 [[CONV1642]], [[CONV1643]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1644]], label [[IF_THEN1646:%.*]], label [[IF_END1647:%.*]]
// SIMD-ONLY0:       if.then1646:
// SIMD-ONLY0-NEXT:    [[TMP985:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP985]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1647]]
// SIMD-ONLY0:       if.end1647:
// SIMD-ONLY0-NEXT:    [[TMP986:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1648:%.*]] = sext i16 [[TMP986]] to i32
// SIMD-ONLY0-NEXT:    [[TMP987:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1649:%.*]] = sext i16 [[TMP987]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1650:%.*]] = icmp sgt i32 [[CONV1648]], [[CONV1649]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1650]], label [[IF_THEN1652:%.*]], label [[IF_END1653:%.*]]
// SIMD-ONLY0:       if.then1652:
// SIMD-ONLY0-NEXT:    [[TMP988:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP988]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1653]]
// SIMD-ONLY0:       if.end1653:
// SIMD-ONLY0-NEXT:    [[TMP989:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP989]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP990:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1654:%.*]] = sext i16 [[TMP990]] to i32
// SIMD-ONLY0-NEXT:    [[TMP991:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1655:%.*]] = sext i16 [[TMP991]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1656:%.*]] = icmp sgt i32 [[CONV1654]], [[CONV1655]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1656]], label [[IF_THEN1658:%.*]], label [[IF_END1659:%.*]]
// SIMD-ONLY0:       if.then1658:
// SIMD-ONLY0-NEXT:    [[TMP992:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP992]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1659]]
// SIMD-ONLY0:       if.end1659:
// SIMD-ONLY0-NEXT:    [[TMP993:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP993]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP994:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1660:%.*]] = sext i16 [[TMP994]] to i32
// SIMD-ONLY0-NEXT:    [[TMP995:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1661:%.*]] = sext i16 [[TMP995]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1662:%.*]] = icmp slt i32 [[CONV1660]], [[CONV1661]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1662]], label [[IF_THEN1664:%.*]], label [[IF_END1665:%.*]]
// SIMD-ONLY0:       if.then1664:
// SIMD-ONLY0-NEXT:    [[TMP996:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP996]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1665]]
// SIMD-ONLY0:       if.end1665:
// SIMD-ONLY0-NEXT:    [[TMP997:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP997]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP998:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1666:%.*]] = sext i16 [[TMP998]] to i32
// SIMD-ONLY0-NEXT:    [[TMP999:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1667:%.*]] = sext i16 [[TMP999]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1668:%.*]] = icmp slt i32 [[CONV1666]], [[CONV1667]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1668]], label [[IF_THEN1670:%.*]], label [[IF_END1671:%.*]]
// SIMD-ONLY0:       if.then1670:
// SIMD-ONLY0-NEXT:    [[TMP1000:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1000]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1671]]
// SIMD-ONLY0:       if.end1671:
// SIMD-ONLY0-NEXT:    [[TMP1001:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1001]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1002:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1672:%.*]] = sext i16 [[TMP1002]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1003:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1673:%.*]] = sext i16 [[TMP1003]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1674:%.*]] = icmp eq i32 [[CONV1672]], [[CONV1673]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1674]], label [[IF_THEN1676:%.*]], label [[IF_END1677:%.*]]
// SIMD-ONLY0:       if.then1676:
// SIMD-ONLY0-NEXT:    [[TMP1004:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1004]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1677]]
// SIMD-ONLY0:       if.end1677:
// SIMD-ONLY0-NEXT:    [[TMP1005:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1005]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1006:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1678:%.*]] = sext i16 [[TMP1006]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1007:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1679:%.*]] = sext i16 [[TMP1007]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1680:%.*]] = icmp eq i32 [[CONV1678]], [[CONV1679]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1680]], label [[IF_THEN1682:%.*]], label [[IF_END1683:%.*]]
// SIMD-ONLY0:       if.then1682:
// SIMD-ONLY0-NEXT:    [[TMP1008:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1008]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1683]]
// SIMD-ONLY0:       if.end1683:
// SIMD-ONLY0-NEXT:    [[TMP1009:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1009]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1010:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1684:%.*]] = sext i16 [[TMP1010]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1011:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1685:%.*]] = sext i16 [[TMP1011]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1686:%.*]] = icmp eq i32 [[CONV1684]], [[CONV1685]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1686]], label [[IF_THEN1688:%.*]], label [[IF_ELSE1689:%.*]]
// SIMD-ONLY0:       if.then1688:
// SIMD-ONLY0-NEXT:    [[TMP1012:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1012]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1690:%.*]]
// SIMD-ONLY0:       if.else1689:
// SIMD-ONLY0-NEXT:    [[TMP1013:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1013]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1690]]
// SIMD-ONLY0:       if.end1690:
// SIMD-ONLY0-NEXT:    [[TMP1014:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1691:%.*]] = sext i16 [[TMP1014]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1015:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1692:%.*]] = sext i16 [[TMP1015]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1693:%.*]] = icmp eq i32 [[CONV1691]], [[CONV1692]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1693]], label [[IF_THEN1695:%.*]], label [[IF_ELSE1696:%.*]]
// SIMD-ONLY0:       if.then1695:
// SIMD-ONLY0-NEXT:    [[TMP1016:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1016]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1697:%.*]]
// SIMD-ONLY0:       if.else1696:
// SIMD-ONLY0-NEXT:    [[TMP1017:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1017]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1697]]
// SIMD-ONLY0:       if.end1697:
// SIMD-ONLY0-NEXT:    [[TMP1018:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1698:%.*]] = sext i16 [[TMP1018]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1019:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1699:%.*]] = sext i16 [[TMP1019]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1700:%.*]] = icmp eq i32 [[CONV1698]], [[CONV1699]]
// SIMD-ONLY0-NEXT:    [[CONV1701:%.*]] = zext i1 [[CMP1700]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1702:%.*]] = trunc i32 [[CONV1701]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1702]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1020:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1703:%.*]] = icmp ne i16 [[TMP1020]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1703]], label [[IF_THEN1704:%.*]], label [[IF_END1705:%.*]]
// SIMD-ONLY0:       if.then1704:
// SIMD-ONLY0-NEXT:    [[TMP1021:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1021]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1705]]
// SIMD-ONLY0:       if.end1705:
// SIMD-ONLY0-NEXT:    [[TMP1022:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1706:%.*]] = sext i16 [[TMP1022]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1023:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1707:%.*]] = sext i16 [[TMP1023]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1708:%.*]] = icmp eq i32 [[CONV1706]], [[CONV1707]]
// SIMD-ONLY0-NEXT:    [[CONV1709:%.*]] = zext i1 [[CMP1708]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1710:%.*]] = trunc i32 [[CONV1709]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1710]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1024:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1711:%.*]] = icmp ne i16 [[TMP1024]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1711]], label [[IF_THEN1712:%.*]], label [[IF_END1713:%.*]]
// SIMD-ONLY0:       if.then1712:
// SIMD-ONLY0-NEXT:    [[TMP1025:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1025]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1713]]
// SIMD-ONLY0:       if.end1713:
// SIMD-ONLY0-NEXT:    [[TMP1026:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1714:%.*]] = sext i16 [[TMP1026]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1027:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1715:%.*]] = sext i16 [[TMP1027]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1716:%.*]] = icmp eq i32 [[CONV1714]], [[CONV1715]]
// SIMD-ONLY0-NEXT:    [[CONV1717:%.*]] = zext i1 [[CMP1716]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1718:%.*]] = trunc i32 [[CONV1717]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1718]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1028:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1719:%.*]] = icmp ne i16 [[TMP1028]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1719]], label [[IF_THEN1720:%.*]], label [[IF_ELSE1721:%.*]]
// SIMD-ONLY0:       if.then1720:
// SIMD-ONLY0-NEXT:    [[TMP1029:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1029]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1722:%.*]]
// SIMD-ONLY0:       if.else1721:
// SIMD-ONLY0-NEXT:    [[TMP1030:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1030]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1722]]
// SIMD-ONLY0:       if.end1722:
// SIMD-ONLY0-NEXT:    [[TMP1031:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1723:%.*]] = sext i16 [[TMP1031]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1032:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1724:%.*]] = sext i16 [[TMP1032]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1725:%.*]] = icmp eq i32 [[CONV1723]], [[CONV1724]]
// SIMD-ONLY0-NEXT:    [[CONV1726:%.*]] = zext i1 [[CMP1725]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1727:%.*]] = trunc i32 [[CONV1726]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1727]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1033:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1728:%.*]] = icmp ne i16 [[TMP1033]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1728]], label [[IF_THEN1729:%.*]], label [[IF_ELSE1730:%.*]]
// SIMD-ONLY0:       if.then1729:
// SIMD-ONLY0-NEXT:    [[TMP1034:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1034]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1731:%.*]]
// SIMD-ONLY0:       if.else1730:
// SIMD-ONLY0-NEXT:    [[TMP1035:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1035]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1731]]
// SIMD-ONLY0:       if.end1731:
// SIMD-ONLY0-NEXT:    [[TMP1036:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1036]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1037:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1732:%.*]] = sext i16 [[TMP1037]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1038:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1733:%.*]] = sext i16 [[TMP1038]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1734:%.*]] = icmp sgt i32 [[CONV1732]], [[CONV1733]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1734]], label [[IF_THEN1736:%.*]], label [[IF_END1737:%.*]]
// SIMD-ONLY0:       if.then1736:
// SIMD-ONLY0-NEXT:    [[TMP1039:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1039]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1737]]
// SIMD-ONLY0:       if.end1737:
// SIMD-ONLY0-NEXT:    [[TMP1040:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1040]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1041:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1738:%.*]] = sext i16 [[TMP1041]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1042:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1739:%.*]] = sext i16 [[TMP1042]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1740:%.*]] = icmp sgt i32 [[CONV1738]], [[CONV1739]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1740]], label [[IF_THEN1742:%.*]], label [[IF_END1743:%.*]]
// SIMD-ONLY0:       if.then1742:
// SIMD-ONLY0-NEXT:    [[TMP1043:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1043]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1743]]
// SIMD-ONLY0:       if.end1743:
// SIMD-ONLY0-NEXT:    [[TMP1044:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1044]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1045:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1744:%.*]] = sext i16 [[TMP1045]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1046:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1745:%.*]] = sext i16 [[TMP1046]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1746:%.*]] = icmp slt i32 [[CONV1744]], [[CONV1745]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1746]], label [[IF_THEN1748:%.*]], label [[IF_END1749:%.*]]
// SIMD-ONLY0:       if.then1748:
// SIMD-ONLY0-NEXT:    [[TMP1047:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1047]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1749]]
// SIMD-ONLY0:       if.end1749:
// SIMD-ONLY0-NEXT:    [[TMP1048:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1048]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1049:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1750:%.*]] = sext i16 [[TMP1049]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1050:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1751:%.*]] = sext i16 [[TMP1050]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1752:%.*]] = icmp slt i32 [[CONV1750]], [[CONV1751]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1752]], label [[IF_THEN1754:%.*]], label [[IF_END1755:%.*]]
// SIMD-ONLY0:       if.then1754:
// SIMD-ONLY0-NEXT:    [[TMP1051:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1051]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1755]]
// SIMD-ONLY0:       if.end1755:
// SIMD-ONLY0-NEXT:    [[TMP1052:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1052]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1053:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1756:%.*]] = sext i16 [[TMP1053]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1054:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1757:%.*]] = sext i16 [[TMP1054]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1758:%.*]] = icmp eq i32 [[CONV1756]], [[CONV1757]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1758]], label [[IF_THEN1760:%.*]], label [[IF_END1761:%.*]]
// SIMD-ONLY0:       if.then1760:
// SIMD-ONLY0-NEXT:    [[TMP1055:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1055]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1761]]
// SIMD-ONLY0:       if.end1761:
// SIMD-ONLY0-NEXT:    [[TMP1056:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1056]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1057:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1762:%.*]] = sext i16 [[TMP1057]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1058:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1763:%.*]] = sext i16 [[TMP1058]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1764:%.*]] = icmp eq i32 [[CONV1762]], [[CONV1763]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1764]], label [[IF_THEN1766:%.*]], label [[IF_END1767:%.*]]
// SIMD-ONLY0:       if.then1766:
// SIMD-ONLY0-NEXT:    [[TMP1059:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1059]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1767]]
// SIMD-ONLY0:       if.end1767:
// SIMD-ONLY0-NEXT:    [[TMP1060:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1768:%.*]] = sext i16 [[TMP1060]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1061:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1769:%.*]] = sext i16 [[TMP1061]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1770:%.*]] = icmp sgt i32 [[CONV1768]], [[CONV1769]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1770]], label [[IF_THEN1772:%.*]], label [[IF_END1773:%.*]]
// SIMD-ONLY0:       if.then1772:
// SIMD-ONLY0-NEXT:    [[TMP1062:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1062]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1773]]
// SIMD-ONLY0:       if.end1773:
// SIMD-ONLY0-NEXT:    [[TMP1063:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1063]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1064:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1774:%.*]] = sext i16 [[TMP1064]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1065:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1775:%.*]] = sext i16 [[TMP1065]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1776:%.*]] = icmp sgt i32 [[CONV1774]], [[CONV1775]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1776]], label [[IF_THEN1778:%.*]], label [[IF_END1779:%.*]]
// SIMD-ONLY0:       if.then1778:
// SIMD-ONLY0-NEXT:    [[TMP1066:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1066]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1779]]
// SIMD-ONLY0:       if.end1779:
// SIMD-ONLY0-NEXT:    [[TMP1067:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1067]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1068:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1780:%.*]] = sext i16 [[TMP1068]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1069:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1781:%.*]] = sext i16 [[TMP1069]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1782:%.*]] = icmp slt i32 [[CONV1780]], [[CONV1781]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1782]], label [[IF_THEN1784:%.*]], label [[IF_END1785:%.*]]
// SIMD-ONLY0:       if.then1784:
// SIMD-ONLY0-NEXT:    [[TMP1070:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1070]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1785]]
// SIMD-ONLY0:       if.end1785:
// SIMD-ONLY0-NEXT:    [[TMP1071:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1071]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1072:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1786:%.*]] = sext i16 [[TMP1072]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1073:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1787:%.*]] = sext i16 [[TMP1073]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1788:%.*]] = icmp slt i32 [[CONV1786]], [[CONV1787]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1788]], label [[IF_THEN1790:%.*]], label [[IF_END1791:%.*]]
// SIMD-ONLY0:       if.then1790:
// SIMD-ONLY0-NEXT:    [[TMP1074:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1074]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1791]]
// SIMD-ONLY0:       if.end1791:
// SIMD-ONLY0-NEXT:    [[TMP1075:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1075]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1076:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1792:%.*]] = sext i16 [[TMP1076]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1077:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1793:%.*]] = sext i16 [[TMP1077]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1794:%.*]] = icmp eq i32 [[CONV1792]], [[CONV1793]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1794]], label [[IF_THEN1796:%.*]], label [[IF_END1797:%.*]]
// SIMD-ONLY0:       if.then1796:
// SIMD-ONLY0-NEXT:    [[TMP1078:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1078]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1797]]
// SIMD-ONLY0:       if.end1797:
// SIMD-ONLY0-NEXT:    [[TMP1079:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1079]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1080:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1798:%.*]] = sext i16 [[TMP1080]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1081:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1799:%.*]] = sext i16 [[TMP1081]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1800:%.*]] = icmp eq i32 [[CONV1798]], [[CONV1799]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1800]], label [[IF_THEN1802:%.*]], label [[IF_END1803:%.*]]
// SIMD-ONLY0:       if.then1802:
// SIMD-ONLY0-NEXT:    [[TMP1082:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1082]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1803]]
// SIMD-ONLY0:       if.end1803:
// SIMD-ONLY0-NEXT:    [[TMP1083:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1083]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1084:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1804:%.*]] = sext i16 [[TMP1084]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1085:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1805:%.*]] = sext i16 [[TMP1085]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1806:%.*]] = icmp eq i32 [[CONV1804]], [[CONV1805]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1806]], label [[IF_THEN1808:%.*]], label [[IF_ELSE1809:%.*]]
// SIMD-ONLY0:       if.then1808:
// SIMD-ONLY0-NEXT:    [[TMP1086:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1086]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1810:%.*]]
// SIMD-ONLY0:       if.else1809:
// SIMD-ONLY0-NEXT:    [[TMP1087:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1087]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1810]]
// SIMD-ONLY0:       if.end1810:
// SIMD-ONLY0-NEXT:    [[TMP1088:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1811:%.*]] = sext i16 [[TMP1088]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1089:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1812:%.*]] = sext i16 [[TMP1089]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1813:%.*]] = icmp eq i32 [[CONV1811]], [[CONV1812]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1813]], label [[IF_THEN1815:%.*]], label [[IF_ELSE1816:%.*]]
// SIMD-ONLY0:       if.then1815:
// SIMD-ONLY0-NEXT:    [[TMP1090:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1090]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1817:%.*]]
// SIMD-ONLY0:       if.else1816:
// SIMD-ONLY0-NEXT:    [[TMP1091:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1091]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1817]]
// SIMD-ONLY0:       if.end1817:
// SIMD-ONLY0-NEXT:    [[TMP1092:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1818:%.*]] = sext i16 [[TMP1092]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1093:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1819:%.*]] = sext i16 [[TMP1093]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1820:%.*]] = icmp eq i32 [[CONV1818]], [[CONV1819]]
// SIMD-ONLY0-NEXT:    [[CONV1821:%.*]] = zext i1 [[CMP1820]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1822:%.*]] = trunc i32 [[CONV1821]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1822]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1094:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1823:%.*]] = icmp ne i16 [[TMP1094]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1823]], label [[IF_THEN1824:%.*]], label [[IF_END1825:%.*]]
// SIMD-ONLY0:       if.then1824:
// SIMD-ONLY0-NEXT:    [[TMP1095:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1095]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1825]]
// SIMD-ONLY0:       if.end1825:
// SIMD-ONLY0-NEXT:    [[TMP1096:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1826:%.*]] = sext i16 [[TMP1096]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1097:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1827:%.*]] = sext i16 [[TMP1097]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1828:%.*]] = icmp eq i32 [[CONV1826]], [[CONV1827]]
// SIMD-ONLY0-NEXT:    [[CONV1829:%.*]] = zext i1 [[CMP1828]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1830:%.*]] = trunc i32 [[CONV1829]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1830]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1098:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1831:%.*]] = icmp ne i16 [[TMP1098]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1831]], label [[IF_THEN1832:%.*]], label [[IF_END1833:%.*]]
// SIMD-ONLY0:       if.then1832:
// SIMD-ONLY0-NEXT:    [[TMP1099:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1099]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1833]]
// SIMD-ONLY0:       if.end1833:
// SIMD-ONLY0-NEXT:    [[TMP1100:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1834:%.*]] = sext i16 [[TMP1100]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1101:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1835:%.*]] = sext i16 [[TMP1101]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1836:%.*]] = icmp eq i32 [[CONV1834]], [[CONV1835]]
// SIMD-ONLY0-NEXT:    [[CONV1837:%.*]] = zext i1 [[CMP1836]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1838:%.*]] = trunc i32 [[CONV1837]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1838]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1102:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1839:%.*]] = icmp ne i16 [[TMP1102]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1839]], label [[IF_THEN1840:%.*]], label [[IF_ELSE1841:%.*]]
// SIMD-ONLY0:       if.then1840:
// SIMD-ONLY0-NEXT:    [[TMP1103:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1103]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1842:%.*]]
// SIMD-ONLY0:       if.else1841:
// SIMD-ONLY0-NEXT:    [[TMP1104:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1104]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1842]]
// SIMD-ONLY0:       if.end1842:
// SIMD-ONLY0-NEXT:    [[TMP1105:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1843:%.*]] = sext i16 [[TMP1105]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1106:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1844:%.*]] = sext i16 [[TMP1106]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1845:%.*]] = icmp eq i32 [[CONV1843]], [[CONV1844]]
// SIMD-ONLY0-NEXT:    [[CONV1846:%.*]] = zext i1 [[CMP1845]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1847:%.*]] = trunc i32 [[CONV1846]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1847]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1107:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1848:%.*]] = icmp ne i16 [[TMP1107]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1848]], label [[IF_THEN1849:%.*]], label [[IF_ELSE1850:%.*]]
// SIMD-ONLY0:       if.then1849:
// SIMD-ONLY0-NEXT:    [[TMP1108:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1108]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1851:%.*]]
// SIMD-ONLY0:       if.else1850:
// SIMD-ONLY0-NEXT:    [[TMP1109:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1109]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1851]]
// SIMD-ONLY0:       if.end1851:
// SIMD-ONLY0-NEXT:    [[TMP1110:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1110]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1111:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1852:%.*]] = sext i16 [[TMP1111]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1112:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1853:%.*]] = sext i16 [[TMP1112]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1854:%.*]] = icmp sgt i32 [[CONV1852]], [[CONV1853]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1854]], label [[IF_THEN1856:%.*]], label [[IF_END1857:%.*]]
// SIMD-ONLY0:       if.then1856:
// SIMD-ONLY0-NEXT:    [[TMP1113:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1113]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1857]]
// SIMD-ONLY0:       if.end1857:
// SIMD-ONLY0-NEXT:    [[TMP1114:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1114]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1115:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1858:%.*]] = sext i16 [[TMP1115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1116:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1859:%.*]] = sext i16 [[TMP1116]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1860:%.*]] = icmp sgt i32 [[CONV1858]], [[CONV1859]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1860]], label [[IF_THEN1862:%.*]], label [[IF_END1863:%.*]]
// SIMD-ONLY0:       if.then1862:
// SIMD-ONLY0-NEXT:    [[TMP1117:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1117]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1863]]
// SIMD-ONLY0:       if.end1863:
// SIMD-ONLY0-NEXT:    [[TMP1118:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1118]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1119:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1864:%.*]] = sext i16 [[TMP1119]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1120:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1865:%.*]] = sext i16 [[TMP1120]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1866:%.*]] = icmp slt i32 [[CONV1864]], [[CONV1865]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1866]], label [[IF_THEN1868:%.*]], label [[IF_END1869:%.*]]
// SIMD-ONLY0:       if.then1868:
// SIMD-ONLY0-NEXT:    [[TMP1121:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1121]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1869]]
// SIMD-ONLY0:       if.end1869:
// SIMD-ONLY0-NEXT:    [[TMP1122:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1122]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1123:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1870:%.*]] = sext i16 [[TMP1123]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1124:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1871:%.*]] = sext i16 [[TMP1124]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1872:%.*]] = icmp slt i32 [[CONV1870]], [[CONV1871]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1872]], label [[IF_THEN1874:%.*]], label [[IF_END1875:%.*]]
// SIMD-ONLY0:       if.then1874:
// SIMD-ONLY0-NEXT:    [[TMP1125:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1125]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1875]]
// SIMD-ONLY0:       if.end1875:
// SIMD-ONLY0-NEXT:    [[TMP1126:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1126]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1127:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1876:%.*]] = sext i16 [[TMP1127]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1128:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1877:%.*]] = sext i16 [[TMP1128]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1878:%.*]] = icmp eq i32 [[CONV1876]], [[CONV1877]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1878]], label [[IF_THEN1880:%.*]], label [[IF_END1881:%.*]]
// SIMD-ONLY0:       if.then1880:
// SIMD-ONLY0-NEXT:    [[TMP1129:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1129]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1881]]
// SIMD-ONLY0:       if.end1881:
// SIMD-ONLY0-NEXT:    [[TMP1130:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1130]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1131:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1882:%.*]] = sext i16 [[TMP1131]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1132:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1883:%.*]] = sext i16 [[TMP1132]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1884:%.*]] = icmp eq i32 [[CONV1882]], [[CONV1883]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1884]], label [[IF_THEN1886:%.*]], label [[IF_END1887:%.*]]
// SIMD-ONLY0:       if.then1886:
// SIMD-ONLY0-NEXT:    [[TMP1133:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1133]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1887]]
// SIMD-ONLY0:       if.end1887:
// SIMD-ONLY0-NEXT:    [[TMP1134:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1888:%.*]] = sext i16 [[TMP1134]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1135:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1889:%.*]] = sext i16 [[TMP1135]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1890:%.*]] = icmp sgt i32 [[CONV1888]], [[CONV1889]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1890]], label [[IF_THEN1892:%.*]], label [[IF_END1893:%.*]]
// SIMD-ONLY0:       if.then1892:
// SIMD-ONLY0-NEXT:    [[TMP1136:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1136]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1893]]
// SIMD-ONLY0:       if.end1893:
// SIMD-ONLY0-NEXT:    [[TMP1137:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1137]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1138:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1894:%.*]] = sext i16 [[TMP1138]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1139:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1895:%.*]] = sext i16 [[TMP1139]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1896:%.*]] = icmp sgt i32 [[CONV1894]], [[CONV1895]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1896]], label [[IF_THEN1898:%.*]], label [[IF_END1899:%.*]]
// SIMD-ONLY0:       if.then1898:
// SIMD-ONLY0-NEXT:    [[TMP1140:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1140]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1899]]
// SIMD-ONLY0:       if.end1899:
// SIMD-ONLY0-NEXT:    [[TMP1141:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1141]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1142:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1900:%.*]] = sext i16 [[TMP1142]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1143:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1901:%.*]] = sext i16 [[TMP1143]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1902:%.*]] = icmp slt i32 [[CONV1900]], [[CONV1901]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1902]], label [[IF_THEN1904:%.*]], label [[IF_END1905:%.*]]
// SIMD-ONLY0:       if.then1904:
// SIMD-ONLY0-NEXT:    [[TMP1144:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1144]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1905]]
// SIMD-ONLY0:       if.end1905:
// SIMD-ONLY0-NEXT:    [[TMP1145:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1145]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1146:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1906:%.*]] = sext i16 [[TMP1146]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1147:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1907:%.*]] = sext i16 [[TMP1147]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1908:%.*]] = icmp slt i32 [[CONV1906]], [[CONV1907]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1908]], label [[IF_THEN1910:%.*]], label [[IF_END1911:%.*]]
// SIMD-ONLY0:       if.then1910:
// SIMD-ONLY0-NEXT:    [[TMP1148:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1148]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1911]]
// SIMD-ONLY0:       if.end1911:
// SIMD-ONLY0-NEXT:    [[TMP1149:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1149]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1150:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1912:%.*]] = sext i16 [[TMP1150]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1151:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1913:%.*]] = sext i16 [[TMP1151]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1914:%.*]] = icmp eq i32 [[CONV1912]], [[CONV1913]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1914]], label [[IF_THEN1916:%.*]], label [[IF_END1917:%.*]]
// SIMD-ONLY0:       if.then1916:
// SIMD-ONLY0-NEXT:    [[TMP1152:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1152]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1917]]
// SIMD-ONLY0:       if.end1917:
// SIMD-ONLY0-NEXT:    [[TMP1153:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1153]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1154:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1918:%.*]] = sext i16 [[TMP1154]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1155:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1919:%.*]] = sext i16 [[TMP1155]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1920:%.*]] = icmp eq i32 [[CONV1918]], [[CONV1919]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1920]], label [[IF_THEN1922:%.*]], label [[IF_END1923:%.*]]
// SIMD-ONLY0:       if.then1922:
// SIMD-ONLY0-NEXT:    [[TMP1156:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1156]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1923]]
// SIMD-ONLY0:       if.end1923:
// SIMD-ONLY0-NEXT:    [[TMP1157:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1157]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1158:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1924:%.*]] = sext i16 [[TMP1158]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1159:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1925:%.*]] = sext i16 [[TMP1159]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1926:%.*]] = icmp eq i32 [[CONV1924]], [[CONV1925]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1926]], label [[IF_THEN1928:%.*]], label [[IF_ELSE1929:%.*]]
// SIMD-ONLY0:       if.then1928:
// SIMD-ONLY0-NEXT:    [[TMP1160:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1160]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1930:%.*]]
// SIMD-ONLY0:       if.else1929:
// SIMD-ONLY0-NEXT:    [[TMP1161:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1161]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1930]]
// SIMD-ONLY0:       if.end1930:
// SIMD-ONLY0-NEXT:    [[TMP1162:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1931:%.*]] = sext i16 [[TMP1162]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1163:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1932:%.*]] = sext i16 [[TMP1163]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1933:%.*]] = icmp eq i32 [[CONV1931]], [[CONV1932]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1933]], label [[IF_THEN1935:%.*]], label [[IF_ELSE1936:%.*]]
// SIMD-ONLY0:       if.then1935:
// SIMD-ONLY0-NEXT:    [[TMP1164:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1164]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1937:%.*]]
// SIMD-ONLY0:       if.else1936:
// SIMD-ONLY0-NEXT:    [[TMP1165:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1165]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1937]]
// SIMD-ONLY0:       if.end1937:
// SIMD-ONLY0-NEXT:    [[TMP1166:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1938:%.*]] = sext i16 [[TMP1166]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1167:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1939:%.*]] = sext i16 [[TMP1167]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1940:%.*]] = icmp eq i32 [[CONV1938]], [[CONV1939]]
// SIMD-ONLY0-NEXT:    [[CONV1941:%.*]] = zext i1 [[CMP1940]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1942:%.*]] = trunc i32 [[CONV1941]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1942]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1168:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1943:%.*]] = icmp ne i16 [[TMP1168]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1943]], label [[IF_THEN1944:%.*]], label [[IF_END1945:%.*]]
// SIMD-ONLY0:       if.then1944:
// SIMD-ONLY0-NEXT:    [[TMP1169:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1169]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1945]]
// SIMD-ONLY0:       if.end1945:
// SIMD-ONLY0-NEXT:    [[TMP1170:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1946:%.*]] = sext i16 [[TMP1170]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1171:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1947:%.*]] = sext i16 [[TMP1171]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1948:%.*]] = icmp eq i32 [[CONV1946]], [[CONV1947]]
// SIMD-ONLY0-NEXT:    [[CONV1949:%.*]] = zext i1 [[CMP1948]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1950:%.*]] = trunc i32 [[CONV1949]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1950]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1172:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1951:%.*]] = icmp ne i16 [[TMP1172]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1951]], label [[IF_THEN1952:%.*]], label [[IF_END1953:%.*]]
// SIMD-ONLY0:       if.then1952:
// SIMD-ONLY0-NEXT:    [[TMP1173:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1173]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1953]]
// SIMD-ONLY0:       if.end1953:
// SIMD-ONLY0-NEXT:    [[TMP1174:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1954:%.*]] = sext i16 [[TMP1174]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1175:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1955:%.*]] = sext i16 [[TMP1175]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1956:%.*]] = icmp eq i32 [[CONV1954]], [[CONV1955]]
// SIMD-ONLY0-NEXT:    [[CONV1957:%.*]] = zext i1 [[CMP1956]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1958:%.*]] = trunc i32 [[CONV1957]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1958]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1176:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1959:%.*]] = icmp ne i16 [[TMP1176]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1959]], label [[IF_THEN1960:%.*]], label [[IF_ELSE1961:%.*]]
// SIMD-ONLY0:       if.then1960:
// SIMD-ONLY0-NEXT:    [[TMP1177:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1177]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1962:%.*]]
// SIMD-ONLY0:       if.else1961:
// SIMD-ONLY0-NEXT:    [[TMP1178:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1178]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1962]]
// SIMD-ONLY0:       if.end1962:
// SIMD-ONLY0-NEXT:    [[TMP1179:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1963:%.*]] = sext i16 [[TMP1179]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1180:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1964:%.*]] = sext i16 [[TMP1180]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1965:%.*]] = icmp eq i32 [[CONV1963]], [[CONV1964]]
// SIMD-ONLY0-NEXT:    [[CONV1966:%.*]] = zext i1 [[CMP1965]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1967:%.*]] = trunc i32 [[CONV1966]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1967]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1181:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL1968:%.*]] = icmp ne i16 [[TMP1181]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1968]], label [[IF_THEN1969:%.*]], label [[IF_ELSE1970:%.*]]
// SIMD-ONLY0:       if.then1969:
// SIMD-ONLY0-NEXT:    [[TMP1182:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1182]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1971:%.*]]
// SIMD-ONLY0:       if.else1970:
// SIMD-ONLY0-NEXT:    [[TMP1183:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1183]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1971]]
// SIMD-ONLY0:       if.end1971:
// SIMD-ONLY0-NEXT:    [[TMP1184:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1184]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1185:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1972:%.*]] = sext i16 [[TMP1185]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1186:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1973:%.*]] = sext i16 [[TMP1186]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1974:%.*]] = icmp sgt i32 [[CONV1972]], [[CONV1973]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1974]], label [[IF_THEN1976:%.*]], label [[IF_END1977:%.*]]
// SIMD-ONLY0:       if.then1976:
// SIMD-ONLY0-NEXT:    [[TMP1187:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1187]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1977]]
// SIMD-ONLY0:       if.end1977:
// SIMD-ONLY0-NEXT:    [[TMP1188:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1188]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1189:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1978:%.*]] = sext i16 [[TMP1189]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1190:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1979:%.*]] = sext i16 [[TMP1190]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1980:%.*]] = icmp sgt i32 [[CONV1978]], [[CONV1979]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1980]], label [[IF_THEN1982:%.*]], label [[IF_END1983:%.*]]
// SIMD-ONLY0:       if.then1982:
// SIMD-ONLY0-NEXT:    [[TMP1191:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1191]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1983]]
// SIMD-ONLY0:       if.end1983:
// SIMD-ONLY0-NEXT:    [[TMP1192:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1192]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1193:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1984:%.*]] = sext i16 [[TMP1193]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1194:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1985:%.*]] = sext i16 [[TMP1194]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1986:%.*]] = icmp slt i32 [[CONV1984]], [[CONV1985]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1986]], label [[IF_THEN1988:%.*]], label [[IF_END1989:%.*]]
// SIMD-ONLY0:       if.then1988:
// SIMD-ONLY0-NEXT:    [[TMP1195:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1195]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1989]]
// SIMD-ONLY0:       if.end1989:
// SIMD-ONLY0-NEXT:    [[TMP1196:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1196]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1197:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1990:%.*]] = sext i16 [[TMP1197]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1198:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1991:%.*]] = sext i16 [[TMP1198]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1992:%.*]] = icmp slt i32 [[CONV1990]], [[CONV1991]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1992]], label [[IF_THEN1994:%.*]], label [[IF_END1995:%.*]]
// SIMD-ONLY0:       if.then1994:
// SIMD-ONLY0-NEXT:    [[TMP1199:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1199]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1995]]
// SIMD-ONLY0:       if.end1995:
// SIMD-ONLY0-NEXT:    [[TMP1200:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1200]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1201:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1996:%.*]] = sext i16 [[TMP1201]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1202:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1997:%.*]] = sext i16 [[TMP1202]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1998:%.*]] = icmp eq i32 [[CONV1996]], [[CONV1997]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1998]], label [[IF_THEN2000:%.*]], label [[IF_END2001:%.*]]
// SIMD-ONLY0:       if.then2000:
// SIMD-ONLY0-NEXT:    [[TMP1203:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1203]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2001]]
// SIMD-ONLY0:       if.end2001:
// SIMD-ONLY0-NEXT:    [[TMP1204:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1204]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1205:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2002:%.*]] = sext i16 [[TMP1205]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1206:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2003:%.*]] = sext i16 [[TMP1206]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2004:%.*]] = icmp eq i32 [[CONV2002]], [[CONV2003]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2004]], label [[IF_THEN2006:%.*]], label [[IF_END2007:%.*]]
// SIMD-ONLY0:       if.then2006:
// SIMD-ONLY0-NEXT:    [[TMP1207:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1207]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2007]]
// SIMD-ONLY0:       if.end2007:
// SIMD-ONLY0-NEXT:    [[TMP1208:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2008:%.*]] = sext i16 [[TMP1208]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1209:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2009:%.*]] = sext i16 [[TMP1209]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2010:%.*]] = icmp sgt i32 [[CONV2008]], [[CONV2009]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2010]], label [[IF_THEN2012:%.*]], label [[IF_END2013:%.*]]
// SIMD-ONLY0:       if.then2012:
// SIMD-ONLY0-NEXT:    [[TMP1210:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1210]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2013]]
// SIMD-ONLY0:       if.end2013:
// SIMD-ONLY0-NEXT:    [[TMP1211:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1211]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1212:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2014:%.*]] = sext i16 [[TMP1212]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1213:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2015:%.*]] = sext i16 [[TMP1213]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2016:%.*]] = icmp sgt i32 [[CONV2014]], [[CONV2015]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2016]], label [[IF_THEN2018:%.*]], label [[IF_END2019:%.*]]
// SIMD-ONLY0:       if.then2018:
// SIMD-ONLY0-NEXT:    [[TMP1214:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1214]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2019]]
// SIMD-ONLY0:       if.end2019:
// SIMD-ONLY0-NEXT:    [[TMP1215:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1215]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1216:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2020:%.*]] = sext i16 [[TMP1216]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1217:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2021:%.*]] = sext i16 [[TMP1217]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2022:%.*]] = icmp slt i32 [[CONV2020]], [[CONV2021]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2022]], label [[IF_THEN2024:%.*]], label [[IF_END2025:%.*]]
// SIMD-ONLY0:       if.then2024:
// SIMD-ONLY0-NEXT:    [[TMP1218:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1218]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2025]]
// SIMD-ONLY0:       if.end2025:
// SIMD-ONLY0-NEXT:    [[TMP1219:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1219]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1220:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2026:%.*]] = sext i16 [[TMP1220]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1221:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2027:%.*]] = sext i16 [[TMP1221]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2028:%.*]] = icmp slt i32 [[CONV2026]], [[CONV2027]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2028]], label [[IF_THEN2030:%.*]], label [[IF_END2031:%.*]]
// SIMD-ONLY0:       if.then2030:
// SIMD-ONLY0-NEXT:    [[TMP1222:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1222]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2031]]
// SIMD-ONLY0:       if.end2031:
// SIMD-ONLY0-NEXT:    [[TMP1223:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1223]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1224:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2032:%.*]] = sext i16 [[TMP1224]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1225:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2033:%.*]] = sext i16 [[TMP1225]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2034:%.*]] = icmp eq i32 [[CONV2032]], [[CONV2033]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2034]], label [[IF_THEN2036:%.*]], label [[IF_END2037:%.*]]
// SIMD-ONLY0:       if.then2036:
// SIMD-ONLY0-NEXT:    [[TMP1226:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1226]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2037]]
// SIMD-ONLY0:       if.end2037:
// SIMD-ONLY0-NEXT:    [[TMP1227:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1227]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1228:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2038:%.*]] = sext i16 [[TMP1228]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1229:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2039:%.*]] = sext i16 [[TMP1229]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2040:%.*]] = icmp eq i32 [[CONV2038]], [[CONV2039]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2040]], label [[IF_THEN2042:%.*]], label [[IF_END2043:%.*]]
// SIMD-ONLY0:       if.then2042:
// SIMD-ONLY0-NEXT:    [[TMP1230:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1230]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2043]]
// SIMD-ONLY0:       if.end2043:
// SIMD-ONLY0-NEXT:    [[TMP1231:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1231]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1232:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2044:%.*]] = sext i16 [[TMP1232]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1233:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2045:%.*]] = sext i16 [[TMP1233]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2046:%.*]] = icmp eq i32 [[CONV2044]], [[CONV2045]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2046]], label [[IF_THEN2048:%.*]], label [[IF_ELSE2049:%.*]]
// SIMD-ONLY0:       if.then2048:
// SIMD-ONLY0-NEXT:    [[TMP1234:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1234]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2050:%.*]]
// SIMD-ONLY0:       if.else2049:
// SIMD-ONLY0-NEXT:    [[TMP1235:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1235]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2050]]
// SIMD-ONLY0:       if.end2050:
// SIMD-ONLY0-NEXT:    [[TMP1236:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2051:%.*]] = sext i16 [[TMP1236]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1237:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2052:%.*]] = sext i16 [[TMP1237]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2053:%.*]] = icmp eq i32 [[CONV2051]], [[CONV2052]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2053]], label [[IF_THEN2055:%.*]], label [[IF_ELSE2056:%.*]]
// SIMD-ONLY0:       if.then2055:
// SIMD-ONLY0-NEXT:    [[TMP1238:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1238]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2057:%.*]]
// SIMD-ONLY0:       if.else2056:
// SIMD-ONLY0-NEXT:    [[TMP1239:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1239]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2057]]
// SIMD-ONLY0:       if.end2057:
// SIMD-ONLY0-NEXT:    [[TMP1240:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2058:%.*]] = sext i16 [[TMP1240]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1241:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2059:%.*]] = sext i16 [[TMP1241]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2060:%.*]] = icmp eq i32 [[CONV2058]], [[CONV2059]]
// SIMD-ONLY0-NEXT:    [[CONV2061:%.*]] = zext i1 [[CMP2060]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2062:%.*]] = trunc i32 [[CONV2061]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2062]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1242:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2063:%.*]] = icmp ne i16 [[TMP1242]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2063]], label [[IF_THEN2064:%.*]], label [[IF_END2065:%.*]]
// SIMD-ONLY0:       if.then2064:
// SIMD-ONLY0-NEXT:    [[TMP1243:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1243]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2065]]
// SIMD-ONLY0:       if.end2065:
// SIMD-ONLY0-NEXT:    [[TMP1244:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2066:%.*]] = sext i16 [[TMP1244]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1245:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2067:%.*]] = sext i16 [[TMP1245]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2068:%.*]] = icmp eq i32 [[CONV2066]], [[CONV2067]]
// SIMD-ONLY0-NEXT:    [[CONV2069:%.*]] = zext i1 [[CMP2068]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2070:%.*]] = trunc i32 [[CONV2069]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2070]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1246:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2071:%.*]] = icmp ne i16 [[TMP1246]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2071]], label [[IF_THEN2072:%.*]], label [[IF_END2073:%.*]]
// SIMD-ONLY0:       if.then2072:
// SIMD-ONLY0-NEXT:    [[TMP1247:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1247]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2073]]
// SIMD-ONLY0:       if.end2073:
// SIMD-ONLY0-NEXT:    [[TMP1248:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2074:%.*]] = sext i16 [[TMP1248]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1249:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2075:%.*]] = sext i16 [[TMP1249]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2076:%.*]] = icmp eq i32 [[CONV2074]], [[CONV2075]]
// SIMD-ONLY0-NEXT:    [[CONV2077:%.*]] = zext i1 [[CMP2076]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2078:%.*]] = trunc i32 [[CONV2077]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2078]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1250:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2079:%.*]] = icmp ne i16 [[TMP1250]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2079]], label [[IF_THEN2080:%.*]], label [[IF_ELSE2081:%.*]]
// SIMD-ONLY0:       if.then2080:
// SIMD-ONLY0-NEXT:    [[TMP1251:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1251]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2082:%.*]]
// SIMD-ONLY0:       if.else2081:
// SIMD-ONLY0-NEXT:    [[TMP1252:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1252]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2082]]
// SIMD-ONLY0:       if.end2082:
// SIMD-ONLY0-NEXT:    [[TMP1253:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2083:%.*]] = sext i16 [[TMP1253]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1254:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2084:%.*]] = sext i16 [[TMP1254]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2085:%.*]] = icmp eq i32 [[CONV2083]], [[CONV2084]]
// SIMD-ONLY0-NEXT:    [[CONV2086:%.*]] = zext i1 [[CMP2085]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2087:%.*]] = trunc i32 [[CONV2086]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2087]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1255:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2088:%.*]] = icmp ne i16 [[TMP1255]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2088]], label [[IF_THEN2089:%.*]], label [[IF_ELSE2090:%.*]]
// SIMD-ONLY0:       if.then2089:
// SIMD-ONLY0-NEXT:    [[TMP1256:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1256]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2091:%.*]]
// SIMD-ONLY0:       if.else2090:
// SIMD-ONLY0-NEXT:    [[TMP1257:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1257]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2091]]
// SIMD-ONLY0:       if.end2091:
// SIMD-ONLY0-NEXT:    [[TMP1258:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1258]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1259:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2092:%.*]] = sext i16 [[TMP1259]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1260:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2093:%.*]] = sext i16 [[TMP1260]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2094:%.*]] = icmp sgt i32 [[CONV2092]], [[CONV2093]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2094]], label [[IF_THEN2096:%.*]], label [[IF_END2097:%.*]]
// SIMD-ONLY0:       if.then2096:
// SIMD-ONLY0-NEXT:    [[TMP1261:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1261]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2097]]
// SIMD-ONLY0:       if.end2097:
// SIMD-ONLY0-NEXT:    [[TMP1262:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1262]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1263:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2098:%.*]] = sext i16 [[TMP1263]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1264:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2099:%.*]] = sext i16 [[TMP1264]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2100:%.*]] = icmp sgt i32 [[CONV2098]], [[CONV2099]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2100]], label [[IF_THEN2102:%.*]], label [[IF_END2103:%.*]]
// SIMD-ONLY0:       if.then2102:
// SIMD-ONLY0-NEXT:    [[TMP1265:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1265]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2103]]
// SIMD-ONLY0:       if.end2103:
// SIMD-ONLY0-NEXT:    [[TMP1266:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1266]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1267:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2104:%.*]] = sext i16 [[TMP1267]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1268:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2105:%.*]] = sext i16 [[TMP1268]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2106:%.*]] = icmp slt i32 [[CONV2104]], [[CONV2105]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2106]], label [[IF_THEN2108:%.*]], label [[IF_END2109:%.*]]
// SIMD-ONLY0:       if.then2108:
// SIMD-ONLY0-NEXT:    [[TMP1269:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1269]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2109]]
// SIMD-ONLY0:       if.end2109:
// SIMD-ONLY0-NEXT:    [[TMP1270:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1270]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1271:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2110:%.*]] = sext i16 [[TMP1271]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1272:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2111:%.*]] = sext i16 [[TMP1272]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2112:%.*]] = icmp slt i32 [[CONV2110]], [[CONV2111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2112]], label [[IF_THEN2114:%.*]], label [[IF_END2115:%.*]]
// SIMD-ONLY0:       if.then2114:
// SIMD-ONLY0-NEXT:    [[TMP1273:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1273]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2115]]
// SIMD-ONLY0:       if.end2115:
// SIMD-ONLY0-NEXT:    [[TMP1274:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1274]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1275:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2116:%.*]] = sext i16 [[TMP1275]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1276:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2117:%.*]] = sext i16 [[TMP1276]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2118:%.*]] = icmp eq i32 [[CONV2116]], [[CONV2117]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2118]], label [[IF_THEN2120:%.*]], label [[IF_END2121:%.*]]
// SIMD-ONLY0:       if.then2120:
// SIMD-ONLY0-NEXT:    [[TMP1277:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1277]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2121]]
// SIMD-ONLY0:       if.end2121:
// SIMD-ONLY0-NEXT:    [[TMP1278:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1278]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1279:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2122:%.*]] = sext i16 [[TMP1279]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1280:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2123:%.*]] = sext i16 [[TMP1280]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2124:%.*]] = icmp eq i32 [[CONV2122]], [[CONV2123]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2124]], label [[IF_THEN2126:%.*]], label [[IF_END2127:%.*]]
// SIMD-ONLY0:       if.then2126:
// SIMD-ONLY0-NEXT:    [[TMP1281:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1281]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2127]]
// SIMD-ONLY0:       if.end2127:
// SIMD-ONLY0-NEXT:    [[TMP1282:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2128:%.*]] = sext i16 [[TMP1282]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1283:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2129:%.*]] = sext i16 [[TMP1283]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2130:%.*]] = icmp sgt i32 [[CONV2128]], [[CONV2129]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2130]], label [[IF_THEN2132:%.*]], label [[IF_END2133:%.*]]
// SIMD-ONLY0:       if.then2132:
// SIMD-ONLY0-NEXT:    [[TMP1284:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1284]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2133]]
// SIMD-ONLY0:       if.end2133:
// SIMD-ONLY0-NEXT:    [[TMP1285:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1285]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1286:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2134:%.*]] = sext i16 [[TMP1286]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1287:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2135:%.*]] = sext i16 [[TMP1287]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2136:%.*]] = icmp sgt i32 [[CONV2134]], [[CONV2135]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2136]], label [[IF_THEN2138:%.*]], label [[IF_END2139:%.*]]
// SIMD-ONLY0:       if.then2138:
// SIMD-ONLY0-NEXT:    [[TMP1288:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1288]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2139]]
// SIMD-ONLY0:       if.end2139:
// SIMD-ONLY0-NEXT:    [[TMP1289:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1289]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1290:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2140:%.*]] = sext i16 [[TMP1290]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1291:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2141:%.*]] = sext i16 [[TMP1291]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2142:%.*]] = icmp slt i32 [[CONV2140]], [[CONV2141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2142]], label [[IF_THEN2144:%.*]], label [[IF_END2145:%.*]]
// SIMD-ONLY0:       if.then2144:
// SIMD-ONLY0-NEXT:    [[TMP1292:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1292]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2145]]
// SIMD-ONLY0:       if.end2145:
// SIMD-ONLY0-NEXT:    [[TMP1293:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1293]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1294:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2146:%.*]] = sext i16 [[TMP1294]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1295:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2147:%.*]] = sext i16 [[TMP1295]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2148:%.*]] = icmp slt i32 [[CONV2146]], [[CONV2147]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2148]], label [[IF_THEN2150:%.*]], label [[IF_END2151:%.*]]
// SIMD-ONLY0:       if.then2150:
// SIMD-ONLY0-NEXT:    [[TMP1296:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1296]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2151]]
// SIMD-ONLY0:       if.end2151:
// SIMD-ONLY0-NEXT:    [[TMP1297:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1297]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1298:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2152:%.*]] = sext i16 [[TMP1298]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1299:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2153:%.*]] = sext i16 [[TMP1299]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2154:%.*]] = icmp eq i32 [[CONV2152]], [[CONV2153]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2154]], label [[IF_THEN2156:%.*]], label [[IF_END2157:%.*]]
// SIMD-ONLY0:       if.then2156:
// SIMD-ONLY0-NEXT:    [[TMP1300:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1300]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2157]]
// SIMD-ONLY0:       if.end2157:
// SIMD-ONLY0-NEXT:    [[TMP1301:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1301]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1302:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2158:%.*]] = sext i16 [[TMP1302]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1303:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2159:%.*]] = sext i16 [[TMP1303]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2160:%.*]] = icmp eq i32 [[CONV2158]], [[CONV2159]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2160]], label [[IF_THEN2162:%.*]], label [[IF_END2163:%.*]]
// SIMD-ONLY0:       if.then2162:
// SIMD-ONLY0-NEXT:    [[TMP1304:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1304]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2163]]
// SIMD-ONLY0:       if.end2163:
// SIMD-ONLY0-NEXT:    [[TMP1305:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1305]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1306:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2164:%.*]] = sext i16 [[TMP1306]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1307:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2165:%.*]] = sext i16 [[TMP1307]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2166:%.*]] = icmp eq i32 [[CONV2164]], [[CONV2165]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2166]], label [[IF_THEN2168:%.*]], label [[IF_ELSE2169:%.*]]
// SIMD-ONLY0:       if.then2168:
// SIMD-ONLY0-NEXT:    [[TMP1308:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1308]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2170:%.*]]
// SIMD-ONLY0:       if.else2169:
// SIMD-ONLY0-NEXT:    [[TMP1309:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1309]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2170]]
// SIMD-ONLY0:       if.end2170:
// SIMD-ONLY0-NEXT:    [[TMP1310:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2171:%.*]] = sext i16 [[TMP1310]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1311:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2172:%.*]] = sext i16 [[TMP1311]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2173:%.*]] = icmp eq i32 [[CONV2171]], [[CONV2172]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2173]], label [[IF_THEN2175:%.*]], label [[IF_ELSE2176:%.*]]
// SIMD-ONLY0:       if.then2175:
// SIMD-ONLY0-NEXT:    [[TMP1312:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1312]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2177:%.*]]
// SIMD-ONLY0:       if.else2176:
// SIMD-ONLY0-NEXT:    [[TMP1313:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1313]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2177]]
// SIMD-ONLY0:       if.end2177:
// SIMD-ONLY0-NEXT:    [[TMP1314:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2178:%.*]] = sext i16 [[TMP1314]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1315:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2179:%.*]] = sext i16 [[TMP1315]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2180:%.*]] = icmp eq i32 [[CONV2178]], [[CONV2179]]
// SIMD-ONLY0-NEXT:    [[CONV2181:%.*]] = zext i1 [[CMP2180]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2182:%.*]] = trunc i32 [[CONV2181]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2182]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1316:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2183:%.*]] = icmp ne i16 [[TMP1316]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2183]], label [[IF_THEN2184:%.*]], label [[IF_END2185:%.*]]
// SIMD-ONLY0:       if.then2184:
// SIMD-ONLY0-NEXT:    [[TMP1317:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1317]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2185]]
// SIMD-ONLY0:       if.end2185:
// SIMD-ONLY0-NEXT:    [[TMP1318:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2186:%.*]] = sext i16 [[TMP1318]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1319:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2187:%.*]] = sext i16 [[TMP1319]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2188:%.*]] = icmp eq i32 [[CONV2186]], [[CONV2187]]
// SIMD-ONLY0-NEXT:    [[CONV2189:%.*]] = zext i1 [[CMP2188]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2190:%.*]] = trunc i32 [[CONV2189]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2190]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1320:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2191:%.*]] = icmp ne i16 [[TMP1320]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2191]], label [[IF_THEN2192:%.*]], label [[IF_END2193:%.*]]
// SIMD-ONLY0:       if.then2192:
// SIMD-ONLY0-NEXT:    [[TMP1321:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1321]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2193]]
// SIMD-ONLY0:       if.end2193:
// SIMD-ONLY0-NEXT:    [[TMP1322:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2194:%.*]] = sext i16 [[TMP1322]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1323:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2195:%.*]] = sext i16 [[TMP1323]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2196:%.*]] = icmp eq i32 [[CONV2194]], [[CONV2195]]
// SIMD-ONLY0-NEXT:    [[CONV2197:%.*]] = zext i1 [[CMP2196]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2198:%.*]] = trunc i32 [[CONV2197]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2198]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1324:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2199:%.*]] = icmp ne i16 [[TMP1324]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2199]], label [[IF_THEN2200:%.*]], label [[IF_ELSE2201:%.*]]
// SIMD-ONLY0:       if.then2200:
// SIMD-ONLY0-NEXT:    [[TMP1325:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1325]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2202:%.*]]
// SIMD-ONLY0:       if.else2201:
// SIMD-ONLY0-NEXT:    [[TMP1326:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1326]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2202]]
// SIMD-ONLY0:       if.end2202:
// SIMD-ONLY0-NEXT:    [[TMP1327:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2203:%.*]] = sext i16 [[TMP1327]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1328:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2204:%.*]] = sext i16 [[TMP1328]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2205:%.*]] = icmp eq i32 [[CONV2203]], [[CONV2204]]
// SIMD-ONLY0-NEXT:    [[CONV2206:%.*]] = zext i1 [[CMP2205]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2207:%.*]] = trunc i32 [[CONV2206]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2207]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1329:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2208:%.*]] = icmp ne i16 [[TMP1329]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2208]], label [[IF_THEN2209:%.*]], label [[IF_ELSE2210:%.*]]
// SIMD-ONLY0:       if.then2209:
// SIMD-ONLY0-NEXT:    [[TMP1330:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1330]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2211:%.*]]
// SIMD-ONLY0:       if.else2210:
// SIMD-ONLY0-NEXT:    [[TMP1331:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1331]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2211]]
// SIMD-ONLY0:       if.end2211:
// SIMD-ONLY0-NEXT:    [[TMP1332:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1332]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1333:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2212:%.*]] = zext i16 [[TMP1333]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1334:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2213:%.*]] = zext i16 [[TMP1334]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2214:%.*]] = icmp sgt i32 [[CONV2212]], [[CONV2213]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2214]], label [[IF_THEN2216:%.*]], label [[IF_END2217:%.*]]
// SIMD-ONLY0:       if.then2216:
// SIMD-ONLY0-NEXT:    [[TMP1335:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1335]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2217]]
// SIMD-ONLY0:       if.end2217:
// SIMD-ONLY0-NEXT:    [[TMP1336:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1336]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1337:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2218:%.*]] = zext i16 [[TMP1337]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1338:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2219:%.*]] = zext i16 [[TMP1338]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2220:%.*]] = icmp sgt i32 [[CONV2218]], [[CONV2219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2220]], label [[IF_THEN2222:%.*]], label [[IF_END2223:%.*]]
// SIMD-ONLY0:       if.then2222:
// SIMD-ONLY0-NEXT:    [[TMP1339:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1339]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2223]]
// SIMD-ONLY0:       if.end2223:
// SIMD-ONLY0-NEXT:    [[TMP1340:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1340]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1341:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2224:%.*]] = zext i16 [[TMP1341]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1342:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2225:%.*]] = zext i16 [[TMP1342]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2226:%.*]] = icmp slt i32 [[CONV2224]], [[CONV2225]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2226]], label [[IF_THEN2228:%.*]], label [[IF_END2229:%.*]]
// SIMD-ONLY0:       if.then2228:
// SIMD-ONLY0-NEXT:    [[TMP1343:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1343]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2229]]
// SIMD-ONLY0:       if.end2229:
// SIMD-ONLY0-NEXT:    [[TMP1344:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1344]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1345:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2230:%.*]] = zext i16 [[TMP1345]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1346:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2231:%.*]] = zext i16 [[TMP1346]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2232:%.*]] = icmp slt i32 [[CONV2230]], [[CONV2231]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2232]], label [[IF_THEN2234:%.*]], label [[IF_END2235:%.*]]
// SIMD-ONLY0:       if.then2234:
// SIMD-ONLY0-NEXT:    [[TMP1347:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1347]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2235]]
// SIMD-ONLY0:       if.end2235:
// SIMD-ONLY0-NEXT:    [[TMP1348:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1348]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1349:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2236:%.*]] = zext i16 [[TMP1349]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1350:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2237:%.*]] = zext i16 [[TMP1350]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2238:%.*]] = icmp eq i32 [[CONV2236]], [[CONV2237]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2238]], label [[IF_THEN2240:%.*]], label [[IF_END2241:%.*]]
// SIMD-ONLY0:       if.then2240:
// SIMD-ONLY0-NEXT:    [[TMP1351:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1351]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2241]]
// SIMD-ONLY0:       if.end2241:
// SIMD-ONLY0-NEXT:    [[TMP1352:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1352]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1353:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2242:%.*]] = zext i16 [[TMP1353]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1354:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2243:%.*]] = zext i16 [[TMP1354]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2244:%.*]] = icmp eq i32 [[CONV2242]], [[CONV2243]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2244]], label [[IF_THEN2246:%.*]], label [[IF_END2247:%.*]]
// SIMD-ONLY0:       if.then2246:
// SIMD-ONLY0-NEXT:    [[TMP1355:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1355]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2247]]
// SIMD-ONLY0:       if.end2247:
// SIMD-ONLY0-NEXT:    [[TMP1356:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2248:%.*]] = zext i16 [[TMP1356]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1357:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2249:%.*]] = zext i16 [[TMP1357]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2250:%.*]] = icmp sgt i32 [[CONV2248]], [[CONV2249]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2250]], label [[IF_THEN2252:%.*]], label [[IF_END2253:%.*]]
// SIMD-ONLY0:       if.then2252:
// SIMD-ONLY0-NEXT:    [[TMP1358:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1358]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2253]]
// SIMD-ONLY0:       if.end2253:
// SIMD-ONLY0-NEXT:    [[TMP1359:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1359]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1360:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2254:%.*]] = zext i16 [[TMP1360]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1361:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2255:%.*]] = zext i16 [[TMP1361]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2256:%.*]] = icmp sgt i32 [[CONV2254]], [[CONV2255]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2256]], label [[IF_THEN2258:%.*]], label [[IF_END2259:%.*]]
// SIMD-ONLY0:       if.then2258:
// SIMD-ONLY0-NEXT:    [[TMP1362:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1362]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2259]]
// SIMD-ONLY0:       if.end2259:
// SIMD-ONLY0-NEXT:    [[TMP1363:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1363]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1364:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2260:%.*]] = zext i16 [[TMP1364]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1365:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2261:%.*]] = zext i16 [[TMP1365]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2262:%.*]] = icmp slt i32 [[CONV2260]], [[CONV2261]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2262]], label [[IF_THEN2264:%.*]], label [[IF_END2265:%.*]]
// SIMD-ONLY0:       if.then2264:
// SIMD-ONLY0-NEXT:    [[TMP1366:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1366]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2265]]
// SIMD-ONLY0:       if.end2265:
// SIMD-ONLY0-NEXT:    [[TMP1367:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1367]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1368:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2266:%.*]] = zext i16 [[TMP1368]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1369:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2267:%.*]] = zext i16 [[TMP1369]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2268:%.*]] = icmp slt i32 [[CONV2266]], [[CONV2267]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2268]], label [[IF_THEN2270:%.*]], label [[IF_END2271:%.*]]
// SIMD-ONLY0:       if.then2270:
// SIMD-ONLY0-NEXT:    [[TMP1370:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1370]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2271]]
// SIMD-ONLY0:       if.end2271:
// SIMD-ONLY0-NEXT:    [[TMP1371:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1371]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1372:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2272:%.*]] = zext i16 [[TMP1372]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1373:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2273:%.*]] = zext i16 [[TMP1373]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2274:%.*]] = icmp eq i32 [[CONV2272]], [[CONV2273]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2274]], label [[IF_THEN2276:%.*]], label [[IF_END2277:%.*]]
// SIMD-ONLY0:       if.then2276:
// SIMD-ONLY0-NEXT:    [[TMP1374:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1374]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2277]]
// SIMD-ONLY0:       if.end2277:
// SIMD-ONLY0-NEXT:    [[TMP1375:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1375]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1376:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2278:%.*]] = zext i16 [[TMP1376]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1377:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2279:%.*]] = zext i16 [[TMP1377]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2280:%.*]] = icmp eq i32 [[CONV2278]], [[CONV2279]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2280]], label [[IF_THEN2282:%.*]], label [[IF_END2283:%.*]]
// SIMD-ONLY0:       if.then2282:
// SIMD-ONLY0-NEXT:    [[TMP1378:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1378]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2283]]
// SIMD-ONLY0:       if.end2283:
// SIMD-ONLY0-NEXT:    [[TMP1379:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1379]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1380:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2284:%.*]] = zext i16 [[TMP1380]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1381:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2285:%.*]] = zext i16 [[TMP1381]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2286:%.*]] = icmp eq i32 [[CONV2284]], [[CONV2285]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2286]], label [[IF_THEN2288:%.*]], label [[IF_ELSE2289:%.*]]
// SIMD-ONLY0:       if.then2288:
// SIMD-ONLY0-NEXT:    [[TMP1382:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1382]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2290:%.*]]
// SIMD-ONLY0:       if.else2289:
// SIMD-ONLY0-NEXT:    [[TMP1383:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1383]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2290]]
// SIMD-ONLY0:       if.end2290:
// SIMD-ONLY0-NEXT:    [[TMP1384:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2291:%.*]] = zext i16 [[TMP1384]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1385:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2292:%.*]] = zext i16 [[TMP1385]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2293:%.*]] = icmp eq i32 [[CONV2291]], [[CONV2292]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2293]], label [[IF_THEN2295:%.*]], label [[IF_ELSE2296:%.*]]
// SIMD-ONLY0:       if.then2295:
// SIMD-ONLY0-NEXT:    [[TMP1386:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1386]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2297:%.*]]
// SIMD-ONLY0:       if.else2296:
// SIMD-ONLY0-NEXT:    [[TMP1387:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1387]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2297]]
// SIMD-ONLY0:       if.end2297:
// SIMD-ONLY0-NEXT:    [[TMP1388:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2298:%.*]] = zext i16 [[TMP1388]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1389:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2299:%.*]] = zext i16 [[TMP1389]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2300:%.*]] = icmp eq i32 [[CONV2298]], [[CONV2299]]
// SIMD-ONLY0-NEXT:    [[CONV2301:%.*]] = zext i1 [[CMP2300]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2302:%.*]] = trunc i32 [[CONV2301]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2302]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1390:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2303:%.*]] = icmp ne i16 [[TMP1390]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2303]], label [[IF_THEN2304:%.*]], label [[IF_END2305:%.*]]
// SIMD-ONLY0:       if.then2304:
// SIMD-ONLY0-NEXT:    [[TMP1391:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1391]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2305]]
// SIMD-ONLY0:       if.end2305:
// SIMD-ONLY0-NEXT:    [[TMP1392:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2306:%.*]] = zext i16 [[TMP1392]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1393:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2307:%.*]] = zext i16 [[TMP1393]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2308:%.*]] = icmp eq i32 [[CONV2306]], [[CONV2307]]
// SIMD-ONLY0-NEXT:    [[CONV2309:%.*]] = zext i1 [[CMP2308]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2310:%.*]] = trunc i32 [[CONV2309]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2310]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1394:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2311:%.*]] = icmp ne i16 [[TMP1394]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2311]], label [[IF_THEN2312:%.*]], label [[IF_END2313:%.*]]
// SIMD-ONLY0:       if.then2312:
// SIMD-ONLY0-NEXT:    [[TMP1395:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1395]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2313]]
// SIMD-ONLY0:       if.end2313:
// SIMD-ONLY0-NEXT:    [[TMP1396:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2314:%.*]] = zext i16 [[TMP1396]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1397:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2315:%.*]] = zext i16 [[TMP1397]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2316:%.*]] = icmp eq i32 [[CONV2314]], [[CONV2315]]
// SIMD-ONLY0-NEXT:    [[CONV2317:%.*]] = zext i1 [[CMP2316]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2318:%.*]] = trunc i32 [[CONV2317]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2318]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1398:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2319:%.*]] = icmp ne i16 [[TMP1398]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2319]], label [[IF_THEN2320:%.*]], label [[IF_ELSE2321:%.*]]
// SIMD-ONLY0:       if.then2320:
// SIMD-ONLY0-NEXT:    [[TMP1399:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1399]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2322:%.*]]
// SIMD-ONLY0:       if.else2321:
// SIMD-ONLY0-NEXT:    [[TMP1400:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1400]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2322]]
// SIMD-ONLY0:       if.end2322:
// SIMD-ONLY0-NEXT:    [[TMP1401:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2323:%.*]] = zext i16 [[TMP1401]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1402:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2324:%.*]] = zext i16 [[TMP1402]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2325:%.*]] = icmp eq i32 [[CONV2323]], [[CONV2324]]
// SIMD-ONLY0-NEXT:    [[CONV2326:%.*]] = zext i1 [[CMP2325]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2327:%.*]] = trunc i32 [[CONV2326]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2327]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1403:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2328:%.*]] = icmp ne i16 [[TMP1403]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2328]], label [[IF_THEN2329:%.*]], label [[IF_ELSE2330:%.*]]
// SIMD-ONLY0:       if.then2329:
// SIMD-ONLY0-NEXT:    [[TMP1404:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1404]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2331:%.*]]
// SIMD-ONLY0:       if.else2330:
// SIMD-ONLY0-NEXT:    [[TMP1405:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1405]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2331]]
// SIMD-ONLY0:       if.end2331:
// SIMD-ONLY0-NEXT:    [[TMP1406:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1406]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1407:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2332:%.*]] = zext i16 [[TMP1407]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1408:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2333:%.*]] = zext i16 [[TMP1408]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2334:%.*]] = icmp sgt i32 [[CONV2332]], [[CONV2333]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2334]], label [[IF_THEN2336:%.*]], label [[IF_END2337:%.*]]
// SIMD-ONLY0:       if.then2336:
// SIMD-ONLY0-NEXT:    [[TMP1409:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1409]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2337]]
// SIMD-ONLY0:       if.end2337:
// SIMD-ONLY0-NEXT:    [[TMP1410:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1410]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1411:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2338:%.*]] = zext i16 [[TMP1411]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1412:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2339:%.*]] = zext i16 [[TMP1412]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2340:%.*]] = icmp sgt i32 [[CONV2338]], [[CONV2339]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2340]], label [[IF_THEN2342:%.*]], label [[IF_END2343:%.*]]
// SIMD-ONLY0:       if.then2342:
// SIMD-ONLY0-NEXT:    [[TMP1413:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1413]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2343]]
// SIMD-ONLY0:       if.end2343:
// SIMD-ONLY0-NEXT:    [[TMP1414:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1414]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1415:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2344:%.*]] = zext i16 [[TMP1415]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1416:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2345:%.*]] = zext i16 [[TMP1416]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2346:%.*]] = icmp slt i32 [[CONV2344]], [[CONV2345]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2346]], label [[IF_THEN2348:%.*]], label [[IF_END2349:%.*]]
// SIMD-ONLY0:       if.then2348:
// SIMD-ONLY0-NEXT:    [[TMP1417:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1417]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2349]]
// SIMD-ONLY0:       if.end2349:
// SIMD-ONLY0-NEXT:    [[TMP1418:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1418]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1419:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2350:%.*]] = zext i16 [[TMP1419]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1420:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2351:%.*]] = zext i16 [[TMP1420]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2352:%.*]] = icmp slt i32 [[CONV2350]], [[CONV2351]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2352]], label [[IF_THEN2354:%.*]], label [[IF_END2355:%.*]]
// SIMD-ONLY0:       if.then2354:
// SIMD-ONLY0-NEXT:    [[TMP1421:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1421]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2355]]
// SIMD-ONLY0:       if.end2355:
// SIMD-ONLY0-NEXT:    [[TMP1422:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1422]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1423:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2356:%.*]] = zext i16 [[TMP1423]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1424:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2357:%.*]] = zext i16 [[TMP1424]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2358:%.*]] = icmp eq i32 [[CONV2356]], [[CONV2357]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2358]], label [[IF_THEN2360:%.*]], label [[IF_END2361:%.*]]
// SIMD-ONLY0:       if.then2360:
// SIMD-ONLY0-NEXT:    [[TMP1425:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1425]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2361]]
// SIMD-ONLY0:       if.end2361:
// SIMD-ONLY0-NEXT:    [[TMP1426:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1426]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1427:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2362:%.*]] = zext i16 [[TMP1427]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1428:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2363:%.*]] = zext i16 [[TMP1428]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2364:%.*]] = icmp eq i32 [[CONV2362]], [[CONV2363]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2364]], label [[IF_THEN2366:%.*]], label [[IF_END2367:%.*]]
// SIMD-ONLY0:       if.then2366:
// SIMD-ONLY0-NEXT:    [[TMP1429:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1429]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2367]]
// SIMD-ONLY0:       if.end2367:
// SIMD-ONLY0-NEXT:    [[TMP1430:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2368:%.*]] = zext i16 [[TMP1430]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1431:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2369:%.*]] = zext i16 [[TMP1431]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2370:%.*]] = icmp sgt i32 [[CONV2368]], [[CONV2369]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2370]], label [[IF_THEN2372:%.*]], label [[IF_END2373:%.*]]
// SIMD-ONLY0:       if.then2372:
// SIMD-ONLY0-NEXT:    [[TMP1432:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1432]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2373]]
// SIMD-ONLY0:       if.end2373:
// SIMD-ONLY0-NEXT:    [[TMP1433:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1433]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1434:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2374:%.*]] = zext i16 [[TMP1434]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1435:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2375:%.*]] = zext i16 [[TMP1435]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2376:%.*]] = icmp sgt i32 [[CONV2374]], [[CONV2375]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2376]], label [[IF_THEN2378:%.*]], label [[IF_END2379:%.*]]
// SIMD-ONLY0:       if.then2378:
// SIMD-ONLY0-NEXT:    [[TMP1436:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1436]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2379]]
// SIMD-ONLY0:       if.end2379:
// SIMD-ONLY0-NEXT:    [[TMP1437:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1437]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1438:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2380:%.*]] = zext i16 [[TMP1438]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1439:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2381:%.*]] = zext i16 [[TMP1439]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2382:%.*]] = icmp slt i32 [[CONV2380]], [[CONV2381]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2382]], label [[IF_THEN2384:%.*]], label [[IF_END2385:%.*]]
// SIMD-ONLY0:       if.then2384:
// SIMD-ONLY0-NEXT:    [[TMP1440:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1440]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2385]]
// SIMD-ONLY0:       if.end2385:
// SIMD-ONLY0-NEXT:    [[TMP1441:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1441]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1442:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2386:%.*]] = zext i16 [[TMP1442]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1443:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2387:%.*]] = zext i16 [[TMP1443]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2388:%.*]] = icmp slt i32 [[CONV2386]], [[CONV2387]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2388]], label [[IF_THEN2390:%.*]], label [[IF_END2391:%.*]]
// SIMD-ONLY0:       if.then2390:
// SIMD-ONLY0-NEXT:    [[TMP1444:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1444]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2391]]
// SIMD-ONLY0:       if.end2391:
// SIMD-ONLY0-NEXT:    [[TMP1445:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1445]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1446:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2392:%.*]] = zext i16 [[TMP1446]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1447:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2393:%.*]] = zext i16 [[TMP1447]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2394:%.*]] = icmp eq i32 [[CONV2392]], [[CONV2393]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2394]], label [[IF_THEN2396:%.*]], label [[IF_END2397:%.*]]
// SIMD-ONLY0:       if.then2396:
// SIMD-ONLY0-NEXT:    [[TMP1448:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1448]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2397]]
// SIMD-ONLY0:       if.end2397:
// SIMD-ONLY0-NEXT:    [[TMP1449:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1449]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1450:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2398:%.*]] = zext i16 [[TMP1450]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1451:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2399:%.*]] = zext i16 [[TMP1451]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2400:%.*]] = icmp eq i32 [[CONV2398]], [[CONV2399]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2400]], label [[IF_THEN2402:%.*]], label [[IF_END2403:%.*]]
// SIMD-ONLY0:       if.then2402:
// SIMD-ONLY0-NEXT:    [[TMP1452:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1452]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2403]]
// SIMD-ONLY0:       if.end2403:
// SIMD-ONLY0-NEXT:    [[TMP1453:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1453]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1454:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2404:%.*]] = zext i16 [[TMP1454]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1455:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2405:%.*]] = zext i16 [[TMP1455]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2406:%.*]] = icmp eq i32 [[CONV2404]], [[CONV2405]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2406]], label [[IF_THEN2408:%.*]], label [[IF_ELSE2409:%.*]]
// SIMD-ONLY0:       if.then2408:
// SIMD-ONLY0-NEXT:    [[TMP1456:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1456]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2410:%.*]]
// SIMD-ONLY0:       if.else2409:
// SIMD-ONLY0-NEXT:    [[TMP1457:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1457]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2410]]
// SIMD-ONLY0:       if.end2410:
// SIMD-ONLY0-NEXT:    [[TMP1458:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2411:%.*]] = zext i16 [[TMP1458]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1459:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2412:%.*]] = zext i16 [[TMP1459]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2413:%.*]] = icmp eq i32 [[CONV2411]], [[CONV2412]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2413]], label [[IF_THEN2415:%.*]], label [[IF_ELSE2416:%.*]]
// SIMD-ONLY0:       if.then2415:
// SIMD-ONLY0-NEXT:    [[TMP1460:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1460]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2417:%.*]]
// SIMD-ONLY0:       if.else2416:
// SIMD-ONLY0-NEXT:    [[TMP1461:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1461]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2417]]
// SIMD-ONLY0:       if.end2417:
// SIMD-ONLY0-NEXT:    [[TMP1462:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2418:%.*]] = zext i16 [[TMP1462]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1463:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2419:%.*]] = zext i16 [[TMP1463]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2420:%.*]] = icmp eq i32 [[CONV2418]], [[CONV2419]]
// SIMD-ONLY0-NEXT:    [[CONV2421:%.*]] = zext i1 [[CMP2420]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2422:%.*]] = trunc i32 [[CONV2421]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2422]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1464:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2423:%.*]] = icmp ne i16 [[TMP1464]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2423]], label [[IF_THEN2424:%.*]], label [[IF_END2425:%.*]]
// SIMD-ONLY0:       if.then2424:
// SIMD-ONLY0-NEXT:    [[TMP1465:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1465]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2425]]
// SIMD-ONLY0:       if.end2425:
// SIMD-ONLY0-NEXT:    [[TMP1466:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2426:%.*]] = zext i16 [[TMP1466]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1467:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2427:%.*]] = zext i16 [[TMP1467]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2428:%.*]] = icmp eq i32 [[CONV2426]], [[CONV2427]]
// SIMD-ONLY0-NEXT:    [[CONV2429:%.*]] = zext i1 [[CMP2428]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2430:%.*]] = trunc i32 [[CONV2429]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2430]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1468:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2431:%.*]] = icmp ne i16 [[TMP1468]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2431]], label [[IF_THEN2432:%.*]], label [[IF_END2433:%.*]]
// SIMD-ONLY0:       if.then2432:
// SIMD-ONLY0-NEXT:    [[TMP1469:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1469]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2433]]
// SIMD-ONLY0:       if.end2433:
// SIMD-ONLY0-NEXT:    [[TMP1470:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2434:%.*]] = zext i16 [[TMP1470]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1471:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2435:%.*]] = zext i16 [[TMP1471]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2436:%.*]] = icmp eq i32 [[CONV2434]], [[CONV2435]]
// SIMD-ONLY0-NEXT:    [[CONV2437:%.*]] = zext i1 [[CMP2436]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2438:%.*]] = trunc i32 [[CONV2437]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2438]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1472:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2439:%.*]] = icmp ne i16 [[TMP1472]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2439]], label [[IF_THEN2440:%.*]], label [[IF_ELSE2441:%.*]]
// SIMD-ONLY0:       if.then2440:
// SIMD-ONLY0-NEXT:    [[TMP1473:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1473]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2442:%.*]]
// SIMD-ONLY0:       if.else2441:
// SIMD-ONLY0-NEXT:    [[TMP1474:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1474]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2442]]
// SIMD-ONLY0:       if.end2442:
// SIMD-ONLY0-NEXT:    [[TMP1475:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2443:%.*]] = zext i16 [[TMP1475]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1476:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2444:%.*]] = zext i16 [[TMP1476]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2445:%.*]] = icmp eq i32 [[CONV2443]], [[CONV2444]]
// SIMD-ONLY0-NEXT:    [[CONV2446:%.*]] = zext i1 [[CMP2445]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2447:%.*]] = trunc i32 [[CONV2446]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2447]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1477:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2448:%.*]] = icmp ne i16 [[TMP1477]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2448]], label [[IF_THEN2449:%.*]], label [[IF_ELSE2450:%.*]]
// SIMD-ONLY0:       if.then2449:
// SIMD-ONLY0-NEXT:    [[TMP1478:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1478]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2451:%.*]]
// SIMD-ONLY0:       if.else2450:
// SIMD-ONLY0-NEXT:    [[TMP1479:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1479]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2451]]
// SIMD-ONLY0:       if.end2451:
// SIMD-ONLY0-NEXT:    [[TMP1480:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1480]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1481:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2452:%.*]] = zext i16 [[TMP1481]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1482:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2453:%.*]] = zext i16 [[TMP1482]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2454:%.*]] = icmp sgt i32 [[CONV2452]], [[CONV2453]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2454]], label [[IF_THEN2456:%.*]], label [[IF_END2457:%.*]]
// SIMD-ONLY0:       if.then2456:
// SIMD-ONLY0-NEXT:    [[TMP1483:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1483]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2457]]
// SIMD-ONLY0:       if.end2457:
// SIMD-ONLY0-NEXT:    [[TMP1484:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1484]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1485:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2458:%.*]] = zext i16 [[TMP1485]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1486:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2459:%.*]] = zext i16 [[TMP1486]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2460:%.*]] = icmp sgt i32 [[CONV2458]], [[CONV2459]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2460]], label [[IF_THEN2462:%.*]], label [[IF_END2463:%.*]]
// SIMD-ONLY0:       if.then2462:
// SIMD-ONLY0-NEXT:    [[TMP1487:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1487]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2463]]
// SIMD-ONLY0:       if.end2463:
// SIMD-ONLY0-NEXT:    [[TMP1488:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1488]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1489:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2464:%.*]] = zext i16 [[TMP1489]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1490:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2465:%.*]] = zext i16 [[TMP1490]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2466:%.*]] = icmp slt i32 [[CONV2464]], [[CONV2465]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2466]], label [[IF_THEN2468:%.*]], label [[IF_END2469:%.*]]
// SIMD-ONLY0:       if.then2468:
// SIMD-ONLY0-NEXT:    [[TMP1491:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1491]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2469]]
// SIMD-ONLY0:       if.end2469:
// SIMD-ONLY0-NEXT:    [[TMP1492:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1492]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1493:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2470:%.*]] = zext i16 [[TMP1493]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1494:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2471:%.*]] = zext i16 [[TMP1494]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2472:%.*]] = icmp slt i32 [[CONV2470]], [[CONV2471]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2472]], label [[IF_THEN2474:%.*]], label [[IF_END2475:%.*]]
// SIMD-ONLY0:       if.then2474:
// SIMD-ONLY0-NEXT:    [[TMP1495:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1495]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2475]]
// SIMD-ONLY0:       if.end2475:
// SIMD-ONLY0-NEXT:    [[TMP1496:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1496]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1497:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2476:%.*]] = zext i16 [[TMP1497]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1498:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2477:%.*]] = zext i16 [[TMP1498]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2478:%.*]] = icmp eq i32 [[CONV2476]], [[CONV2477]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2478]], label [[IF_THEN2480:%.*]], label [[IF_END2481:%.*]]
// SIMD-ONLY0:       if.then2480:
// SIMD-ONLY0-NEXT:    [[TMP1499:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1499]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2481]]
// SIMD-ONLY0:       if.end2481:
// SIMD-ONLY0-NEXT:    [[TMP1500:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1500]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1501:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2482:%.*]] = zext i16 [[TMP1501]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1502:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2483:%.*]] = zext i16 [[TMP1502]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2484:%.*]] = icmp eq i32 [[CONV2482]], [[CONV2483]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2484]], label [[IF_THEN2486:%.*]], label [[IF_END2487:%.*]]
// SIMD-ONLY0:       if.then2486:
// SIMD-ONLY0-NEXT:    [[TMP1503:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1503]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2487]]
// SIMD-ONLY0:       if.end2487:
// SIMD-ONLY0-NEXT:    [[TMP1504:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2488:%.*]] = zext i16 [[TMP1504]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1505:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2489:%.*]] = zext i16 [[TMP1505]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2490:%.*]] = icmp sgt i32 [[CONV2488]], [[CONV2489]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2490]], label [[IF_THEN2492:%.*]], label [[IF_END2493:%.*]]
// SIMD-ONLY0:       if.then2492:
// SIMD-ONLY0-NEXT:    [[TMP1506:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1506]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2493]]
// SIMD-ONLY0:       if.end2493:
// SIMD-ONLY0-NEXT:    [[TMP1507:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1507]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1508:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2494:%.*]] = zext i16 [[TMP1508]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1509:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2495:%.*]] = zext i16 [[TMP1509]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2496:%.*]] = icmp sgt i32 [[CONV2494]], [[CONV2495]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2496]], label [[IF_THEN2498:%.*]], label [[IF_END2499:%.*]]
// SIMD-ONLY0:       if.then2498:
// SIMD-ONLY0-NEXT:    [[TMP1510:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1510]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2499]]
// SIMD-ONLY0:       if.end2499:
// SIMD-ONLY0-NEXT:    [[TMP1511:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1511]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1512:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2500:%.*]] = zext i16 [[TMP1512]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1513:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2501:%.*]] = zext i16 [[TMP1513]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2502:%.*]] = icmp slt i32 [[CONV2500]], [[CONV2501]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2502]], label [[IF_THEN2504:%.*]], label [[IF_END2505:%.*]]
// SIMD-ONLY0:       if.then2504:
// SIMD-ONLY0-NEXT:    [[TMP1514:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1514]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2505]]
// SIMD-ONLY0:       if.end2505:
// SIMD-ONLY0-NEXT:    [[TMP1515:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1515]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1516:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2506:%.*]] = zext i16 [[TMP1516]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1517:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2507:%.*]] = zext i16 [[TMP1517]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2508:%.*]] = icmp slt i32 [[CONV2506]], [[CONV2507]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2508]], label [[IF_THEN2510:%.*]], label [[IF_END2511:%.*]]
// SIMD-ONLY0:       if.then2510:
// SIMD-ONLY0-NEXT:    [[TMP1518:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1518]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2511]]
// SIMD-ONLY0:       if.end2511:
// SIMD-ONLY0-NEXT:    [[TMP1519:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1519]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1520:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2512:%.*]] = zext i16 [[TMP1520]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1521:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2513:%.*]] = zext i16 [[TMP1521]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2514:%.*]] = icmp eq i32 [[CONV2512]], [[CONV2513]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2514]], label [[IF_THEN2516:%.*]], label [[IF_END2517:%.*]]
// SIMD-ONLY0:       if.then2516:
// SIMD-ONLY0-NEXT:    [[TMP1522:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1522]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2517]]
// SIMD-ONLY0:       if.end2517:
// SIMD-ONLY0-NEXT:    [[TMP1523:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1523]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1524:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2518:%.*]] = zext i16 [[TMP1524]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1525:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2519:%.*]] = zext i16 [[TMP1525]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2520:%.*]] = icmp eq i32 [[CONV2518]], [[CONV2519]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2520]], label [[IF_THEN2522:%.*]], label [[IF_END2523:%.*]]
// SIMD-ONLY0:       if.then2522:
// SIMD-ONLY0-NEXT:    [[TMP1526:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1526]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2523]]
// SIMD-ONLY0:       if.end2523:
// SIMD-ONLY0-NEXT:    [[TMP1527:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1527]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1528:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2524:%.*]] = zext i16 [[TMP1528]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1529:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2525:%.*]] = zext i16 [[TMP1529]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2526:%.*]] = icmp eq i32 [[CONV2524]], [[CONV2525]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2526]], label [[IF_THEN2528:%.*]], label [[IF_ELSE2529:%.*]]
// SIMD-ONLY0:       if.then2528:
// SIMD-ONLY0-NEXT:    [[TMP1530:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1530]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2530:%.*]]
// SIMD-ONLY0:       if.else2529:
// SIMD-ONLY0-NEXT:    [[TMP1531:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1531]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2530]]
// SIMD-ONLY0:       if.end2530:
// SIMD-ONLY0-NEXT:    [[TMP1532:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2531:%.*]] = zext i16 [[TMP1532]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1533:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2532:%.*]] = zext i16 [[TMP1533]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2533:%.*]] = icmp eq i32 [[CONV2531]], [[CONV2532]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2533]], label [[IF_THEN2535:%.*]], label [[IF_ELSE2536:%.*]]
// SIMD-ONLY0:       if.then2535:
// SIMD-ONLY0-NEXT:    [[TMP1534:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1534]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2537:%.*]]
// SIMD-ONLY0:       if.else2536:
// SIMD-ONLY0-NEXT:    [[TMP1535:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1535]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2537]]
// SIMD-ONLY0:       if.end2537:
// SIMD-ONLY0-NEXT:    [[TMP1536:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2538:%.*]] = zext i16 [[TMP1536]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1537:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2539:%.*]] = zext i16 [[TMP1537]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2540:%.*]] = icmp eq i32 [[CONV2538]], [[CONV2539]]
// SIMD-ONLY0-NEXT:    [[CONV2541:%.*]] = zext i1 [[CMP2540]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2542:%.*]] = trunc i32 [[CONV2541]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2542]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1538:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2543:%.*]] = icmp ne i16 [[TMP1538]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2543]], label [[IF_THEN2544:%.*]], label [[IF_END2545:%.*]]
// SIMD-ONLY0:       if.then2544:
// SIMD-ONLY0-NEXT:    [[TMP1539:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1539]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2545]]
// SIMD-ONLY0:       if.end2545:
// SIMD-ONLY0-NEXT:    [[TMP1540:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2546:%.*]] = zext i16 [[TMP1540]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1541:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2547:%.*]] = zext i16 [[TMP1541]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2548:%.*]] = icmp eq i32 [[CONV2546]], [[CONV2547]]
// SIMD-ONLY0-NEXT:    [[CONV2549:%.*]] = zext i1 [[CMP2548]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2550:%.*]] = trunc i32 [[CONV2549]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2550]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1542:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2551:%.*]] = icmp ne i16 [[TMP1542]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2551]], label [[IF_THEN2552:%.*]], label [[IF_END2553:%.*]]
// SIMD-ONLY0:       if.then2552:
// SIMD-ONLY0-NEXT:    [[TMP1543:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1543]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2553]]
// SIMD-ONLY0:       if.end2553:
// SIMD-ONLY0-NEXT:    [[TMP1544:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2554:%.*]] = zext i16 [[TMP1544]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1545:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2555:%.*]] = zext i16 [[TMP1545]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2556:%.*]] = icmp eq i32 [[CONV2554]], [[CONV2555]]
// SIMD-ONLY0-NEXT:    [[CONV2557:%.*]] = zext i1 [[CMP2556]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2558:%.*]] = trunc i32 [[CONV2557]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2558]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1546:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2559:%.*]] = icmp ne i16 [[TMP1546]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2559]], label [[IF_THEN2560:%.*]], label [[IF_ELSE2561:%.*]]
// SIMD-ONLY0:       if.then2560:
// SIMD-ONLY0-NEXT:    [[TMP1547:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1547]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2562:%.*]]
// SIMD-ONLY0:       if.else2561:
// SIMD-ONLY0-NEXT:    [[TMP1548:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1548]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2562]]
// SIMD-ONLY0:       if.end2562:
// SIMD-ONLY0-NEXT:    [[TMP1549:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2563:%.*]] = zext i16 [[TMP1549]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1550:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2564:%.*]] = zext i16 [[TMP1550]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2565:%.*]] = icmp eq i32 [[CONV2563]], [[CONV2564]]
// SIMD-ONLY0-NEXT:    [[CONV2566:%.*]] = zext i1 [[CMP2565]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2567:%.*]] = trunc i32 [[CONV2566]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2567]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1551:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2568:%.*]] = icmp ne i16 [[TMP1551]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2568]], label [[IF_THEN2569:%.*]], label [[IF_ELSE2570:%.*]]
// SIMD-ONLY0:       if.then2569:
// SIMD-ONLY0-NEXT:    [[TMP1552:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1552]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2571:%.*]]
// SIMD-ONLY0:       if.else2570:
// SIMD-ONLY0-NEXT:    [[TMP1553:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1553]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2571]]
// SIMD-ONLY0:       if.end2571:
// SIMD-ONLY0-NEXT:    [[TMP1554:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1554]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1555:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2572:%.*]] = zext i16 [[TMP1555]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1556:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2573:%.*]] = zext i16 [[TMP1556]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2574:%.*]] = icmp sgt i32 [[CONV2572]], [[CONV2573]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2574]], label [[IF_THEN2576:%.*]], label [[IF_END2577:%.*]]
// SIMD-ONLY0:       if.then2576:
// SIMD-ONLY0-NEXT:    [[TMP1557:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1557]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2577]]
// SIMD-ONLY0:       if.end2577:
// SIMD-ONLY0-NEXT:    [[TMP1558:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1558]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1559:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2578:%.*]] = zext i16 [[TMP1559]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1560:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2579:%.*]] = zext i16 [[TMP1560]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2580:%.*]] = icmp sgt i32 [[CONV2578]], [[CONV2579]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2580]], label [[IF_THEN2582:%.*]], label [[IF_END2583:%.*]]
// SIMD-ONLY0:       if.then2582:
// SIMD-ONLY0-NEXT:    [[TMP1561:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1561]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2583]]
// SIMD-ONLY0:       if.end2583:
// SIMD-ONLY0-NEXT:    [[TMP1562:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1562]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1563:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2584:%.*]] = zext i16 [[TMP1563]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1564:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2585:%.*]] = zext i16 [[TMP1564]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2586:%.*]] = icmp slt i32 [[CONV2584]], [[CONV2585]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2586]], label [[IF_THEN2588:%.*]], label [[IF_END2589:%.*]]
// SIMD-ONLY0:       if.then2588:
// SIMD-ONLY0-NEXT:    [[TMP1565:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1565]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2589]]
// SIMD-ONLY0:       if.end2589:
// SIMD-ONLY0-NEXT:    [[TMP1566:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1566]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1567:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2590:%.*]] = zext i16 [[TMP1567]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1568:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2591:%.*]] = zext i16 [[TMP1568]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2592:%.*]] = icmp slt i32 [[CONV2590]], [[CONV2591]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2592]], label [[IF_THEN2594:%.*]], label [[IF_END2595:%.*]]
// SIMD-ONLY0:       if.then2594:
// SIMD-ONLY0-NEXT:    [[TMP1569:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1569]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2595]]
// SIMD-ONLY0:       if.end2595:
// SIMD-ONLY0-NEXT:    [[TMP1570:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1570]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1571:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2596:%.*]] = zext i16 [[TMP1571]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1572:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2597:%.*]] = zext i16 [[TMP1572]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2598:%.*]] = icmp eq i32 [[CONV2596]], [[CONV2597]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2598]], label [[IF_THEN2600:%.*]], label [[IF_END2601:%.*]]
// SIMD-ONLY0:       if.then2600:
// SIMD-ONLY0-NEXT:    [[TMP1573:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1573]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2601]]
// SIMD-ONLY0:       if.end2601:
// SIMD-ONLY0-NEXT:    [[TMP1574:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1574]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1575:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2602:%.*]] = zext i16 [[TMP1575]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1576:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2603:%.*]] = zext i16 [[TMP1576]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2604:%.*]] = icmp eq i32 [[CONV2602]], [[CONV2603]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2604]], label [[IF_THEN2606:%.*]], label [[IF_END2607:%.*]]
// SIMD-ONLY0:       if.then2606:
// SIMD-ONLY0-NEXT:    [[TMP1577:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1577]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2607]]
// SIMD-ONLY0:       if.end2607:
// SIMD-ONLY0-NEXT:    [[TMP1578:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2608:%.*]] = zext i16 [[TMP1578]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1579:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2609:%.*]] = zext i16 [[TMP1579]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2610:%.*]] = icmp sgt i32 [[CONV2608]], [[CONV2609]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2610]], label [[IF_THEN2612:%.*]], label [[IF_END2613:%.*]]
// SIMD-ONLY0:       if.then2612:
// SIMD-ONLY0-NEXT:    [[TMP1580:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1580]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2613]]
// SIMD-ONLY0:       if.end2613:
// SIMD-ONLY0-NEXT:    [[TMP1581:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1581]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1582:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2614:%.*]] = zext i16 [[TMP1582]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1583:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2615:%.*]] = zext i16 [[TMP1583]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2616:%.*]] = icmp sgt i32 [[CONV2614]], [[CONV2615]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2616]], label [[IF_THEN2618:%.*]], label [[IF_END2619:%.*]]
// SIMD-ONLY0:       if.then2618:
// SIMD-ONLY0-NEXT:    [[TMP1584:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1584]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2619]]
// SIMD-ONLY0:       if.end2619:
// SIMD-ONLY0-NEXT:    [[TMP1585:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1585]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1586:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2620:%.*]] = zext i16 [[TMP1586]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1587:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2621:%.*]] = zext i16 [[TMP1587]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2622:%.*]] = icmp slt i32 [[CONV2620]], [[CONV2621]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2622]], label [[IF_THEN2624:%.*]], label [[IF_END2625:%.*]]
// SIMD-ONLY0:       if.then2624:
// SIMD-ONLY0-NEXT:    [[TMP1588:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1588]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2625]]
// SIMD-ONLY0:       if.end2625:
// SIMD-ONLY0-NEXT:    [[TMP1589:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1589]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1590:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2626:%.*]] = zext i16 [[TMP1590]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1591:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2627:%.*]] = zext i16 [[TMP1591]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2628:%.*]] = icmp slt i32 [[CONV2626]], [[CONV2627]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2628]], label [[IF_THEN2630:%.*]], label [[IF_END2631:%.*]]
// SIMD-ONLY0:       if.then2630:
// SIMD-ONLY0-NEXT:    [[TMP1592:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1592]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2631]]
// SIMD-ONLY0:       if.end2631:
// SIMD-ONLY0-NEXT:    [[TMP1593:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1593]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1594:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2632:%.*]] = zext i16 [[TMP1594]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1595:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2633:%.*]] = zext i16 [[TMP1595]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2634:%.*]] = icmp eq i32 [[CONV2632]], [[CONV2633]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2634]], label [[IF_THEN2636:%.*]], label [[IF_END2637:%.*]]
// SIMD-ONLY0:       if.then2636:
// SIMD-ONLY0-NEXT:    [[TMP1596:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1596]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2637]]
// SIMD-ONLY0:       if.end2637:
// SIMD-ONLY0-NEXT:    [[TMP1597:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1597]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1598:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2638:%.*]] = zext i16 [[TMP1598]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1599:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2639:%.*]] = zext i16 [[TMP1599]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2640:%.*]] = icmp eq i32 [[CONV2638]], [[CONV2639]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2640]], label [[IF_THEN2642:%.*]], label [[IF_END2643:%.*]]
// SIMD-ONLY0:       if.then2642:
// SIMD-ONLY0-NEXT:    [[TMP1600:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1600]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2643]]
// SIMD-ONLY0:       if.end2643:
// SIMD-ONLY0-NEXT:    [[TMP1601:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1601]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1602:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2644:%.*]] = zext i16 [[TMP1602]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1603:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2645:%.*]] = zext i16 [[TMP1603]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2646:%.*]] = icmp eq i32 [[CONV2644]], [[CONV2645]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2646]], label [[IF_THEN2648:%.*]], label [[IF_ELSE2649:%.*]]
// SIMD-ONLY0:       if.then2648:
// SIMD-ONLY0-NEXT:    [[TMP1604:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1604]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2650:%.*]]
// SIMD-ONLY0:       if.else2649:
// SIMD-ONLY0-NEXT:    [[TMP1605:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1605]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2650]]
// SIMD-ONLY0:       if.end2650:
// SIMD-ONLY0-NEXT:    [[TMP1606:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2651:%.*]] = zext i16 [[TMP1606]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1607:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2652:%.*]] = zext i16 [[TMP1607]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2653:%.*]] = icmp eq i32 [[CONV2651]], [[CONV2652]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2653]], label [[IF_THEN2655:%.*]], label [[IF_ELSE2656:%.*]]
// SIMD-ONLY0:       if.then2655:
// SIMD-ONLY0-NEXT:    [[TMP1608:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1608]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2657:%.*]]
// SIMD-ONLY0:       if.else2656:
// SIMD-ONLY0-NEXT:    [[TMP1609:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1609]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2657]]
// SIMD-ONLY0:       if.end2657:
// SIMD-ONLY0-NEXT:    [[TMP1610:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2658:%.*]] = zext i16 [[TMP1610]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1611:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2659:%.*]] = zext i16 [[TMP1611]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2660:%.*]] = icmp eq i32 [[CONV2658]], [[CONV2659]]
// SIMD-ONLY0-NEXT:    [[CONV2661:%.*]] = zext i1 [[CMP2660]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2662:%.*]] = trunc i32 [[CONV2661]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2662]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1612:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2663:%.*]] = icmp ne i16 [[TMP1612]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2663]], label [[IF_THEN2664:%.*]], label [[IF_END2665:%.*]]
// SIMD-ONLY0:       if.then2664:
// SIMD-ONLY0-NEXT:    [[TMP1613:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1613]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2665]]
// SIMD-ONLY0:       if.end2665:
// SIMD-ONLY0-NEXT:    [[TMP1614:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2666:%.*]] = zext i16 [[TMP1614]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1615:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2667:%.*]] = zext i16 [[TMP1615]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2668:%.*]] = icmp eq i32 [[CONV2666]], [[CONV2667]]
// SIMD-ONLY0-NEXT:    [[CONV2669:%.*]] = zext i1 [[CMP2668]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2670:%.*]] = trunc i32 [[CONV2669]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2670]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1616:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2671:%.*]] = icmp ne i16 [[TMP1616]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2671]], label [[IF_THEN2672:%.*]], label [[IF_END2673:%.*]]
// SIMD-ONLY0:       if.then2672:
// SIMD-ONLY0-NEXT:    [[TMP1617:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1617]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2673]]
// SIMD-ONLY0:       if.end2673:
// SIMD-ONLY0-NEXT:    [[TMP1618:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2674:%.*]] = zext i16 [[TMP1618]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1619:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2675:%.*]] = zext i16 [[TMP1619]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2676:%.*]] = icmp eq i32 [[CONV2674]], [[CONV2675]]
// SIMD-ONLY0-NEXT:    [[CONV2677:%.*]] = zext i1 [[CMP2676]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2678:%.*]] = trunc i32 [[CONV2677]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2678]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1620:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2679:%.*]] = icmp ne i16 [[TMP1620]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2679]], label [[IF_THEN2680:%.*]], label [[IF_ELSE2681:%.*]]
// SIMD-ONLY0:       if.then2680:
// SIMD-ONLY0-NEXT:    [[TMP1621:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1621]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2682:%.*]]
// SIMD-ONLY0:       if.else2681:
// SIMD-ONLY0-NEXT:    [[TMP1622:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1622]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2682]]
// SIMD-ONLY0:       if.end2682:
// SIMD-ONLY0-NEXT:    [[TMP1623:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2683:%.*]] = zext i16 [[TMP1623]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1624:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2684:%.*]] = zext i16 [[TMP1624]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2685:%.*]] = icmp eq i32 [[CONV2683]], [[CONV2684]]
// SIMD-ONLY0-NEXT:    [[CONV2686:%.*]] = zext i1 [[CMP2685]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2687:%.*]] = trunc i32 [[CONV2686]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2687]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1625:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2688:%.*]] = icmp ne i16 [[TMP1625]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2688]], label [[IF_THEN2689:%.*]], label [[IF_ELSE2690:%.*]]
// SIMD-ONLY0:       if.then2689:
// SIMD-ONLY0-NEXT:    [[TMP1626:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1626]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2691:%.*]]
// SIMD-ONLY0:       if.else2690:
// SIMD-ONLY0-NEXT:    [[TMP1627:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1627]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2691]]
// SIMD-ONLY0:       if.end2691:
// SIMD-ONLY0-NEXT:    [[TMP1628:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1628]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1629:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2692:%.*]] = zext i16 [[TMP1629]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1630:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2693:%.*]] = zext i16 [[TMP1630]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2694:%.*]] = icmp sgt i32 [[CONV2692]], [[CONV2693]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2694]], label [[IF_THEN2696:%.*]], label [[IF_END2697:%.*]]
// SIMD-ONLY0:       if.then2696:
// SIMD-ONLY0-NEXT:    [[TMP1631:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1631]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2697]]
// SIMD-ONLY0:       if.end2697:
// SIMD-ONLY0-NEXT:    [[TMP1632:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1632]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1633:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2698:%.*]] = zext i16 [[TMP1633]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1634:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2699:%.*]] = zext i16 [[TMP1634]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2700:%.*]] = icmp sgt i32 [[CONV2698]], [[CONV2699]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2700]], label [[IF_THEN2702:%.*]], label [[IF_END2703:%.*]]
// SIMD-ONLY0:       if.then2702:
// SIMD-ONLY0-NEXT:    [[TMP1635:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1635]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2703]]
// SIMD-ONLY0:       if.end2703:
// SIMD-ONLY0-NEXT:    [[TMP1636:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1636]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1637:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2704:%.*]] = zext i16 [[TMP1637]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1638:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2705:%.*]] = zext i16 [[TMP1638]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2706:%.*]] = icmp slt i32 [[CONV2704]], [[CONV2705]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2706]], label [[IF_THEN2708:%.*]], label [[IF_END2709:%.*]]
// SIMD-ONLY0:       if.then2708:
// SIMD-ONLY0-NEXT:    [[TMP1639:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1639]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2709]]
// SIMD-ONLY0:       if.end2709:
// SIMD-ONLY0-NEXT:    [[TMP1640:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1640]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1641:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2710:%.*]] = zext i16 [[TMP1641]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1642:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2711:%.*]] = zext i16 [[TMP1642]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2712:%.*]] = icmp slt i32 [[CONV2710]], [[CONV2711]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2712]], label [[IF_THEN2714:%.*]], label [[IF_END2715:%.*]]
// SIMD-ONLY0:       if.then2714:
// SIMD-ONLY0-NEXT:    [[TMP1643:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1643]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2715]]
// SIMD-ONLY0:       if.end2715:
// SIMD-ONLY0-NEXT:    [[TMP1644:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1644]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1645:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2716:%.*]] = zext i16 [[TMP1645]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1646:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2717:%.*]] = zext i16 [[TMP1646]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2718:%.*]] = icmp eq i32 [[CONV2716]], [[CONV2717]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2718]], label [[IF_THEN2720:%.*]], label [[IF_END2721:%.*]]
// SIMD-ONLY0:       if.then2720:
// SIMD-ONLY0-NEXT:    [[TMP1647:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1647]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2721]]
// SIMD-ONLY0:       if.end2721:
// SIMD-ONLY0-NEXT:    [[TMP1648:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1648]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1649:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2722:%.*]] = zext i16 [[TMP1649]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1650:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2723:%.*]] = zext i16 [[TMP1650]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2724:%.*]] = icmp eq i32 [[CONV2722]], [[CONV2723]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2724]], label [[IF_THEN2726:%.*]], label [[IF_END2727:%.*]]
// SIMD-ONLY0:       if.then2726:
// SIMD-ONLY0-NEXT:    [[TMP1651:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1651]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2727]]
// SIMD-ONLY0:       if.end2727:
// SIMD-ONLY0-NEXT:    [[TMP1652:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2728:%.*]] = zext i16 [[TMP1652]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1653:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2729:%.*]] = zext i16 [[TMP1653]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2730:%.*]] = icmp sgt i32 [[CONV2728]], [[CONV2729]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2730]], label [[IF_THEN2732:%.*]], label [[IF_END2733:%.*]]
// SIMD-ONLY0:       if.then2732:
// SIMD-ONLY0-NEXT:    [[TMP1654:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1654]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2733]]
// SIMD-ONLY0:       if.end2733:
// SIMD-ONLY0-NEXT:    [[TMP1655:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1655]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1656:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2734:%.*]] = zext i16 [[TMP1656]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1657:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2735:%.*]] = zext i16 [[TMP1657]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2736:%.*]] = icmp sgt i32 [[CONV2734]], [[CONV2735]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2736]], label [[IF_THEN2738:%.*]], label [[IF_END2739:%.*]]
// SIMD-ONLY0:       if.then2738:
// SIMD-ONLY0-NEXT:    [[TMP1658:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1658]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2739]]
// SIMD-ONLY0:       if.end2739:
// SIMD-ONLY0-NEXT:    [[TMP1659:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1659]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1660:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2740:%.*]] = zext i16 [[TMP1660]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1661:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2741:%.*]] = zext i16 [[TMP1661]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2742:%.*]] = icmp slt i32 [[CONV2740]], [[CONV2741]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2742]], label [[IF_THEN2744:%.*]], label [[IF_END2745:%.*]]
// SIMD-ONLY0:       if.then2744:
// SIMD-ONLY0-NEXT:    [[TMP1662:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1662]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2745]]
// SIMD-ONLY0:       if.end2745:
// SIMD-ONLY0-NEXT:    [[TMP1663:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1663]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1664:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2746:%.*]] = zext i16 [[TMP1664]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1665:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2747:%.*]] = zext i16 [[TMP1665]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2748:%.*]] = icmp slt i32 [[CONV2746]], [[CONV2747]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2748]], label [[IF_THEN2750:%.*]], label [[IF_END2751:%.*]]
// SIMD-ONLY0:       if.then2750:
// SIMD-ONLY0-NEXT:    [[TMP1666:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1666]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2751]]
// SIMD-ONLY0:       if.end2751:
// SIMD-ONLY0-NEXT:    [[TMP1667:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1667]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1668:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2752:%.*]] = zext i16 [[TMP1668]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1669:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2753:%.*]] = zext i16 [[TMP1669]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2754:%.*]] = icmp eq i32 [[CONV2752]], [[CONV2753]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2754]], label [[IF_THEN2756:%.*]], label [[IF_END2757:%.*]]
// SIMD-ONLY0:       if.then2756:
// SIMD-ONLY0-NEXT:    [[TMP1670:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1670]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2757]]
// SIMD-ONLY0:       if.end2757:
// SIMD-ONLY0-NEXT:    [[TMP1671:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1671]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1672:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2758:%.*]] = zext i16 [[TMP1672]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1673:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2759:%.*]] = zext i16 [[TMP1673]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2760:%.*]] = icmp eq i32 [[CONV2758]], [[CONV2759]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2760]], label [[IF_THEN2762:%.*]], label [[IF_END2763:%.*]]
// SIMD-ONLY0:       if.then2762:
// SIMD-ONLY0-NEXT:    [[TMP1674:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1674]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2763]]
// SIMD-ONLY0:       if.end2763:
// SIMD-ONLY0-NEXT:    [[TMP1675:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1675]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1676:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2764:%.*]] = zext i16 [[TMP1676]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1677:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2765:%.*]] = zext i16 [[TMP1677]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2766:%.*]] = icmp eq i32 [[CONV2764]], [[CONV2765]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2766]], label [[IF_THEN2768:%.*]], label [[IF_ELSE2769:%.*]]
// SIMD-ONLY0:       if.then2768:
// SIMD-ONLY0-NEXT:    [[TMP1678:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1678]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2770:%.*]]
// SIMD-ONLY0:       if.else2769:
// SIMD-ONLY0-NEXT:    [[TMP1679:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1679]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2770]]
// SIMD-ONLY0:       if.end2770:
// SIMD-ONLY0-NEXT:    [[TMP1680:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2771:%.*]] = zext i16 [[TMP1680]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1681:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2772:%.*]] = zext i16 [[TMP1681]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2773:%.*]] = icmp eq i32 [[CONV2771]], [[CONV2772]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2773]], label [[IF_THEN2775:%.*]], label [[IF_ELSE2776:%.*]]
// SIMD-ONLY0:       if.then2775:
// SIMD-ONLY0-NEXT:    [[TMP1682:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1682]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2777:%.*]]
// SIMD-ONLY0:       if.else2776:
// SIMD-ONLY0-NEXT:    [[TMP1683:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1683]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2777]]
// SIMD-ONLY0:       if.end2777:
// SIMD-ONLY0-NEXT:    [[TMP1684:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2778:%.*]] = zext i16 [[TMP1684]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1685:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2779:%.*]] = zext i16 [[TMP1685]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2780:%.*]] = icmp eq i32 [[CONV2778]], [[CONV2779]]
// SIMD-ONLY0-NEXT:    [[CONV2781:%.*]] = zext i1 [[CMP2780]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2782:%.*]] = trunc i32 [[CONV2781]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2782]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1686:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2783:%.*]] = icmp ne i16 [[TMP1686]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2783]], label [[IF_THEN2784:%.*]], label [[IF_END2785:%.*]]
// SIMD-ONLY0:       if.then2784:
// SIMD-ONLY0-NEXT:    [[TMP1687:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1687]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2785]]
// SIMD-ONLY0:       if.end2785:
// SIMD-ONLY0-NEXT:    [[TMP1688:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2786:%.*]] = zext i16 [[TMP1688]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1689:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2787:%.*]] = zext i16 [[TMP1689]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2788:%.*]] = icmp eq i32 [[CONV2786]], [[CONV2787]]
// SIMD-ONLY0-NEXT:    [[CONV2789:%.*]] = zext i1 [[CMP2788]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2790:%.*]] = trunc i32 [[CONV2789]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2790]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1690:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2791:%.*]] = icmp ne i16 [[TMP1690]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2791]], label [[IF_THEN2792:%.*]], label [[IF_END2793:%.*]]
// SIMD-ONLY0:       if.then2792:
// SIMD-ONLY0-NEXT:    [[TMP1691:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1691]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2793]]
// SIMD-ONLY0:       if.end2793:
// SIMD-ONLY0-NEXT:    [[TMP1692:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2794:%.*]] = zext i16 [[TMP1692]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1693:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2795:%.*]] = zext i16 [[TMP1693]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2796:%.*]] = icmp eq i32 [[CONV2794]], [[CONV2795]]
// SIMD-ONLY0-NEXT:    [[CONV2797:%.*]] = zext i1 [[CMP2796]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2798:%.*]] = trunc i32 [[CONV2797]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2798]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1694:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2799:%.*]] = icmp ne i16 [[TMP1694]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2799]], label [[IF_THEN2800:%.*]], label [[IF_ELSE2801:%.*]]
// SIMD-ONLY0:       if.then2800:
// SIMD-ONLY0-NEXT:    [[TMP1695:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1695]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2802:%.*]]
// SIMD-ONLY0:       if.else2801:
// SIMD-ONLY0-NEXT:    [[TMP1696:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1696]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2802]]
// SIMD-ONLY0:       if.end2802:
// SIMD-ONLY0-NEXT:    [[TMP1697:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2803:%.*]] = zext i16 [[TMP1697]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1698:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2804:%.*]] = zext i16 [[TMP1698]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2805:%.*]] = icmp eq i32 [[CONV2803]], [[CONV2804]]
// SIMD-ONLY0-NEXT:    [[CONV2806:%.*]] = zext i1 [[CMP2805]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2807:%.*]] = trunc i32 [[CONV2806]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2807]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1699:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2808:%.*]] = icmp ne i16 [[TMP1699]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2808]], label [[IF_THEN2809:%.*]], label [[IF_ELSE2810:%.*]]
// SIMD-ONLY0:       if.then2809:
// SIMD-ONLY0-NEXT:    [[TMP1700:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1700]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2811:%.*]]
// SIMD-ONLY0:       if.else2810:
// SIMD-ONLY0-NEXT:    [[TMP1701:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1701]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2811]]
// SIMD-ONLY0:       if.end2811:
// SIMD-ONLY0-NEXT:    [[TMP1702:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1702]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1703:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2812:%.*]] = zext i16 [[TMP1703]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1704:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2813:%.*]] = zext i16 [[TMP1704]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2814:%.*]] = icmp sgt i32 [[CONV2812]], [[CONV2813]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2814]], label [[IF_THEN2816:%.*]], label [[IF_END2817:%.*]]
// SIMD-ONLY0:       if.then2816:
// SIMD-ONLY0-NEXT:    [[TMP1705:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1705]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2817]]
// SIMD-ONLY0:       if.end2817:
// SIMD-ONLY0-NEXT:    [[TMP1706:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1706]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1707:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2818:%.*]] = zext i16 [[TMP1707]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1708:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2819:%.*]] = zext i16 [[TMP1708]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2820:%.*]] = icmp sgt i32 [[CONV2818]], [[CONV2819]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2820]], label [[IF_THEN2822:%.*]], label [[IF_END2823:%.*]]
// SIMD-ONLY0:       if.then2822:
// SIMD-ONLY0-NEXT:    [[TMP1709:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1709]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2823]]
// SIMD-ONLY0:       if.end2823:
// SIMD-ONLY0-NEXT:    [[TMP1710:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1710]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1711:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2824:%.*]] = zext i16 [[TMP1711]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1712:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2825:%.*]] = zext i16 [[TMP1712]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2826:%.*]] = icmp slt i32 [[CONV2824]], [[CONV2825]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2826]], label [[IF_THEN2828:%.*]], label [[IF_END2829:%.*]]
// SIMD-ONLY0:       if.then2828:
// SIMD-ONLY0-NEXT:    [[TMP1713:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1713]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2829]]
// SIMD-ONLY0:       if.end2829:
// SIMD-ONLY0-NEXT:    [[TMP1714:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1714]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1715:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2830:%.*]] = zext i16 [[TMP1715]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1716:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2831:%.*]] = zext i16 [[TMP1716]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2832:%.*]] = icmp slt i32 [[CONV2830]], [[CONV2831]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2832]], label [[IF_THEN2834:%.*]], label [[IF_END2835:%.*]]
// SIMD-ONLY0:       if.then2834:
// SIMD-ONLY0-NEXT:    [[TMP1717:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1717]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2835]]
// SIMD-ONLY0:       if.end2835:
// SIMD-ONLY0-NEXT:    [[TMP1718:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1718]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1719:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2836:%.*]] = zext i16 [[TMP1719]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1720:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2837:%.*]] = zext i16 [[TMP1720]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2838:%.*]] = icmp eq i32 [[CONV2836]], [[CONV2837]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2838]], label [[IF_THEN2840:%.*]], label [[IF_END2841:%.*]]
// SIMD-ONLY0:       if.then2840:
// SIMD-ONLY0-NEXT:    [[TMP1721:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1721]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2841]]
// SIMD-ONLY0:       if.end2841:
// SIMD-ONLY0-NEXT:    [[TMP1722:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1722]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1723:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2842:%.*]] = zext i16 [[TMP1723]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1724:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2843:%.*]] = zext i16 [[TMP1724]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2844:%.*]] = icmp eq i32 [[CONV2842]], [[CONV2843]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2844]], label [[IF_THEN2846:%.*]], label [[IF_END2847:%.*]]
// SIMD-ONLY0:       if.then2846:
// SIMD-ONLY0-NEXT:    [[TMP1725:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1725]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2847]]
// SIMD-ONLY0:       if.end2847:
// SIMD-ONLY0-NEXT:    [[TMP1726:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2848:%.*]] = zext i16 [[TMP1726]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1727:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2849:%.*]] = zext i16 [[TMP1727]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2850:%.*]] = icmp sgt i32 [[CONV2848]], [[CONV2849]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2850]], label [[IF_THEN2852:%.*]], label [[IF_END2853:%.*]]
// SIMD-ONLY0:       if.then2852:
// SIMD-ONLY0-NEXT:    [[TMP1728:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1728]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2853]]
// SIMD-ONLY0:       if.end2853:
// SIMD-ONLY0-NEXT:    [[TMP1729:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1729]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1730:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2854:%.*]] = zext i16 [[TMP1730]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1731:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2855:%.*]] = zext i16 [[TMP1731]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2856:%.*]] = icmp sgt i32 [[CONV2854]], [[CONV2855]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2856]], label [[IF_THEN2858:%.*]], label [[IF_END2859:%.*]]
// SIMD-ONLY0:       if.then2858:
// SIMD-ONLY0-NEXT:    [[TMP1732:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1732]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2859]]
// SIMD-ONLY0:       if.end2859:
// SIMD-ONLY0-NEXT:    [[TMP1733:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1733]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1734:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2860:%.*]] = zext i16 [[TMP1734]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1735:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2861:%.*]] = zext i16 [[TMP1735]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2862:%.*]] = icmp slt i32 [[CONV2860]], [[CONV2861]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2862]], label [[IF_THEN2864:%.*]], label [[IF_END2865:%.*]]
// SIMD-ONLY0:       if.then2864:
// SIMD-ONLY0-NEXT:    [[TMP1736:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1736]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2865]]
// SIMD-ONLY0:       if.end2865:
// SIMD-ONLY0-NEXT:    [[TMP1737:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1737]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1738:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2866:%.*]] = zext i16 [[TMP1738]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1739:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2867:%.*]] = zext i16 [[TMP1739]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2868:%.*]] = icmp slt i32 [[CONV2866]], [[CONV2867]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2868]], label [[IF_THEN2870:%.*]], label [[IF_END2871:%.*]]
// SIMD-ONLY0:       if.then2870:
// SIMD-ONLY0-NEXT:    [[TMP1740:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1740]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2871]]
// SIMD-ONLY0:       if.end2871:
// SIMD-ONLY0-NEXT:    [[TMP1741:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1741]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1742:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2872:%.*]] = zext i16 [[TMP1742]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1743:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2873:%.*]] = zext i16 [[TMP1743]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2874:%.*]] = icmp eq i32 [[CONV2872]], [[CONV2873]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2874]], label [[IF_THEN2876:%.*]], label [[IF_END2877:%.*]]
// SIMD-ONLY0:       if.then2876:
// SIMD-ONLY0-NEXT:    [[TMP1744:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1744]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2877]]
// SIMD-ONLY0:       if.end2877:
// SIMD-ONLY0-NEXT:    [[TMP1745:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1745]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1746:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2878:%.*]] = zext i16 [[TMP1746]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1747:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2879:%.*]] = zext i16 [[TMP1747]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2880:%.*]] = icmp eq i32 [[CONV2878]], [[CONV2879]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2880]], label [[IF_THEN2882:%.*]], label [[IF_END2883:%.*]]
// SIMD-ONLY0:       if.then2882:
// SIMD-ONLY0-NEXT:    [[TMP1748:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1748]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2883]]
// SIMD-ONLY0:       if.end2883:
// SIMD-ONLY0-NEXT:    [[TMP1749:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1749]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1750:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2884:%.*]] = zext i16 [[TMP1750]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1751:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2885:%.*]] = zext i16 [[TMP1751]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2886:%.*]] = icmp eq i32 [[CONV2884]], [[CONV2885]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2886]], label [[IF_THEN2888:%.*]], label [[IF_ELSE2889:%.*]]
// SIMD-ONLY0:       if.then2888:
// SIMD-ONLY0-NEXT:    [[TMP1752:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1752]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2890:%.*]]
// SIMD-ONLY0:       if.else2889:
// SIMD-ONLY0-NEXT:    [[TMP1753:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1753]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2890]]
// SIMD-ONLY0:       if.end2890:
// SIMD-ONLY0-NEXT:    [[TMP1754:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2891:%.*]] = zext i16 [[TMP1754]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1755:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2892:%.*]] = zext i16 [[TMP1755]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2893:%.*]] = icmp eq i32 [[CONV2891]], [[CONV2892]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2893]], label [[IF_THEN2895:%.*]], label [[IF_ELSE2896:%.*]]
// SIMD-ONLY0:       if.then2895:
// SIMD-ONLY0-NEXT:    [[TMP1756:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1756]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2897:%.*]]
// SIMD-ONLY0:       if.else2896:
// SIMD-ONLY0-NEXT:    [[TMP1757:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1757]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2897]]
// SIMD-ONLY0:       if.end2897:
// SIMD-ONLY0-NEXT:    [[TMP1758:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2898:%.*]] = zext i16 [[TMP1758]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1759:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2899:%.*]] = zext i16 [[TMP1759]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2900:%.*]] = icmp eq i32 [[CONV2898]], [[CONV2899]]
// SIMD-ONLY0-NEXT:    [[CONV2901:%.*]] = zext i1 [[CMP2900]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2902:%.*]] = trunc i32 [[CONV2901]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2902]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1760:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2903:%.*]] = icmp ne i16 [[TMP1760]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2903]], label [[IF_THEN2904:%.*]], label [[IF_END2905:%.*]]
// SIMD-ONLY0:       if.then2904:
// SIMD-ONLY0-NEXT:    [[TMP1761:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1761]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2905]]
// SIMD-ONLY0:       if.end2905:
// SIMD-ONLY0-NEXT:    [[TMP1762:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2906:%.*]] = zext i16 [[TMP1762]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1763:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2907:%.*]] = zext i16 [[TMP1763]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2908:%.*]] = icmp eq i32 [[CONV2906]], [[CONV2907]]
// SIMD-ONLY0-NEXT:    [[CONV2909:%.*]] = zext i1 [[CMP2908]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2910:%.*]] = trunc i32 [[CONV2909]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2910]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1764:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2911:%.*]] = icmp ne i16 [[TMP1764]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2911]], label [[IF_THEN2912:%.*]], label [[IF_END2913:%.*]]
// SIMD-ONLY0:       if.then2912:
// SIMD-ONLY0-NEXT:    [[TMP1765:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1765]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2913]]
// SIMD-ONLY0:       if.end2913:
// SIMD-ONLY0-NEXT:    [[TMP1766:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2914:%.*]] = zext i16 [[TMP1766]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1767:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2915:%.*]] = zext i16 [[TMP1767]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2916:%.*]] = icmp eq i32 [[CONV2914]], [[CONV2915]]
// SIMD-ONLY0-NEXT:    [[CONV2917:%.*]] = zext i1 [[CMP2916]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2918:%.*]] = trunc i32 [[CONV2917]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2918]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1768:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2919:%.*]] = icmp ne i16 [[TMP1768]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2919]], label [[IF_THEN2920:%.*]], label [[IF_ELSE2921:%.*]]
// SIMD-ONLY0:       if.then2920:
// SIMD-ONLY0-NEXT:    [[TMP1769:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1769]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2922:%.*]]
// SIMD-ONLY0:       if.else2921:
// SIMD-ONLY0-NEXT:    [[TMP1770:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1770]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2922]]
// SIMD-ONLY0:       if.end2922:
// SIMD-ONLY0-NEXT:    [[TMP1771:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2923:%.*]] = zext i16 [[TMP1771]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1772:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2924:%.*]] = zext i16 [[TMP1772]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2925:%.*]] = icmp eq i32 [[CONV2923]], [[CONV2924]]
// SIMD-ONLY0-NEXT:    [[CONV2926:%.*]] = zext i1 [[CMP2925]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2927:%.*]] = trunc i32 [[CONV2926]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2927]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1773:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2928:%.*]] = icmp ne i16 [[TMP1773]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2928]], label [[IF_THEN2929:%.*]], label [[IF_ELSE2930:%.*]]
// SIMD-ONLY0:       if.then2929:
// SIMD-ONLY0-NEXT:    [[TMP1774:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1774]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2931:%.*]]
// SIMD-ONLY0:       if.else2930:
// SIMD-ONLY0-NEXT:    [[TMP1775:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1775]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2931]]
// SIMD-ONLY0:       if.end2931:
// SIMD-ONLY0-NEXT:    [[TMP1776:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1776]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1777:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1778:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2932:%.*]] = icmp sgt i32 [[TMP1777]], [[TMP1778]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2932]], label [[IF_THEN2934:%.*]], label [[IF_END2935:%.*]]
// SIMD-ONLY0:       if.then2934:
// SIMD-ONLY0-NEXT:    [[TMP1779:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1779]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2935]]
// SIMD-ONLY0:       if.end2935:
// SIMD-ONLY0-NEXT:    [[TMP1780:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1780]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1781:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1782:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2936:%.*]] = icmp sgt i32 [[TMP1781]], [[TMP1782]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2936]], label [[IF_THEN2938:%.*]], label [[IF_END2939:%.*]]
// SIMD-ONLY0:       if.then2938:
// SIMD-ONLY0-NEXT:    [[TMP1783:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1783]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2939]]
// SIMD-ONLY0:       if.end2939:
// SIMD-ONLY0-NEXT:    [[TMP1784:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1784]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1785:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1786:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2940:%.*]] = icmp slt i32 [[TMP1785]], [[TMP1786]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2940]], label [[IF_THEN2942:%.*]], label [[IF_END2943:%.*]]
// SIMD-ONLY0:       if.then2942:
// SIMD-ONLY0-NEXT:    [[TMP1787:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1787]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2943]]
// SIMD-ONLY0:       if.end2943:
// SIMD-ONLY0-NEXT:    [[TMP1788:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1788]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1789:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1790:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2944:%.*]] = icmp slt i32 [[TMP1789]], [[TMP1790]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2944]], label [[IF_THEN2946:%.*]], label [[IF_END2947:%.*]]
// SIMD-ONLY0:       if.then2946:
// SIMD-ONLY0-NEXT:    [[TMP1791:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1791]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2947]]
// SIMD-ONLY0:       if.end2947:
// SIMD-ONLY0-NEXT:    [[TMP1792:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1792]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1793:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1794:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2948:%.*]] = icmp eq i32 [[TMP1793]], [[TMP1794]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2948]], label [[IF_THEN2950:%.*]], label [[IF_END2951:%.*]]
// SIMD-ONLY0:       if.then2950:
// SIMD-ONLY0-NEXT:    [[TMP1795:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1795]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2951]]
// SIMD-ONLY0:       if.end2951:
// SIMD-ONLY0-NEXT:    [[TMP1796:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1796]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1797:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1798:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2952:%.*]] = icmp eq i32 [[TMP1797]], [[TMP1798]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2952]], label [[IF_THEN2954:%.*]], label [[IF_END2955:%.*]]
// SIMD-ONLY0:       if.then2954:
// SIMD-ONLY0-NEXT:    [[TMP1799:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1799]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2955]]
// SIMD-ONLY0:       if.end2955:
// SIMD-ONLY0-NEXT:    [[TMP1800:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1801:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2956:%.*]] = icmp sgt i32 [[TMP1800]], [[TMP1801]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2956]], label [[IF_THEN2958:%.*]], label [[IF_END2959:%.*]]
// SIMD-ONLY0:       if.then2958:
// SIMD-ONLY0-NEXT:    [[TMP1802:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1802]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2959]]
// SIMD-ONLY0:       if.end2959:
// SIMD-ONLY0-NEXT:    [[TMP1803:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1803]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1804:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1805:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2960:%.*]] = icmp sgt i32 [[TMP1804]], [[TMP1805]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2960]], label [[IF_THEN2962:%.*]], label [[IF_END2963:%.*]]
// SIMD-ONLY0:       if.then2962:
// SIMD-ONLY0-NEXT:    [[TMP1806:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1806]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2963]]
// SIMD-ONLY0:       if.end2963:
// SIMD-ONLY0-NEXT:    [[TMP1807:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1807]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1808:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1809:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2964:%.*]] = icmp slt i32 [[TMP1808]], [[TMP1809]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2964]], label [[IF_THEN2966:%.*]], label [[IF_END2967:%.*]]
// SIMD-ONLY0:       if.then2966:
// SIMD-ONLY0-NEXT:    [[TMP1810:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1810]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2967]]
// SIMD-ONLY0:       if.end2967:
// SIMD-ONLY0-NEXT:    [[TMP1811:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1811]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1812:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1813:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2968:%.*]] = icmp slt i32 [[TMP1812]], [[TMP1813]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2968]], label [[IF_THEN2970:%.*]], label [[IF_END2971:%.*]]
// SIMD-ONLY0:       if.then2970:
// SIMD-ONLY0-NEXT:    [[TMP1814:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1814]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2971]]
// SIMD-ONLY0:       if.end2971:
// SIMD-ONLY0-NEXT:    [[TMP1815:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1815]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1816:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1817:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2972:%.*]] = icmp eq i32 [[TMP1816]], [[TMP1817]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2972]], label [[IF_THEN2974:%.*]], label [[IF_END2975:%.*]]
// SIMD-ONLY0:       if.then2974:
// SIMD-ONLY0-NEXT:    [[TMP1818:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1818]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2975]]
// SIMD-ONLY0:       if.end2975:
// SIMD-ONLY0-NEXT:    [[TMP1819:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1819]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1820:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1821:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2976:%.*]] = icmp eq i32 [[TMP1820]], [[TMP1821]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2976]], label [[IF_THEN2978:%.*]], label [[IF_END2979:%.*]]
// SIMD-ONLY0:       if.then2978:
// SIMD-ONLY0-NEXT:    [[TMP1822:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1822]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2979]]
// SIMD-ONLY0:       if.end2979:
// SIMD-ONLY0-NEXT:    [[TMP1823:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1823]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1824:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1825:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2980:%.*]] = icmp eq i32 [[TMP1824]], [[TMP1825]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2980]], label [[IF_THEN2982:%.*]], label [[IF_ELSE2983:%.*]]
// SIMD-ONLY0:       if.then2982:
// SIMD-ONLY0-NEXT:    [[TMP1826:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1826]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2984:%.*]]
// SIMD-ONLY0:       if.else2983:
// SIMD-ONLY0-NEXT:    [[TMP1827:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1827]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2984]]
// SIMD-ONLY0:       if.end2984:
// SIMD-ONLY0-NEXT:    [[TMP1828:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1829:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2985:%.*]] = icmp eq i32 [[TMP1828]], [[TMP1829]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2985]], label [[IF_THEN2987:%.*]], label [[IF_ELSE2988:%.*]]
// SIMD-ONLY0:       if.then2987:
// SIMD-ONLY0-NEXT:    [[TMP1830:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1830]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2989:%.*]]
// SIMD-ONLY0:       if.else2988:
// SIMD-ONLY0-NEXT:    [[TMP1831:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1831]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2989]]
// SIMD-ONLY0:       if.end2989:
// SIMD-ONLY0-NEXT:    [[TMP1832:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1833:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2990:%.*]] = icmp eq i32 [[TMP1832]], [[TMP1833]]
// SIMD-ONLY0-NEXT:    [[CONV2991:%.*]] = zext i1 [[CMP2990]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV2991]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1834:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL2992:%.*]] = icmp ne i32 [[TMP1834]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2992]], label [[IF_THEN2993:%.*]], label [[IF_END2994:%.*]]
// SIMD-ONLY0:       if.then2993:
// SIMD-ONLY0-NEXT:    [[TMP1835:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1835]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2994]]
// SIMD-ONLY0:       if.end2994:
// SIMD-ONLY0-NEXT:    [[TMP1836:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1837:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2995:%.*]] = icmp eq i32 [[TMP1836]], [[TMP1837]]
// SIMD-ONLY0-NEXT:    [[CONV2996:%.*]] = zext i1 [[CMP2995]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV2996]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1838:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL2997:%.*]] = icmp ne i32 [[TMP1838]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2997]], label [[IF_THEN2998:%.*]], label [[IF_END2999:%.*]]
// SIMD-ONLY0:       if.then2998:
// SIMD-ONLY0-NEXT:    [[TMP1839:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1839]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2999]]
// SIMD-ONLY0:       if.end2999:
// SIMD-ONLY0-NEXT:    [[TMP1840:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1841:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3000:%.*]] = icmp eq i32 [[TMP1840]], [[TMP1841]]
// SIMD-ONLY0-NEXT:    [[CONV3001:%.*]] = zext i1 [[CMP3000]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3001]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1842:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3002:%.*]] = icmp ne i32 [[TMP1842]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3002]], label [[IF_THEN3003:%.*]], label [[IF_ELSE3004:%.*]]
// SIMD-ONLY0:       if.then3003:
// SIMD-ONLY0-NEXT:    [[TMP1843:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1843]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3005:%.*]]
// SIMD-ONLY0:       if.else3004:
// SIMD-ONLY0-NEXT:    [[TMP1844:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1844]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3005]]
// SIMD-ONLY0:       if.end3005:
// SIMD-ONLY0-NEXT:    [[TMP1845:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1846:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3006:%.*]] = icmp eq i32 [[TMP1845]], [[TMP1846]]
// SIMD-ONLY0-NEXT:    [[CONV3007:%.*]] = zext i1 [[CMP3006]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3007]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1847:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3008:%.*]] = icmp ne i32 [[TMP1847]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3008]], label [[IF_THEN3009:%.*]], label [[IF_ELSE3010:%.*]]
// SIMD-ONLY0:       if.then3009:
// SIMD-ONLY0-NEXT:    [[TMP1848:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1848]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3011:%.*]]
// SIMD-ONLY0:       if.else3010:
// SIMD-ONLY0-NEXT:    [[TMP1849:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1849]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3011]]
// SIMD-ONLY0:       if.end3011:
// SIMD-ONLY0-NEXT:    [[TMP1850:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1850]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1851:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1852:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3012:%.*]] = icmp sgt i32 [[TMP1851]], [[TMP1852]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3012]], label [[IF_THEN3014:%.*]], label [[IF_END3015:%.*]]
// SIMD-ONLY0:       if.then3014:
// SIMD-ONLY0-NEXT:    [[TMP1853:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1853]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3015]]
// SIMD-ONLY0:       if.end3015:
// SIMD-ONLY0-NEXT:    [[TMP1854:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1854]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1855:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1856:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3016:%.*]] = icmp sgt i32 [[TMP1855]], [[TMP1856]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3016]], label [[IF_THEN3018:%.*]], label [[IF_END3019:%.*]]
// SIMD-ONLY0:       if.then3018:
// SIMD-ONLY0-NEXT:    [[TMP1857:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1857]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3019]]
// SIMD-ONLY0:       if.end3019:
// SIMD-ONLY0-NEXT:    [[TMP1858:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1858]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1859:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1860:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3020:%.*]] = icmp slt i32 [[TMP1859]], [[TMP1860]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3020]], label [[IF_THEN3022:%.*]], label [[IF_END3023:%.*]]
// SIMD-ONLY0:       if.then3022:
// SIMD-ONLY0-NEXT:    [[TMP1861:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1861]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3023]]
// SIMD-ONLY0:       if.end3023:
// SIMD-ONLY0-NEXT:    [[TMP1862:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1862]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1863:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1864:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3024:%.*]] = icmp slt i32 [[TMP1863]], [[TMP1864]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3024]], label [[IF_THEN3026:%.*]], label [[IF_END3027:%.*]]
// SIMD-ONLY0:       if.then3026:
// SIMD-ONLY0-NEXT:    [[TMP1865:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1865]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3027]]
// SIMD-ONLY0:       if.end3027:
// SIMD-ONLY0-NEXT:    [[TMP1866:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1866]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1867:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1868:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3028:%.*]] = icmp eq i32 [[TMP1867]], [[TMP1868]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3028]], label [[IF_THEN3030:%.*]], label [[IF_END3031:%.*]]
// SIMD-ONLY0:       if.then3030:
// SIMD-ONLY0-NEXT:    [[TMP1869:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1869]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3031]]
// SIMD-ONLY0:       if.end3031:
// SIMD-ONLY0-NEXT:    [[TMP1870:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1870]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1871:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1872:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3032:%.*]] = icmp eq i32 [[TMP1871]], [[TMP1872]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3032]], label [[IF_THEN3034:%.*]], label [[IF_END3035:%.*]]
// SIMD-ONLY0:       if.then3034:
// SIMD-ONLY0-NEXT:    [[TMP1873:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1873]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3035]]
// SIMD-ONLY0:       if.end3035:
// SIMD-ONLY0-NEXT:    [[TMP1874:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1875:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3036:%.*]] = icmp sgt i32 [[TMP1874]], [[TMP1875]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3036]], label [[IF_THEN3038:%.*]], label [[IF_END3039:%.*]]
// SIMD-ONLY0:       if.then3038:
// SIMD-ONLY0-NEXT:    [[TMP1876:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1876]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3039]]
// SIMD-ONLY0:       if.end3039:
// SIMD-ONLY0-NEXT:    [[TMP1877:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1877]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1878:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1879:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3040:%.*]] = icmp sgt i32 [[TMP1878]], [[TMP1879]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3040]], label [[IF_THEN3042:%.*]], label [[IF_END3043:%.*]]
// SIMD-ONLY0:       if.then3042:
// SIMD-ONLY0-NEXT:    [[TMP1880:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1880]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3043]]
// SIMD-ONLY0:       if.end3043:
// SIMD-ONLY0-NEXT:    [[TMP1881:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1881]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1882:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1883:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3044:%.*]] = icmp slt i32 [[TMP1882]], [[TMP1883]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3044]], label [[IF_THEN3046:%.*]], label [[IF_END3047:%.*]]
// SIMD-ONLY0:       if.then3046:
// SIMD-ONLY0-NEXT:    [[TMP1884:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1884]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3047]]
// SIMD-ONLY0:       if.end3047:
// SIMD-ONLY0-NEXT:    [[TMP1885:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1885]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1886:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1887:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3048:%.*]] = icmp slt i32 [[TMP1886]], [[TMP1887]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3048]], label [[IF_THEN3050:%.*]], label [[IF_END3051:%.*]]
// SIMD-ONLY0:       if.then3050:
// SIMD-ONLY0-NEXT:    [[TMP1888:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1888]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3051]]
// SIMD-ONLY0:       if.end3051:
// SIMD-ONLY0-NEXT:    [[TMP1889:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1889]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1890:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1891:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3052:%.*]] = icmp eq i32 [[TMP1890]], [[TMP1891]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3052]], label [[IF_THEN3054:%.*]], label [[IF_END3055:%.*]]
// SIMD-ONLY0:       if.then3054:
// SIMD-ONLY0-NEXT:    [[TMP1892:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1892]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3055]]
// SIMD-ONLY0:       if.end3055:
// SIMD-ONLY0-NEXT:    [[TMP1893:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1893]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1894:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1895:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3056:%.*]] = icmp eq i32 [[TMP1894]], [[TMP1895]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3056]], label [[IF_THEN3058:%.*]], label [[IF_END3059:%.*]]
// SIMD-ONLY0:       if.then3058:
// SIMD-ONLY0-NEXT:    [[TMP1896:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1896]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3059]]
// SIMD-ONLY0:       if.end3059:
// SIMD-ONLY0-NEXT:    [[TMP1897:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1897]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1898:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1899:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3060:%.*]] = icmp eq i32 [[TMP1898]], [[TMP1899]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3060]], label [[IF_THEN3062:%.*]], label [[IF_ELSE3063:%.*]]
// SIMD-ONLY0:       if.then3062:
// SIMD-ONLY0-NEXT:    [[TMP1900:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1900]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3064:%.*]]
// SIMD-ONLY0:       if.else3063:
// SIMD-ONLY0-NEXT:    [[TMP1901:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1901]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3064]]
// SIMD-ONLY0:       if.end3064:
// SIMD-ONLY0-NEXT:    [[TMP1902:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1903:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3065:%.*]] = icmp eq i32 [[TMP1902]], [[TMP1903]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3065]], label [[IF_THEN3067:%.*]], label [[IF_ELSE3068:%.*]]
// SIMD-ONLY0:       if.then3067:
// SIMD-ONLY0-NEXT:    [[TMP1904:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1904]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3069:%.*]]
// SIMD-ONLY0:       if.else3068:
// SIMD-ONLY0-NEXT:    [[TMP1905:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1905]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3069]]
// SIMD-ONLY0:       if.end3069:
// SIMD-ONLY0-NEXT:    [[TMP1906:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1907:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3070:%.*]] = icmp eq i32 [[TMP1906]], [[TMP1907]]
// SIMD-ONLY0-NEXT:    [[CONV3071:%.*]] = zext i1 [[CMP3070]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3071]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1908:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3072:%.*]] = icmp ne i32 [[TMP1908]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3072]], label [[IF_THEN3073:%.*]], label [[IF_END3074:%.*]]
// SIMD-ONLY0:       if.then3073:
// SIMD-ONLY0-NEXT:    [[TMP1909:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1909]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3074]]
// SIMD-ONLY0:       if.end3074:
// SIMD-ONLY0-NEXT:    [[TMP1910:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1911:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3075:%.*]] = icmp eq i32 [[TMP1910]], [[TMP1911]]
// SIMD-ONLY0-NEXT:    [[CONV3076:%.*]] = zext i1 [[CMP3075]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3076]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1912:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3077:%.*]] = icmp ne i32 [[TMP1912]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3077]], label [[IF_THEN3078:%.*]], label [[IF_END3079:%.*]]
// SIMD-ONLY0:       if.then3078:
// SIMD-ONLY0-NEXT:    [[TMP1913:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1913]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3079]]
// SIMD-ONLY0:       if.end3079:
// SIMD-ONLY0-NEXT:    [[TMP1914:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1915:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3080:%.*]] = icmp eq i32 [[TMP1914]], [[TMP1915]]
// SIMD-ONLY0-NEXT:    [[CONV3081:%.*]] = zext i1 [[CMP3080]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3081]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1916:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3082:%.*]] = icmp ne i32 [[TMP1916]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3082]], label [[IF_THEN3083:%.*]], label [[IF_ELSE3084:%.*]]
// SIMD-ONLY0:       if.then3083:
// SIMD-ONLY0-NEXT:    [[TMP1917:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1917]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3085:%.*]]
// SIMD-ONLY0:       if.else3084:
// SIMD-ONLY0-NEXT:    [[TMP1918:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1918]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3085]]
// SIMD-ONLY0:       if.end3085:
// SIMD-ONLY0-NEXT:    [[TMP1919:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1920:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3086:%.*]] = icmp eq i32 [[TMP1919]], [[TMP1920]]
// SIMD-ONLY0-NEXT:    [[CONV3087:%.*]] = zext i1 [[CMP3086]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3087]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1921:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3088:%.*]] = icmp ne i32 [[TMP1921]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3088]], label [[IF_THEN3089:%.*]], label [[IF_ELSE3090:%.*]]
// SIMD-ONLY0:       if.then3089:
// SIMD-ONLY0-NEXT:    [[TMP1922:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1922]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3091:%.*]]
// SIMD-ONLY0:       if.else3090:
// SIMD-ONLY0-NEXT:    [[TMP1923:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1923]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3091]]
// SIMD-ONLY0:       if.end3091:
// SIMD-ONLY0-NEXT:    [[TMP1924:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1924]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1925:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1926:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3092:%.*]] = icmp sgt i32 [[TMP1925]], [[TMP1926]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3092]], label [[IF_THEN3094:%.*]], label [[IF_END3095:%.*]]
// SIMD-ONLY0:       if.then3094:
// SIMD-ONLY0-NEXT:    [[TMP1927:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1927]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3095]]
// SIMD-ONLY0:       if.end3095:
// SIMD-ONLY0-NEXT:    [[TMP1928:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1928]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1929:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1930:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3096:%.*]] = icmp sgt i32 [[TMP1929]], [[TMP1930]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3096]], label [[IF_THEN3098:%.*]], label [[IF_END3099:%.*]]
// SIMD-ONLY0:       if.then3098:
// SIMD-ONLY0-NEXT:    [[TMP1931:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1931]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3099]]
// SIMD-ONLY0:       if.end3099:
// SIMD-ONLY0-NEXT:    [[TMP1932:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1932]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1933:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1934:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3100:%.*]] = icmp slt i32 [[TMP1933]], [[TMP1934]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3100]], label [[IF_THEN3102:%.*]], label [[IF_END3103:%.*]]
// SIMD-ONLY0:       if.then3102:
// SIMD-ONLY0-NEXT:    [[TMP1935:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1935]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3103]]
// SIMD-ONLY0:       if.end3103:
// SIMD-ONLY0-NEXT:    [[TMP1936:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1936]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1937:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1938:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3104:%.*]] = icmp slt i32 [[TMP1937]], [[TMP1938]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3104]], label [[IF_THEN3106:%.*]], label [[IF_END3107:%.*]]
// SIMD-ONLY0:       if.then3106:
// SIMD-ONLY0-NEXT:    [[TMP1939:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1939]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3107]]
// SIMD-ONLY0:       if.end3107:
// SIMD-ONLY0-NEXT:    [[TMP1940:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1940]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1941:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1942:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3108:%.*]] = icmp eq i32 [[TMP1941]], [[TMP1942]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3108]], label [[IF_THEN3110:%.*]], label [[IF_END3111:%.*]]
// SIMD-ONLY0:       if.then3110:
// SIMD-ONLY0-NEXT:    [[TMP1943:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1943]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3111]]
// SIMD-ONLY0:       if.end3111:
// SIMD-ONLY0-NEXT:    [[TMP1944:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1944]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1945:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1946:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3112:%.*]] = icmp eq i32 [[TMP1945]], [[TMP1946]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3112]], label [[IF_THEN3114:%.*]], label [[IF_END3115:%.*]]
// SIMD-ONLY0:       if.then3114:
// SIMD-ONLY0-NEXT:    [[TMP1947:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1947]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3115]]
// SIMD-ONLY0:       if.end3115:
// SIMD-ONLY0-NEXT:    [[TMP1948:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1949:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3116:%.*]] = icmp sgt i32 [[TMP1948]], [[TMP1949]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3116]], label [[IF_THEN3118:%.*]], label [[IF_END3119:%.*]]
// SIMD-ONLY0:       if.then3118:
// SIMD-ONLY0-NEXT:    [[TMP1950:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1950]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3119]]
// SIMD-ONLY0:       if.end3119:
// SIMD-ONLY0-NEXT:    [[TMP1951:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1951]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1952:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1953:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3120:%.*]] = icmp sgt i32 [[TMP1952]], [[TMP1953]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3120]], label [[IF_THEN3122:%.*]], label [[IF_END3123:%.*]]
// SIMD-ONLY0:       if.then3122:
// SIMD-ONLY0-NEXT:    [[TMP1954:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1954]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3123]]
// SIMD-ONLY0:       if.end3123:
// SIMD-ONLY0-NEXT:    [[TMP1955:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1955]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1956:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1957:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3124:%.*]] = icmp slt i32 [[TMP1956]], [[TMP1957]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3124]], label [[IF_THEN3126:%.*]], label [[IF_END3127:%.*]]
// SIMD-ONLY0:       if.then3126:
// SIMD-ONLY0-NEXT:    [[TMP1958:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1958]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3127]]
// SIMD-ONLY0:       if.end3127:
// SIMD-ONLY0-NEXT:    [[TMP1959:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1959]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1960:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1961:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3128:%.*]] = icmp slt i32 [[TMP1960]], [[TMP1961]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3128]], label [[IF_THEN3130:%.*]], label [[IF_END3131:%.*]]
// SIMD-ONLY0:       if.then3130:
// SIMD-ONLY0-NEXT:    [[TMP1962:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1962]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3131]]
// SIMD-ONLY0:       if.end3131:
// SIMD-ONLY0-NEXT:    [[TMP1963:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1963]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1964:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1965:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3132:%.*]] = icmp eq i32 [[TMP1964]], [[TMP1965]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3132]], label [[IF_THEN3134:%.*]], label [[IF_END3135:%.*]]
// SIMD-ONLY0:       if.then3134:
// SIMD-ONLY0-NEXT:    [[TMP1966:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1966]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3135]]
// SIMD-ONLY0:       if.end3135:
// SIMD-ONLY0-NEXT:    [[TMP1967:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1967]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1968:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1969:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3136:%.*]] = icmp eq i32 [[TMP1968]], [[TMP1969]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3136]], label [[IF_THEN3138:%.*]], label [[IF_END3139:%.*]]
// SIMD-ONLY0:       if.then3138:
// SIMD-ONLY0-NEXT:    [[TMP1970:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1970]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3139]]
// SIMD-ONLY0:       if.end3139:
// SIMD-ONLY0-NEXT:    [[TMP1971:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1971]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1972:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1973:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3140:%.*]] = icmp eq i32 [[TMP1972]], [[TMP1973]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3140]], label [[IF_THEN3142:%.*]], label [[IF_ELSE3143:%.*]]
// SIMD-ONLY0:       if.then3142:
// SIMD-ONLY0-NEXT:    [[TMP1974:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1974]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3144:%.*]]
// SIMD-ONLY0:       if.else3143:
// SIMD-ONLY0-NEXT:    [[TMP1975:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1975]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3144]]
// SIMD-ONLY0:       if.end3144:
// SIMD-ONLY0-NEXT:    [[TMP1976:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1977:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3145:%.*]] = icmp eq i32 [[TMP1976]], [[TMP1977]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3145]], label [[IF_THEN3147:%.*]], label [[IF_ELSE3148:%.*]]
// SIMD-ONLY0:       if.then3147:
// SIMD-ONLY0-NEXT:    [[TMP1978:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1978]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3149:%.*]]
// SIMD-ONLY0:       if.else3148:
// SIMD-ONLY0-NEXT:    [[TMP1979:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1979]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3149]]
// SIMD-ONLY0:       if.end3149:
// SIMD-ONLY0-NEXT:    [[TMP1980:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1981:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3150:%.*]] = icmp eq i32 [[TMP1980]], [[TMP1981]]
// SIMD-ONLY0-NEXT:    [[CONV3151:%.*]] = zext i1 [[CMP3150]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3151]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1982:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3152:%.*]] = icmp ne i32 [[TMP1982]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3152]], label [[IF_THEN3153:%.*]], label [[IF_END3154:%.*]]
// SIMD-ONLY0:       if.then3153:
// SIMD-ONLY0-NEXT:    [[TMP1983:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1983]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3154]]
// SIMD-ONLY0:       if.end3154:
// SIMD-ONLY0-NEXT:    [[TMP1984:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1985:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3155:%.*]] = icmp eq i32 [[TMP1984]], [[TMP1985]]
// SIMD-ONLY0-NEXT:    [[CONV3156:%.*]] = zext i1 [[CMP3155]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3156]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1986:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3157:%.*]] = icmp ne i32 [[TMP1986]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3157]], label [[IF_THEN3158:%.*]], label [[IF_END3159:%.*]]
// SIMD-ONLY0:       if.then3158:
// SIMD-ONLY0-NEXT:    [[TMP1987:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1987]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3159]]
// SIMD-ONLY0:       if.end3159:
// SIMD-ONLY0-NEXT:    [[TMP1988:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1989:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3160:%.*]] = icmp eq i32 [[TMP1988]], [[TMP1989]]
// SIMD-ONLY0-NEXT:    [[CONV3161:%.*]] = zext i1 [[CMP3160]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3161]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1990:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3162:%.*]] = icmp ne i32 [[TMP1990]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3162]], label [[IF_THEN3163:%.*]], label [[IF_ELSE3164:%.*]]
// SIMD-ONLY0:       if.then3163:
// SIMD-ONLY0-NEXT:    [[TMP1991:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1991]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3165:%.*]]
// SIMD-ONLY0:       if.else3164:
// SIMD-ONLY0-NEXT:    [[TMP1992:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1992]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3165]]
// SIMD-ONLY0:       if.end3165:
// SIMD-ONLY0-NEXT:    [[TMP1993:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1994:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3166:%.*]] = icmp eq i32 [[TMP1993]], [[TMP1994]]
// SIMD-ONLY0-NEXT:    [[CONV3167:%.*]] = zext i1 [[CMP3166]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3167]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1995:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3168:%.*]] = icmp ne i32 [[TMP1995]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3168]], label [[IF_THEN3169:%.*]], label [[IF_ELSE3170:%.*]]
// SIMD-ONLY0:       if.then3169:
// SIMD-ONLY0-NEXT:    [[TMP1996:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1996]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3171:%.*]]
// SIMD-ONLY0:       if.else3170:
// SIMD-ONLY0-NEXT:    [[TMP1997:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1997]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3171]]
// SIMD-ONLY0:       if.end3171:
// SIMD-ONLY0-NEXT:    [[TMP1998:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1998]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1999:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2000:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3172:%.*]] = icmp sgt i32 [[TMP1999]], [[TMP2000]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3172]], label [[IF_THEN3174:%.*]], label [[IF_END3175:%.*]]
// SIMD-ONLY0:       if.then3174:
// SIMD-ONLY0-NEXT:    [[TMP2001:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2001]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3175]]
// SIMD-ONLY0:       if.end3175:
// SIMD-ONLY0-NEXT:    [[TMP2002:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2002]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2003:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2004:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3176:%.*]] = icmp sgt i32 [[TMP2003]], [[TMP2004]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3176]], label [[IF_THEN3178:%.*]], label [[IF_END3179:%.*]]
// SIMD-ONLY0:       if.then3178:
// SIMD-ONLY0-NEXT:    [[TMP2005:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2005]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3179]]
// SIMD-ONLY0:       if.end3179:
// SIMD-ONLY0-NEXT:    [[TMP2006:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2006]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2007:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2008:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3180:%.*]] = icmp slt i32 [[TMP2007]], [[TMP2008]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3180]], label [[IF_THEN3182:%.*]], label [[IF_END3183:%.*]]
// SIMD-ONLY0:       if.then3182:
// SIMD-ONLY0-NEXT:    [[TMP2009:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2009]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3183]]
// SIMD-ONLY0:       if.end3183:
// SIMD-ONLY0-NEXT:    [[TMP2010:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2010]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2011:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2012:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3184:%.*]] = icmp slt i32 [[TMP2011]], [[TMP2012]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3184]], label [[IF_THEN3186:%.*]], label [[IF_END3187:%.*]]
// SIMD-ONLY0:       if.then3186:
// SIMD-ONLY0-NEXT:    [[TMP2013:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2013]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3187]]
// SIMD-ONLY0:       if.end3187:
// SIMD-ONLY0-NEXT:    [[TMP2014:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2014]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2015:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2016:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3188:%.*]] = icmp eq i32 [[TMP2015]], [[TMP2016]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3188]], label [[IF_THEN3190:%.*]], label [[IF_END3191:%.*]]
// SIMD-ONLY0:       if.then3190:
// SIMD-ONLY0-NEXT:    [[TMP2017:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2017]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3191]]
// SIMD-ONLY0:       if.end3191:
// SIMD-ONLY0-NEXT:    [[TMP2018:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2018]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2019:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2020:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3192:%.*]] = icmp eq i32 [[TMP2019]], [[TMP2020]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3192]], label [[IF_THEN3194:%.*]], label [[IF_END3195:%.*]]
// SIMD-ONLY0:       if.then3194:
// SIMD-ONLY0-NEXT:    [[TMP2021:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2021]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3195]]
// SIMD-ONLY0:       if.end3195:
// SIMD-ONLY0-NEXT:    [[TMP2022:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2023:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3196:%.*]] = icmp sgt i32 [[TMP2022]], [[TMP2023]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3196]], label [[IF_THEN3198:%.*]], label [[IF_END3199:%.*]]
// SIMD-ONLY0:       if.then3198:
// SIMD-ONLY0-NEXT:    [[TMP2024:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2024]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3199]]
// SIMD-ONLY0:       if.end3199:
// SIMD-ONLY0-NEXT:    [[TMP2025:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2025]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2026:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2027:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3200:%.*]] = icmp sgt i32 [[TMP2026]], [[TMP2027]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3200]], label [[IF_THEN3202:%.*]], label [[IF_END3203:%.*]]
// SIMD-ONLY0:       if.then3202:
// SIMD-ONLY0-NEXT:    [[TMP2028:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2028]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3203]]
// SIMD-ONLY0:       if.end3203:
// SIMD-ONLY0-NEXT:    [[TMP2029:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2029]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2030:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2031:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3204:%.*]] = icmp slt i32 [[TMP2030]], [[TMP2031]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3204]], label [[IF_THEN3206:%.*]], label [[IF_END3207:%.*]]
// SIMD-ONLY0:       if.then3206:
// SIMD-ONLY0-NEXT:    [[TMP2032:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2032]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3207]]
// SIMD-ONLY0:       if.end3207:
// SIMD-ONLY0-NEXT:    [[TMP2033:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2033]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2034:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2035:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3208:%.*]] = icmp slt i32 [[TMP2034]], [[TMP2035]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3208]], label [[IF_THEN3210:%.*]], label [[IF_END3211:%.*]]
// SIMD-ONLY0:       if.then3210:
// SIMD-ONLY0-NEXT:    [[TMP2036:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2036]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3211]]
// SIMD-ONLY0:       if.end3211:
// SIMD-ONLY0-NEXT:    [[TMP2037:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2037]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2038:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2039:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3212:%.*]] = icmp eq i32 [[TMP2038]], [[TMP2039]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3212]], label [[IF_THEN3214:%.*]], label [[IF_END3215:%.*]]
// SIMD-ONLY0:       if.then3214:
// SIMD-ONLY0-NEXT:    [[TMP2040:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2040]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3215]]
// SIMD-ONLY0:       if.end3215:
// SIMD-ONLY0-NEXT:    [[TMP2041:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2041]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2042:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2043:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3216:%.*]] = icmp eq i32 [[TMP2042]], [[TMP2043]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3216]], label [[IF_THEN3218:%.*]], label [[IF_END3219:%.*]]
// SIMD-ONLY0:       if.then3218:
// SIMD-ONLY0-NEXT:    [[TMP2044:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2044]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3219]]
// SIMD-ONLY0:       if.end3219:
// SIMD-ONLY0-NEXT:    [[TMP2045:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2045]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2046:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2047:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3220:%.*]] = icmp eq i32 [[TMP2046]], [[TMP2047]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3220]], label [[IF_THEN3222:%.*]], label [[IF_ELSE3223:%.*]]
// SIMD-ONLY0:       if.then3222:
// SIMD-ONLY0-NEXT:    [[TMP2048:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2048]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3224:%.*]]
// SIMD-ONLY0:       if.else3223:
// SIMD-ONLY0-NEXT:    [[TMP2049:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2049]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3224]]
// SIMD-ONLY0:       if.end3224:
// SIMD-ONLY0-NEXT:    [[TMP2050:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2051:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3225:%.*]] = icmp eq i32 [[TMP2050]], [[TMP2051]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3225]], label [[IF_THEN3227:%.*]], label [[IF_ELSE3228:%.*]]
// SIMD-ONLY0:       if.then3227:
// SIMD-ONLY0-NEXT:    [[TMP2052:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2052]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3229:%.*]]
// SIMD-ONLY0:       if.else3228:
// SIMD-ONLY0-NEXT:    [[TMP2053:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2053]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3229]]
// SIMD-ONLY0:       if.end3229:
// SIMD-ONLY0-NEXT:    [[TMP2054:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2055:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3230:%.*]] = icmp eq i32 [[TMP2054]], [[TMP2055]]
// SIMD-ONLY0-NEXT:    [[CONV3231:%.*]] = zext i1 [[CMP3230]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3231]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2056:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3232:%.*]] = icmp ne i32 [[TMP2056]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3232]], label [[IF_THEN3233:%.*]], label [[IF_END3234:%.*]]
// SIMD-ONLY0:       if.then3233:
// SIMD-ONLY0-NEXT:    [[TMP2057:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2057]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3234]]
// SIMD-ONLY0:       if.end3234:
// SIMD-ONLY0-NEXT:    [[TMP2058:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2059:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3235:%.*]] = icmp eq i32 [[TMP2058]], [[TMP2059]]
// SIMD-ONLY0-NEXT:    [[CONV3236:%.*]] = zext i1 [[CMP3235]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3236]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2060:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3237:%.*]] = icmp ne i32 [[TMP2060]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3237]], label [[IF_THEN3238:%.*]], label [[IF_END3239:%.*]]
// SIMD-ONLY0:       if.then3238:
// SIMD-ONLY0-NEXT:    [[TMP2061:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2061]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3239]]
// SIMD-ONLY0:       if.end3239:
// SIMD-ONLY0-NEXT:    [[TMP2062:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2063:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3240:%.*]] = icmp eq i32 [[TMP2062]], [[TMP2063]]
// SIMD-ONLY0-NEXT:    [[CONV3241:%.*]] = zext i1 [[CMP3240]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3241]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2064:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3242:%.*]] = icmp ne i32 [[TMP2064]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3242]], label [[IF_THEN3243:%.*]], label [[IF_ELSE3244:%.*]]
// SIMD-ONLY0:       if.then3243:
// SIMD-ONLY0-NEXT:    [[TMP2065:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2065]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3245:%.*]]
// SIMD-ONLY0:       if.else3244:
// SIMD-ONLY0-NEXT:    [[TMP2066:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2066]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3245]]
// SIMD-ONLY0:       if.end3245:
// SIMD-ONLY0-NEXT:    [[TMP2067:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2068:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3246:%.*]] = icmp eq i32 [[TMP2067]], [[TMP2068]]
// SIMD-ONLY0-NEXT:    [[CONV3247:%.*]] = zext i1 [[CMP3246]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3247]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2069:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3248:%.*]] = icmp ne i32 [[TMP2069]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3248]], label [[IF_THEN3249:%.*]], label [[IF_ELSE3250:%.*]]
// SIMD-ONLY0:       if.then3249:
// SIMD-ONLY0-NEXT:    [[TMP2070:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2070]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3251:%.*]]
// SIMD-ONLY0:       if.else3250:
// SIMD-ONLY0-NEXT:    [[TMP2071:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2071]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3251]]
// SIMD-ONLY0:       if.end3251:
// SIMD-ONLY0-NEXT:    [[TMP2072:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2072]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2073:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2074:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3252:%.*]] = icmp sgt i32 [[TMP2073]], [[TMP2074]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3252]], label [[IF_THEN3254:%.*]], label [[IF_END3255:%.*]]
// SIMD-ONLY0:       if.then3254:
// SIMD-ONLY0-NEXT:    [[TMP2075:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2075]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3255]]
// SIMD-ONLY0:       if.end3255:
// SIMD-ONLY0-NEXT:    [[TMP2076:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2076]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2077:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2078:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3256:%.*]] = icmp sgt i32 [[TMP2077]], [[TMP2078]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3256]], label [[IF_THEN3258:%.*]], label [[IF_END3259:%.*]]
// SIMD-ONLY0:       if.then3258:
// SIMD-ONLY0-NEXT:    [[TMP2079:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2079]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3259]]
// SIMD-ONLY0:       if.end3259:
// SIMD-ONLY0-NEXT:    [[TMP2080:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2080]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2081:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2082:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3260:%.*]] = icmp slt i32 [[TMP2081]], [[TMP2082]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3260]], label [[IF_THEN3262:%.*]], label [[IF_END3263:%.*]]
// SIMD-ONLY0:       if.then3262:
// SIMD-ONLY0-NEXT:    [[TMP2083:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2083]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3263]]
// SIMD-ONLY0:       if.end3263:
// SIMD-ONLY0-NEXT:    [[TMP2084:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2084]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2085:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2086:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3264:%.*]] = icmp slt i32 [[TMP2085]], [[TMP2086]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3264]], label [[IF_THEN3266:%.*]], label [[IF_END3267:%.*]]
// SIMD-ONLY0:       if.then3266:
// SIMD-ONLY0-NEXT:    [[TMP2087:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2087]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3267]]
// SIMD-ONLY0:       if.end3267:
// SIMD-ONLY0-NEXT:    [[TMP2088:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2088]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2089:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2090:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3268:%.*]] = icmp eq i32 [[TMP2089]], [[TMP2090]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3268]], label [[IF_THEN3270:%.*]], label [[IF_END3271:%.*]]
// SIMD-ONLY0:       if.then3270:
// SIMD-ONLY0-NEXT:    [[TMP2091:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2091]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3271]]
// SIMD-ONLY0:       if.end3271:
// SIMD-ONLY0-NEXT:    [[TMP2092:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2092]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2093:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2094:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3272:%.*]] = icmp eq i32 [[TMP2093]], [[TMP2094]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3272]], label [[IF_THEN3274:%.*]], label [[IF_END3275:%.*]]
// SIMD-ONLY0:       if.then3274:
// SIMD-ONLY0-NEXT:    [[TMP2095:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2095]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3275]]
// SIMD-ONLY0:       if.end3275:
// SIMD-ONLY0-NEXT:    [[TMP2096:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2097:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3276:%.*]] = icmp sgt i32 [[TMP2096]], [[TMP2097]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3276]], label [[IF_THEN3278:%.*]], label [[IF_END3279:%.*]]
// SIMD-ONLY0:       if.then3278:
// SIMD-ONLY0-NEXT:    [[TMP2098:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2098]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3279]]
// SIMD-ONLY0:       if.end3279:
// SIMD-ONLY0-NEXT:    [[TMP2099:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2099]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2100:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2101:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3280:%.*]] = icmp sgt i32 [[TMP2100]], [[TMP2101]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3280]], label [[IF_THEN3282:%.*]], label [[IF_END3283:%.*]]
// SIMD-ONLY0:       if.then3282:
// SIMD-ONLY0-NEXT:    [[TMP2102:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2102]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3283]]
// SIMD-ONLY0:       if.end3283:
// SIMD-ONLY0-NEXT:    [[TMP2103:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2103]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2104:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2105:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3284:%.*]] = icmp slt i32 [[TMP2104]], [[TMP2105]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3284]], label [[IF_THEN3286:%.*]], label [[IF_END3287:%.*]]
// SIMD-ONLY0:       if.then3286:
// SIMD-ONLY0-NEXT:    [[TMP2106:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2106]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3287]]
// SIMD-ONLY0:       if.end3287:
// SIMD-ONLY0-NEXT:    [[TMP2107:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2107]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2108:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2109:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3288:%.*]] = icmp slt i32 [[TMP2108]], [[TMP2109]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3288]], label [[IF_THEN3290:%.*]], label [[IF_END3291:%.*]]
// SIMD-ONLY0:       if.then3290:
// SIMD-ONLY0-NEXT:    [[TMP2110:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2110]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3291]]
// SIMD-ONLY0:       if.end3291:
// SIMD-ONLY0-NEXT:    [[TMP2111:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2111]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2112:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2113:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3292:%.*]] = icmp eq i32 [[TMP2112]], [[TMP2113]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3292]], label [[IF_THEN3294:%.*]], label [[IF_END3295:%.*]]
// SIMD-ONLY0:       if.then3294:
// SIMD-ONLY0-NEXT:    [[TMP2114:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2114]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3295]]
// SIMD-ONLY0:       if.end3295:
// SIMD-ONLY0-NEXT:    [[TMP2115:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2115]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2116:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2117:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3296:%.*]] = icmp eq i32 [[TMP2116]], [[TMP2117]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3296]], label [[IF_THEN3298:%.*]], label [[IF_END3299:%.*]]
// SIMD-ONLY0:       if.then3298:
// SIMD-ONLY0-NEXT:    [[TMP2118:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2118]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3299]]
// SIMD-ONLY0:       if.end3299:
// SIMD-ONLY0-NEXT:    [[TMP2119:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2119]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2120:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2121:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3300:%.*]] = icmp eq i32 [[TMP2120]], [[TMP2121]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3300]], label [[IF_THEN3302:%.*]], label [[IF_ELSE3303:%.*]]
// SIMD-ONLY0:       if.then3302:
// SIMD-ONLY0-NEXT:    [[TMP2122:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2122]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3304:%.*]]
// SIMD-ONLY0:       if.else3303:
// SIMD-ONLY0-NEXT:    [[TMP2123:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2123]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3304]]
// SIMD-ONLY0:       if.end3304:
// SIMD-ONLY0-NEXT:    [[TMP2124:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2125:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3305:%.*]] = icmp eq i32 [[TMP2124]], [[TMP2125]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3305]], label [[IF_THEN3307:%.*]], label [[IF_ELSE3308:%.*]]
// SIMD-ONLY0:       if.then3307:
// SIMD-ONLY0-NEXT:    [[TMP2126:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2126]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3309:%.*]]
// SIMD-ONLY0:       if.else3308:
// SIMD-ONLY0-NEXT:    [[TMP2127:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2127]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3309]]
// SIMD-ONLY0:       if.end3309:
// SIMD-ONLY0-NEXT:    [[TMP2128:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2129:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3310:%.*]] = icmp eq i32 [[TMP2128]], [[TMP2129]]
// SIMD-ONLY0-NEXT:    [[CONV3311:%.*]] = zext i1 [[CMP3310]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3311]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2130:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3312:%.*]] = icmp ne i32 [[TMP2130]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3312]], label [[IF_THEN3313:%.*]], label [[IF_END3314:%.*]]
// SIMD-ONLY0:       if.then3313:
// SIMD-ONLY0-NEXT:    [[TMP2131:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2131]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3314]]
// SIMD-ONLY0:       if.end3314:
// SIMD-ONLY0-NEXT:    [[TMP2132:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2133:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3315:%.*]] = icmp eq i32 [[TMP2132]], [[TMP2133]]
// SIMD-ONLY0-NEXT:    [[CONV3316:%.*]] = zext i1 [[CMP3315]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3316]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2134:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3317:%.*]] = icmp ne i32 [[TMP2134]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3317]], label [[IF_THEN3318:%.*]], label [[IF_END3319:%.*]]
// SIMD-ONLY0:       if.then3318:
// SIMD-ONLY0-NEXT:    [[TMP2135:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2135]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3319]]
// SIMD-ONLY0:       if.end3319:
// SIMD-ONLY0-NEXT:    [[TMP2136:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2137:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3320:%.*]] = icmp eq i32 [[TMP2136]], [[TMP2137]]
// SIMD-ONLY0-NEXT:    [[CONV3321:%.*]] = zext i1 [[CMP3320]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3321]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2138:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3322:%.*]] = icmp ne i32 [[TMP2138]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3322]], label [[IF_THEN3323:%.*]], label [[IF_ELSE3324:%.*]]
// SIMD-ONLY0:       if.then3323:
// SIMD-ONLY0-NEXT:    [[TMP2139:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2139]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3325:%.*]]
// SIMD-ONLY0:       if.else3324:
// SIMD-ONLY0-NEXT:    [[TMP2140:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2140]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3325]]
// SIMD-ONLY0:       if.end3325:
// SIMD-ONLY0-NEXT:    [[TMP2141:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2142:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3326:%.*]] = icmp eq i32 [[TMP2141]], [[TMP2142]]
// SIMD-ONLY0-NEXT:    [[CONV3327:%.*]] = zext i1 [[CMP3326]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3327]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2143:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3328:%.*]] = icmp ne i32 [[TMP2143]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3328]], label [[IF_THEN3329:%.*]], label [[IF_ELSE3330:%.*]]
// SIMD-ONLY0:       if.then3329:
// SIMD-ONLY0-NEXT:    [[TMP2144:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2144]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3331:%.*]]
// SIMD-ONLY0:       if.else3330:
// SIMD-ONLY0-NEXT:    [[TMP2145:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2145]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3331]]
// SIMD-ONLY0:       if.end3331:
// SIMD-ONLY0-NEXT:    [[TMP2146:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2146]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2147:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2148:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3332:%.*]] = icmp sgt i32 [[TMP2147]], [[TMP2148]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3332]], label [[IF_THEN3334:%.*]], label [[IF_END3335:%.*]]
// SIMD-ONLY0:       if.then3334:
// SIMD-ONLY0-NEXT:    [[TMP2149:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2149]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3335]]
// SIMD-ONLY0:       if.end3335:
// SIMD-ONLY0-NEXT:    [[TMP2150:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2150]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2151:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2152:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3336:%.*]] = icmp sgt i32 [[TMP2151]], [[TMP2152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3336]], label [[IF_THEN3338:%.*]], label [[IF_END3339:%.*]]
// SIMD-ONLY0:       if.then3338:
// SIMD-ONLY0-NEXT:    [[TMP2153:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2153]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3339]]
// SIMD-ONLY0:       if.end3339:
// SIMD-ONLY0-NEXT:    [[TMP2154:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2154]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2155:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2156:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3340:%.*]] = icmp slt i32 [[TMP2155]], [[TMP2156]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3340]], label [[IF_THEN3342:%.*]], label [[IF_END3343:%.*]]
// SIMD-ONLY0:       if.then3342:
// SIMD-ONLY0-NEXT:    [[TMP2157:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2157]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3343]]
// SIMD-ONLY0:       if.end3343:
// SIMD-ONLY0-NEXT:    [[TMP2158:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2158]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2159:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2160:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3344:%.*]] = icmp slt i32 [[TMP2159]], [[TMP2160]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3344]], label [[IF_THEN3346:%.*]], label [[IF_END3347:%.*]]
// SIMD-ONLY0:       if.then3346:
// SIMD-ONLY0-NEXT:    [[TMP2161:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2161]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3347]]
// SIMD-ONLY0:       if.end3347:
// SIMD-ONLY0-NEXT:    [[TMP2162:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2162]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2163:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2164:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3348:%.*]] = icmp eq i32 [[TMP2163]], [[TMP2164]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3348]], label [[IF_THEN3350:%.*]], label [[IF_END3351:%.*]]
// SIMD-ONLY0:       if.then3350:
// SIMD-ONLY0-NEXT:    [[TMP2165:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2165]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3351]]
// SIMD-ONLY0:       if.end3351:
// SIMD-ONLY0-NEXT:    [[TMP2166:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2166]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2167:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2168:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3352:%.*]] = icmp eq i32 [[TMP2167]], [[TMP2168]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3352]], label [[IF_THEN3354:%.*]], label [[IF_END3355:%.*]]
// SIMD-ONLY0:       if.then3354:
// SIMD-ONLY0-NEXT:    [[TMP2169:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2169]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3355]]
// SIMD-ONLY0:       if.end3355:
// SIMD-ONLY0-NEXT:    [[TMP2170:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2171:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3356:%.*]] = icmp sgt i32 [[TMP2170]], [[TMP2171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3356]], label [[IF_THEN3358:%.*]], label [[IF_END3359:%.*]]
// SIMD-ONLY0:       if.then3358:
// SIMD-ONLY0-NEXT:    [[TMP2172:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2172]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3359]]
// SIMD-ONLY0:       if.end3359:
// SIMD-ONLY0-NEXT:    [[TMP2173:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2173]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2174:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2175:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3360:%.*]] = icmp sgt i32 [[TMP2174]], [[TMP2175]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3360]], label [[IF_THEN3362:%.*]], label [[IF_END3363:%.*]]
// SIMD-ONLY0:       if.then3362:
// SIMD-ONLY0-NEXT:    [[TMP2176:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2176]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3363]]
// SIMD-ONLY0:       if.end3363:
// SIMD-ONLY0-NEXT:    [[TMP2177:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2177]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2178:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2179:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3364:%.*]] = icmp slt i32 [[TMP2178]], [[TMP2179]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3364]], label [[IF_THEN3366:%.*]], label [[IF_END3367:%.*]]
// SIMD-ONLY0:       if.then3366:
// SIMD-ONLY0-NEXT:    [[TMP2180:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2180]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3367]]
// SIMD-ONLY0:       if.end3367:
// SIMD-ONLY0-NEXT:    [[TMP2181:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2181]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2182:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2183:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3368:%.*]] = icmp slt i32 [[TMP2182]], [[TMP2183]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3368]], label [[IF_THEN3370:%.*]], label [[IF_END3371:%.*]]
// SIMD-ONLY0:       if.then3370:
// SIMD-ONLY0-NEXT:    [[TMP2184:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2184]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3371]]
// SIMD-ONLY0:       if.end3371:
// SIMD-ONLY0-NEXT:    [[TMP2185:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2185]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2186:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2187:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3372:%.*]] = icmp eq i32 [[TMP2186]], [[TMP2187]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3372]], label [[IF_THEN3374:%.*]], label [[IF_END3375:%.*]]
// SIMD-ONLY0:       if.then3374:
// SIMD-ONLY0-NEXT:    [[TMP2188:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2188]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3375]]
// SIMD-ONLY0:       if.end3375:
// SIMD-ONLY0-NEXT:    [[TMP2189:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2189]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2190:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2191:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3376:%.*]] = icmp eq i32 [[TMP2190]], [[TMP2191]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3376]], label [[IF_THEN3378:%.*]], label [[IF_END3379:%.*]]
// SIMD-ONLY0:       if.then3378:
// SIMD-ONLY0-NEXT:    [[TMP2192:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2192]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3379]]
// SIMD-ONLY0:       if.end3379:
// SIMD-ONLY0-NEXT:    [[TMP2193:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2193]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2194:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2195:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3380:%.*]] = icmp eq i32 [[TMP2194]], [[TMP2195]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3380]], label [[IF_THEN3382:%.*]], label [[IF_ELSE3383:%.*]]
// SIMD-ONLY0:       if.then3382:
// SIMD-ONLY0-NEXT:    [[TMP2196:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2196]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3384:%.*]]
// SIMD-ONLY0:       if.else3383:
// SIMD-ONLY0-NEXT:    [[TMP2197:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2197]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3384]]
// SIMD-ONLY0:       if.end3384:
// SIMD-ONLY0-NEXT:    [[TMP2198:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2199:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3385:%.*]] = icmp eq i32 [[TMP2198]], [[TMP2199]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3385]], label [[IF_THEN3387:%.*]], label [[IF_ELSE3388:%.*]]
// SIMD-ONLY0:       if.then3387:
// SIMD-ONLY0-NEXT:    [[TMP2200:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2200]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3389:%.*]]
// SIMD-ONLY0:       if.else3388:
// SIMD-ONLY0-NEXT:    [[TMP2201:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2201]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3389]]
// SIMD-ONLY0:       if.end3389:
// SIMD-ONLY0-NEXT:    [[TMP2202:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2203:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3390:%.*]] = icmp eq i32 [[TMP2202]], [[TMP2203]]
// SIMD-ONLY0-NEXT:    [[CONV3391:%.*]] = zext i1 [[CMP3390]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3391]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2204:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3392:%.*]] = icmp ne i32 [[TMP2204]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3392]], label [[IF_THEN3393:%.*]], label [[IF_END3394:%.*]]
// SIMD-ONLY0:       if.then3393:
// SIMD-ONLY0-NEXT:    [[TMP2205:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2205]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3394]]
// SIMD-ONLY0:       if.end3394:
// SIMD-ONLY0-NEXT:    [[TMP2206:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2207:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3395:%.*]] = icmp eq i32 [[TMP2206]], [[TMP2207]]
// SIMD-ONLY0-NEXT:    [[CONV3396:%.*]] = zext i1 [[CMP3395]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3396]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2208:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3397:%.*]] = icmp ne i32 [[TMP2208]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3397]], label [[IF_THEN3398:%.*]], label [[IF_END3399:%.*]]
// SIMD-ONLY0:       if.then3398:
// SIMD-ONLY0-NEXT:    [[TMP2209:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2209]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3399]]
// SIMD-ONLY0:       if.end3399:
// SIMD-ONLY0-NEXT:    [[TMP2210:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2211:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3400:%.*]] = icmp eq i32 [[TMP2210]], [[TMP2211]]
// SIMD-ONLY0-NEXT:    [[CONV3401:%.*]] = zext i1 [[CMP3400]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3401]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2212:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3402:%.*]] = icmp ne i32 [[TMP2212]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3402]], label [[IF_THEN3403:%.*]], label [[IF_ELSE3404:%.*]]
// SIMD-ONLY0:       if.then3403:
// SIMD-ONLY0-NEXT:    [[TMP2213:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2213]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3405:%.*]]
// SIMD-ONLY0:       if.else3404:
// SIMD-ONLY0-NEXT:    [[TMP2214:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2214]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3405]]
// SIMD-ONLY0:       if.end3405:
// SIMD-ONLY0-NEXT:    [[TMP2215:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2216:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3406:%.*]] = icmp eq i32 [[TMP2215]], [[TMP2216]]
// SIMD-ONLY0-NEXT:    [[CONV3407:%.*]] = zext i1 [[CMP3406]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3407]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2217:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3408:%.*]] = icmp ne i32 [[TMP2217]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3408]], label [[IF_THEN3409:%.*]], label [[IF_ELSE3410:%.*]]
// SIMD-ONLY0:       if.then3409:
// SIMD-ONLY0-NEXT:    [[TMP2218:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2218]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3411:%.*]]
// SIMD-ONLY0:       if.else3410:
// SIMD-ONLY0-NEXT:    [[TMP2219:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2219]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3411]]
// SIMD-ONLY0:       if.end3411:
// SIMD-ONLY0-NEXT:    [[TMP2220:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2220]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2221:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2222:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3412:%.*]] = icmp ugt i32 [[TMP2221]], [[TMP2222]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3412]], label [[IF_THEN3414:%.*]], label [[IF_END3415:%.*]]
// SIMD-ONLY0:       if.then3414:
// SIMD-ONLY0-NEXT:    [[TMP2223:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2223]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3415]]
// SIMD-ONLY0:       if.end3415:
// SIMD-ONLY0-NEXT:    [[TMP2224:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2224]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2225:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2226:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3416:%.*]] = icmp ugt i32 [[TMP2225]], [[TMP2226]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3416]], label [[IF_THEN3418:%.*]], label [[IF_END3419:%.*]]
// SIMD-ONLY0:       if.then3418:
// SIMD-ONLY0-NEXT:    [[TMP2227:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2227]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3419]]
// SIMD-ONLY0:       if.end3419:
// SIMD-ONLY0-NEXT:    [[TMP2228:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2228]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2229:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2230:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3420:%.*]] = icmp ult i32 [[TMP2229]], [[TMP2230]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3420]], label [[IF_THEN3422:%.*]], label [[IF_END3423:%.*]]
// SIMD-ONLY0:       if.then3422:
// SIMD-ONLY0-NEXT:    [[TMP2231:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2231]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3423]]
// SIMD-ONLY0:       if.end3423:
// SIMD-ONLY0-NEXT:    [[TMP2232:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2232]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2233:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2234:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3424:%.*]] = icmp ult i32 [[TMP2233]], [[TMP2234]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3424]], label [[IF_THEN3426:%.*]], label [[IF_END3427:%.*]]
// SIMD-ONLY0:       if.then3426:
// SIMD-ONLY0-NEXT:    [[TMP2235:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2235]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3427]]
// SIMD-ONLY0:       if.end3427:
// SIMD-ONLY0-NEXT:    [[TMP2236:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2236]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2237:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2238:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3428:%.*]] = icmp eq i32 [[TMP2237]], [[TMP2238]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3428]], label [[IF_THEN3430:%.*]], label [[IF_END3431:%.*]]
// SIMD-ONLY0:       if.then3430:
// SIMD-ONLY0-NEXT:    [[TMP2239:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2239]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3431]]
// SIMD-ONLY0:       if.end3431:
// SIMD-ONLY0-NEXT:    [[TMP2240:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2240]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2241:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2242:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3432:%.*]] = icmp eq i32 [[TMP2241]], [[TMP2242]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3432]], label [[IF_THEN3434:%.*]], label [[IF_END3435:%.*]]
// SIMD-ONLY0:       if.then3434:
// SIMD-ONLY0-NEXT:    [[TMP2243:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2243]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3435]]
// SIMD-ONLY0:       if.end3435:
// SIMD-ONLY0-NEXT:    [[TMP2244:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2245:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3436:%.*]] = icmp ugt i32 [[TMP2244]], [[TMP2245]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3436]], label [[IF_THEN3438:%.*]], label [[IF_END3439:%.*]]
// SIMD-ONLY0:       if.then3438:
// SIMD-ONLY0-NEXT:    [[TMP2246:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2246]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3439]]
// SIMD-ONLY0:       if.end3439:
// SIMD-ONLY0-NEXT:    [[TMP2247:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2247]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2248:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2249:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3440:%.*]] = icmp ugt i32 [[TMP2248]], [[TMP2249]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3440]], label [[IF_THEN3442:%.*]], label [[IF_END3443:%.*]]
// SIMD-ONLY0:       if.then3442:
// SIMD-ONLY0-NEXT:    [[TMP2250:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2250]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3443]]
// SIMD-ONLY0:       if.end3443:
// SIMD-ONLY0-NEXT:    [[TMP2251:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2251]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2252:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2253:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3444:%.*]] = icmp ult i32 [[TMP2252]], [[TMP2253]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3444]], label [[IF_THEN3446:%.*]], label [[IF_END3447:%.*]]
// SIMD-ONLY0:       if.then3446:
// SIMD-ONLY0-NEXT:    [[TMP2254:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2254]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3447]]
// SIMD-ONLY0:       if.end3447:
// SIMD-ONLY0-NEXT:    [[TMP2255:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2255]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2256:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2257:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3448:%.*]] = icmp ult i32 [[TMP2256]], [[TMP2257]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3448]], label [[IF_THEN3450:%.*]], label [[IF_END3451:%.*]]
// SIMD-ONLY0:       if.then3450:
// SIMD-ONLY0-NEXT:    [[TMP2258:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2258]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3451]]
// SIMD-ONLY0:       if.end3451:
// SIMD-ONLY0-NEXT:    [[TMP2259:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2259]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2260:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2261:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3452:%.*]] = icmp eq i32 [[TMP2260]], [[TMP2261]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3452]], label [[IF_THEN3454:%.*]], label [[IF_END3455:%.*]]
// SIMD-ONLY0:       if.then3454:
// SIMD-ONLY0-NEXT:    [[TMP2262:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2262]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3455]]
// SIMD-ONLY0:       if.end3455:
// SIMD-ONLY0-NEXT:    [[TMP2263:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2263]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2264:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2265:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3456:%.*]] = icmp eq i32 [[TMP2264]], [[TMP2265]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3456]], label [[IF_THEN3458:%.*]], label [[IF_END3459:%.*]]
// SIMD-ONLY0:       if.then3458:
// SIMD-ONLY0-NEXT:    [[TMP2266:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2266]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3459]]
// SIMD-ONLY0:       if.end3459:
// SIMD-ONLY0-NEXT:    [[TMP2267:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2267]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2268:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2269:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3460:%.*]] = icmp eq i32 [[TMP2268]], [[TMP2269]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3460]], label [[IF_THEN3462:%.*]], label [[IF_ELSE3463:%.*]]
// SIMD-ONLY0:       if.then3462:
// SIMD-ONLY0-NEXT:    [[TMP2270:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2270]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3464:%.*]]
// SIMD-ONLY0:       if.else3463:
// SIMD-ONLY0-NEXT:    [[TMP2271:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2271]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3464]]
// SIMD-ONLY0:       if.end3464:
// SIMD-ONLY0-NEXT:    [[TMP2272:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2273:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3465:%.*]] = icmp eq i32 [[TMP2272]], [[TMP2273]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3465]], label [[IF_THEN3467:%.*]], label [[IF_ELSE3468:%.*]]
// SIMD-ONLY0:       if.then3467:
// SIMD-ONLY0-NEXT:    [[TMP2274:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2274]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3469:%.*]]
// SIMD-ONLY0:       if.else3468:
// SIMD-ONLY0-NEXT:    [[TMP2275:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2275]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3469]]
// SIMD-ONLY0:       if.end3469:
// SIMD-ONLY0-NEXT:    [[TMP2276:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2277:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3470:%.*]] = icmp eq i32 [[TMP2276]], [[TMP2277]]
// SIMD-ONLY0-NEXT:    [[CONV3471:%.*]] = zext i1 [[CMP3470]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3471]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2278:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3472:%.*]] = icmp ne i32 [[TMP2278]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3472]], label [[IF_THEN3473:%.*]], label [[IF_END3474:%.*]]
// SIMD-ONLY0:       if.then3473:
// SIMD-ONLY0-NEXT:    [[TMP2279:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2279]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3474]]
// SIMD-ONLY0:       if.end3474:
// SIMD-ONLY0-NEXT:    [[TMP2280:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2281:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3475:%.*]] = icmp eq i32 [[TMP2280]], [[TMP2281]]
// SIMD-ONLY0-NEXT:    [[CONV3476:%.*]] = zext i1 [[CMP3475]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3476]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2282:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3477:%.*]] = icmp ne i32 [[TMP2282]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3477]], label [[IF_THEN3478:%.*]], label [[IF_END3479:%.*]]
// SIMD-ONLY0:       if.then3478:
// SIMD-ONLY0-NEXT:    [[TMP2283:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2283]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3479]]
// SIMD-ONLY0:       if.end3479:
// SIMD-ONLY0-NEXT:    [[TMP2284:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2285:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3480:%.*]] = icmp eq i32 [[TMP2284]], [[TMP2285]]
// SIMD-ONLY0-NEXT:    [[CONV3481:%.*]] = zext i1 [[CMP3480]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3481]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2286:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3482:%.*]] = icmp ne i32 [[TMP2286]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3482]], label [[IF_THEN3483:%.*]], label [[IF_ELSE3484:%.*]]
// SIMD-ONLY0:       if.then3483:
// SIMD-ONLY0-NEXT:    [[TMP2287:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2287]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3485:%.*]]
// SIMD-ONLY0:       if.else3484:
// SIMD-ONLY0-NEXT:    [[TMP2288:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2288]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3485]]
// SIMD-ONLY0:       if.end3485:
// SIMD-ONLY0-NEXT:    [[TMP2289:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2290:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3486:%.*]] = icmp eq i32 [[TMP2289]], [[TMP2290]]
// SIMD-ONLY0-NEXT:    [[CONV3487:%.*]] = zext i1 [[CMP3486]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3487]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2291:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3488:%.*]] = icmp ne i32 [[TMP2291]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3488]], label [[IF_THEN3489:%.*]], label [[IF_ELSE3490:%.*]]
// SIMD-ONLY0:       if.then3489:
// SIMD-ONLY0-NEXT:    [[TMP2292:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2292]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3491:%.*]]
// SIMD-ONLY0:       if.else3490:
// SIMD-ONLY0-NEXT:    [[TMP2293:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2293]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3491]]
// SIMD-ONLY0:       if.end3491:
// SIMD-ONLY0-NEXT:    [[TMP2294:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2294]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2295:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2296:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3492:%.*]] = icmp ugt i32 [[TMP2295]], [[TMP2296]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3492]], label [[IF_THEN3494:%.*]], label [[IF_END3495:%.*]]
// SIMD-ONLY0:       if.then3494:
// SIMD-ONLY0-NEXT:    [[TMP2297:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2297]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3495]]
// SIMD-ONLY0:       if.end3495:
// SIMD-ONLY0-NEXT:    [[TMP2298:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2298]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2299:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2300:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3496:%.*]] = icmp ugt i32 [[TMP2299]], [[TMP2300]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3496]], label [[IF_THEN3498:%.*]], label [[IF_END3499:%.*]]
// SIMD-ONLY0:       if.then3498:
// SIMD-ONLY0-NEXT:    [[TMP2301:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2301]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3499]]
// SIMD-ONLY0:       if.end3499:
// SIMD-ONLY0-NEXT:    [[TMP2302:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2302]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2303:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2304:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3500:%.*]] = icmp ult i32 [[TMP2303]], [[TMP2304]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3500]], label [[IF_THEN3502:%.*]], label [[IF_END3503:%.*]]
// SIMD-ONLY0:       if.then3502:
// SIMD-ONLY0-NEXT:    [[TMP2305:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2305]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3503]]
// SIMD-ONLY0:       if.end3503:
// SIMD-ONLY0-NEXT:    [[TMP2306:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2306]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2307:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2308:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3504:%.*]] = icmp ult i32 [[TMP2307]], [[TMP2308]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3504]], label [[IF_THEN3506:%.*]], label [[IF_END3507:%.*]]
// SIMD-ONLY0:       if.then3506:
// SIMD-ONLY0-NEXT:    [[TMP2309:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2309]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3507]]
// SIMD-ONLY0:       if.end3507:
// SIMD-ONLY0-NEXT:    [[TMP2310:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2310]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2311:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2312:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3508:%.*]] = icmp eq i32 [[TMP2311]], [[TMP2312]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3508]], label [[IF_THEN3510:%.*]], label [[IF_END3511:%.*]]
// SIMD-ONLY0:       if.then3510:
// SIMD-ONLY0-NEXT:    [[TMP2313:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2313]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3511]]
// SIMD-ONLY0:       if.end3511:
// SIMD-ONLY0-NEXT:    [[TMP2314:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2314]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2315:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2316:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3512:%.*]] = icmp eq i32 [[TMP2315]], [[TMP2316]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3512]], label [[IF_THEN3514:%.*]], label [[IF_END3515:%.*]]
// SIMD-ONLY0:       if.then3514:
// SIMD-ONLY0-NEXT:    [[TMP2317:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2317]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3515]]
// SIMD-ONLY0:       if.end3515:
// SIMD-ONLY0-NEXT:    [[TMP2318:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2319:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3516:%.*]] = icmp ugt i32 [[TMP2318]], [[TMP2319]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3516]], label [[IF_THEN3518:%.*]], label [[IF_END3519:%.*]]
// SIMD-ONLY0:       if.then3518:
// SIMD-ONLY0-NEXT:    [[TMP2320:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2320]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3519]]
// SIMD-ONLY0:       if.end3519:
// SIMD-ONLY0-NEXT:    [[TMP2321:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2321]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2322:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2323:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3520:%.*]] = icmp ugt i32 [[TMP2322]], [[TMP2323]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3520]], label [[IF_THEN3522:%.*]], label [[IF_END3523:%.*]]
// SIMD-ONLY0:       if.then3522:
// SIMD-ONLY0-NEXT:    [[TMP2324:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2324]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3523]]
// SIMD-ONLY0:       if.end3523:
// SIMD-ONLY0-NEXT:    [[TMP2325:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2325]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2326:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2327:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3524:%.*]] = icmp ult i32 [[TMP2326]], [[TMP2327]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3524]], label [[IF_THEN3526:%.*]], label [[IF_END3527:%.*]]
// SIMD-ONLY0:       if.then3526:
// SIMD-ONLY0-NEXT:    [[TMP2328:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2328]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3527]]
// SIMD-ONLY0:       if.end3527:
// SIMD-ONLY0-NEXT:    [[TMP2329:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2329]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2330:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2331:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3528:%.*]] = icmp ult i32 [[TMP2330]], [[TMP2331]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3528]], label [[IF_THEN3530:%.*]], label [[IF_END3531:%.*]]
// SIMD-ONLY0:       if.then3530:
// SIMD-ONLY0-NEXT:    [[TMP2332:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2332]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3531]]
// SIMD-ONLY0:       if.end3531:
// SIMD-ONLY0-NEXT:    [[TMP2333:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2333]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2334:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2335:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3532:%.*]] = icmp eq i32 [[TMP2334]], [[TMP2335]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3532]], label [[IF_THEN3534:%.*]], label [[IF_END3535:%.*]]
// SIMD-ONLY0:       if.then3534:
// SIMD-ONLY0-NEXT:    [[TMP2336:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2336]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3535]]
// SIMD-ONLY0:       if.end3535:
// SIMD-ONLY0-NEXT:    [[TMP2337:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2337]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2338:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2339:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3536:%.*]] = icmp eq i32 [[TMP2338]], [[TMP2339]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3536]], label [[IF_THEN3538:%.*]], label [[IF_END3539:%.*]]
// SIMD-ONLY0:       if.then3538:
// SIMD-ONLY0-NEXT:    [[TMP2340:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2340]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3539]]
// SIMD-ONLY0:       if.end3539:
// SIMD-ONLY0-NEXT:    [[TMP2341:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2341]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2342:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2343:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3540:%.*]] = icmp eq i32 [[TMP2342]], [[TMP2343]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3540]], label [[IF_THEN3542:%.*]], label [[IF_ELSE3543:%.*]]
// SIMD-ONLY0:       if.then3542:
// SIMD-ONLY0-NEXT:    [[TMP2344:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2344]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3544:%.*]]
// SIMD-ONLY0:       if.else3543:
// SIMD-ONLY0-NEXT:    [[TMP2345:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2345]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3544]]
// SIMD-ONLY0:       if.end3544:
// SIMD-ONLY0-NEXT:    [[TMP2346:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2347:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3545:%.*]] = icmp eq i32 [[TMP2346]], [[TMP2347]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3545]], label [[IF_THEN3547:%.*]], label [[IF_ELSE3548:%.*]]
// SIMD-ONLY0:       if.then3547:
// SIMD-ONLY0-NEXT:    [[TMP2348:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2348]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3549:%.*]]
// SIMD-ONLY0:       if.else3548:
// SIMD-ONLY0-NEXT:    [[TMP2349:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2349]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3549]]
// SIMD-ONLY0:       if.end3549:
// SIMD-ONLY0-NEXT:    [[TMP2350:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2351:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3550:%.*]] = icmp eq i32 [[TMP2350]], [[TMP2351]]
// SIMD-ONLY0-NEXT:    [[CONV3551:%.*]] = zext i1 [[CMP3550]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3551]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2352:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3552:%.*]] = icmp ne i32 [[TMP2352]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3552]], label [[IF_THEN3553:%.*]], label [[IF_END3554:%.*]]
// SIMD-ONLY0:       if.then3553:
// SIMD-ONLY0-NEXT:    [[TMP2353:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2353]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3554]]
// SIMD-ONLY0:       if.end3554:
// SIMD-ONLY0-NEXT:    [[TMP2354:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2355:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3555:%.*]] = icmp eq i32 [[TMP2354]], [[TMP2355]]
// SIMD-ONLY0-NEXT:    [[CONV3556:%.*]] = zext i1 [[CMP3555]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3556]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2356:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3557:%.*]] = icmp ne i32 [[TMP2356]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3557]], label [[IF_THEN3558:%.*]], label [[IF_END3559:%.*]]
// SIMD-ONLY0:       if.then3558:
// SIMD-ONLY0-NEXT:    [[TMP2357:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2357]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3559]]
// SIMD-ONLY0:       if.end3559:
// SIMD-ONLY0-NEXT:    [[TMP2358:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2359:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3560:%.*]] = icmp eq i32 [[TMP2358]], [[TMP2359]]
// SIMD-ONLY0-NEXT:    [[CONV3561:%.*]] = zext i1 [[CMP3560]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3561]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2360:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3562:%.*]] = icmp ne i32 [[TMP2360]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3562]], label [[IF_THEN3563:%.*]], label [[IF_ELSE3564:%.*]]
// SIMD-ONLY0:       if.then3563:
// SIMD-ONLY0-NEXT:    [[TMP2361:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2361]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3565:%.*]]
// SIMD-ONLY0:       if.else3564:
// SIMD-ONLY0-NEXT:    [[TMP2362:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2362]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3565]]
// SIMD-ONLY0:       if.end3565:
// SIMD-ONLY0-NEXT:    [[TMP2363:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2364:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3566:%.*]] = icmp eq i32 [[TMP2363]], [[TMP2364]]
// SIMD-ONLY0-NEXT:    [[CONV3567:%.*]] = zext i1 [[CMP3566]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3567]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2365:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3568:%.*]] = icmp ne i32 [[TMP2365]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3568]], label [[IF_THEN3569:%.*]], label [[IF_ELSE3570:%.*]]
// SIMD-ONLY0:       if.then3569:
// SIMD-ONLY0-NEXT:    [[TMP2366:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2366]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3571:%.*]]
// SIMD-ONLY0:       if.else3570:
// SIMD-ONLY0-NEXT:    [[TMP2367:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2367]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3571]]
// SIMD-ONLY0:       if.end3571:
// SIMD-ONLY0-NEXT:    [[TMP2368:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2368]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2369:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2370:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3572:%.*]] = icmp ugt i32 [[TMP2369]], [[TMP2370]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3572]], label [[IF_THEN3574:%.*]], label [[IF_END3575:%.*]]
// SIMD-ONLY0:       if.then3574:
// SIMD-ONLY0-NEXT:    [[TMP2371:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2371]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3575]]
// SIMD-ONLY0:       if.end3575:
// SIMD-ONLY0-NEXT:    [[TMP2372:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2372]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2373:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2374:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3576:%.*]] = icmp ugt i32 [[TMP2373]], [[TMP2374]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3576]], label [[IF_THEN3578:%.*]], label [[IF_END3579:%.*]]
// SIMD-ONLY0:       if.then3578:
// SIMD-ONLY0-NEXT:    [[TMP2375:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2375]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3579]]
// SIMD-ONLY0:       if.end3579:
// SIMD-ONLY0-NEXT:    [[TMP2376:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2376]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2377:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2378:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3580:%.*]] = icmp ult i32 [[TMP2377]], [[TMP2378]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3580]], label [[IF_THEN3582:%.*]], label [[IF_END3583:%.*]]
// SIMD-ONLY0:       if.then3582:
// SIMD-ONLY0-NEXT:    [[TMP2379:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2379]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3583]]
// SIMD-ONLY0:       if.end3583:
// SIMD-ONLY0-NEXT:    [[TMP2380:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2380]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2381:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2382:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3584:%.*]] = icmp ult i32 [[TMP2381]], [[TMP2382]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3584]], label [[IF_THEN3586:%.*]], label [[IF_END3587:%.*]]
// SIMD-ONLY0:       if.then3586:
// SIMD-ONLY0-NEXT:    [[TMP2383:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2383]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3587]]
// SIMD-ONLY0:       if.end3587:
// SIMD-ONLY0-NEXT:    [[TMP2384:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2384]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2385:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2386:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3588:%.*]] = icmp eq i32 [[TMP2385]], [[TMP2386]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3588]], label [[IF_THEN3590:%.*]], label [[IF_END3591:%.*]]
// SIMD-ONLY0:       if.then3590:
// SIMD-ONLY0-NEXT:    [[TMP2387:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2387]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3591]]
// SIMD-ONLY0:       if.end3591:
// SIMD-ONLY0-NEXT:    [[TMP2388:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2388]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2389:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2390:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3592:%.*]] = icmp eq i32 [[TMP2389]], [[TMP2390]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3592]], label [[IF_THEN3594:%.*]], label [[IF_END3595:%.*]]
// SIMD-ONLY0:       if.then3594:
// SIMD-ONLY0-NEXT:    [[TMP2391:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2391]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3595]]
// SIMD-ONLY0:       if.end3595:
// SIMD-ONLY0-NEXT:    [[TMP2392:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2393:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3596:%.*]] = icmp ugt i32 [[TMP2392]], [[TMP2393]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3596]], label [[IF_THEN3598:%.*]], label [[IF_END3599:%.*]]
// SIMD-ONLY0:       if.then3598:
// SIMD-ONLY0-NEXT:    [[TMP2394:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2394]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3599]]
// SIMD-ONLY0:       if.end3599:
// SIMD-ONLY0-NEXT:    [[TMP2395:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2395]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2396:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2397:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3600:%.*]] = icmp ugt i32 [[TMP2396]], [[TMP2397]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3600]], label [[IF_THEN3602:%.*]], label [[IF_END3603:%.*]]
// SIMD-ONLY0:       if.then3602:
// SIMD-ONLY0-NEXT:    [[TMP2398:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2398]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3603]]
// SIMD-ONLY0:       if.end3603:
// SIMD-ONLY0-NEXT:    [[TMP2399:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2399]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2400:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2401:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3604:%.*]] = icmp ult i32 [[TMP2400]], [[TMP2401]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3604]], label [[IF_THEN3606:%.*]], label [[IF_END3607:%.*]]
// SIMD-ONLY0:       if.then3606:
// SIMD-ONLY0-NEXT:    [[TMP2402:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2402]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3607]]
// SIMD-ONLY0:       if.end3607:
// SIMD-ONLY0-NEXT:    [[TMP2403:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2403]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2404:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2405:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3608:%.*]] = icmp ult i32 [[TMP2404]], [[TMP2405]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3608]], label [[IF_THEN3610:%.*]], label [[IF_END3611:%.*]]
// SIMD-ONLY0:       if.then3610:
// SIMD-ONLY0-NEXT:    [[TMP2406:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2406]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3611]]
// SIMD-ONLY0:       if.end3611:
// SIMD-ONLY0-NEXT:    [[TMP2407:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2407]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2408:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2409:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3612:%.*]] = icmp eq i32 [[TMP2408]], [[TMP2409]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3612]], label [[IF_THEN3614:%.*]], label [[IF_END3615:%.*]]
// SIMD-ONLY0:       if.then3614:
// SIMD-ONLY0-NEXT:    [[TMP2410:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2410]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3615]]
// SIMD-ONLY0:       if.end3615:
// SIMD-ONLY0-NEXT:    [[TMP2411:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2411]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2412:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2413:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3616:%.*]] = icmp eq i32 [[TMP2412]], [[TMP2413]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3616]], label [[IF_THEN3618:%.*]], label [[IF_END3619:%.*]]
// SIMD-ONLY0:       if.then3618:
// SIMD-ONLY0-NEXT:    [[TMP2414:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2414]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3619]]
// SIMD-ONLY0:       if.end3619:
// SIMD-ONLY0-NEXT:    [[TMP2415:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2415]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2416:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2417:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3620:%.*]] = icmp eq i32 [[TMP2416]], [[TMP2417]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3620]], label [[IF_THEN3622:%.*]], label [[IF_ELSE3623:%.*]]
// SIMD-ONLY0:       if.then3622:
// SIMD-ONLY0-NEXT:    [[TMP2418:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2418]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3624:%.*]]
// SIMD-ONLY0:       if.else3623:
// SIMD-ONLY0-NEXT:    [[TMP2419:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2419]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3624]]
// SIMD-ONLY0:       if.end3624:
// SIMD-ONLY0-NEXT:    [[TMP2420:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2421:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3625:%.*]] = icmp eq i32 [[TMP2420]], [[TMP2421]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3625]], label [[IF_THEN3627:%.*]], label [[IF_ELSE3628:%.*]]
// SIMD-ONLY0:       if.then3627:
// SIMD-ONLY0-NEXT:    [[TMP2422:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2422]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3629:%.*]]
// SIMD-ONLY0:       if.else3628:
// SIMD-ONLY0-NEXT:    [[TMP2423:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2423]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3629]]
// SIMD-ONLY0:       if.end3629:
// SIMD-ONLY0-NEXT:    [[TMP2424:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2425:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3630:%.*]] = icmp eq i32 [[TMP2424]], [[TMP2425]]
// SIMD-ONLY0-NEXT:    [[CONV3631:%.*]] = zext i1 [[CMP3630]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3631]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2426:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3632:%.*]] = icmp ne i32 [[TMP2426]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3632]], label [[IF_THEN3633:%.*]], label [[IF_END3634:%.*]]
// SIMD-ONLY0:       if.then3633:
// SIMD-ONLY0-NEXT:    [[TMP2427:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2427]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3634]]
// SIMD-ONLY0:       if.end3634:
// SIMD-ONLY0-NEXT:    [[TMP2428:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2429:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3635:%.*]] = icmp eq i32 [[TMP2428]], [[TMP2429]]
// SIMD-ONLY0-NEXT:    [[CONV3636:%.*]] = zext i1 [[CMP3635]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3636]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2430:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3637:%.*]] = icmp ne i32 [[TMP2430]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3637]], label [[IF_THEN3638:%.*]], label [[IF_END3639:%.*]]
// SIMD-ONLY0:       if.then3638:
// SIMD-ONLY0-NEXT:    [[TMP2431:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2431]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3639]]
// SIMD-ONLY0:       if.end3639:
// SIMD-ONLY0-NEXT:    [[TMP2432:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2433:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3640:%.*]] = icmp eq i32 [[TMP2432]], [[TMP2433]]
// SIMD-ONLY0-NEXT:    [[CONV3641:%.*]] = zext i1 [[CMP3640]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3641]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2434:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3642:%.*]] = icmp ne i32 [[TMP2434]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3642]], label [[IF_THEN3643:%.*]], label [[IF_ELSE3644:%.*]]
// SIMD-ONLY0:       if.then3643:
// SIMD-ONLY0-NEXT:    [[TMP2435:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2435]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3645:%.*]]
// SIMD-ONLY0:       if.else3644:
// SIMD-ONLY0-NEXT:    [[TMP2436:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2436]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3645]]
// SIMD-ONLY0:       if.end3645:
// SIMD-ONLY0-NEXT:    [[TMP2437:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2438:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3646:%.*]] = icmp eq i32 [[TMP2437]], [[TMP2438]]
// SIMD-ONLY0-NEXT:    [[CONV3647:%.*]] = zext i1 [[CMP3646]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3647]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2439:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3648:%.*]] = icmp ne i32 [[TMP2439]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3648]], label [[IF_THEN3649:%.*]], label [[IF_ELSE3650:%.*]]
// SIMD-ONLY0:       if.then3649:
// SIMD-ONLY0-NEXT:    [[TMP2440:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2440]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3651:%.*]]
// SIMD-ONLY0:       if.else3650:
// SIMD-ONLY0-NEXT:    [[TMP2441:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2441]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3651]]
// SIMD-ONLY0:       if.end3651:
// SIMD-ONLY0-NEXT:    [[TMP2442:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2442]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2443:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2444:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3652:%.*]] = icmp ugt i32 [[TMP2443]], [[TMP2444]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3652]], label [[IF_THEN3654:%.*]], label [[IF_END3655:%.*]]
// SIMD-ONLY0:       if.then3654:
// SIMD-ONLY0-NEXT:    [[TMP2445:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2445]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3655]]
// SIMD-ONLY0:       if.end3655:
// SIMD-ONLY0-NEXT:    [[TMP2446:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2446]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2447:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2448:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3656:%.*]] = icmp ugt i32 [[TMP2447]], [[TMP2448]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3656]], label [[IF_THEN3658:%.*]], label [[IF_END3659:%.*]]
// SIMD-ONLY0:       if.then3658:
// SIMD-ONLY0-NEXT:    [[TMP2449:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2449]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3659]]
// SIMD-ONLY0:       if.end3659:
// SIMD-ONLY0-NEXT:    [[TMP2450:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2450]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2451:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2452:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3660:%.*]] = icmp ult i32 [[TMP2451]], [[TMP2452]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3660]], label [[IF_THEN3662:%.*]], label [[IF_END3663:%.*]]
// SIMD-ONLY0:       if.then3662:
// SIMD-ONLY0-NEXT:    [[TMP2453:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2453]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3663]]
// SIMD-ONLY0:       if.end3663:
// SIMD-ONLY0-NEXT:    [[TMP2454:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2454]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2455:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2456:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3664:%.*]] = icmp ult i32 [[TMP2455]], [[TMP2456]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3664]], label [[IF_THEN3666:%.*]], label [[IF_END3667:%.*]]
// SIMD-ONLY0:       if.then3666:
// SIMD-ONLY0-NEXT:    [[TMP2457:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2457]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3667]]
// SIMD-ONLY0:       if.end3667:
// SIMD-ONLY0-NEXT:    [[TMP2458:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2458]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2459:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2460:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3668:%.*]] = icmp eq i32 [[TMP2459]], [[TMP2460]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3668]], label [[IF_THEN3670:%.*]], label [[IF_END3671:%.*]]
// SIMD-ONLY0:       if.then3670:
// SIMD-ONLY0-NEXT:    [[TMP2461:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2461]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3671]]
// SIMD-ONLY0:       if.end3671:
// SIMD-ONLY0-NEXT:    [[TMP2462:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2462]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2463:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2464:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3672:%.*]] = icmp eq i32 [[TMP2463]], [[TMP2464]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3672]], label [[IF_THEN3674:%.*]], label [[IF_END3675:%.*]]
// SIMD-ONLY0:       if.then3674:
// SIMD-ONLY0-NEXT:    [[TMP2465:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2465]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3675]]
// SIMD-ONLY0:       if.end3675:
// SIMD-ONLY0-NEXT:    [[TMP2466:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2467:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3676:%.*]] = icmp ugt i32 [[TMP2466]], [[TMP2467]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3676]], label [[IF_THEN3678:%.*]], label [[IF_END3679:%.*]]
// SIMD-ONLY0:       if.then3678:
// SIMD-ONLY0-NEXT:    [[TMP2468:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2468]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3679]]
// SIMD-ONLY0:       if.end3679:
// SIMD-ONLY0-NEXT:    [[TMP2469:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2469]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2470:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2471:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3680:%.*]] = icmp ugt i32 [[TMP2470]], [[TMP2471]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3680]], label [[IF_THEN3682:%.*]], label [[IF_END3683:%.*]]
// SIMD-ONLY0:       if.then3682:
// SIMD-ONLY0-NEXT:    [[TMP2472:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2472]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3683]]
// SIMD-ONLY0:       if.end3683:
// SIMD-ONLY0-NEXT:    [[TMP2473:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2473]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2474:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2475:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3684:%.*]] = icmp ult i32 [[TMP2474]], [[TMP2475]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3684]], label [[IF_THEN3686:%.*]], label [[IF_END3687:%.*]]
// SIMD-ONLY0:       if.then3686:
// SIMD-ONLY0-NEXT:    [[TMP2476:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2476]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3687]]
// SIMD-ONLY0:       if.end3687:
// SIMD-ONLY0-NEXT:    [[TMP2477:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2477]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2478:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2479:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3688:%.*]] = icmp ult i32 [[TMP2478]], [[TMP2479]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3688]], label [[IF_THEN3690:%.*]], label [[IF_END3691:%.*]]
// SIMD-ONLY0:       if.then3690:
// SIMD-ONLY0-NEXT:    [[TMP2480:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2480]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3691]]
// SIMD-ONLY0:       if.end3691:
// SIMD-ONLY0-NEXT:    [[TMP2481:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2481]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2482:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2483:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3692:%.*]] = icmp eq i32 [[TMP2482]], [[TMP2483]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3692]], label [[IF_THEN3694:%.*]], label [[IF_END3695:%.*]]
// SIMD-ONLY0:       if.then3694:
// SIMD-ONLY0-NEXT:    [[TMP2484:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2484]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3695]]
// SIMD-ONLY0:       if.end3695:
// SIMD-ONLY0-NEXT:    [[TMP2485:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2485]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2486:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2487:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3696:%.*]] = icmp eq i32 [[TMP2486]], [[TMP2487]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3696]], label [[IF_THEN3698:%.*]], label [[IF_END3699:%.*]]
// SIMD-ONLY0:       if.then3698:
// SIMD-ONLY0-NEXT:    [[TMP2488:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2488]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3699]]
// SIMD-ONLY0:       if.end3699:
// SIMD-ONLY0-NEXT:    [[TMP2489:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2489]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2490:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2491:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3700:%.*]] = icmp eq i32 [[TMP2490]], [[TMP2491]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3700]], label [[IF_THEN3702:%.*]], label [[IF_ELSE3703:%.*]]
// SIMD-ONLY0:       if.then3702:
// SIMD-ONLY0-NEXT:    [[TMP2492:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2492]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3704:%.*]]
// SIMD-ONLY0:       if.else3703:
// SIMD-ONLY0-NEXT:    [[TMP2493:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2493]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3704]]
// SIMD-ONLY0:       if.end3704:
// SIMD-ONLY0-NEXT:    [[TMP2494:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2495:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3705:%.*]] = icmp eq i32 [[TMP2494]], [[TMP2495]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3705]], label [[IF_THEN3707:%.*]], label [[IF_ELSE3708:%.*]]
// SIMD-ONLY0:       if.then3707:
// SIMD-ONLY0-NEXT:    [[TMP2496:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2496]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3709:%.*]]
// SIMD-ONLY0:       if.else3708:
// SIMD-ONLY0-NEXT:    [[TMP2497:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2497]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3709]]
// SIMD-ONLY0:       if.end3709:
// SIMD-ONLY0-NEXT:    [[TMP2498:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2499:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3710:%.*]] = icmp eq i32 [[TMP2498]], [[TMP2499]]
// SIMD-ONLY0-NEXT:    [[CONV3711:%.*]] = zext i1 [[CMP3710]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3711]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2500:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3712:%.*]] = icmp ne i32 [[TMP2500]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3712]], label [[IF_THEN3713:%.*]], label [[IF_END3714:%.*]]
// SIMD-ONLY0:       if.then3713:
// SIMD-ONLY0-NEXT:    [[TMP2501:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2501]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3714]]
// SIMD-ONLY0:       if.end3714:
// SIMD-ONLY0-NEXT:    [[TMP2502:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2503:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3715:%.*]] = icmp eq i32 [[TMP2502]], [[TMP2503]]
// SIMD-ONLY0-NEXT:    [[CONV3716:%.*]] = zext i1 [[CMP3715]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3716]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2504:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3717:%.*]] = icmp ne i32 [[TMP2504]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3717]], label [[IF_THEN3718:%.*]], label [[IF_END3719:%.*]]
// SIMD-ONLY0:       if.then3718:
// SIMD-ONLY0-NEXT:    [[TMP2505:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2505]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3719]]
// SIMD-ONLY0:       if.end3719:
// SIMD-ONLY0-NEXT:    [[TMP2506:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2507:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3720:%.*]] = icmp eq i32 [[TMP2506]], [[TMP2507]]
// SIMD-ONLY0-NEXT:    [[CONV3721:%.*]] = zext i1 [[CMP3720]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3721]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2508:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3722:%.*]] = icmp ne i32 [[TMP2508]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3722]], label [[IF_THEN3723:%.*]], label [[IF_ELSE3724:%.*]]
// SIMD-ONLY0:       if.then3723:
// SIMD-ONLY0-NEXT:    [[TMP2509:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2509]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3725:%.*]]
// SIMD-ONLY0:       if.else3724:
// SIMD-ONLY0-NEXT:    [[TMP2510:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2510]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3725]]
// SIMD-ONLY0:       if.end3725:
// SIMD-ONLY0-NEXT:    [[TMP2511:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2512:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3726:%.*]] = icmp eq i32 [[TMP2511]], [[TMP2512]]
// SIMD-ONLY0-NEXT:    [[CONV3727:%.*]] = zext i1 [[CMP3726]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3727]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2513:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3728:%.*]] = icmp ne i32 [[TMP2513]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3728]], label [[IF_THEN3729:%.*]], label [[IF_ELSE3730:%.*]]
// SIMD-ONLY0:       if.then3729:
// SIMD-ONLY0-NEXT:    [[TMP2514:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2514]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3731:%.*]]
// SIMD-ONLY0:       if.else3730:
// SIMD-ONLY0-NEXT:    [[TMP2515:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2515]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3731]]
// SIMD-ONLY0:       if.end3731:
// SIMD-ONLY0-NEXT:    [[TMP2516:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2516]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2517:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2518:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3732:%.*]] = icmp ugt i32 [[TMP2517]], [[TMP2518]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3732]], label [[IF_THEN3734:%.*]], label [[IF_END3735:%.*]]
// SIMD-ONLY0:       if.then3734:
// SIMD-ONLY0-NEXT:    [[TMP2519:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2519]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3735]]
// SIMD-ONLY0:       if.end3735:
// SIMD-ONLY0-NEXT:    [[TMP2520:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2520]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2521:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2522:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3736:%.*]] = icmp ugt i32 [[TMP2521]], [[TMP2522]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3736]], label [[IF_THEN3738:%.*]], label [[IF_END3739:%.*]]
// SIMD-ONLY0:       if.then3738:
// SIMD-ONLY0-NEXT:    [[TMP2523:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2523]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3739]]
// SIMD-ONLY0:       if.end3739:
// SIMD-ONLY0-NEXT:    [[TMP2524:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2524]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2525:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2526:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3740:%.*]] = icmp ult i32 [[TMP2525]], [[TMP2526]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3740]], label [[IF_THEN3742:%.*]], label [[IF_END3743:%.*]]
// SIMD-ONLY0:       if.then3742:
// SIMD-ONLY0-NEXT:    [[TMP2527:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2527]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3743]]
// SIMD-ONLY0:       if.end3743:
// SIMD-ONLY0-NEXT:    [[TMP2528:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2528]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2529:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2530:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3744:%.*]] = icmp ult i32 [[TMP2529]], [[TMP2530]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3744]], label [[IF_THEN3746:%.*]], label [[IF_END3747:%.*]]
// SIMD-ONLY0:       if.then3746:
// SIMD-ONLY0-NEXT:    [[TMP2531:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2531]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3747]]
// SIMD-ONLY0:       if.end3747:
// SIMD-ONLY0-NEXT:    [[TMP2532:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2532]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2533:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2534:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3748:%.*]] = icmp eq i32 [[TMP2533]], [[TMP2534]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3748]], label [[IF_THEN3750:%.*]], label [[IF_END3751:%.*]]
// SIMD-ONLY0:       if.then3750:
// SIMD-ONLY0-NEXT:    [[TMP2535:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2535]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3751]]
// SIMD-ONLY0:       if.end3751:
// SIMD-ONLY0-NEXT:    [[TMP2536:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2536]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2537:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2538:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3752:%.*]] = icmp eq i32 [[TMP2537]], [[TMP2538]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3752]], label [[IF_THEN3754:%.*]], label [[IF_END3755:%.*]]
// SIMD-ONLY0:       if.then3754:
// SIMD-ONLY0-NEXT:    [[TMP2539:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2539]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3755]]
// SIMD-ONLY0:       if.end3755:
// SIMD-ONLY0-NEXT:    [[TMP2540:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2541:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3756:%.*]] = icmp ugt i32 [[TMP2540]], [[TMP2541]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3756]], label [[IF_THEN3758:%.*]], label [[IF_END3759:%.*]]
// SIMD-ONLY0:       if.then3758:
// SIMD-ONLY0-NEXT:    [[TMP2542:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2542]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3759]]
// SIMD-ONLY0:       if.end3759:
// SIMD-ONLY0-NEXT:    [[TMP2543:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2543]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2544:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2545:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3760:%.*]] = icmp ugt i32 [[TMP2544]], [[TMP2545]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3760]], label [[IF_THEN3762:%.*]], label [[IF_END3763:%.*]]
// SIMD-ONLY0:       if.then3762:
// SIMD-ONLY0-NEXT:    [[TMP2546:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2546]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3763]]
// SIMD-ONLY0:       if.end3763:
// SIMD-ONLY0-NEXT:    [[TMP2547:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2547]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2548:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2549:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3764:%.*]] = icmp ult i32 [[TMP2548]], [[TMP2549]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3764]], label [[IF_THEN3766:%.*]], label [[IF_END3767:%.*]]
// SIMD-ONLY0:       if.then3766:
// SIMD-ONLY0-NEXT:    [[TMP2550:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2550]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3767]]
// SIMD-ONLY0:       if.end3767:
// SIMD-ONLY0-NEXT:    [[TMP2551:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2551]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2552:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2553:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3768:%.*]] = icmp ult i32 [[TMP2552]], [[TMP2553]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3768]], label [[IF_THEN3770:%.*]], label [[IF_END3771:%.*]]
// SIMD-ONLY0:       if.then3770:
// SIMD-ONLY0-NEXT:    [[TMP2554:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2554]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3771]]
// SIMD-ONLY0:       if.end3771:
// SIMD-ONLY0-NEXT:    [[TMP2555:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2555]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2556:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2557:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3772:%.*]] = icmp eq i32 [[TMP2556]], [[TMP2557]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3772]], label [[IF_THEN3774:%.*]], label [[IF_END3775:%.*]]
// SIMD-ONLY0:       if.then3774:
// SIMD-ONLY0-NEXT:    [[TMP2558:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2558]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3775]]
// SIMD-ONLY0:       if.end3775:
// SIMD-ONLY0-NEXT:    [[TMP2559:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2559]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2560:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2561:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3776:%.*]] = icmp eq i32 [[TMP2560]], [[TMP2561]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3776]], label [[IF_THEN3778:%.*]], label [[IF_END3779:%.*]]
// SIMD-ONLY0:       if.then3778:
// SIMD-ONLY0-NEXT:    [[TMP2562:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2562]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3779]]
// SIMD-ONLY0:       if.end3779:
// SIMD-ONLY0-NEXT:    [[TMP2563:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2563]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2564:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2565:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3780:%.*]] = icmp eq i32 [[TMP2564]], [[TMP2565]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3780]], label [[IF_THEN3782:%.*]], label [[IF_ELSE3783:%.*]]
// SIMD-ONLY0:       if.then3782:
// SIMD-ONLY0-NEXT:    [[TMP2566:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2566]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3784:%.*]]
// SIMD-ONLY0:       if.else3783:
// SIMD-ONLY0-NEXT:    [[TMP2567:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2567]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3784]]
// SIMD-ONLY0:       if.end3784:
// SIMD-ONLY0-NEXT:    [[TMP2568:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2569:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3785:%.*]] = icmp eq i32 [[TMP2568]], [[TMP2569]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3785]], label [[IF_THEN3787:%.*]], label [[IF_ELSE3788:%.*]]
// SIMD-ONLY0:       if.then3787:
// SIMD-ONLY0-NEXT:    [[TMP2570:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2570]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3789:%.*]]
// SIMD-ONLY0:       if.else3788:
// SIMD-ONLY0-NEXT:    [[TMP2571:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2571]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3789]]
// SIMD-ONLY0:       if.end3789:
// SIMD-ONLY0-NEXT:    [[TMP2572:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2573:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3790:%.*]] = icmp eq i32 [[TMP2572]], [[TMP2573]]
// SIMD-ONLY0-NEXT:    [[CONV3791:%.*]] = zext i1 [[CMP3790]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3791]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2574:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3792:%.*]] = icmp ne i32 [[TMP2574]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3792]], label [[IF_THEN3793:%.*]], label [[IF_END3794:%.*]]
// SIMD-ONLY0:       if.then3793:
// SIMD-ONLY0-NEXT:    [[TMP2575:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2575]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3794]]
// SIMD-ONLY0:       if.end3794:
// SIMD-ONLY0-NEXT:    [[TMP2576:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2577:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3795:%.*]] = icmp eq i32 [[TMP2576]], [[TMP2577]]
// SIMD-ONLY0-NEXT:    [[CONV3796:%.*]] = zext i1 [[CMP3795]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3796]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2578:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3797:%.*]] = icmp ne i32 [[TMP2578]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3797]], label [[IF_THEN3798:%.*]], label [[IF_END3799:%.*]]
// SIMD-ONLY0:       if.then3798:
// SIMD-ONLY0-NEXT:    [[TMP2579:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2579]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3799]]
// SIMD-ONLY0:       if.end3799:
// SIMD-ONLY0-NEXT:    [[TMP2580:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2581:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3800:%.*]] = icmp eq i32 [[TMP2580]], [[TMP2581]]
// SIMD-ONLY0-NEXT:    [[CONV3801:%.*]] = zext i1 [[CMP3800]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3801]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2582:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3802:%.*]] = icmp ne i32 [[TMP2582]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3802]], label [[IF_THEN3803:%.*]], label [[IF_ELSE3804:%.*]]
// SIMD-ONLY0:       if.then3803:
// SIMD-ONLY0-NEXT:    [[TMP2583:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2583]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3805:%.*]]
// SIMD-ONLY0:       if.else3804:
// SIMD-ONLY0-NEXT:    [[TMP2584:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2584]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3805]]
// SIMD-ONLY0:       if.end3805:
// SIMD-ONLY0-NEXT:    [[TMP2585:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2586:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3806:%.*]] = icmp eq i32 [[TMP2585]], [[TMP2586]]
// SIMD-ONLY0-NEXT:    [[CONV3807:%.*]] = zext i1 [[CMP3806]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3807]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2587:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3808:%.*]] = icmp ne i32 [[TMP2587]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3808]], label [[IF_THEN3809:%.*]], label [[IF_ELSE3810:%.*]]
// SIMD-ONLY0:       if.then3809:
// SIMD-ONLY0-NEXT:    [[TMP2588:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2588]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3811:%.*]]
// SIMD-ONLY0:       if.else3810:
// SIMD-ONLY0-NEXT:    [[TMP2589:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2589]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3811]]
// SIMD-ONLY0:       if.end3811:
// SIMD-ONLY0-NEXT:    [[TMP2590:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2590]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2591:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2592:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3812:%.*]] = icmp ugt i32 [[TMP2591]], [[TMP2592]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3812]], label [[IF_THEN3814:%.*]], label [[IF_END3815:%.*]]
// SIMD-ONLY0:       if.then3814:
// SIMD-ONLY0-NEXT:    [[TMP2593:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2593]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3815]]
// SIMD-ONLY0:       if.end3815:
// SIMD-ONLY0-NEXT:    [[TMP2594:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2594]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2595:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2596:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3816:%.*]] = icmp ugt i32 [[TMP2595]], [[TMP2596]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3816]], label [[IF_THEN3818:%.*]], label [[IF_END3819:%.*]]
// SIMD-ONLY0:       if.then3818:
// SIMD-ONLY0-NEXT:    [[TMP2597:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2597]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3819]]
// SIMD-ONLY0:       if.end3819:
// SIMD-ONLY0-NEXT:    [[TMP2598:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2598]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2599:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2600:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3820:%.*]] = icmp ult i32 [[TMP2599]], [[TMP2600]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3820]], label [[IF_THEN3822:%.*]], label [[IF_END3823:%.*]]
// SIMD-ONLY0:       if.then3822:
// SIMD-ONLY0-NEXT:    [[TMP2601:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2601]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3823]]
// SIMD-ONLY0:       if.end3823:
// SIMD-ONLY0-NEXT:    [[TMP2602:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2602]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2603:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2604:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3824:%.*]] = icmp ult i32 [[TMP2603]], [[TMP2604]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3824]], label [[IF_THEN3826:%.*]], label [[IF_END3827:%.*]]
// SIMD-ONLY0:       if.then3826:
// SIMD-ONLY0-NEXT:    [[TMP2605:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2605]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3827]]
// SIMD-ONLY0:       if.end3827:
// SIMD-ONLY0-NEXT:    [[TMP2606:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2606]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2607:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2608:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3828:%.*]] = icmp eq i32 [[TMP2607]], [[TMP2608]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3828]], label [[IF_THEN3830:%.*]], label [[IF_END3831:%.*]]
// SIMD-ONLY0:       if.then3830:
// SIMD-ONLY0-NEXT:    [[TMP2609:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2609]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3831]]
// SIMD-ONLY0:       if.end3831:
// SIMD-ONLY0-NEXT:    [[TMP2610:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2610]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2611:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2612:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3832:%.*]] = icmp eq i32 [[TMP2611]], [[TMP2612]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3832]], label [[IF_THEN3834:%.*]], label [[IF_END3835:%.*]]
// SIMD-ONLY0:       if.then3834:
// SIMD-ONLY0-NEXT:    [[TMP2613:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2613]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3835]]
// SIMD-ONLY0:       if.end3835:
// SIMD-ONLY0-NEXT:    [[TMP2614:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2615:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3836:%.*]] = icmp ugt i32 [[TMP2614]], [[TMP2615]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3836]], label [[IF_THEN3838:%.*]], label [[IF_END3839:%.*]]
// SIMD-ONLY0:       if.then3838:
// SIMD-ONLY0-NEXT:    [[TMP2616:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2616]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3839]]
// SIMD-ONLY0:       if.end3839:
// SIMD-ONLY0-NEXT:    [[TMP2617:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2617]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2618:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2619:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3840:%.*]] = icmp ugt i32 [[TMP2618]], [[TMP2619]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3840]], label [[IF_THEN3842:%.*]], label [[IF_END3843:%.*]]
// SIMD-ONLY0:       if.then3842:
// SIMD-ONLY0-NEXT:    [[TMP2620:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2620]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3843]]
// SIMD-ONLY0:       if.end3843:
// SIMD-ONLY0-NEXT:    [[TMP2621:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2621]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2622:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2623:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3844:%.*]] = icmp ult i32 [[TMP2622]], [[TMP2623]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3844]], label [[IF_THEN3846:%.*]], label [[IF_END3847:%.*]]
// SIMD-ONLY0:       if.then3846:
// SIMD-ONLY0-NEXT:    [[TMP2624:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2624]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3847]]
// SIMD-ONLY0:       if.end3847:
// SIMD-ONLY0-NEXT:    [[TMP2625:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2625]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2626:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2627:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3848:%.*]] = icmp ult i32 [[TMP2626]], [[TMP2627]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3848]], label [[IF_THEN3850:%.*]], label [[IF_END3851:%.*]]
// SIMD-ONLY0:       if.then3850:
// SIMD-ONLY0-NEXT:    [[TMP2628:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2628]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3851]]
// SIMD-ONLY0:       if.end3851:
// SIMD-ONLY0-NEXT:    [[TMP2629:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2629]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2630:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2631:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3852:%.*]] = icmp eq i32 [[TMP2630]], [[TMP2631]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3852]], label [[IF_THEN3854:%.*]], label [[IF_END3855:%.*]]
// SIMD-ONLY0:       if.then3854:
// SIMD-ONLY0-NEXT:    [[TMP2632:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2632]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3855]]
// SIMD-ONLY0:       if.end3855:
// SIMD-ONLY0-NEXT:    [[TMP2633:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2633]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2634:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2635:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3856:%.*]] = icmp eq i32 [[TMP2634]], [[TMP2635]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3856]], label [[IF_THEN3858:%.*]], label [[IF_END3859:%.*]]
// SIMD-ONLY0:       if.then3858:
// SIMD-ONLY0-NEXT:    [[TMP2636:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2636]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3859]]
// SIMD-ONLY0:       if.end3859:
// SIMD-ONLY0-NEXT:    [[TMP2637:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2637]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2638:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2639:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3860:%.*]] = icmp eq i32 [[TMP2638]], [[TMP2639]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3860]], label [[IF_THEN3862:%.*]], label [[IF_ELSE3863:%.*]]
// SIMD-ONLY0:       if.then3862:
// SIMD-ONLY0-NEXT:    [[TMP2640:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2640]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3864:%.*]]
// SIMD-ONLY0:       if.else3863:
// SIMD-ONLY0-NEXT:    [[TMP2641:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2641]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3864]]
// SIMD-ONLY0:       if.end3864:
// SIMD-ONLY0-NEXT:    [[TMP2642:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2643:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3865:%.*]] = icmp eq i32 [[TMP2642]], [[TMP2643]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3865]], label [[IF_THEN3867:%.*]], label [[IF_ELSE3868:%.*]]
// SIMD-ONLY0:       if.then3867:
// SIMD-ONLY0-NEXT:    [[TMP2644:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2644]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3869:%.*]]
// SIMD-ONLY0:       if.else3868:
// SIMD-ONLY0-NEXT:    [[TMP2645:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2645]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3869]]
// SIMD-ONLY0:       if.end3869:
// SIMD-ONLY0-NEXT:    [[TMP2646:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2647:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3870:%.*]] = icmp eq i32 [[TMP2646]], [[TMP2647]]
// SIMD-ONLY0-NEXT:    [[CONV3871:%.*]] = zext i1 [[CMP3870]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3871]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2648:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3872:%.*]] = icmp ne i32 [[TMP2648]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3872]], label [[IF_THEN3873:%.*]], label [[IF_END3874:%.*]]
// SIMD-ONLY0:       if.then3873:
// SIMD-ONLY0-NEXT:    [[TMP2649:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2649]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3874]]
// SIMD-ONLY0:       if.end3874:
// SIMD-ONLY0-NEXT:    [[TMP2650:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2651:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3875:%.*]] = icmp eq i32 [[TMP2650]], [[TMP2651]]
// SIMD-ONLY0-NEXT:    [[CONV3876:%.*]] = zext i1 [[CMP3875]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3876]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2652:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3877:%.*]] = icmp ne i32 [[TMP2652]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3877]], label [[IF_THEN3878:%.*]], label [[IF_END3879:%.*]]
// SIMD-ONLY0:       if.then3878:
// SIMD-ONLY0-NEXT:    [[TMP2653:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2653]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3879]]
// SIMD-ONLY0:       if.end3879:
// SIMD-ONLY0-NEXT:    [[TMP2654:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2655:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3880:%.*]] = icmp eq i32 [[TMP2654]], [[TMP2655]]
// SIMD-ONLY0-NEXT:    [[CONV3881:%.*]] = zext i1 [[CMP3880]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3881]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2656:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3882:%.*]] = icmp ne i32 [[TMP2656]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3882]], label [[IF_THEN3883:%.*]], label [[IF_ELSE3884:%.*]]
// SIMD-ONLY0:       if.then3883:
// SIMD-ONLY0-NEXT:    [[TMP2657:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2657]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3885:%.*]]
// SIMD-ONLY0:       if.else3884:
// SIMD-ONLY0-NEXT:    [[TMP2658:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2658]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3885]]
// SIMD-ONLY0:       if.end3885:
// SIMD-ONLY0-NEXT:    [[TMP2659:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2660:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3886:%.*]] = icmp eq i32 [[TMP2659]], [[TMP2660]]
// SIMD-ONLY0-NEXT:    [[CONV3887:%.*]] = zext i1 [[CMP3886]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3887]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2661:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3888:%.*]] = icmp ne i32 [[TMP2661]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3888]], label [[IF_THEN3889:%.*]], label [[IF_ELSE3890:%.*]]
// SIMD-ONLY0:       if.then3889:
// SIMD-ONLY0-NEXT:    [[TMP2662:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2662]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3891:%.*]]
// SIMD-ONLY0:       if.else3890:
// SIMD-ONLY0-NEXT:    [[TMP2663:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2663]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3891]]
// SIMD-ONLY0:       if.end3891:
// SIMD-ONLY0-NEXT:    [[TMP2664:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2664]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2665:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2666:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3892:%.*]] = icmp sgt i64 [[TMP2665]], [[TMP2666]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3892]], label [[IF_THEN3894:%.*]], label [[IF_END3895:%.*]]
// SIMD-ONLY0:       if.then3894:
// SIMD-ONLY0-NEXT:    [[TMP2667:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2667]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3895]]
// SIMD-ONLY0:       if.end3895:
// SIMD-ONLY0-NEXT:    [[TMP2668:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2668]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2669:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2670:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3896:%.*]] = icmp sgt i64 [[TMP2669]], [[TMP2670]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3896]], label [[IF_THEN3898:%.*]], label [[IF_END3899:%.*]]
// SIMD-ONLY0:       if.then3898:
// SIMD-ONLY0-NEXT:    [[TMP2671:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2671]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3899]]
// SIMD-ONLY0:       if.end3899:
// SIMD-ONLY0-NEXT:    [[TMP2672:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2672]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2673:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2674:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3900:%.*]] = icmp slt i64 [[TMP2673]], [[TMP2674]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3900]], label [[IF_THEN3902:%.*]], label [[IF_END3903:%.*]]
// SIMD-ONLY0:       if.then3902:
// SIMD-ONLY0-NEXT:    [[TMP2675:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2675]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3903]]
// SIMD-ONLY0:       if.end3903:
// SIMD-ONLY0-NEXT:    [[TMP2676:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2676]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2677:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2678:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3904:%.*]] = icmp slt i64 [[TMP2677]], [[TMP2678]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3904]], label [[IF_THEN3906:%.*]], label [[IF_END3907:%.*]]
// SIMD-ONLY0:       if.then3906:
// SIMD-ONLY0-NEXT:    [[TMP2679:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2679]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3907]]
// SIMD-ONLY0:       if.end3907:
// SIMD-ONLY0-NEXT:    [[TMP2680:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2680]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2681:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2682:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3908:%.*]] = icmp eq i64 [[TMP2681]], [[TMP2682]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3908]], label [[IF_THEN3910:%.*]], label [[IF_END3911:%.*]]
// SIMD-ONLY0:       if.then3910:
// SIMD-ONLY0-NEXT:    [[TMP2683:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2683]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3911]]
// SIMD-ONLY0:       if.end3911:
// SIMD-ONLY0-NEXT:    [[TMP2684:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2684]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2685:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2686:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3912:%.*]] = icmp eq i64 [[TMP2685]], [[TMP2686]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3912]], label [[IF_THEN3914:%.*]], label [[IF_END3915:%.*]]
// SIMD-ONLY0:       if.then3914:
// SIMD-ONLY0-NEXT:    [[TMP2687:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2687]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3915]]
// SIMD-ONLY0:       if.end3915:
// SIMD-ONLY0-NEXT:    [[TMP2688:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2689:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3916:%.*]] = icmp sgt i64 [[TMP2688]], [[TMP2689]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3916]], label [[IF_THEN3918:%.*]], label [[IF_END3919:%.*]]
// SIMD-ONLY0:       if.then3918:
// SIMD-ONLY0-NEXT:    [[TMP2690:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2690]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3919]]
// SIMD-ONLY0:       if.end3919:
// SIMD-ONLY0-NEXT:    [[TMP2691:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2691]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2692:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2693:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3920:%.*]] = icmp sgt i64 [[TMP2692]], [[TMP2693]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3920]], label [[IF_THEN3922:%.*]], label [[IF_END3923:%.*]]
// SIMD-ONLY0:       if.then3922:
// SIMD-ONLY0-NEXT:    [[TMP2694:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2694]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3923]]
// SIMD-ONLY0:       if.end3923:
// SIMD-ONLY0-NEXT:    [[TMP2695:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2695]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2696:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2697:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3924:%.*]] = icmp slt i64 [[TMP2696]], [[TMP2697]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3924]], label [[IF_THEN3926:%.*]], label [[IF_END3927:%.*]]
// SIMD-ONLY0:       if.then3926:
// SIMD-ONLY0-NEXT:    [[TMP2698:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2698]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3927]]
// SIMD-ONLY0:       if.end3927:
// SIMD-ONLY0-NEXT:    [[TMP2699:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2699]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2700:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2701:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3928:%.*]] = icmp slt i64 [[TMP2700]], [[TMP2701]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3928]], label [[IF_THEN3930:%.*]], label [[IF_END3931:%.*]]
// SIMD-ONLY0:       if.then3930:
// SIMD-ONLY0-NEXT:    [[TMP2702:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2702]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3931]]
// SIMD-ONLY0:       if.end3931:
// SIMD-ONLY0-NEXT:    [[TMP2703:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2703]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2704:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2705:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3932:%.*]] = icmp eq i64 [[TMP2704]], [[TMP2705]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3932]], label [[IF_THEN3934:%.*]], label [[IF_END3935:%.*]]
// SIMD-ONLY0:       if.then3934:
// SIMD-ONLY0-NEXT:    [[TMP2706:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2706]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3935]]
// SIMD-ONLY0:       if.end3935:
// SIMD-ONLY0-NEXT:    [[TMP2707:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2707]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2708:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2709:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3936:%.*]] = icmp eq i64 [[TMP2708]], [[TMP2709]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3936]], label [[IF_THEN3938:%.*]], label [[IF_END3939:%.*]]
// SIMD-ONLY0:       if.then3938:
// SIMD-ONLY0-NEXT:    [[TMP2710:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2710]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3939]]
// SIMD-ONLY0:       if.end3939:
// SIMD-ONLY0-NEXT:    [[TMP2711:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2711]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2712:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2713:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3940:%.*]] = icmp eq i64 [[TMP2712]], [[TMP2713]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3940]], label [[IF_THEN3942:%.*]], label [[IF_ELSE3943:%.*]]
// SIMD-ONLY0:       if.then3942:
// SIMD-ONLY0-NEXT:    [[TMP2714:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2714]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3944:%.*]]
// SIMD-ONLY0:       if.else3943:
// SIMD-ONLY0-NEXT:    [[TMP2715:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2715]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3944]]
// SIMD-ONLY0:       if.end3944:
// SIMD-ONLY0-NEXT:    [[TMP2716:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2717:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3945:%.*]] = icmp eq i64 [[TMP2716]], [[TMP2717]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3945]], label [[IF_THEN3947:%.*]], label [[IF_ELSE3948:%.*]]
// SIMD-ONLY0:       if.then3947:
// SIMD-ONLY0-NEXT:    [[TMP2718:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2718]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3949:%.*]]
// SIMD-ONLY0:       if.else3948:
// SIMD-ONLY0-NEXT:    [[TMP2719:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2719]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3949]]
// SIMD-ONLY0:       if.end3949:
// SIMD-ONLY0-NEXT:    [[TMP2720:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2721:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3950:%.*]] = icmp eq i64 [[TMP2720]], [[TMP2721]]
// SIMD-ONLY0-NEXT:    [[CONV3951:%.*]] = zext i1 [[CMP3950]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3952:%.*]] = sext i32 [[CONV3951]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV3952]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2722:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL3953:%.*]] = icmp ne i64 [[TMP2722]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3953]], label [[IF_THEN3954:%.*]], label [[IF_END3955:%.*]]
// SIMD-ONLY0:       if.then3954:
// SIMD-ONLY0-NEXT:    [[TMP2723:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2723]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3955]]
// SIMD-ONLY0:       if.end3955:
// SIMD-ONLY0-NEXT:    [[TMP2724:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2725:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3956:%.*]] = icmp eq i64 [[TMP2724]], [[TMP2725]]
// SIMD-ONLY0-NEXT:    [[CONV3957:%.*]] = zext i1 [[CMP3956]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3958:%.*]] = sext i32 [[CONV3957]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV3958]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2726:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL3959:%.*]] = icmp ne i64 [[TMP2726]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3959]], label [[IF_THEN3960:%.*]], label [[IF_END3961:%.*]]
// SIMD-ONLY0:       if.then3960:
// SIMD-ONLY0-NEXT:    [[TMP2727:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2727]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3961]]
// SIMD-ONLY0:       if.end3961:
// SIMD-ONLY0-NEXT:    [[TMP2728:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2729:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3962:%.*]] = icmp eq i64 [[TMP2728]], [[TMP2729]]
// SIMD-ONLY0-NEXT:    [[CONV3963:%.*]] = zext i1 [[CMP3962]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3964:%.*]] = sext i32 [[CONV3963]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV3964]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2730:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL3965:%.*]] = icmp ne i64 [[TMP2730]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3965]], label [[IF_THEN3966:%.*]], label [[IF_ELSE3967:%.*]]
// SIMD-ONLY0:       if.then3966:
// SIMD-ONLY0-NEXT:    [[TMP2731:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2731]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3968:%.*]]
// SIMD-ONLY0:       if.else3967:
// SIMD-ONLY0-NEXT:    [[TMP2732:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2732]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3968]]
// SIMD-ONLY0:       if.end3968:
// SIMD-ONLY0-NEXT:    [[TMP2733:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2734:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3969:%.*]] = icmp eq i64 [[TMP2733]], [[TMP2734]]
// SIMD-ONLY0-NEXT:    [[CONV3970:%.*]] = zext i1 [[CMP3969]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3971:%.*]] = sext i32 [[CONV3970]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV3971]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2735:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL3972:%.*]] = icmp ne i64 [[TMP2735]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3972]], label [[IF_THEN3973:%.*]], label [[IF_ELSE3974:%.*]]
// SIMD-ONLY0:       if.then3973:
// SIMD-ONLY0-NEXT:    [[TMP2736:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2736]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3975:%.*]]
// SIMD-ONLY0:       if.else3974:
// SIMD-ONLY0-NEXT:    [[TMP2737:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2737]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3975]]
// SIMD-ONLY0:       if.end3975:
// SIMD-ONLY0-NEXT:    [[TMP2738:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2738]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2739:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2740:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3976:%.*]] = icmp sgt i64 [[TMP2739]], [[TMP2740]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3976]], label [[IF_THEN3978:%.*]], label [[IF_END3979:%.*]]
// SIMD-ONLY0:       if.then3978:
// SIMD-ONLY0-NEXT:    [[TMP2741:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2741]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3979]]
// SIMD-ONLY0:       if.end3979:
// SIMD-ONLY0-NEXT:    [[TMP2742:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2742]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2743:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2744:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3980:%.*]] = icmp sgt i64 [[TMP2743]], [[TMP2744]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3980]], label [[IF_THEN3982:%.*]], label [[IF_END3983:%.*]]
// SIMD-ONLY0:       if.then3982:
// SIMD-ONLY0-NEXT:    [[TMP2745:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2745]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3983]]
// SIMD-ONLY0:       if.end3983:
// SIMD-ONLY0-NEXT:    [[TMP2746:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2746]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2747:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2748:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3984:%.*]] = icmp slt i64 [[TMP2747]], [[TMP2748]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3984]], label [[IF_THEN3986:%.*]], label [[IF_END3987:%.*]]
// SIMD-ONLY0:       if.then3986:
// SIMD-ONLY0-NEXT:    [[TMP2749:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2749]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3987]]
// SIMD-ONLY0:       if.end3987:
// SIMD-ONLY0-NEXT:    [[TMP2750:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2750]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2751:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2752:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3988:%.*]] = icmp slt i64 [[TMP2751]], [[TMP2752]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3988]], label [[IF_THEN3990:%.*]], label [[IF_END3991:%.*]]
// SIMD-ONLY0:       if.then3990:
// SIMD-ONLY0-NEXT:    [[TMP2753:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2753]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3991]]
// SIMD-ONLY0:       if.end3991:
// SIMD-ONLY0-NEXT:    [[TMP2754:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2754]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2755:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2756:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3992:%.*]] = icmp eq i64 [[TMP2755]], [[TMP2756]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3992]], label [[IF_THEN3994:%.*]], label [[IF_END3995:%.*]]
// SIMD-ONLY0:       if.then3994:
// SIMD-ONLY0-NEXT:    [[TMP2757:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2757]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3995]]
// SIMD-ONLY0:       if.end3995:
// SIMD-ONLY0-NEXT:    [[TMP2758:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2758]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2759:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2760:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3996:%.*]] = icmp eq i64 [[TMP2759]], [[TMP2760]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3996]], label [[IF_THEN3998:%.*]], label [[IF_END3999:%.*]]
// SIMD-ONLY0:       if.then3998:
// SIMD-ONLY0-NEXT:    [[TMP2761:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2761]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3999]]
// SIMD-ONLY0:       if.end3999:
// SIMD-ONLY0-NEXT:    [[TMP2762:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2763:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4000:%.*]] = icmp sgt i64 [[TMP2762]], [[TMP2763]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4000]], label [[IF_THEN4002:%.*]], label [[IF_END4003:%.*]]
// SIMD-ONLY0:       if.then4002:
// SIMD-ONLY0-NEXT:    [[TMP2764:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2764]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4003]]
// SIMD-ONLY0:       if.end4003:
// SIMD-ONLY0-NEXT:    [[TMP2765:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2765]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2766:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2767:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4004:%.*]] = icmp sgt i64 [[TMP2766]], [[TMP2767]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4004]], label [[IF_THEN4006:%.*]], label [[IF_END4007:%.*]]
// SIMD-ONLY0:       if.then4006:
// SIMD-ONLY0-NEXT:    [[TMP2768:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2768]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4007]]
// SIMD-ONLY0:       if.end4007:
// SIMD-ONLY0-NEXT:    [[TMP2769:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2769]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2770:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2771:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4008:%.*]] = icmp slt i64 [[TMP2770]], [[TMP2771]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4008]], label [[IF_THEN4010:%.*]], label [[IF_END4011:%.*]]
// SIMD-ONLY0:       if.then4010:
// SIMD-ONLY0-NEXT:    [[TMP2772:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2772]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4011]]
// SIMD-ONLY0:       if.end4011:
// SIMD-ONLY0-NEXT:    [[TMP2773:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2773]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2774:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2775:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4012:%.*]] = icmp slt i64 [[TMP2774]], [[TMP2775]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4012]], label [[IF_THEN4014:%.*]], label [[IF_END4015:%.*]]
// SIMD-ONLY0:       if.then4014:
// SIMD-ONLY0-NEXT:    [[TMP2776:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2776]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4015]]
// SIMD-ONLY0:       if.end4015:
// SIMD-ONLY0-NEXT:    [[TMP2777:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2777]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2778:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2779:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4016:%.*]] = icmp eq i64 [[TMP2778]], [[TMP2779]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4016]], label [[IF_THEN4018:%.*]], label [[IF_END4019:%.*]]
// SIMD-ONLY0:       if.then4018:
// SIMD-ONLY0-NEXT:    [[TMP2780:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2780]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4019]]
// SIMD-ONLY0:       if.end4019:
// SIMD-ONLY0-NEXT:    [[TMP2781:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2781]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2782:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2783:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4020:%.*]] = icmp eq i64 [[TMP2782]], [[TMP2783]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4020]], label [[IF_THEN4022:%.*]], label [[IF_END4023:%.*]]
// SIMD-ONLY0:       if.then4022:
// SIMD-ONLY0-NEXT:    [[TMP2784:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2784]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4023]]
// SIMD-ONLY0:       if.end4023:
// SIMD-ONLY0-NEXT:    [[TMP2785:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2785]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2786:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2787:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4024:%.*]] = icmp eq i64 [[TMP2786]], [[TMP2787]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4024]], label [[IF_THEN4026:%.*]], label [[IF_ELSE4027:%.*]]
// SIMD-ONLY0:       if.then4026:
// SIMD-ONLY0-NEXT:    [[TMP2788:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2788]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4028:%.*]]
// SIMD-ONLY0:       if.else4027:
// SIMD-ONLY0-NEXT:    [[TMP2789:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2789]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4028]]
// SIMD-ONLY0:       if.end4028:
// SIMD-ONLY0-NEXT:    [[TMP2790:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2791:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4029:%.*]] = icmp eq i64 [[TMP2790]], [[TMP2791]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4029]], label [[IF_THEN4031:%.*]], label [[IF_ELSE4032:%.*]]
// SIMD-ONLY0:       if.then4031:
// SIMD-ONLY0-NEXT:    [[TMP2792:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2792]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4033:%.*]]
// SIMD-ONLY0:       if.else4032:
// SIMD-ONLY0-NEXT:    [[TMP2793:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2793]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4033]]
// SIMD-ONLY0:       if.end4033:
// SIMD-ONLY0-NEXT:    [[TMP2794:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2795:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4034:%.*]] = icmp eq i64 [[TMP2794]], [[TMP2795]]
// SIMD-ONLY0-NEXT:    [[CONV4035:%.*]] = zext i1 [[CMP4034]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4036:%.*]] = sext i32 [[CONV4035]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4036]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2796:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4037:%.*]] = icmp ne i64 [[TMP2796]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4037]], label [[IF_THEN4038:%.*]], label [[IF_END4039:%.*]]
// SIMD-ONLY0:       if.then4038:
// SIMD-ONLY0-NEXT:    [[TMP2797:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2797]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4039]]
// SIMD-ONLY0:       if.end4039:
// SIMD-ONLY0-NEXT:    [[TMP2798:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2799:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4040:%.*]] = icmp eq i64 [[TMP2798]], [[TMP2799]]
// SIMD-ONLY0-NEXT:    [[CONV4041:%.*]] = zext i1 [[CMP4040]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4042:%.*]] = sext i32 [[CONV4041]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4042]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2800:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4043:%.*]] = icmp ne i64 [[TMP2800]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4043]], label [[IF_THEN4044:%.*]], label [[IF_END4045:%.*]]
// SIMD-ONLY0:       if.then4044:
// SIMD-ONLY0-NEXT:    [[TMP2801:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2801]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4045]]
// SIMD-ONLY0:       if.end4045:
// SIMD-ONLY0-NEXT:    [[TMP2802:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2803:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4046:%.*]] = icmp eq i64 [[TMP2802]], [[TMP2803]]
// SIMD-ONLY0-NEXT:    [[CONV4047:%.*]] = zext i1 [[CMP4046]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4048:%.*]] = sext i32 [[CONV4047]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4048]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2804:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4049:%.*]] = icmp ne i64 [[TMP2804]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4049]], label [[IF_THEN4050:%.*]], label [[IF_ELSE4051:%.*]]
// SIMD-ONLY0:       if.then4050:
// SIMD-ONLY0-NEXT:    [[TMP2805:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2805]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4052:%.*]]
// SIMD-ONLY0:       if.else4051:
// SIMD-ONLY0-NEXT:    [[TMP2806:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2806]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4052]]
// SIMD-ONLY0:       if.end4052:
// SIMD-ONLY0-NEXT:    [[TMP2807:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2808:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4053:%.*]] = icmp eq i64 [[TMP2807]], [[TMP2808]]
// SIMD-ONLY0-NEXT:    [[CONV4054:%.*]] = zext i1 [[CMP4053]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4055:%.*]] = sext i32 [[CONV4054]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4055]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2809:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4056:%.*]] = icmp ne i64 [[TMP2809]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4056]], label [[IF_THEN4057:%.*]], label [[IF_ELSE4058:%.*]]
// SIMD-ONLY0:       if.then4057:
// SIMD-ONLY0-NEXT:    [[TMP2810:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2810]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4059:%.*]]
// SIMD-ONLY0:       if.else4058:
// SIMD-ONLY0-NEXT:    [[TMP2811:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2811]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4059]]
// SIMD-ONLY0:       if.end4059:
// SIMD-ONLY0-NEXT:    [[TMP2812:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2812]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2813:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2814:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4060:%.*]] = icmp sgt i64 [[TMP2813]], [[TMP2814]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4060]], label [[IF_THEN4062:%.*]], label [[IF_END4063:%.*]]
// SIMD-ONLY0:       if.then4062:
// SIMD-ONLY0-NEXT:    [[TMP2815:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2815]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4063]]
// SIMD-ONLY0:       if.end4063:
// SIMD-ONLY0-NEXT:    [[TMP2816:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2816]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2817:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2818:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4064:%.*]] = icmp sgt i64 [[TMP2817]], [[TMP2818]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4064]], label [[IF_THEN4066:%.*]], label [[IF_END4067:%.*]]
// SIMD-ONLY0:       if.then4066:
// SIMD-ONLY0-NEXT:    [[TMP2819:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2819]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4067]]
// SIMD-ONLY0:       if.end4067:
// SIMD-ONLY0-NEXT:    [[TMP2820:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2820]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2821:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2822:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4068:%.*]] = icmp slt i64 [[TMP2821]], [[TMP2822]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4068]], label [[IF_THEN4070:%.*]], label [[IF_END4071:%.*]]
// SIMD-ONLY0:       if.then4070:
// SIMD-ONLY0-NEXT:    [[TMP2823:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2823]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4071]]
// SIMD-ONLY0:       if.end4071:
// SIMD-ONLY0-NEXT:    [[TMP2824:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2824]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2825:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2826:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4072:%.*]] = icmp slt i64 [[TMP2825]], [[TMP2826]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4072]], label [[IF_THEN4074:%.*]], label [[IF_END4075:%.*]]
// SIMD-ONLY0:       if.then4074:
// SIMD-ONLY0-NEXT:    [[TMP2827:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2827]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4075]]
// SIMD-ONLY0:       if.end4075:
// SIMD-ONLY0-NEXT:    [[TMP2828:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2828]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2829:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2830:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4076:%.*]] = icmp eq i64 [[TMP2829]], [[TMP2830]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4076]], label [[IF_THEN4078:%.*]], label [[IF_END4079:%.*]]
// SIMD-ONLY0:       if.then4078:
// SIMD-ONLY0-NEXT:    [[TMP2831:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2831]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4079]]
// SIMD-ONLY0:       if.end4079:
// SIMD-ONLY0-NEXT:    [[TMP2832:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2832]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2833:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2834:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4080:%.*]] = icmp eq i64 [[TMP2833]], [[TMP2834]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4080]], label [[IF_THEN4082:%.*]], label [[IF_END4083:%.*]]
// SIMD-ONLY0:       if.then4082:
// SIMD-ONLY0-NEXT:    [[TMP2835:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2835]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4083]]
// SIMD-ONLY0:       if.end4083:
// SIMD-ONLY0-NEXT:    [[TMP2836:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2837:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4084:%.*]] = icmp sgt i64 [[TMP2836]], [[TMP2837]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4084]], label [[IF_THEN4086:%.*]], label [[IF_END4087:%.*]]
// SIMD-ONLY0:       if.then4086:
// SIMD-ONLY0-NEXT:    [[TMP2838:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2838]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4087]]
// SIMD-ONLY0:       if.end4087:
// SIMD-ONLY0-NEXT:    [[TMP2839:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2839]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2840:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2841:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4088:%.*]] = icmp sgt i64 [[TMP2840]], [[TMP2841]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4088]], label [[IF_THEN4090:%.*]], label [[IF_END4091:%.*]]
// SIMD-ONLY0:       if.then4090:
// SIMD-ONLY0-NEXT:    [[TMP2842:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2842]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4091]]
// SIMD-ONLY0:       if.end4091:
// SIMD-ONLY0-NEXT:    [[TMP2843:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2843]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2844:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2845:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4092:%.*]] = icmp slt i64 [[TMP2844]], [[TMP2845]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4092]], label [[IF_THEN4094:%.*]], label [[IF_END4095:%.*]]
// SIMD-ONLY0:       if.then4094:
// SIMD-ONLY0-NEXT:    [[TMP2846:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2846]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4095]]
// SIMD-ONLY0:       if.end4095:
// SIMD-ONLY0-NEXT:    [[TMP2847:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2847]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2848:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2849:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4096:%.*]] = icmp slt i64 [[TMP2848]], [[TMP2849]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4096]], label [[IF_THEN4098:%.*]], label [[IF_END4099:%.*]]
// SIMD-ONLY0:       if.then4098:
// SIMD-ONLY0-NEXT:    [[TMP2850:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2850]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4099]]
// SIMD-ONLY0:       if.end4099:
// SIMD-ONLY0-NEXT:    [[TMP2851:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2851]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2852:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2853:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4100:%.*]] = icmp eq i64 [[TMP2852]], [[TMP2853]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4100]], label [[IF_THEN4102:%.*]], label [[IF_END4103:%.*]]
// SIMD-ONLY0:       if.then4102:
// SIMD-ONLY0-NEXT:    [[TMP2854:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2854]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4103]]
// SIMD-ONLY0:       if.end4103:
// SIMD-ONLY0-NEXT:    [[TMP2855:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2855]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2856:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2857:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4104:%.*]] = icmp eq i64 [[TMP2856]], [[TMP2857]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4104]], label [[IF_THEN4106:%.*]], label [[IF_END4107:%.*]]
// SIMD-ONLY0:       if.then4106:
// SIMD-ONLY0-NEXT:    [[TMP2858:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2858]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4107]]
// SIMD-ONLY0:       if.end4107:
// SIMD-ONLY0-NEXT:    [[TMP2859:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2859]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2860:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2861:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4108:%.*]] = icmp eq i64 [[TMP2860]], [[TMP2861]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4108]], label [[IF_THEN4110:%.*]], label [[IF_ELSE4111:%.*]]
// SIMD-ONLY0:       if.then4110:
// SIMD-ONLY0-NEXT:    [[TMP2862:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2862]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4112:%.*]]
// SIMD-ONLY0:       if.else4111:
// SIMD-ONLY0-NEXT:    [[TMP2863:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2863]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4112]]
// SIMD-ONLY0:       if.end4112:
// SIMD-ONLY0-NEXT:    [[TMP2864:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2865:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4113:%.*]] = icmp eq i64 [[TMP2864]], [[TMP2865]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4113]], label [[IF_THEN4115:%.*]], label [[IF_ELSE4116:%.*]]
// SIMD-ONLY0:       if.then4115:
// SIMD-ONLY0-NEXT:    [[TMP2866:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2866]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4117:%.*]]
// SIMD-ONLY0:       if.else4116:
// SIMD-ONLY0-NEXT:    [[TMP2867:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2867]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4117]]
// SIMD-ONLY0:       if.end4117:
// SIMD-ONLY0-NEXT:    [[TMP2868:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2869:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4118:%.*]] = icmp eq i64 [[TMP2868]], [[TMP2869]]
// SIMD-ONLY0-NEXT:    [[CONV4119:%.*]] = zext i1 [[CMP4118]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4120:%.*]] = sext i32 [[CONV4119]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4120]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2870:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4121:%.*]] = icmp ne i64 [[TMP2870]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4121]], label [[IF_THEN4122:%.*]], label [[IF_END4123:%.*]]
// SIMD-ONLY0:       if.then4122:
// SIMD-ONLY0-NEXT:    [[TMP2871:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2871]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4123]]
// SIMD-ONLY0:       if.end4123:
// SIMD-ONLY0-NEXT:    [[TMP2872:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2873:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4124:%.*]] = icmp eq i64 [[TMP2872]], [[TMP2873]]
// SIMD-ONLY0-NEXT:    [[CONV4125:%.*]] = zext i1 [[CMP4124]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4126:%.*]] = sext i32 [[CONV4125]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4126]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2874:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4127:%.*]] = icmp ne i64 [[TMP2874]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4127]], label [[IF_THEN4128:%.*]], label [[IF_END4129:%.*]]
// SIMD-ONLY0:       if.then4128:
// SIMD-ONLY0-NEXT:    [[TMP2875:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2875]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4129]]
// SIMD-ONLY0:       if.end4129:
// SIMD-ONLY0-NEXT:    [[TMP2876:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2877:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4130:%.*]] = icmp eq i64 [[TMP2876]], [[TMP2877]]
// SIMD-ONLY0-NEXT:    [[CONV4131:%.*]] = zext i1 [[CMP4130]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4132:%.*]] = sext i32 [[CONV4131]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4132]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2878:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4133:%.*]] = icmp ne i64 [[TMP2878]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4133]], label [[IF_THEN4134:%.*]], label [[IF_ELSE4135:%.*]]
// SIMD-ONLY0:       if.then4134:
// SIMD-ONLY0-NEXT:    [[TMP2879:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2879]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4136:%.*]]
// SIMD-ONLY0:       if.else4135:
// SIMD-ONLY0-NEXT:    [[TMP2880:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2880]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4136]]
// SIMD-ONLY0:       if.end4136:
// SIMD-ONLY0-NEXT:    [[TMP2881:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2882:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4137:%.*]] = icmp eq i64 [[TMP2881]], [[TMP2882]]
// SIMD-ONLY0-NEXT:    [[CONV4138:%.*]] = zext i1 [[CMP4137]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4139:%.*]] = sext i32 [[CONV4138]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4139]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2883:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4140:%.*]] = icmp ne i64 [[TMP2883]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4140]], label [[IF_THEN4141:%.*]], label [[IF_ELSE4142:%.*]]
// SIMD-ONLY0:       if.then4141:
// SIMD-ONLY0-NEXT:    [[TMP2884:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2884]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4143:%.*]]
// SIMD-ONLY0:       if.else4142:
// SIMD-ONLY0-NEXT:    [[TMP2885:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2885]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4143]]
// SIMD-ONLY0:       if.end4143:
// SIMD-ONLY0-NEXT:    [[TMP2886:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2886]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2887:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2888:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4144:%.*]] = icmp sgt i64 [[TMP2887]], [[TMP2888]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4144]], label [[IF_THEN4146:%.*]], label [[IF_END4147:%.*]]
// SIMD-ONLY0:       if.then4146:
// SIMD-ONLY0-NEXT:    [[TMP2889:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2889]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4147]]
// SIMD-ONLY0:       if.end4147:
// SIMD-ONLY0-NEXT:    [[TMP2890:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2890]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2891:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2892:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4148:%.*]] = icmp sgt i64 [[TMP2891]], [[TMP2892]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4148]], label [[IF_THEN4150:%.*]], label [[IF_END4151:%.*]]
// SIMD-ONLY0:       if.then4150:
// SIMD-ONLY0-NEXT:    [[TMP2893:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2893]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4151]]
// SIMD-ONLY0:       if.end4151:
// SIMD-ONLY0-NEXT:    [[TMP2894:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2894]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2895:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2896:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4152:%.*]] = icmp slt i64 [[TMP2895]], [[TMP2896]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4152]], label [[IF_THEN4154:%.*]], label [[IF_END4155:%.*]]
// SIMD-ONLY0:       if.then4154:
// SIMD-ONLY0-NEXT:    [[TMP2897:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2897]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4155]]
// SIMD-ONLY0:       if.end4155:
// SIMD-ONLY0-NEXT:    [[TMP2898:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2898]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2899:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2900:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4156:%.*]] = icmp slt i64 [[TMP2899]], [[TMP2900]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4156]], label [[IF_THEN4158:%.*]], label [[IF_END4159:%.*]]
// SIMD-ONLY0:       if.then4158:
// SIMD-ONLY0-NEXT:    [[TMP2901:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2901]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4159]]
// SIMD-ONLY0:       if.end4159:
// SIMD-ONLY0-NEXT:    [[TMP2902:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2902]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2903:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2904:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4160:%.*]] = icmp eq i64 [[TMP2903]], [[TMP2904]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4160]], label [[IF_THEN4162:%.*]], label [[IF_END4163:%.*]]
// SIMD-ONLY0:       if.then4162:
// SIMD-ONLY0-NEXT:    [[TMP2905:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2905]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4163]]
// SIMD-ONLY0:       if.end4163:
// SIMD-ONLY0-NEXT:    [[TMP2906:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2906]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2907:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2908:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4164:%.*]] = icmp eq i64 [[TMP2907]], [[TMP2908]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4164]], label [[IF_THEN4166:%.*]], label [[IF_END4167:%.*]]
// SIMD-ONLY0:       if.then4166:
// SIMD-ONLY0-NEXT:    [[TMP2909:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2909]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4167]]
// SIMD-ONLY0:       if.end4167:
// SIMD-ONLY0-NEXT:    [[TMP2910:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2911:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4168:%.*]] = icmp sgt i64 [[TMP2910]], [[TMP2911]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4168]], label [[IF_THEN4170:%.*]], label [[IF_END4171:%.*]]
// SIMD-ONLY0:       if.then4170:
// SIMD-ONLY0-NEXT:    [[TMP2912:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2912]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4171]]
// SIMD-ONLY0:       if.end4171:
// SIMD-ONLY0-NEXT:    [[TMP2913:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2913]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2914:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2915:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4172:%.*]] = icmp sgt i64 [[TMP2914]], [[TMP2915]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4172]], label [[IF_THEN4174:%.*]], label [[IF_END4175:%.*]]
// SIMD-ONLY0:       if.then4174:
// SIMD-ONLY0-NEXT:    [[TMP2916:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2916]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4175]]
// SIMD-ONLY0:       if.end4175:
// SIMD-ONLY0-NEXT:    [[TMP2917:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2917]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2918:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2919:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4176:%.*]] = icmp slt i64 [[TMP2918]], [[TMP2919]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4176]], label [[IF_THEN4178:%.*]], label [[IF_END4179:%.*]]
// SIMD-ONLY0:       if.then4178:
// SIMD-ONLY0-NEXT:    [[TMP2920:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2920]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4179]]
// SIMD-ONLY0:       if.end4179:
// SIMD-ONLY0-NEXT:    [[TMP2921:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2921]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2922:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2923:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4180:%.*]] = icmp slt i64 [[TMP2922]], [[TMP2923]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4180]], label [[IF_THEN4182:%.*]], label [[IF_END4183:%.*]]
// SIMD-ONLY0:       if.then4182:
// SIMD-ONLY0-NEXT:    [[TMP2924:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2924]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4183]]
// SIMD-ONLY0:       if.end4183:
// SIMD-ONLY0-NEXT:    [[TMP2925:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2925]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2926:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2927:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4184:%.*]] = icmp eq i64 [[TMP2926]], [[TMP2927]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4184]], label [[IF_THEN4186:%.*]], label [[IF_END4187:%.*]]
// SIMD-ONLY0:       if.then4186:
// SIMD-ONLY0-NEXT:    [[TMP2928:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2928]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4187]]
// SIMD-ONLY0:       if.end4187:
// SIMD-ONLY0-NEXT:    [[TMP2929:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2929]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2930:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2931:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4188:%.*]] = icmp eq i64 [[TMP2930]], [[TMP2931]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4188]], label [[IF_THEN4190:%.*]], label [[IF_END4191:%.*]]
// SIMD-ONLY0:       if.then4190:
// SIMD-ONLY0-NEXT:    [[TMP2932:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2932]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4191]]
// SIMD-ONLY0:       if.end4191:
// SIMD-ONLY0-NEXT:    [[TMP2933:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2933]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2934:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2935:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4192:%.*]] = icmp eq i64 [[TMP2934]], [[TMP2935]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4192]], label [[IF_THEN4194:%.*]], label [[IF_ELSE4195:%.*]]
// SIMD-ONLY0:       if.then4194:
// SIMD-ONLY0-NEXT:    [[TMP2936:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2936]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4196:%.*]]
// SIMD-ONLY0:       if.else4195:
// SIMD-ONLY0-NEXT:    [[TMP2937:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2937]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4196]]
// SIMD-ONLY0:       if.end4196:
// SIMD-ONLY0-NEXT:    [[TMP2938:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2939:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4197:%.*]] = icmp eq i64 [[TMP2938]], [[TMP2939]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4197]], label [[IF_THEN4199:%.*]], label [[IF_ELSE4200:%.*]]
// SIMD-ONLY0:       if.then4199:
// SIMD-ONLY0-NEXT:    [[TMP2940:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2940]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4201:%.*]]
// SIMD-ONLY0:       if.else4200:
// SIMD-ONLY0-NEXT:    [[TMP2941:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2941]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4201]]
// SIMD-ONLY0:       if.end4201:
// SIMD-ONLY0-NEXT:    [[TMP2942:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2943:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4202:%.*]] = icmp eq i64 [[TMP2942]], [[TMP2943]]
// SIMD-ONLY0-NEXT:    [[CONV4203:%.*]] = zext i1 [[CMP4202]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4204:%.*]] = sext i32 [[CONV4203]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4204]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2944:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4205:%.*]] = icmp ne i64 [[TMP2944]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4205]], label [[IF_THEN4206:%.*]], label [[IF_END4207:%.*]]
// SIMD-ONLY0:       if.then4206:
// SIMD-ONLY0-NEXT:    [[TMP2945:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2945]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4207]]
// SIMD-ONLY0:       if.end4207:
// SIMD-ONLY0-NEXT:    [[TMP2946:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2947:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4208:%.*]] = icmp eq i64 [[TMP2946]], [[TMP2947]]
// SIMD-ONLY0-NEXT:    [[CONV4209:%.*]] = zext i1 [[CMP4208]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4210:%.*]] = sext i32 [[CONV4209]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4210]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2948:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4211:%.*]] = icmp ne i64 [[TMP2948]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4211]], label [[IF_THEN4212:%.*]], label [[IF_END4213:%.*]]
// SIMD-ONLY0:       if.then4212:
// SIMD-ONLY0-NEXT:    [[TMP2949:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2949]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4213]]
// SIMD-ONLY0:       if.end4213:
// SIMD-ONLY0-NEXT:    [[TMP2950:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2951:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4214:%.*]] = icmp eq i64 [[TMP2950]], [[TMP2951]]
// SIMD-ONLY0-NEXT:    [[CONV4215:%.*]] = zext i1 [[CMP4214]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4216:%.*]] = sext i32 [[CONV4215]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4216]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2952:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4217:%.*]] = icmp ne i64 [[TMP2952]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4217]], label [[IF_THEN4218:%.*]], label [[IF_ELSE4219:%.*]]
// SIMD-ONLY0:       if.then4218:
// SIMD-ONLY0-NEXT:    [[TMP2953:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2953]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4220:%.*]]
// SIMD-ONLY0:       if.else4219:
// SIMD-ONLY0-NEXT:    [[TMP2954:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2954]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4220]]
// SIMD-ONLY0:       if.end4220:
// SIMD-ONLY0-NEXT:    [[TMP2955:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2956:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4221:%.*]] = icmp eq i64 [[TMP2955]], [[TMP2956]]
// SIMD-ONLY0-NEXT:    [[CONV4222:%.*]] = zext i1 [[CMP4221]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4223:%.*]] = sext i32 [[CONV4222]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4223]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2957:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4224:%.*]] = icmp ne i64 [[TMP2957]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4224]], label [[IF_THEN4225:%.*]], label [[IF_ELSE4226:%.*]]
// SIMD-ONLY0:       if.then4225:
// SIMD-ONLY0-NEXT:    [[TMP2958:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2958]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4227:%.*]]
// SIMD-ONLY0:       if.else4226:
// SIMD-ONLY0-NEXT:    [[TMP2959:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2959]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4227]]
// SIMD-ONLY0:       if.end4227:
// SIMD-ONLY0-NEXT:    [[TMP2960:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2960]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2961:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2962:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4228:%.*]] = icmp sgt i64 [[TMP2961]], [[TMP2962]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4228]], label [[IF_THEN4230:%.*]], label [[IF_END4231:%.*]]
// SIMD-ONLY0:       if.then4230:
// SIMD-ONLY0-NEXT:    [[TMP2963:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2963]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4231]]
// SIMD-ONLY0:       if.end4231:
// SIMD-ONLY0-NEXT:    [[TMP2964:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2964]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2965:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2966:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4232:%.*]] = icmp sgt i64 [[TMP2965]], [[TMP2966]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4232]], label [[IF_THEN4234:%.*]], label [[IF_END4235:%.*]]
// SIMD-ONLY0:       if.then4234:
// SIMD-ONLY0-NEXT:    [[TMP2967:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2967]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4235]]
// SIMD-ONLY0:       if.end4235:
// SIMD-ONLY0-NEXT:    [[TMP2968:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2968]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2969:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2970:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4236:%.*]] = icmp slt i64 [[TMP2969]], [[TMP2970]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4236]], label [[IF_THEN4238:%.*]], label [[IF_END4239:%.*]]
// SIMD-ONLY0:       if.then4238:
// SIMD-ONLY0-NEXT:    [[TMP2971:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2971]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4239]]
// SIMD-ONLY0:       if.end4239:
// SIMD-ONLY0-NEXT:    [[TMP2972:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2972]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2973:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2974:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4240:%.*]] = icmp slt i64 [[TMP2973]], [[TMP2974]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4240]], label [[IF_THEN4242:%.*]], label [[IF_END4243:%.*]]
// SIMD-ONLY0:       if.then4242:
// SIMD-ONLY0-NEXT:    [[TMP2975:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2975]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4243]]
// SIMD-ONLY0:       if.end4243:
// SIMD-ONLY0-NEXT:    [[TMP2976:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2976]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2977:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2978:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4244:%.*]] = icmp eq i64 [[TMP2977]], [[TMP2978]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4244]], label [[IF_THEN4246:%.*]], label [[IF_END4247:%.*]]
// SIMD-ONLY0:       if.then4246:
// SIMD-ONLY0-NEXT:    [[TMP2979:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2979]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4247]]
// SIMD-ONLY0:       if.end4247:
// SIMD-ONLY0-NEXT:    [[TMP2980:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2980]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2981:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2982:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4248:%.*]] = icmp eq i64 [[TMP2981]], [[TMP2982]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4248]], label [[IF_THEN4250:%.*]], label [[IF_END4251:%.*]]
// SIMD-ONLY0:       if.then4250:
// SIMD-ONLY0-NEXT:    [[TMP2983:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2983]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4251]]
// SIMD-ONLY0:       if.end4251:
// SIMD-ONLY0-NEXT:    [[TMP2984:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2985:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4252:%.*]] = icmp sgt i64 [[TMP2984]], [[TMP2985]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4252]], label [[IF_THEN4254:%.*]], label [[IF_END4255:%.*]]
// SIMD-ONLY0:       if.then4254:
// SIMD-ONLY0-NEXT:    [[TMP2986:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2986]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4255]]
// SIMD-ONLY0:       if.end4255:
// SIMD-ONLY0-NEXT:    [[TMP2987:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2987]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2988:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2989:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4256:%.*]] = icmp sgt i64 [[TMP2988]], [[TMP2989]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4256]], label [[IF_THEN4258:%.*]], label [[IF_END4259:%.*]]
// SIMD-ONLY0:       if.then4258:
// SIMD-ONLY0-NEXT:    [[TMP2990:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2990]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4259]]
// SIMD-ONLY0:       if.end4259:
// SIMD-ONLY0-NEXT:    [[TMP2991:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2991]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2992:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2993:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4260:%.*]] = icmp slt i64 [[TMP2992]], [[TMP2993]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4260]], label [[IF_THEN4262:%.*]], label [[IF_END4263:%.*]]
// SIMD-ONLY0:       if.then4262:
// SIMD-ONLY0-NEXT:    [[TMP2994:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2994]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4263]]
// SIMD-ONLY0:       if.end4263:
// SIMD-ONLY0-NEXT:    [[TMP2995:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2995]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2996:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2997:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4264:%.*]] = icmp slt i64 [[TMP2996]], [[TMP2997]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4264]], label [[IF_THEN4266:%.*]], label [[IF_END4267:%.*]]
// SIMD-ONLY0:       if.then4266:
// SIMD-ONLY0-NEXT:    [[TMP2998:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2998]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4267]]
// SIMD-ONLY0:       if.end4267:
// SIMD-ONLY0-NEXT:    [[TMP2999:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2999]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3000:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3001:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4268:%.*]] = icmp eq i64 [[TMP3000]], [[TMP3001]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4268]], label [[IF_THEN4270:%.*]], label [[IF_END4271:%.*]]
// SIMD-ONLY0:       if.then4270:
// SIMD-ONLY0-NEXT:    [[TMP3002:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3002]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4271]]
// SIMD-ONLY0:       if.end4271:
// SIMD-ONLY0-NEXT:    [[TMP3003:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3003]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3004:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3005:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4272:%.*]] = icmp eq i64 [[TMP3004]], [[TMP3005]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4272]], label [[IF_THEN4274:%.*]], label [[IF_END4275:%.*]]
// SIMD-ONLY0:       if.then4274:
// SIMD-ONLY0-NEXT:    [[TMP3006:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3006]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4275]]
// SIMD-ONLY0:       if.end4275:
// SIMD-ONLY0-NEXT:    [[TMP3007:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3007]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3008:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3009:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4276:%.*]] = icmp eq i64 [[TMP3008]], [[TMP3009]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4276]], label [[IF_THEN4278:%.*]], label [[IF_ELSE4279:%.*]]
// SIMD-ONLY0:       if.then4278:
// SIMD-ONLY0-NEXT:    [[TMP3010:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3010]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4280:%.*]]
// SIMD-ONLY0:       if.else4279:
// SIMD-ONLY0-NEXT:    [[TMP3011:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3011]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4280]]
// SIMD-ONLY0:       if.end4280:
// SIMD-ONLY0-NEXT:    [[TMP3012:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3013:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4281:%.*]] = icmp eq i64 [[TMP3012]], [[TMP3013]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4281]], label [[IF_THEN4283:%.*]], label [[IF_ELSE4284:%.*]]
// SIMD-ONLY0:       if.then4283:
// SIMD-ONLY0-NEXT:    [[TMP3014:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3014]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4285:%.*]]
// SIMD-ONLY0:       if.else4284:
// SIMD-ONLY0-NEXT:    [[TMP3015:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3015]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4285]]
// SIMD-ONLY0:       if.end4285:
// SIMD-ONLY0-NEXT:    [[TMP3016:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3017:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4286:%.*]] = icmp eq i64 [[TMP3016]], [[TMP3017]]
// SIMD-ONLY0-NEXT:    [[CONV4287:%.*]] = zext i1 [[CMP4286]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4288:%.*]] = sext i32 [[CONV4287]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4288]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3018:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4289:%.*]] = icmp ne i64 [[TMP3018]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4289]], label [[IF_THEN4290:%.*]], label [[IF_END4291:%.*]]
// SIMD-ONLY0:       if.then4290:
// SIMD-ONLY0-NEXT:    [[TMP3019:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3019]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4291]]
// SIMD-ONLY0:       if.end4291:
// SIMD-ONLY0-NEXT:    [[TMP3020:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3021:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4292:%.*]] = icmp eq i64 [[TMP3020]], [[TMP3021]]
// SIMD-ONLY0-NEXT:    [[CONV4293:%.*]] = zext i1 [[CMP4292]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4294:%.*]] = sext i32 [[CONV4293]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4294]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3022:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4295:%.*]] = icmp ne i64 [[TMP3022]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4295]], label [[IF_THEN4296:%.*]], label [[IF_END4297:%.*]]
// SIMD-ONLY0:       if.then4296:
// SIMD-ONLY0-NEXT:    [[TMP3023:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3023]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4297]]
// SIMD-ONLY0:       if.end4297:
// SIMD-ONLY0-NEXT:    [[TMP3024:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3025:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4298:%.*]] = icmp eq i64 [[TMP3024]], [[TMP3025]]
// SIMD-ONLY0-NEXT:    [[CONV4299:%.*]] = zext i1 [[CMP4298]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4300:%.*]] = sext i32 [[CONV4299]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4300]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3026:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4301:%.*]] = icmp ne i64 [[TMP3026]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4301]], label [[IF_THEN4302:%.*]], label [[IF_ELSE4303:%.*]]
// SIMD-ONLY0:       if.then4302:
// SIMD-ONLY0-NEXT:    [[TMP3027:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3027]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4304:%.*]]
// SIMD-ONLY0:       if.else4303:
// SIMD-ONLY0-NEXT:    [[TMP3028:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3028]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4304]]
// SIMD-ONLY0:       if.end4304:
// SIMD-ONLY0-NEXT:    [[TMP3029:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3030:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4305:%.*]] = icmp eq i64 [[TMP3029]], [[TMP3030]]
// SIMD-ONLY0-NEXT:    [[CONV4306:%.*]] = zext i1 [[CMP4305]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4307:%.*]] = sext i32 [[CONV4306]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4307]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3031:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4308:%.*]] = icmp ne i64 [[TMP3031]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4308]], label [[IF_THEN4309:%.*]], label [[IF_ELSE4310:%.*]]
// SIMD-ONLY0:       if.then4309:
// SIMD-ONLY0-NEXT:    [[TMP3032:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3032]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4311:%.*]]
// SIMD-ONLY0:       if.else4310:
// SIMD-ONLY0-NEXT:    [[TMP3033:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3033]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4311]]
// SIMD-ONLY0:       if.end4311:
// SIMD-ONLY0-NEXT:    [[TMP3034:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3034]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3035:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3036:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4312:%.*]] = icmp sgt i64 [[TMP3035]], [[TMP3036]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4312]], label [[IF_THEN4314:%.*]], label [[IF_END4315:%.*]]
// SIMD-ONLY0:       if.then4314:
// SIMD-ONLY0-NEXT:    [[TMP3037:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3037]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4315]]
// SIMD-ONLY0:       if.end4315:
// SIMD-ONLY0-NEXT:    [[TMP3038:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3038]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3039:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3040:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4316:%.*]] = icmp sgt i64 [[TMP3039]], [[TMP3040]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4316]], label [[IF_THEN4318:%.*]], label [[IF_END4319:%.*]]
// SIMD-ONLY0:       if.then4318:
// SIMD-ONLY0-NEXT:    [[TMP3041:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3041]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4319]]
// SIMD-ONLY0:       if.end4319:
// SIMD-ONLY0-NEXT:    [[TMP3042:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3042]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3043:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3044:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4320:%.*]] = icmp slt i64 [[TMP3043]], [[TMP3044]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4320]], label [[IF_THEN4322:%.*]], label [[IF_END4323:%.*]]
// SIMD-ONLY0:       if.then4322:
// SIMD-ONLY0-NEXT:    [[TMP3045:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3045]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4323]]
// SIMD-ONLY0:       if.end4323:
// SIMD-ONLY0-NEXT:    [[TMP3046:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3046]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3047:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3048:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4324:%.*]] = icmp slt i64 [[TMP3047]], [[TMP3048]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4324]], label [[IF_THEN4326:%.*]], label [[IF_END4327:%.*]]
// SIMD-ONLY0:       if.then4326:
// SIMD-ONLY0-NEXT:    [[TMP3049:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3049]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4327]]
// SIMD-ONLY0:       if.end4327:
// SIMD-ONLY0-NEXT:    [[TMP3050:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3050]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3051:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3052:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4328:%.*]] = icmp eq i64 [[TMP3051]], [[TMP3052]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4328]], label [[IF_THEN4330:%.*]], label [[IF_END4331:%.*]]
// SIMD-ONLY0:       if.then4330:
// SIMD-ONLY0-NEXT:    [[TMP3053:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3053]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4331]]
// SIMD-ONLY0:       if.end4331:
// SIMD-ONLY0-NEXT:    [[TMP3054:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3054]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3055:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3056:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4332:%.*]] = icmp eq i64 [[TMP3055]], [[TMP3056]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4332]], label [[IF_THEN4334:%.*]], label [[IF_END4335:%.*]]
// SIMD-ONLY0:       if.then4334:
// SIMD-ONLY0-NEXT:    [[TMP3057:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3057]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4335]]
// SIMD-ONLY0:       if.end4335:
// SIMD-ONLY0-NEXT:    [[TMP3058:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3059:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4336:%.*]] = icmp sgt i64 [[TMP3058]], [[TMP3059]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4336]], label [[IF_THEN4338:%.*]], label [[IF_END4339:%.*]]
// SIMD-ONLY0:       if.then4338:
// SIMD-ONLY0-NEXT:    [[TMP3060:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3060]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4339]]
// SIMD-ONLY0:       if.end4339:
// SIMD-ONLY0-NEXT:    [[TMP3061:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3061]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3062:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3063:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4340:%.*]] = icmp sgt i64 [[TMP3062]], [[TMP3063]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4340]], label [[IF_THEN4342:%.*]], label [[IF_END4343:%.*]]
// SIMD-ONLY0:       if.then4342:
// SIMD-ONLY0-NEXT:    [[TMP3064:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3064]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4343]]
// SIMD-ONLY0:       if.end4343:
// SIMD-ONLY0-NEXT:    [[TMP3065:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3065]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3066:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3067:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4344:%.*]] = icmp slt i64 [[TMP3066]], [[TMP3067]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4344]], label [[IF_THEN4346:%.*]], label [[IF_END4347:%.*]]
// SIMD-ONLY0:       if.then4346:
// SIMD-ONLY0-NEXT:    [[TMP3068:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3068]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4347]]
// SIMD-ONLY0:       if.end4347:
// SIMD-ONLY0-NEXT:    [[TMP3069:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3069]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3070:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3071:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4348:%.*]] = icmp slt i64 [[TMP3070]], [[TMP3071]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4348]], label [[IF_THEN4350:%.*]], label [[IF_END4351:%.*]]
// SIMD-ONLY0:       if.then4350:
// SIMD-ONLY0-NEXT:    [[TMP3072:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3072]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4351]]
// SIMD-ONLY0:       if.end4351:
// SIMD-ONLY0-NEXT:    [[TMP3073:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3073]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3074:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3075:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4352:%.*]] = icmp eq i64 [[TMP3074]], [[TMP3075]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4352]], label [[IF_THEN4354:%.*]], label [[IF_END4355:%.*]]
// SIMD-ONLY0:       if.then4354:
// SIMD-ONLY0-NEXT:    [[TMP3076:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3076]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4355]]
// SIMD-ONLY0:       if.end4355:
// SIMD-ONLY0-NEXT:    [[TMP3077:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3077]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3078:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3079:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4356:%.*]] = icmp eq i64 [[TMP3078]], [[TMP3079]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4356]], label [[IF_THEN4358:%.*]], label [[IF_END4359:%.*]]
// SIMD-ONLY0:       if.then4358:
// SIMD-ONLY0-NEXT:    [[TMP3080:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3080]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4359]]
// SIMD-ONLY0:       if.end4359:
// SIMD-ONLY0-NEXT:    [[TMP3081:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3081]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3082:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3083:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4360:%.*]] = icmp eq i64 [[TMP3082]], [[TMP3083]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4360]], label [[IF_THEN4362:%.*]], label [[IF_ELSE4363:%.*]]
// SIMD-ONLY0:       if.then4362:
// SIMD-ONLY0-NEXT:    [[TMP3084:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3084]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4364:%.*]]
// SIMD-ONLY0:       if.else4363:
// SIMD-ONLY0-NEXT:    [[TMP3085:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3085]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4364]]
// SIMD-ONLY0:       if.end4364:
// SIMD-ONLY0-NEXT:    [[TMP3086:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3087:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4365:%.*]] = icmp eq i64 [[TMP3086]], [[TMP3087]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4365]], label [[IF_THEN4367:%.*]], label [[IF_ELSE4368:%.*]]
// SIMD-ONLY0:       if.then4367:
// SIMD-ONLY0-NEXT:    [[TMP3088:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3088]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4369:%.*]]
// SIMD-ONLY0:       if.else4368:
// SIMD-ONLY0-NEXT:    [[TMP3089:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3089]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4369]]
// SIMD-ONLY0:       if.end4369:
// SIMD-ONLY0-NEXT:    [[TMP3090:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3091:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4370:%.*]] = icmp eq i64 [[TMP3090]], [[TMP3091]]
// SIMD-ONLY0-NEXT:    [[CONV4371:%.*]] = zext i1 [[CMP4370]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4372:%.*]] = sext i32 [[CONV4371]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4372]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3092:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4373:%.*]] = icmp ne i64 [[TMP3092]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4373]], label [[IF_THEN4374:%.*]], label [[IF_END4375:%.*]]
// SIMD-ONLY0:       if.then4374:
// SIMD-ONLY0-NEXT:    [[TMP3093:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3093]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4375]]
// SIMD-ONLY0:       if.end4375:
// SIMD-ONLY0-NEXT:    [[TMP3094:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3095:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4376:%.*]] = icmp eq i64 [[TMP3094]], [[TMP3095]]
// SIMD-ONLY0-NEXT:    [[CONV4377:%.*]] = zext i1 [[CMP4376]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4378:%.*]] = sext i32 [[CONV4377]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4378]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3096:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4379:%.*]] = icmp ne i64 [[TMP3096]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4379]], label [[IF_THEN4380:%.*]], label [[IF_END4381:%.*]]
// SIMD-ONLY0:       if.then4380:
// SIMD-ONLY0-NEXT:    [[TMP3097:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3097]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4381]]
// SIMD-ONLY0:       if.end4381:
// SIMD-ONLY0-NEXT:    [[TMP3098:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3099:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4382:%.*]] = icmp eq i64 [[TMP3098]], [[TMP3099]]
// SIMD-ONLY0-NEXT:    [[CONV4383:%.*]] = zext i1 [[CMP4382]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4384:%.*]] = sext i32 [[CONV4383]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4384]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3100:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4385:%.*]] = icmp ne i64 [[TMP3100]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4385]], label [[IF_THEN4386:%.*]], label [[IF_ELSE4387:%.*]]
// SIMD-ONLY0:       if.then4386:
// SIMD-ONLY0-NEXT:    [[TMP3101:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3101]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4388:%.*]]
// SIMD-ONLY0:       if.else4387:
// SIMD-ONLY0-NEXT:    [[TMP3102:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3102]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4388]]
// SIMD-ONLY0:       if.end4388:
// SIMD-ONLY0-NEXT:    [[TMP3103:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3104:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4389:%.*]] = icmp eq i64 [[TMP3103]], [[TMP3104]]
// SIMD-ONLY0-NEXT:    [[CONV4390:%.*]] = zext i1 [[CMP4389]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4391:%.*]] = sext i32 [[CONV4390]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4391]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3105:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4392:%.*]] = icmp ne i64 [[TMP3105]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4392]], label [[IF_THEN4393:%.*]], label [[IF_ELSE4394:%.*]]
// SIMD-ONLY0:       if.then4393:
// SIMD-ONLY0-NEXT:    [[TMP3106:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3106]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4395:%.*]]
// SIMD-ONLY0:       if.else4394:
// SIMD-ONLY0-NEXT:    [[TMP3107:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3107]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4395]]
// SIMD-ONLY0:       if.end4395:
// SIMD-ONLY0-NEXT:    [[TMP3108:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3108]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3109:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3110:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4396:%.*]] = icmp ugt i64 [[TMP3109]], [[TMP3110]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4396]], label [[IF_THEN4398:%.*]], label [[IF_END4399:%.*]]
// SIMD-ONLY0:       if.then4398:
// SIMD-ONLY0-NEXT:    [[TMP3111:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3111]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4399]]
// SIMD-ONLY0:       if.end4399:
// SIMD-ONLY0-NEXT:    [[TMP3112:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3112]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3113:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3114:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4400:%.*]] = icmp ugt i64 [[TMP3113]], [[TMP3114]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4400]], label [[IF_THEN4402:%.*]], label [[IF_END4403:%.*]]
// SIMD-ONLY0:       if.then4402:
// SIMD-ONLY0-NEXT:    [[TMP3115:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3115]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4403]]
// SIMD-ONLY0:       if.end4403:
// SIMD-ONLY0-NEXT:    [[TMP3116:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3116]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3117:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3118:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4404:%.*]] = icmp ult i64 [[TMP3117]], [[TMP3118]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4404]], label [[IF_THEN4406:%.*]], label [[IF_END4407:%.*]]
// SIMD-ONLY0:       if.then4406:
// SIMD-ONLY0-NEXT:    [[TMP3119:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3119]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4407]]
// SIMD-ONLY0:       if.end4407:
// SIMD-ONLY0-NEXT:    [[TMP3120:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3120]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3121:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3122:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4408:%.*]] = icmp ult i64 [[TMP3121]], [[TMP3122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4408]], label [[IF_THEN4410:%.*]], label [[IF_END4411:%.*]]
// SIMD-ONLY0:       if.then4410:
// SIMD-ONLY0-NEXT:    [[TMP3123:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3123]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4411]]
// SIMD-ONLY0:       if.end4411:
// SIMD-ONLY0-NEXT:    [[TMP3124:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3124]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3125:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3126:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4412:%.*]] = icmp eq i64 [[TMP3125]], [[TMP3126]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4412]], label [[IF_THEN4414:%.*]], label [[IF_END4415:%.*]]
// SIMD-ONLY0:       if.then4414:
// SIMD-ONLY0-NEXT:    [[TMP3127:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3127]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4415]]
// SIMD-ONLY0:       if.end4415:
// SIMD-ONLY0-NEXT:    [[TMP3128:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3128]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3129:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3130:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4416:%.*]] = icmp eq i64 [[TMP3129]], [[TMP3130]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4416]], label [[IF_THEN4418:%.*]], label [[IF_END4419:%.*]]
// SIMD-ONLY0:       if.then4418:
// SIMD-ONLY0-NEXT:    [[TMP3131:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3131]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4419]]
// SIMD-ONLY0:       if.end4419:
// SIMD-ONLY0-NEXT:    [[TMP3132:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3133:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4420:%.*]] = icmp ugt i64 [[TMP3132]], [[TMP3133]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4420]], label [[IF_THEN4422:%.*]], label [[IF_END4423:%.*]]
// SIMD-ONLY0:       if.then4422:
// SIMD-ONLY0-NEXT:    [[TMP3134:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3134]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4423]]
// SIMD-ONLY0:       if.end4423:
// SIMD-ONLY0-NEXT:    [[TMP3135:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3135]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3136:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3137:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4424:%.*]] = icmp ugt i64 [[TMP3136]], [[TMP3137]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4424]], label [[IF_THEN4426:%.*]], label [[IF_END4427:%.*]]
// SIMD-ONLY0:       if.then4426:
// SIMD-ONLY0-NEXT:    [[TMP3138:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3138]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4427]]
// SIMD-ONLY0:       if.end4427:
// SIMD-ONLY0-NEXT:    [[TMP3139:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3139]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3140:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3141:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4428:%.*]] = icmp ult i64 [[TMP3140]], [[TMP3141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4428]], label [[IF_THEN4430:%.*]], label [[IF_END4431:%.*]]
// SIMD-ONLY0:       if.then4430:
// SIMD-ONLY0-NEXT:    [[TMP3142:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3142]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4431]]
// SIMD-ONLY0:       if.end4431:
// SIMD-ONLY0-NEXT:    [[TMP3143:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3143]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3144:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3145:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4432:%.*]] = icmp ult i64 [[TMP3144]], [[TMP3145]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4432]], label [[IF_THEN4434:%.*]], label [[IF_END4435:%.*]]
// SIMD-ONLY0:       if.then4434:
// SIMD-ONLY0-NEXT:    [[TMP3146:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3146]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4435]]
// SIMD-ONLY0:       if.end4435:
// SIMD-ONLY0-NEXT:    [[TMP3147:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3147]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3148:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3149:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4436:%.*]] = icmp eq i64 [[TMP3148]], [[TMP3149]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4436]], label [[IF_THEN4438:%.*]], label [[IF_END4439:%.*]]
// SIMD-ONLY0:       if.then4438:
// SIMD-ONLY0-NEXT:    [[TMP3150:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3150]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4439]]
// SIMD-ONLY0:       if.end4439:
// SIMD-ONLY0-NEXT:    [[TMP3151:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3151]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3152:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3153:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4440:%.*]] = icmp eq i64 [[TMP3152]], [[TMP3153]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4440]], label [[IF_THEN4442:%.*]], label [[IF_END4443:%.*]]
// SIMD-ONLY0:       if.then4442:
// SIMD-ONLY0-NEXT:    [[TMP3154:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3154]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4443]]
// SIMD-ONLY0:       if.end4443:
// SIMD-ONLY0-NEXT:    [[TMP3155:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3155]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3156:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3157:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4444:%.*]] = icmp eq i64 [[TMP3156]], [[TMP3157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4444]], label [[IF_THEN4446:%.*]], label [[IF_ELSE4447:%.*]]
// SIMD-ONLY0:       if.then4446:
// SIMD-ONLY0-NEXT:    [[TMP3158:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3158]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4448:%.*]]
// SIMD-ONLY0:       if.else4447:
// SIMD-ONLY0-NEXT:    [[TMP3159:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3159]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4448]]
// SIMD-ONLY0:       if.end4448:
// SIMD-ONLY0-NEXT:    [[TMP3160:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3161:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4449:%.*]] = icmp eq i64 [[TMP3160]], [[TMP3161]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4449]], label [[IF_THEN4451:%.*]], label [[IF_ELSE4452:%.*]]
// SIMD-ONLY0:       if.then4451:
// SIMD-ONLY0-NEXT:    [[TMP3162:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3162]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4453:%.*]]
// SIMD-ONLY0:       if.else4452:
// SIMD-ONLY0-NEXT:    [[TMP3163:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3163]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4453]]
// SIMD-ONLY0:       if.end4453:
// SIMD-ONLY0-NEXT:    [[TMP3164:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3165:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4454:%.*]] = icmp eq i64 [[TMP3164]], [[TMP3165]]
// SIMD-ONLY0-NEXT:    [[CONV4455:%.*]] = zext i1 [[CMP4454]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4456:%.*]] = sext i32 [[CONV4455]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4456]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3166:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4457:%.*]] = icmp ne i64 [[TMP3166]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4457]], label [[IF_THEN4458:%.*]], label [[IF_END4459:%.*]]
// SIMD-ONLY0:       if.then4458:
// SIMD-ONLY0-NEXT:    [[TMP3167:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3167]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4459]]
// SIMD-ONLY0:       if.end4459:
// SIMD-ONLY0-NEXT:    [[TMP3168:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3169:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4460:%.*]] = icmp eq i64 [[TMP3168]], [[TMP3169]]
// SIMD-ONLY0-NEXT:    [[CONV4461:%.*]] = zext i1 [[CMP4460]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4462:%.*]] = sext i32 [[CONV4461]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4462]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3170:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4463:%.*]] = icmp ne i64 [[TMP3170]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4463]], label [[IF_THEN4464:%.*]], label [[IF_END4465:%.*]]
// SIMD-ONLY0:       if.then4464:
// SIMD-ONLY0-NEXT:    [[TMP3171:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3171]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4465]]
// SIMD-ONLY0:       if.end4465:
// SIMD-ONLY0-NEXT:    [[TMP3172:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3173:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4466:%.*]] = icmp eq i64 [[TMP3172]], [[TMP3173]]
// SIMD-ONLY0-NEXT:    [[CONV4467:%.*]] = zext i1 [[CMP4466]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4468:%.*]] = sext i32 [[CONV4467]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4468]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3174:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4469:%.*]] = icmp ne i64 [[TMP3174]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4469]], label [[IF_THEN4470:%.*]], label [[IF_ELSE4471:%.*]]
// SIMD-ONLY0:       if.then4470:
// SIMD-ONLY0-NEXT:    [[TMP3175:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3175]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4472:%.*]]
// SIMD-ONLY0:       if.else4471:
// SIMD-ONLY0-NEXT:    [[TMP3176:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3176]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4472]]
// SIMD-ONLY0:       if.end4472:
// SIMD-ONLY0-NEXT:    [[TMP3177:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3178:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4473:%.*]] = icmp eq i64 [[TMP3177]], [[TMP3178]]
// SIMD-ONLY0-NEXT:    [[CONV4474:%.*]] = zext i1 [[CMP4473]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4475:%.*]] = sext i32 [[CONV4474]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4475]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3179:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4476:%.*]] = icmp ne i64 [[TMP3179]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4476]], label [[IF_THEN4477:%.*]], label [[IF_ELSE4478:%.*]]
// SIMD-ONLY0:       if.then4477:
// SIMD-ONLY0-NEXT:    [[TMP3180:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3180]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4479:%.*]]
// SIMD-ONLY0:       if.else4478:
// SIMD-ONLY0-NEXT:    [[TMP3181:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3181]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4479]]
// SIMD-ONLY0:       if.end4479:
// SIMD-ONLY0-NEXT:    [[TMP3182:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3182]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3183:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3184:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4480:%.*]] = icmp ugt i64 [[TMP3183]], [[TMP3184]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4480]], label [[IF_THEN4482:%.*]], label [[IF_END4483:%.*]]
// SIMD-ONLY0:       if.then4482:
// SIMD-ONLY0-NEXT:    [[TMP3185:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3185]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4483]]
// SIMD-ONLY0:       if.end4483:
// SIMD-ONLY0-NEXT:    [[TMP3186:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3186]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3187:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3188:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4484:%.*]] = icmp ugt i64 [[TMP3187]], [[TMP3188]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4484]], label [[IF_THEN4486:%.*]], label [[IF_END4487:%.*]]
// SIMD-ONLY0:       if.then4486:
// SIMD-ONLY0-NEXT:    [[TMP3189:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3189]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4487]]
// SIMD-ONLY0:       if.end4487:
// SIMD-ONLY0-NEXT:    [[TMP3190:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3190]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3191:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3192:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4488:%.*]] = icmp ult i64 [[TMP3191]], [[TMP3192]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4488]], label [[IF_THEN4490:%.*]], label [[IF_END4491:%.*]]
// SIMD-ONLY0:       if.then4490:
// SIMD-ONLY0-NEXT:    [[TMP3193:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3193]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4491]]
// SIMD-ONLY0:       if.end4491:
// SIMD-ONLY0-NEXT:    [[TMP3194:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3194]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3195:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3196:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4492:%.*]] = icmp ult i64 [[TMP3195]], [[TMP3196]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4492]], label [[IF_THEN4494:%.*]], label [[IF_END4495:%.*]]
// SIMD-ONLY0:       if.then4494:
// SIMD-ONLY0-NEXT:    [[TMP3197:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3197]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4495]]
// SIMD-ONLY0:       if.end4495:
// SIMD-ONLY0-NEXT:    [[TMP3198:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3198]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3199:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3200:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4496:%.*]] = icmp eq i64 [[TMP3199]], [[TMP3200]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4496]], label [[IF_THEN4498:%.*]], label [[IF_END4499:%.*]]
// SIMD-ONLY0:       if.then4498:
// SIMD-ONLY0-NEXT:    [[TMP3201:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3201]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4499]]
// SIMD-ONLY0:       if.end4499:
// SIMD-ONLY0-NEXT:    [[TMP3202:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3202]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3203:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3204:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4500:%.*]] = icmp eq i64 [[TMP3203]], [[TMP3204]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4500]], label [[IF_THEN4502:%.*]], label [[IF_END4503:%.*]]
// SIMD-ONLY0:       if.then4502:
// SIMD-ONLY0-NEXT:    [[TMP3205:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3205]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4503]]
// SIMD-ONLY0:       if.end4503:
// SIMD-ONLY0-NEXT:    [[TMP3206:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3207:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4504:%.*]] = icmp ugt i64 [[TMP3206]], [[TMP3207]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4504]], label [[IF_THEN4506:%.*]], label [[IF_END4507:%.*]]
// SIMD-ONLY0:       if.then4506:
// SIMD-ONLY0-NEXT:    [[TMP3208:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3208]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4507]]
// SIMD-ONLY0:       if.end4507:
// SIMD-ONLY0-NEXT:    [[TMP3209:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3209]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3210:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3211:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4508:%.*]] = icmp ugt i64 [[TMP3210]], [[TMP3211]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4508]], label [[IF_THEN4510:%.*]], label [[IF_END4511:%.*]]
// SIMD-ONLY0:       if.then4510:
// SIMD-ONLY0-NEXT:    [[TMP3212:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3212]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4511]]
// SIMD-ONLY0:       if.end4511:
// SIMD-ONLY0-NEXT:    [[TMP3213:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3213]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3214:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3215:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4512:%.*]] = icmp ult i64 [[TMP3214]], [[TMP3215]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4512]], label [[IF_THEN4514:%.*]], label [[IF_END4515:%.*]]
// SIMD-ONLY0:       if.then4514:
// SIMD-ONLY0-NEXT:    [[TMP3216:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3216]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4515]]
// SIMD-ONLY0:       if.end4515:
// SIMD-ONLY0-NEXT:    [[TMP3217:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3217]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3218:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3219:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4516:%.*]] = icmp ult i64 [[TMP3218]], [[TMP3219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4516]], label [[IF_THEN4518:%.*]], label [[IF_END4519:%.*]]
// SIMD-ONLY0:       if.then4518:
// SIMD-ONLY0-NEXT:    [[TMP3220:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3220]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4519]]
// SIMD-ONLY0:       if.end4519:
// SIMD-ONLY0-NEXT:    [[TMP3221:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3221]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3222:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3223:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4520:%.*]] = icmp eq i64 [[TMP3222]], [[TMP3223]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4520]], label [[IF_THEN4522:%.*]], label [[IF_END4523:%.*]]
// SIMD-ONLY0:       if.then4522:
// SIMD-ONLY0-NEXT:    [[TMP3224:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3224]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4523]]
// SIMD-ONLY0:       if.end4523:
// SIMD-ONLY0-NEXT:    [[TMP3225:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3225]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3226:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3227:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4524:%.*]] = icmp eq i64 [[TMP3226]], [[TMP3227]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4524]], label [[IF_THEN4526:%.*]], label [[IF_END4527:%.*]]
// SIMD-ONLY0:       if.then4526:
// SIMD-ONLY0-NEXT:    [[TMP3228:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3228]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4527]]
// SIMD-ONLY0:       if.end4527:
// SIMD-ONLY0-NEXT:    [[TMP3229:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3229]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3230:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3231:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4528:%.*]] = icmp eq i64 [[TMP3230]], [[TMP3231]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4528]], label [[IF_THEN4530:%.*]], label [[IF_ELSE4531:%.*]]
// SIMD-ONLY0:       if.then4530:
// SIMD-ONLY0-NEXT:    [[TMP3232:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3232]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4532:%.*]]
// SIMD-ONLY0:       if.else4531:
// SIMD-ONLY0-NEXT:    [[TMP3233:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3233]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4532]]
// SIMD-ONLY0:       if.end4532:
// SIMD-ONLY0-NEXT:    [[TMP3234:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3235:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4533:%.*]] = icmp eq i64 [[TMP3234]], [[TMP3235]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4533]], label [[IF_THEN4535:%.*]], label [[IF_ELSE4536:%.*]]
// SIMD-ONLY0:       if.then4535:
// SIMD-ONLY0-NEXT:    [[TMP3236:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3236]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4537:%.*]]
// SIMD-ONLY0:       if.else4536:
// SIMD-ONLY0-NEXT:    [[TMP3237:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3237]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4537]]
// SIMD-ONLY0:       if.end4537:
// SIMD-ONLY0-NEXT:    [[TMP3238:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3239:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4538:%.*]] = icmp eq i64 [[TMP3238]], [[TMP3239]]
// SIMD-ONLY0-NEXT:    [[CONV4539:%.*]] = zext i1 [[CMP4538]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4540:%.*]] = sext i32 [[CONV4539]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4540]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3240:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4541:%.*]] = icmp ne i64 [[TMP3240]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4541]], label [[IF_THEN4542:%.*]], label [[IF_END4543:%.*]]
// SIMD-ONLY0:       if.then4542:
// SIMD-ONLY0-NEXT:    [[TMP3241:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3241]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4543]]
// SIMD-ONLY0:       if.end4543:
// SIMD-ONLY0-NEXT:    [[TMP3242:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3243:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4544:%.*]] = icmp eq i64 [[TMP3242]], [[TMP3243]]
// SIMD-ONLY0-NEXT:    [[CONV4545:%.*]] = zext i1 [[CMP4544]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4546:%.*]] = sext i32 [[CONV4545]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4546]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3244:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4547:%.*]] = icmp ne i64 [[TMP3244]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4547]], label [[IF_THEN4548:%.*]], label [[IF_END4549:%.*]]
// SIMD-ONLY0:       if.then4548:
// SIMD-ONLY0-NEXT:    [[TMP3245:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3245]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4549]]
// SIMD-ONLY0:       if.end4549:
// SIMD-ONLY0-NEXT:    [[TMP3246:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3247:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4550:%.*]] = icmp eq i64 [[TMP3246]], [[TMP3247]]
// SIMD-ONLY0-NEXT:    [[CONV4551:%.*]] = zext i1 [[CMP4550]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4552:%.*]] = sext i32 [[CONV4551]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4552]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3248:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4553:%.*]] = icmp ne i64 [[TMP3248]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4553]], label [[IF_THEN4554:%.*]], label [[IF_ELSE4555:%.*]]
// SIMD-ONLY0:       if.then4554:
// SIMD-ONLY0-NEXT:    [[TMP3249:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3249]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4556:%.*]]
// SIMD-ONLY0:       if.else4555:
// SIMD-ONLY0-NEXT:    [[TMP3250:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3250]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4556]]
// SIMD-ONLY0:       if.end4556:
// SIMD-ONLY0-NEXT:    [[TMP3251:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3252:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4557:%.*]] = icmp eq i64 [[TMP3251]], [[TMP3252]]
// SIMD-ONLY0-NEXT:    [[CONV4558:%.*]] = zext i1 [[CMP4557]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4559:%.*]] = sext i32 [[CONV4558]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4559]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3253:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4560:%.*]] = icmp ne i64 [[TMP3253]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4560]], label [[IF_THEN4561:%.*]], label [[IF_ELSE4562:%.*]]
// SIMD-ONLY0:       if.then4561:
// SIMD-ONLY0-NEXT:    [[TMP3254:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3254]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4563:%.*]]
// SIMD-ONLY0:       if.else4562:
// SIMD-ONLY0-NEXT:    [[TMP3255:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3255]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4563]]
// SIMD-ONLY0:       if.end4563:
// SIMD-ONLY0-NEXT:    [[TMP3256:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3256]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3257:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3258:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4564:%.*]] = icmp ugt i64 [[TMP3257]], [[TMP3258]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4564]], label [[IF_THEN4566:%.*]], label [[IF_END4567:%.*]]
// SIMD-ONLY0:       if.then4566:
// SIMD-ONLY0-NEXT:    [[TMP3259:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3259]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4567]]
// SIMD-ONLY0:       if.end4567:
// SIMD-ONLY0-NEXT:    [[TMP3260:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3260]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3261:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3262:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4568:%.*]] = icmp ugt i64 [[TMP3261]], [[TMP3262]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4568]], label [[IF_THEN4570:%.*]], label [[IF_END4571:%.*]]
// SIMD-ONLY0:       if.then4570:
// SIMD-ONLY0-NEXT:    [[TMP3263:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3263]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4571]]
// SIMD-ONLY0:       if.end4571:
// SIMD-ONLY0-NEXT:    [[TMP3264:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3264]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3265:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3266:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4572:%.*]] = icmp ult i64 [[TMP3265]], [[TMP3266]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4572]], label [[IF_THEN4574:%.*]], label [[IF_END4575:%.*]]
// SIMD-ONLY0:       if.then4574:
// SIMD-ONLY0-NEXT:    [[TMP3267:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3267]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4575]]
// SIMD-ONLY0:       if.end4575:
// SIMD-ONLY0-NEXT:    [[TMP3268:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3268]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3269:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3270:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4576:%.*]] = icmp ult i64 [[TMP3269]], [[TMP3270]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4576]], label [[IF_THEN4578:%.*]], label [[IF_END4579:%.*]]
// SIMD-ONLY0:       if.then4578:
// SIMD-ONLY0-NEXT:    [[TMP3271:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3271]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4579]]
// SIMD-ONLY0:       if.end4579:
// SIMD-ONLY0-NEXT:    [[TMP3272:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3272]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3273:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3274:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4580:%.*]] = icmp eq i64 [[TMP3273]], [[TMP3274]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4580]], label [[IF_THEN4582:%.*]], label [[IF_END4583:%.*]]
// SIMD-ONLY0:       if.then4582:
// SIMD-ONLY0-NEXT:    [[TMP3275:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3275]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4583]]
// SIMD-ONLY0:       if.end4583:
// SIMD-ONLY0-NEXT:    [[TMP3276:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3276]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3277:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3278:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4584:%.*]] = icmp eq i64 [[TMP3277]], [[TMP3278]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4584]], label [[IF_THEN4586:%.*]], label [[IF_END4587:%.*]]
// SIMD-ONLY0:       if.then4586:
// SIMD-ONLY0-NEXT:    [[TMP3279:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3279]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4587]]
// SIMD-ONLY0:       if.end4587:
// SIMD-ONLY0-NEXT:    [[TMP3280:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3281:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4588:%.*]] = icmp ugt i64 [[TMP3280]], [[TMP3281]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4588]], label [[IF_THEN4590:%.*]], label [[IF_END4591:%.*]]
// SIMD-ONLY0:       if.then4590:
// SIMD-ONLY0-NEXT:    [[TMP3282:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3282]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4591]]
// SIMD-ONLY0:       if.end4591:
// SIMD-ONLY0-NEXT:    [[TMP3283:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3283]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3284:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3285:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4592:%.*]] = icmp ugt i64 [[TMP3284]], [[TMP3285]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4592]], label [[IF_THEN4594:%.*]], label [[IF_END4595:%.*]]
// SIMD-ONLY0:       if.then4594:
// SIMD-ONLY0-NEXT:    [[TMP3286:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3286]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4595]]
// SIMD-ONLY0:       if.end4595:
// SIMD-ONLY0-NEXT:    [[TMP3287:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3287]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3288:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3289:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4596:%.*]] = icmp ult i64 [[TMP3288]], [[TMP3289]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4596]], label [[IF_THEN4598:%.*]], label [[IF_END4599:%.*]]
// SIMD-ONLY0:       if.then4598:
// SIMD-ONLY0-NEXT:    [[TMP3290:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3290]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4599]]
// SIMD-ONLY0:       if.end4599:
// SIMD-ONLY0-NEXT:    [[TMP3291:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3291]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3292:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3293:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4600:%.*]] = icmp ult i64 [[TMP3292]], [[TMP3293]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4600]], label [[IF_THEN4602:%.*]], label [[IF_END4603:%.*]]
// SIMD-ONLY0:       if.then4602:
// SIMD-ONLY0-NEXT:    [[TMP3294:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3294]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4603]]
// SIMD-ONLY0:       if.end4603:
// SIMD-ONLY0-NEXT:    [[TMP3295:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3295]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3296:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3297:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4604:%.*]] = icmp eq i64 [[TMP3296]], [[TMP3297]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4604]], label [[IF_THEN4606:%.*]], label [[IF_END4607:%.*]]
// SIMD-ONLY0:       if.then4606:
// SIMD-ONLY0-NEXT:    [[TMP3298:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3298]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4607]]
// SIMD-ONLY0:       if.end4607:
// SIMD-ONLY0-NEXT:    [[TMP3299:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3299]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3300:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3301:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4608:%.*]] = icmp eq i64 [[TMP3300]], [[TMP3301]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4608]], label [[IF_THEN4610:%.*]], label [[IF_END4611:%.*]]
// SIMD-ONLY0:       if.then4610:
// SIMD-ONLY0-NEXT:    [[TMP3302:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3302]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4611]]
// SIMD-ONLY0:       if.end4611:
// SIMD-ONLY0-NEXT:    [[TMP3303:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3303]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3304:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3305:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4612:%.*]] = icmp eq i64 [[TMP3304]], [[TMP3305]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4612]], label [[IF_THEN4614:%.*]], label [[IF_ELSE4615:%.*]]
// SIMD-ONLY0:       if.then4614:
// SIMD-ONLY0-NEXT:    [[TMP3306:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3306]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4616:%.*]]
// SIMD-ONLY0:       if.else4615:
// SIMD-ONLY0-NEXT:    [[TMP3307:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3307]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4616]]
// SIMD-ONLY0:       if.end4616:
// SIMD-ONLY0-NEXT:    [[TMP3308:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3309:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4617:%.*]] = icmp eq i64 [[TMP3308]], [[TMP3309]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4617]], label [[IF_THEN4619:%.*]], label [[IF_ELSE4620:%.*]]
// SIMD-ONLY0:       if.then4619:
// SIMD-ONLY0-NEXT:    [[TMP3310:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3310]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4621:%.*]]
// SIMD-ONLY0:       if.else4620:
// SIMD-ONLY0-NEXT:    [[TMP3311:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3311]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4621]]
// SIMD-ONLY0:       if.end4621:
// SIMD-ONLY0-NEXT:    [[TMP3312:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3313:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4622:%.*]] = icmp eq i64 [[TMP3312]], [[TMP3313]]
// SIMD-ONLY0-NEXT:    [[CONV4623:%.*]] = zext i1 [[CMP4622]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4624:%.*]] = sext i32 [[CONV4623]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4624]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3314:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4625:%.*]] = icmp ne i64 [[TMP3314]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4625]], label [[IF_THEN4626:%.*]], label [[IF_END4627:%.*]]
// SIMD-ONLY0:       if.then4626:
// SIMD-ONLY0-NEXT:    [[TMP3315:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3315]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4627]]
// SIMD-ONLY0:       if.end4627:
// SIMD-ONLY0-NEXT:    [[TMP3316:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3317:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4628:%.*]] = icmp eq i64 [[TMP3316]], [[TMP3317]]
// SIMD-ONLY0-NEXT:    [[CONV4629:%.*]] = zext i1 [[CMP4628]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4630:%.*]] = sext i32 [[CONV4629]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4630]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3318:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4631:%.*]] = icmp ne i64 [[TMP3318]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4631]], label [[IF_THEN4632:%.*]], label [[IF_END4633:%.*]]
// SIMD-ONLY0:       if.then4632:
// SIMD-ONLY0-NEXT:    [[TMP3319:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3319]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4633]]
// SIMD-ONLY0:       if.end4633:
// SIMD-ONLY0-NEXT:    [[TMP3320:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3321:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4634:%.*]] = icmp eq i64 [[TMP3320]], [[TMP3321]]
// SIMD-ONLY0-NEXT:    [[CONV4635:%.*]] = zext i1 [[CMP4634]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4636:%.*]] = sext i32 [[CONV4635]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4636]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3322:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4637:%.*]] = icmp ne i64 [[TMP3322]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4637]], label [[IF_THEN4638:%.*]], label [[IF_ELSE4639:%.*]]
// SIMD-ONLY0:       if.then4638:
// SIMD-ONLY0-NEXT:    [[TMP3323:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3323]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4640:%.*]]
// SIMD-ONLY0:       if.else4639:
// SIMD-ONLY0-NEXT:    [[TMP3324:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3324]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4640]]
// SIMD-ONLY0:       if.end4640:
// SIMD-ONLY0-NEXT:    [[TMP3325:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3326:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4641:%.*]] = icmp eq i64 [[TMP3325]], [[TMP3326]]
// SIMD-ONLY0-NEXT:    [[CONV4642:%.*]] = zext i1 [[CMP4641]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4643:%.*]] = sext i32 [[CONV4642]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4643]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3327:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4644:%.*]] = icmp ne i64 [[TMP3327]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4644]], label [[IF_THEN4645:%.*]], label [[IF_ELSE4646:%.*]]
// SIMD-ONLY0:       if.then4645:
// SIMD-ONLY0-NEXT:    [[TMP3328:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3328]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4647:%.*]]
// SIMD-ONLY0:       if.else4646:
// SIMD-ONLY0-NEXT:    [[TMP3329:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3329]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4647]]
// SIMD-ONLY0:       if.end4647:
// SIMD-ONLY0-NEXT:    [[TMP3330:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3330]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3331:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3332:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4648:%.*]] = icmp ugt i64 [[TMP3331]], [[TMP3332]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4648]], label [[IF_THEN4650:%.*]], label [[IF_END4651:%.*]]
// SIMD-ONLY0:       if.then4650:
// SIMD-ONLY0-NEXT:    [[TMP3333:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3333]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4651]]
// SIMD-ONLY0:       if.end4651:
// SIMD-ONLY0-NEXT:    [[TMP3334:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3334]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3335:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3336:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4652:%.*]] = icmp ugt i64 [[TMP3335]], [[TMP3336]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4652]], label [[IF_THEN4654:%.*]], label [[IF_END4655:%.*]]
// SIMD-ONLY0:       if.then4654:
// SIMD-ONLY0-NEXT:    [[TMP3337:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3337]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4655]]
// SIMD-ONLY0:       if.end4655:
// SIMD-ONLY0-NEXT:    [[TMP3338:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3338]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3339:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3340:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4656:%.*]] = icmp ult i64 [[TMP3339]], [[TMP3340]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4656]], label [[IF_THEN4658:%.*]], label [[IF_END4659:%.*]]
// SIMD-ONLY0:       if.then4658:
// SIMD-ONLY0-NEXT:    [[TMP3341:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3341]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4659]]
// SIMD-ONLY0:       if.end4659:
// SIMD-ONLY0-NEXT:    [[TMP3342:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3342]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3343:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3344:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4660:%.*]] = icmp ult i64 [[TMP3343]], [[TMP3344]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4660]], label [[IF_THEN4662:%.*]], label [[IF_END4663:%.*]]
// SIMD-ONLY0:       if.then4662:
// SIMD-ONLY0-NEXT:    [[TMP3345:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3345]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4663]]
// SIMD-ONLY0:       if.end4663:
// SIMD-ONLY0-NEXT:    [[TMP3346:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3346]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3347:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3348:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4664:%.*]] = icmp eq i64 [[TMP3347]], [[TMP3348]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4664]], label [[IF_THEN4666:%.*]], label [[IF_END4667:%.*]]
// SIMD-ONLY0:       if.then4666:
// SIMD-ONLY0-NEXT:    [[TMP3349:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3349]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4667]]
// SIMD-ONLY0:       if.end4667:
// SIMD-ONLY0-NEXT:    [[TMP3350:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3350]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3351:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3352:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4668:%.*]] = icmp eq i64 [[TMP3351]], [[TMP3352]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4668]], label [[IF_THEN4670:%.*]], label [[IF_END4671:%.*]]
// SIMD-ONLY0:       if.then4670:
// SIMD-ONLY0-NEXT:    [[TMP3353:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3353]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4671]]
// SIMD-ONLY0:       if.end4671:
// SIMD-ONLY0-NEXT:    [[TMP3354:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3355:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4672:%.*]] = icmp ugt i64 [[TMP3354]], [[TMP3355]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4672]], label [[IF_THEN4674:%.*]], label [[IF_END4675:%.*]]
// SIMD-ONLY0:       if.then4674:
// SIMD-ONLY0-NEXT:    [[TMP3356:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3356]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4675]]
// SIMD-ONLY0:       if.end4675:
// SIMD-ONLY0-NEXT:    [[TMP3357:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3357]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3358:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3359:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4676:%.*]] = icmp ugt i64 [[TMP3358]], [[TMP3359]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4676]], label [[IF_THEN4678:%.*]], label [[IF_END4679:%.*]]
// SIMD-ONLY0:       if.then4678:
// SIMD-ONLY0-NEXT:    [[TMP3360:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3360]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4679]]
// SIMD-ONLY0:       if.end4679:
// SIMD-ONLY0-NEXT:    [[TMP3361:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3361]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3362:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3363:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4680:%.*]] = icmp ult i64 [[TMP3362]], [[TMP3363]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4680]], label [[IF_THEN4682:%.*]], label [[IF_END4683:%.*]]
// SIMD-ONLY0:       if.then4682:
// SIMD-ONLY0-NEXT:    [[TMP3364:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3364]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4683]]
// SIMD-ONLY0:       if.end4683:
// SIMD-ONLY0-NEXT:    [[TMP3365:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3365]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3366:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3367:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4684:%.*]] = icmp ult i64 [[TMP3366]], [[TMP3367]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4684]], label [[IF_THEN4686:%.*]], label [[IF_END4687:%.*]]
// SIMD-ONLY0:       if.then4686:
// SIMD-ONLY0-NEXT:    [[TMP3368:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3368]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4687]]
// SIMD-ONLY0:       if.end4687:
// SIMD-ONLY0-NEXT:    [[TMP3369:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3369]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3370:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3371:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4688:%.*]] = icmp eq i64 [[TMP3370]], [[TMP3371]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4688]], label [[IF_THEN4690:%.*]], label [[IF_END4691:%.*]]
// SIMD-ONLY0:       if.then4690:
// SIMD-ONLY0-NEXT:    [[TMP3372:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3372]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4691]]
// SIMD-ONLY0:       if.end4691:
// SIMD-ONLY0-NEXT:    [[TMP3373:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3373]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3374:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3375:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4692:%.*]] = icmp eq i64 [[TMP3374]], [[TMP3375]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4692]], label [[IF_THEN4694:%.*]], label [[IF_END4695:%.*]]
// SIMD-ONLY0:       if.then4694:
// SIMD-ONLY0-NEXT:    [[TMP3376:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3376]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4695]]
// SIMD-ONLY0:       if.end4695:
// SIMD-ONLY0-NEXT:    [[TMP3377:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3377]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3378:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3379:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4696:%.*]] = icmp eq i64 [[TMP3378]], [[TMP3379]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4696]], label [[IF_THEN4698:%.*]], label [[IF_ELSE4699:%.*]]
// SIMD-ONLY0:       if.then4698:
// SIMD-ONLY0-NEXT:    [[TMP3380:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3380]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4700:%.*]]
// SIMD-ONLY0:       if.else4699:
// SIMD-ONLY0-NEXT:    [[TMP3381:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3381]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4700]]
// SIMD-ONLY0:       if.end4700:
// SIMD-ONLY0-NEXT:    [[TMP3382:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3383:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4701:%.*]] = icmp eq i64 [[TMP3382]], [[TMP3383]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4701]], label [[IF_THEN4703:%.*]], label [[IF_ELSE4704:%.*]]
// SIMD-ONLY0:       if.then4703:
// SIMD-ONLY0-NEXT:    [[TMP3384:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3384]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4705:%.*]]
// SIMD-ONLY0:       if.else4704:
// SIMD-ONLY0-NEXT:    [[TMP3385:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3385]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4705]]
// SIMD-ONLY0:       if.end4705:
// SIMD-ONLY0-NEXT:    [[TMP3386:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3387:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4706:%.*]] = icmp eq i64 [[TMP3386]], [[TMP3387]]
// SIMD-ONLY0-NEXT:    [[CONV4707:%.*]] = zext i1 [[CMP4706]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4708:%.*]] = sext i32 [[CONV4707]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4708]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3388:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4709:%.*]] = icmp ne i64 [[TMP3388]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4709]], label [[IF_THEN4710:%.*]], label [[IF_END4711:%.*]]
// SIMD-ONLY0:       if.then4710:
// SIMD-ONLY0-NEXT:    [[TMP3389:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3389]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4711]]
// SIMD-ONLY0:       if.end4711:
// SIMD-ONLY0-NEXT:    [[TMP3390:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3391:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4712:%.*]] = icmp eq i64 [[TMP3390]], [[TMP3391]]
// SIMD-ONLY0-NEXT:    [[CONV4713:%.*]] = zext i1 [[CMP4712]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4714:%.*]] = sext i32 [[CONV4713]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4714]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3392:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4715:%.*]] = icmp ne i64 [[TMP3392]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4715]], label [[IF_THEN4716:%.*]], label [[IF_END4717:%.*]]
// SIMD-ONLY0:       if.then4716:
// SIMD-ONLY0-NEXT:    [[TMP3393:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3393]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4717]]
// SIMD-ONLY0:       if.end4717:
// SIMD-ONLY0-NEXT:    [[TMP3394:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3395:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4718:%.*]] = icmp eq i64 [[TMP3394]], [[TMP3395]]
// SIMD-ONLY0-NEXT:    [[CONV4719:%.*]] = zext i1 [[CMP4718]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4720:%.*]] = sext i32 [[CONV4719]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4720]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3396:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4721:%.*]] = icmp ne i64 [[TMP3396]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4721]], label [[IF_THEN4722:%.*]], label [[IF_ELSE4723:%.*]]
// SIMD-ONLY0:       if.then4722:
// SIMD-ONLY0-NEXT:    [[TMP3397:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3397]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4724:%.*]]
// SIMD-ONLY0:       if.else4723:
// SIMD-ONLY0-NEXT:    [[TMP3398:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3398]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4724]]
// SIMD-ONLY0:       if.end4724:
// SIMD-ONLY0-NEXT:    [[TMP3399:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3400:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4725:%.*]] = icmp eq i64 [[TMP3399]], [[TMP3400]]
// SIMD-ONLY0-NEXT:    [[CONV4726:%.*]] = zext i1 [[CMP4725]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4727:%.*]] = sext i32 [[CONV4726]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4727]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3401:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4728:%.*]] = icmp ne i64 [[TMP3401]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4728]], label [[IF_THEN4729:%.*]], label [[IF_ELSE4730:%.*]]
// SIMD-ONLY0:       if.then4729:
// SIMD-ONLY0-NEXT:    [[TMP3402:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3402]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4731:%.*]]
// SIMD-ONLY0:       if.else4730:
// SIMD-ONLY0-NEXT:    [[TMP3403:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3403]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4731]]
// SIMD-ONLY0:       if.end4731:
// SIMD-ONLY0-NEXT:    [[TMP3404:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3404]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3405:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3406:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4732:%.*]] = icmp ugt i64 [[TMP3405]], [[TMP3406]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4732]], label [[IF_THEN4734:%.*]], label [[IF_END4735:%.*]]
// SIMD-ONLY0:       if.then4734:
// SIMD-ONLY0-NEXT:    [[TMP3407:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3407]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4735]]
// SIMD-ONLY0:       if.end4735:
// SIMD-ONLY0-NEXT:    [[TMP3408:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3408]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3409:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3410:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4736:%.*]] = icmp ugt i64 [[TMP3409]], [[TMP3410]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4736]], label [[IF_THEN4738:%.*]], label [[IF_END4739:%.*]]
// SIMD-ONLY0:       if.then4738:
// SIMD-ONLY0-NEXT:    [[TMP3411:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3411]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4739]]
// SIMD-ONLY0:       if.end4739:
// SIMD-ONLY0-NEXT:    [[TMP3412:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3412]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3413:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3414:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4740:%.*]] = icmp ult i64 [[TMP3413]], [[TMP3414]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4740]], label [[IF_THEN4742:%.*]], label [[IF_END4743:%.*]]
// SIMD-ONLY0:       if.then4742:
// SIMD-ONLY0-NEXT:    [[TMP3415:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3415]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4743]]
// SIMD-ONLY0:       if.end4743:
// SIMD-ONLY0-NEXT:    [[TMP3416:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3416]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3417:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3418:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4744:%.*]] = icmp ult i64 [[TMP3417]], [[TMP3418]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4744]], label [[IF_THEN4746:%.*]], label [[IF_END4747:%.*]]
// SIMD-ONLY0:       if.then4746:
// SIMD-ONLY0-NEXT:    [[TMP3419:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3419]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4747]]
// SIMD-ONLY0:       if.end4747:
// SIMD-ONLY0-NEXT:    [[TMP3420:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3420]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3421:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3422:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4748:%.*]] = icmp eq i64 [[TMP3421]], [[TMP3422]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4748]], label [[IF_THEN4750:%.*]], label [[IF_END4751:%.*]]
// SIMD-ONLY0:       if.then4750:
// SIMD-ONLY0-NEXT:    [[TMP3423:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3423]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4751]]
// SIMD-ONLY0:       if.end4751:
// SIMD-ONLY0-NEXT:    [[TMP3424:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3424]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3425:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3426:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4752:%.*]] = icmp eq i64 [[TMP3425]], [[TMP3426]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4752]], label [[IF_THEN4754:%.*]], label [[IF_END4755:%.*]]
// SIMD-ONLY0:       if.then4754:
// SIMD-ONLY0-NEXT:    [[TMP3427:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3427]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4755]]
// SIMD-ONLY0:       if.end4755:
// SIMD-ONLY0-NEXT:    [[TMP3428:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3429:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4756:%.*]] = icmp ugt i64 [[TMP3428]], [[TMP3429]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4756]], label [[IF_THEN4758:%.*]], label [[IF_END4759:%.*]]
// SIMD-ONLY0:       if.then4758:
// SIMD-ONLY0-NEXT:    [[TMP3430:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3430]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4759]]
// SIMD-ONLY0:       if.end4759:
// SIMD-ONLY0-NEXT:    [[TMP3431:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3431]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3432:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3433:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4760:%.*]] = icmp ugt i64 [[TMP3432]], [[TMP3433]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4760]], label [[IF_THEN4762:%.*]], label [[IF_END4763:%.*]]
// SIMD-ONLY0:       if.then4762:
// SIMD-ONLY0-NEXT:    [[TMP3434:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3434]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4763]]
// SIMD-ONLY0:       if.end4763:
// SIMD-ONLY0-NEXT:    [[TMP3435:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3435]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3436:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3437:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4764:%.*]] = icmp ult i64 [[TMP3436]], [[TMP3437]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4764]], label [[IF_THEN4766:%.*]], label [[IF_END4767:%.*]]
// SIMD-ONLY0:       if.then4766:
// SIMD-ONLY0-NEXT:    [[TMP3438:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3438]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4767]]
// SIMD-ONLY0:       if.end4767:
// SIMD-ONLY0-NEXT:    [[TMP3439:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3439]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3440:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3441:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4768:%.*]] = icmp ult i64 [[TMP3440]], [[TMP3441]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4768]], label [[IF_THEN4770:%.*]], label [[IF_END4771:%.*]]
// SIMD-ONLY0:       if.then4770:
// SIMD-ONLY0-NEXT:    [[TMP3442:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3442]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4771]]
// SIMD-ONLY0:       if.end4771:
// SIMD-ONLY0-NEXT:    [[TMP3443:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3443]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3444:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3445:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4772:%.*]] = icmp eq i64 [[TMP3444]], [[TMP3445]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4772]], label [[IF_THEN4774:%.*]], label [[IF_END4775:%.*]]
// SIMD-ONLY0:       if.then4774:
// SIMD-ONLY0-NEXT:    [[TMP3446:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3446]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4775]]
// SIMD-ONLY0:       if.end4775:
// SIMD-ONLY0-NEXT:    [[TMP3447:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3447]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3448:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3449:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4776:%.*]] = icmp eq i64 [[TMP3448]], [[TMP3449]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4776]], label [[IF_THEN4778:%.*]], label [[IF_END4779:%.*]]
// SIMD-ONLY0:       if.then4778:
// SIMD-ONLY0-NEXT:    [[TMP3450:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3450]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4779]]
// SIMD-ONLY0:       if.end4779:
// SIMD-ONLY0-NEXT:    [[TMP3451:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3451]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3452:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3453:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4780:%.*]] = icmp eq i64 [[TMP3452]], [[TMP3453]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4780]], label [[IF_THEN4782:%.*]], label [[IF_ELSE4783:%.*]]
// SIMD-ONLY0:       if.then4782:
// SIMD-ONLY0-NEXT:    [[TMP3454:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3454]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4784:%.*]]
// SIMD-ONLY0:       if.else4783:
// SIMD-ONLY0-NEXT:    [[TMP3455:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3455]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4784]]
// SIMD-ONLY0:       if.end4784:
// SIMD-ONLY0-NEXT:    [[TMP3456:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3457:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4785:%.*]] = icmp eq i64 [[TMP3456]], [[TMP3457]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4785]], label [[IF_THEN4787:%.*]], label [[IF_ELSE4788:%.*]]
// SIMD-ONLY0:       if.then4787:
// SIMD-ONLY0-NEXT:    [[TMP3458:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3458]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4789:%.*]]
// SIMD-ONLY0:       if.else4788:
// SIMD-ONLY0-NEXT:    [[TMP3459:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3459]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4789]]
// SIMD-ONLY0:       if.end4789:
// SIMD-ONLY0-NEXT:    [[TMP3460:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3461:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4790:%.*]] = icmp eq i64 [[TMP3460]], [[TMP3461]]
// SIMD-ONLY0-NEXT:    [[CONV4791:%.*]] = zext i1 [[CMP4790]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4792:%.*]] = sext i32 [[CONV4791]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4792]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3462:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4793:%.*]] = icmp ne i64 [[TMP3462]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4793]], label [[IF_THEN4794:%.*]], label [[IF_END4795:%.*]]
// SIMD-ONLY0:       if.then4794:
// SIMD-ONLY0-NEXT:    [[TMP3463:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3463]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4795]]
// SIMD-ONLY0:       if.end4795:
// SIMD-ONLY0-NEXT:    [[TMP3464:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3465:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4796:%.*]] = icmp eq i64 [[TMP3464]], [[TMP3465]]
// SIMD-ONLY0-NEXT:    [[CONV4797:%.*]] = zext i1 [[CMP4796]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4798:%.*]] = sext i32 [[CONV4797]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4798]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3466:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4799:%.*]] = icmp ne i64 [[TMP3466]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4799]], label [[IF_THEN4800:%.*]], label [[IF_END4801:%.*]]
// SIMD-ONLY0:       if.then4800:
// SIMD-ONLY0-NEXT:    [[TMP3467:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3467]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4801]]
// SIMD-ONLY0:       if.end4801:
// SIMD-ONLY0-NEXT:    [[TMP3468:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3469:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4802:%.*]] = icmp eq i64 [[TMP3468]], [[TMP3469]]
// SIMD-ONLY0-NEXT:    [[CONV4803:%.*]] = zext i1 [[CMP4802]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4804:%.*]] = sext i32 [[CONV4803]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4804]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3470:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4805:%.*]] = icmp ne i64 [[TMP3470]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4805]], label [[IF_THEN4806:%.*]], label [[IF_ELSE4807:%.*]]
// SIMD-ONLY0:       if.then4806:
// SIMD-ONLY0-NEXT:    [[TMP3471:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3471]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4808:%.*]]
// SIMD-ONLY0:       if.else4807:
// SIMD-ONLY0-NEXT:    [[TMP3472:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3472]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4808]]
// SIMD-ONLY0:       if.end4808:
// SIMD-ONLY0-NEXT:    [[TMP3473:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3474:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4809:%.*]] = icmp eq i64 [[TMP3473]], [[TMP3474]]
// SIMD-ONLY0-NEXT:    [[CONV4810:%.*]] = zext i1 [[CMP4809]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4811:%.*]] = sext i32 [[CONV4810]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4811]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3475:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4812:%.*]] = icmp ne i64 [[TMP3475]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4812]], label [[IF_THEN4813:%.*]], label [[IF_ELSE4814:%.*]]
// SIMD-ONLY0:       if.then4813:
// SIMD-ONLY0-NEXT:    [[TMP3476:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3476]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4815:%.*]]
// SIMD-ONLY0:       if.else4814:
// SIMD-ONLY0-NEXT:    [[TMP3477:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3477]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4815]]
// SIMD-ONLY0:       if.end4815:
// SIMD-ONLY0-NEXT:    [[TMP3478:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3478]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3479:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3480:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4816:%.*]] = icmp ugt i64 [[TMP3479]], [[TMP3480]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4816]], label [[IF_THEN4818:%.*]], label [[IF_END4819:%.*]]
// SIMD-ONLY0:       if.then4818:
// SIMD-ONLY0-NEXT:    [[TMP3481:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3481]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4819]]
// SIMD-ONLY0:       if.end4819:
// SIMD-ONLY0-NEXT:    [[TMP3482:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3482]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3483:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3484:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4820:%.*]] = icmp ugt i64 [[TMP3483]], [[TMP3484]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4820]], label [[IF_THEN4822:%.*]], label [[IF_END4823:%.*]]
// SIMD-ONLY0:       if.then4822:
// SIMD-ONLY0-NEXT:    [[TMP3485:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3485]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4823]]
// SIMD-ONLY0:       if.end4823:
// SIMD-ONLY0-NEXT:    [[TMP3486:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3486]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3487:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3488:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4824:%.*]] = icmp ult i64 [[TMP3487]], [[TMP3488]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4824]], label [[IF_THEN4826:%.*]], label [[IF_END4827:%.*]]
// SIMD-ONLY0:       if.then4826:
// SIMD-ONLY0-NEXT:    [[TMP3489:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3489]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4827]]
// SIMD-ONLY0:       if.end4827:
// SIMD-ONLY0-NEXT:    [[TMP3490:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3490]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3491:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3492:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4828:%.*]] = icmp ult i64 [[TMP3491]], [[TMP3492]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4828]], label [[IF_THEN4830:%.*]], label [[IF_END4831:%.*]]
// SIMD-ONLY0:       if.then4830:
// SIMD-ONLY0-NEXT:    [[TMP3493:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3493]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4831]]
// SIMD-ONLY0:       if.end4831:
// SIMD-ONLY0-NEXT:    [[TMP3494:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3494]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3495:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3496:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4832:%.*]] = icmp eq i64 [[TMP3495]], [[TMP3496]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4832]], label [[IF_THEN4834:%.*]], label [[IF_END4835:%.*]]
// SIMD-ONLY0:       if.then4834:
// SIMD-ONLY0-NEXT:    [[TMP3497:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3497]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4835]]
// SIMD-ONLY0:       if.end4835:
// SIMD-ONLY0-NEXT:    [[TMP3498:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3498]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3499:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3500:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4836:%.*]] = icmp eq i64 [[TMP3499]], [[TMP3500]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4836]], label [[IF_THEN4838:%.*]], label [[IF_END4839:%.*]]
// SIMD-ONLY0:       if.then4838:
// SIMD-ONLY0-NEXT:    [[TMP3501:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3501]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4839]]
// SIMD-ONLY0:       if.end4839:
// SIMD-ONLY0-NEXT:    [[TMP3502:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3503:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4840:%.*]] = icmp ugt i64 [[TMP3502]], [[TMP3503]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4840]], label [[IF_THEN4842:%.*]], label [[IF_END4843:%.*]]
// SIMD-ONLY0:       if.then4842:
// SIMD-ONLY0-NEXT:    [[TMP3504:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3504]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4843]]
// SIMD-ONLY0:       if.end4843:
// SIMD-ONLY0-NEXT:    [[TMP3505:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3505]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3506:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3507:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4844:%.*]] = icmp ugt i64 [[TMP3506]], [[TMP3507]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4844]], label [[IF_THEN4846:%.*]], label [[IF_END4847:%.*]]
// SIMD-ONLY0:       if.then4846:
// SIMD-ONLY0-NEXT:    [[TMP3508:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3508]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4847]]
// SIMD-ONLY0:       if.end4847:
// SIMD-ONLY0-NEXT:    [[TMP3509:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3509]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3510:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3511:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4848:%.*]] = icmp ult i64 [[TMP3510]], [[TMP3511]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4848]], label [[IF_THEN4850:%.*]], label [[IF_END4851:%.*]]
// SIMD-ONLY0:       if.then4850:
// SIMD-ONLY0-NEXT:    [[TMP3512:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3512]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4851]]
// SIMD-ONLY0:       if.end4851:
// SIMD-ONLY0-NEXT:    [[TMP3513:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3513]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3514:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3515:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4852:%.*]] = icmp ult i64 [[TMP3514]], [[TMP3515]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4852]], label [[IF_THEN4854:%.*]], label [[IF_END4855:%.*]]
// SIMD-ONLY0:       if.then4854:
// SIMD-ONLY0-NEXT:    [[TMP3516:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3516]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4855]]
// SIMD-ONLY0:       if.end4855:
// SIMD-ONLY0-NEXT:    [[TMP3517:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3517]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3518:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3519:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4856:%.*]] = icmp eq i64 [[TMP3518]], [[TMP3519]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4856]], label [[IF_THEN4858:%.*]], label [[IF_END4859:%.*]]
// SIMD-ONLY0:       if.then4858:
// SIMD-ONLY0-NEXT:    [[TMP3520:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3520]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4859]]
// SIMD-ONLY0:       if.end4859:
// SIMD-ONLY0-NEXT:    [[TMP3521:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3521]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3522:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3523:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4860:%.*]] = icmp eq i64 [[TMP3522]], [[TMP3523]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4860]], label [[IF_THEN4862:%.*]], label [[IF_END4863:%.*]]
// SIMD-ONLY0:       if.then4862:
// SIMD-ONLY0-NEXT:    [[TMP3524:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3524]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4863]]
// SIMD-ONLY0:       if.end4863:
// SIMD-ONLY0-NEXT:    [[TMP3525:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3525]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3526:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3527:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4864:%.*]] = icmp eq i64 [[TMP3526]], [[TMP3527]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4864]], label [[IF_THEN4866:%.*]], label [[IF_ELSE4867:%.*]]
// SIMD-ONLY0:       if.then4866:
// SIMD-ONLY0-NEXT:    [[TMP3528:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3528]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4868:%.*]]
// SIMD-ONLY0:       if.else4867:
// SIMD-ONLY0-NEXT:    [[TMP3529:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3529]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4868]]
// SIMD-ONLY0:       if.end4868:
// SIMD-ONLY0-NEXT:    [[TMP3530:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3531:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4869:%.*]] = icmp eq i64 [[TMP3530]], [[TMP3531]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4869]], label [[IF_THEN4871:%.*]], label [[IF_ELSE4872:%.*]]
// SIMD-ONLY0:       if.then4871:
// SIMD-ONLY0-NEXT:    [[TMP3532:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3532]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4873:%.*]]
// SIMD-ONLY0:       if.else4872:
// SIMD-ONLY0-NEXT:    [[TMP3533:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3533]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4873]]
// SIMD-ONLY0:       if.end4873:
// SIMD-ONLY0-NEXT:    [[TMP3534:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3535:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4874:%.*]] = icmp eq i64 [[TMP3534]], [[TMP3535]]
// SIMD-ONLY0-NEXT:    [[CONV4875:%.*]] = zext i1 [[CMP4874]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4876:%.*]] = sext i32 [[CONV4875]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4876]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3536:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4877:%.*]] = icmp ne i64 [[TMP3536]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4877]], label [[IF_THEN4878:%.*]], label [[IF_END4879:%.*]]
// SIMD-ONLY0:       if.then4878:
// SIMD-ONLY0-NEXT:    [[TMP3537:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3537]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4879]]
// SIMD-ONLY0:       if.end4879:
// SIMD-ONLY0-NEXT:    [[TMP3538:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3539:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4880:%.*]] = icmp eq i64 [[TMP3538]], [[TMP3539]]
// SIMD-ONLY0-NEXT:    [[CONV4881:%.*]] = zext i1 [[CMP4880]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4882:%.*]] = sext i32 [[CONV4881]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4882]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3540:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4883:%.*]] = icmp ne i64 [[TMP3540]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4883]], label [[IF_THEN4884:%.*]], label [[IF_END4885:%.*]]
// SIMD-ONLY0:       if.then4884:
// SIMD-ONLY0-NEXT:    [[TMP3541:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3541]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4885]]
// SIMD-ONLY0:       if.end4885:
// SIMD-ONLY0-NEXT:    [[TMP3542:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3543:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4886:%.*]] = icmp eq i64 [[TMP3542]], [[TMP3543]]
// SIMD-ONLY0-NEXT:    [[CONV4887:%.*]] = zext i1 [[CMP4886]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4888:%.*]] = sext i32 [[CONV4887]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4888]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3544:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4889:%.*]] = icmp ne i64 [[TMP3544]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4889]], label [[IF_THEN4890:%.*]], label [[IF_ELSE4891:%.*]]
// SIMD-ONLY0:       if.then4890:
// SIMD-ONLY0-NEXT:    [[TMP3545:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3545]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4892:%.*]]
// SIMD-ONLY0:       if.else4891:
// SIMD-ONLY0-NEXT:    [[TMP3546:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3546]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4892]]
// SIMD-ONLY0:       if.end4892:
// SIMD-ONLY0-NEXT:    [[TMP3547:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3548:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4893:%.*]] = icmp eq i64 [[TMP3547]], [[TMP3548]]
// SIMD-ONLY0-NEXT:    [[CONV4894:%.*]] = zext i1 [[CMP4893]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4895:%.*]] = sext i32 [[CONV4894]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4895]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3549:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4896:%.*]] = icmp ne i64 [[TMP3549]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4896]], label [[IF_THEN4897:%.*]], label [[IF_ELSE4898:%.*]]
// SIMD-ONLY0:       if.then4897:
// SIMD-ONLY0-NEXT:    [[TMP3550:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3550]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4899:%.*]]
// SIMD-ONLY0:       if.else4898:
// SIMD-ONLY0-NEXT:    [[TMP3551:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3551]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4899]]
// SIMD-ONLY0:       if.end4899:
// SIMD-ONLY0-NEXT:    [[TMP3552:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3552]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3553:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3554:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4900:%.*]] = icmp sgt i64 [[TMP3553]], [[TMP3554]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4900]], label [[IF_THEN4902:%.*]], label [[IF_END4903:%.*]]
// SIMD-ONLY0:       if.then4902:
// SIMD-ONLY0-NEXT:    [[TMP3555:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3555]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4903]]
// SIMD-ONLY0:       if.end4903:
// SIMD-ONLY0-NEXT:    [[TMP3556:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3556]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3557:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3558:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4904:%.*]] = icmp sgt i64 [[TMP3557]], [[TMP3558]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4904]], label [[IF_THEN4906:%.*]], label [[IF_END4907:%.*]]
// SIMD-ONLY0:       if.then4906:
// SIMD-ONLY0-NEXT:    [[TMP3559:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3559]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4907]]
// SIMD-ONLY0:       if.end4907:
// SIMD-ONLY0-NEXT:    [[TMP3560:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3560]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3561:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3562:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4908:%.*]] = icmp slt i64 [[TMP3561]], [[TMP3562]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4908]], label [[IF_THEN4910:%.*]], label [[IF_END4911:%.*]]
// SIMD-ONLY0:       if.then4910:
// SIMD-ONLY0-NEXT:    [[TMP3563:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3563]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4911]]
// SIMD-ONLY0:       if.end4911:
// SIMD-ONLY0-NEXT:    [[TMP3564:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3564]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3565:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3566:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4912:%.*]] = icmp slt i64 [[TMP3565]], [[TMP3566]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4912]], label [[IF_THEN4914:%.*]], label [[IF_END4915:%.*]]
// SIMD-ONLY0:       if.then4914:
// SIMD-ONLY0-NEXT:    [[TMP3567:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3567]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4915]]
// SIMD-ONLY0:       if.end4915:
// SIMD-ONLY0-NEXT:    [[TMP3568:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3568]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3569:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3570:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4916:%.*]] = icmp eq i64 [[TMP3569]], [[TMP3570]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4916]], label [[IF_THEN4918:%.*]], label [[IF_END4919:%.*]]
// SIMD-ONLY0:       if.then4918:
// SIMD-ONLY0-NEXT:    [[TMP3571:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3571]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4919]]
// SIMD-ONLY0:       if.end4919:
// SIMD-ONLY0-NEXT:    [[TMP3572:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3572]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3573:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3574:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4920:%.*]] = icmp eq i64 [[TMP3573]], [[TMP3574]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4920]], label [[IF_THEN4922:%.*]], label [[IF_END4923:%.*]]
// SIMD-ONLY0:       if.then4922:
// SIMD-ONLY0-NEXT:    [[TMP3575:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3575]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4923]]
// SIMD-ONLY0:       if.end4923:
// SIMD-ONLY0-NEXT:    [[TMP3576:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3577:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4924:%.*]] = icmp sgt i64 [[TMP3576]], [[TMP3577]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4924]], label [[IF_THEN4926:%.*]], label [[IF_END4927:%.*]]
// SIMD-ONLY0:       if.then4926:
// SIMD-ONLY0-NEXT:    [[TMP3578:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3578]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4927]]
// SIMD-ONLY0:       if.end4927:
// SIMD-ONLY0-NEXT:    [[TMP3579:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3579]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3580:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3581:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4928:%.*]] = icmp sgt i64 [[TMP3580]], [[TMP3581]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4928]], label [[IF_THEN4930:%.*]], label [[IF_END4931:%.*]]
// SIMD-ONLY0:       if.then4930:
// SIMD-ONLY0-NEXT:    [[TMP3582:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3582]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4931]]
// SIMD-ONLY0:       if.end4931:
// SIMD-ONLY0-NEXT:    [[TMP3583:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3583]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3584:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3585:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4932:%.*]] = icmp slt i64 [[TMP3584]], [[TMP3585]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4932]], label [[IF_THEN4934:%.*]], label [[IF_END4935:%.*]]
// SIMD-ONLY0:       if.then4934:
// SIMD-ONLY0-NEXT:    [[TMP3586:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3586]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4935]]
// SIMD-ONLY0:       if.end4935:
// SIMD-ONLY0-NEXT:    [[TMP3587:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3587]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3588:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3589:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4936:%.*]] = icmp slt i64 [[TMP3588]], [[TMP3589]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4936]], label [[IF_THEN4938:%.*]], label [[IF_END4939:%.*]]
// SIMD-ONLY0:       if.then4938:
// SIMD-ONLY0-NEXT:    [[TMP3590:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3590]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4939]]
// SIMD-ONLY0:       if.end4939:
// SIMD-ONLY0-NEXT:    [[TMP3591:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3591]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3592:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3593:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4940:%.*]] = icmp eq i64 [[TMP3592]], [[TMP3593]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4940]], label [[IF_THEN4942:%.*]], label [[IF_END4943:%.*]]
// SIMD-ONLY0:       if.then4942:
// SIMD-ONLY0-NEXT:    [[TMP3594:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3594]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4943]]
// SIMD-ONLY0:       if.end4943:
// SIMD-ONLY0-NEXT:    [[TMP3595:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3595]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3596:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3597:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4944:%.*]] = icmp eq i64 [[TMP3596]], [[TMP3597]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4944]], label [[IF_THEN4946:%.*]], label [[IF_END4947:%.*]]
// SIMD-ONLY0:       if.then4946:
// SIMD-ONLY0-NEXT:    [[TMP3598:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3598]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4947]]
// SIMD-ONLY0:       if.end4947:
// SIMD-ONLY0-NEXT:    [[TMP3599:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3599]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3600:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3601:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4948:%.*]] = icmp eq i64 [[TMP3600]], [[TMP3601]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4948]], label [[IF_THEN4950:%.*]], label [[IF_ELSE4951:%.*]]
// SIMD-ONLY0:       if.then4950:
// SIMD-ONLY0-NEXT:    [[TMP3602:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3602]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4952:%.*]]
// SIMD-ONLY0:       if.else4951:
// SIMD-ONLY0-NEXT:    [[TMP3603:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3603]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4952]]
// SIMD-ONLY0:       if.end4952:
// SIMD-ONLY0-NEXT:    [[TMP3604:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3605:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4953:%.*]] = icmp eq i64 [[TMP3604]], [[TMP3605]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4953]], label [[IF_THEN4955:%.*]], label [[IF_ELSE4956:%.*]]
// SIMD-ONLY0:       if.then4955:
// SIMD-ONLY0-NEXT:    [[TMP3606:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3606]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4957:%.*]]
// SIMD-ONLY0:       if.else4956:
// SIMD-ONLY0-NEXT:    [[TMP3607:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3607]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4957]]
// SIMD-ONLY0:       if.end4957:
// SIMD-ONLY0-NEXT:    [[TMP3608:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3609:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4958:%.*]] = icmp eq i64 [[TMP3608]], [[TMP3609]]
// SIMD-ONLY0-NEXT:    [[CONV4959:%.*]] = zext i1 [[CMP4958]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4960:%.*]] = sext i32 [[CONV4959]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4960]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3610:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4961:%.*]] = icmp ne i64 [[TMP3610]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4961]], label [[IF_THEN4962:%.*]], label [[IF_END4963:%.*]]
// SIMD-ONLY0:       if.then4962:
// SIMD-ONLY0-NEXT:    [[TMP3611:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3611]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4963]]
// SIMD-ONLY0:       if.end4963:
// SIMD-ONLY0-NEXT:    [[TMP3612:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3613:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4964:%.*]] = icmp eq i64 [[TMP3612]], [[TMP3613]]
// SIMD-ONLY0-NEXT:    [[CONV4965:%.*]] = zext i1 [[CMP4964]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4966:%.*]] = sext i32 [[CONV4965]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4966]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3614:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4967:%.*]] = icmp ne i64 [[TMP3614]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4967]], label [[IF_THEN4968:%.*]], label [[IF_END4969:%.*]]
// SIMD-ONLY0:       if.then4968:
// SIMD-ONLY0-NEXT:    [[TMP3615:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3615]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4969]]
// SIMD-ONLY0:       if.end4969:
// SIMD-ONLY0-NEXT:    [[TMP3616:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3617:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4970:%.*]] = icmp eq i64 [[TMP3616]], [[TMP3617]]
// SIMD-ONLY0-NEXT:    [[CONV4971:%.*]] = zext i1 [[CMP4970]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4972:%.*]] = sext i32 [[CONV4971]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4972]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3618:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4973:%.*]] = icmp ne i64 [[TMP3618]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4973]], label [[IF_THEN4974:%.*]], label [[IF_ELSE4975:%.*]]
// SIMD-ONLY0:       if.then4974:
// SIMD-ONLY0-NEXT:    [[TMP3619:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3619]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4976:%.*]]
// SIMD-ONLY0:       if.else4975:
// SIMD-ONLY0-NEXT:    [[TMP3620:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3620]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4976]]
// SIMD-ONLY0:       if.end4976:
// SIMD-ONLY0-NEXT:    [[TMP3621:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3622:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4977:%.*]] = icmp eq i64 [[TMP3621]], [[TMP3622]]
// SIMD-ONLY0-NEXT:    [[CONV4978:%.*]] = zext i1 [[CMP4977]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4979:%.*]] = sext i32 [[CONV4978]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4979]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3623:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4980:%.*]] = icmp ne i64 [[TMP3623]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4980]], label [[IF_THEN4981:%.*]], label [[IF_ELSE4982:%.*]]
// SIMD-ONLY0:       if.then4981:
// SIMD-ONLY0-NEXT:    [[TMP3624:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3624]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4983:%.*]]
// SIMD-ONLY0:       if.else4982:
// SIMD-ONLY0-NEXT:    [[TMP3625:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3625]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4983]]
// SIMD-ONLY0:       if.end4983:
// SIMD-ONLY0-NEXT:    [[TMP3626:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3626]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3627:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3628:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4984:%.*]] = icmp sgt i64 [[TMP3627]], [[TMP3628]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4984]], label [[IF_THEN4986:%.*]], label [[IF_END4987:%.*]]
// SIMD-ONLY0:       if.then4986:
// SIMD-ONLY0-NEXT:    [[TMP3629:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3629]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4987]]
// SIMD-ONLY0:       if.end4987:
// SIMD-ONLY0-NEXT:    [[TMP3630:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3630]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3631:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3632:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4988:%.*]] = icmp sgt i64 [[TMP3631]], [[TMP3632]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4988]], label [[IF_THEN4990:%.*]], label [[IF_END4991:%.*]]
// SIMD-ONLY0:       if.then4990:
// SIMD-ONLY0-NEXT:    [[TMP3633:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3633]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4991]]
// SIMD-ONLY0:       if.end4991:
// SIMD-ONLY0-NEXT:    [[TMP3634:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3634]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3635:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3636:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4992:%.*]] = icmp slt i64 [[TMP3635]], [[TMP3636]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4992]], label [[IF_THEN4994:%.*]], label [[IF_END4995:%.*]]
// SIMD-ONLY0:       if.then4994:
// SIMD-ONLY0-NEXT:    [[TMP3637:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3637]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4995]]
// SIMD-ONLY0:       if.end4995:
// SIMD-ONLY0-NEXT:    [[TMP3638:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3638]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3639:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3640:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4996:%.*]] = icmp slt i64 [[TMP3639]], [[TMP3640]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4996]], label [[IF_THEN4998:%.*]], label [[IF_END4999:%.*]]
// SIMD-ONLY0:       if.then4998:
// SIMD-ONLY0-NEXT:    [[TMP3641:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3641]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4999]]
// SIMD-ONLY0:       if.end4999:
// SIMD-ONLY0-NEXT:    [[TMP3642:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3642]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3643:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3644:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5000:%.*]] = icmp eq i64 [[TMP3643]], [[TMP3644]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5000]], label [[IF_THEN5002:%.*]], label [[IF_END5003:%.*]]
// SIMD-ONLY0:       if.then5002:
// SIMD-ONLY0-NEXT:    [[TMP3645:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3645]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5003]]
// SIMD-ONLY0:       if.end5003:
// SIMD-ONLY0-NEXT:    [[TMP3646:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3646]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3647:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3648:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5004:%.*]] = icmp eq i64 [[TMP3647]], [[TMP3648]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5004]], label [[IF_THEN5006:%.*]], label [[IF_END5007:%.*]]
// SIMD-ONLY0:       if.then5006:
// SIMD-ONLY0-NEXT:    [[TMP3649:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3649]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5007]]
// SIMD-ONLY0:       if.end5007:
// SIMD-ONLY0-NEXT:    [[TMP3650:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3651:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5008:%.*]] = icmp sgt i64 [[TMP3650]], [[TMP3651]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5008]], label [[IF_THEN5010:%.*]], label [[IF_END5011:%.*]]
// SIMD-ONLY0:       if.then5010:
// SIMD-ONLY0-NEXT:    [[TMP3652:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3652]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5011]]
// SIMD-ONLY0:       if.end5011:
// SIMD-ONLY0-NEXT:    [[TMP3653:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3653]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3654:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3655:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5012:%.*]] = icmp sgt i64 [[TMP3654]], [[TMP3655]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5012]], label [[IF_THEN5014:%.*]], label [[IF_END5015:%.*]]
// SIMD-ONLY0:       if.then5014:
// SIMD-ONLY0-NEXT:    [[TMP3656:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3656]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5015]]
// SIMD-ONLY0:       if.end5015:
// SIMD-ONLY0-NEXT:    [[TMP3657:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3657]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3658:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3659:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5016:%.*]] = icmp slt i64 [[TMP3658]], [[TMP3659]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5016]], label [[IF_THEN5018:%.*]], label [[IF_END5019:%.*]]
// SIMD-ONLY0:       if.then5018:
// SIMD-ONLY0-NEXT:    [[TMP3660:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3660]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5019]]
// SIMD-ONLY0:       if.end5019:
// SIMD-ONLY0-NEXT:    [[TMP3661:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3661]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3662:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3663:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5020:%.*]] = icmp slt i64 [[TMP3662]], [[TMP3663]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5020]], label [[IF_THEN5022:%.*]], label [[IF_END5023:%.*]]
// SIMD-ONLY0:       if.then5022:
// SIMD-ONLY0-NEXT:    [[TMP3664:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3664]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5023]]
// SIMD-ONLY0:       if.end5023:
// SIMD-ONLY0-NEXT:    [[TMP3665:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3665]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3666:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3667:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5024:%.*]] = icmp eq i64 [[TMP3666]], [[TMP3667]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5024]], label [[IF_THEN5026:%.*]], label [[IF_END5027:%.*]]
// SIMD-ONLY0:       if.then5026:
// SIMD-ONLY0-NEXT:    [[TMP3668:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3668]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5027]]
// SIMD-ONLY0:       if.end5027:
// SIMD-ONLY0-NEXT:    [[TMP3669:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3669]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3670:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3671:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5028:%.*]] = icmp eq i64 [[TMP3670]], [[TMP3671]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5028]], label [[IF_THEN5030:%.*]], label [[IF_END5031:%.*]]
// SIMD-ONLY0:       if.then5030:
// SIMD-ONLY0-NEXT:    [[TMP3672:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3672]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5031]]
// SIMD-ONLY0:       if.end5031:
// SIMD-ONLY0-NEXT:    [[TMP3673:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3673]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3674:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3675:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5032:%.*]] = icmp eq i64 [[TMP3674]], [[TMP3675]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5032]], label [[IF_THEN5034:%.*]], label [[IF_ELSE5035:%.*]]
// SIMD-ONLY0:       if.then5034:
// SIMD-ONLY0-NEXT:    [[TMP3676:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3676]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5036:%.*]]
// SIMD-ONLY0:       if.else5035:
// SIMD-ONLY0-NEXT:    [[TMP3677:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3677]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5036]]
// SIMD-ONLY0:       if.end5036:
// SIMD-ONLY0-NEXT:    [[TMP3678:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3679:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5037:%.*]] = icmp eq i64 [[TMP3678]], [[TMP3679]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5037]], label [[IF_THEN5039:%.*]], label [[IF_ELSE5040:%.*]]
// SIMD-ONLY0:       if.then5039:
// SIMD-ONLY0-NEXT:    [[TMP3680:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3680]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5041:%.*]]
// SIMD-ONLY0:       if.else5040:
// SIMD-ONLY0-NEXT:    [[TMP3681:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3681]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5041]]
// SIMD-ONLY0:       if.end5041:
// SIMD-ONLY0-NEXT:    [[TMP3682:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3683:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5042:%.*]] = icmp eq i64 [[TMP3682]], [[TMP3683]]
// SIMD-ONLY0-NEXT:    [[CONV5043:%.*]] = zext i1 [[CMP5042]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5044:%.*]] = sext i32 [[CONV5043]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5044]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3684:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5045:%.*]] = icmp ne i64 [[TMP3684]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5045]], label [[IF_THEN5046:%.*]], label [[IF_END5047:%.*]]
// SIMD-ONLY0:       if.then5046:
// SIMD-ONLY0-NEXT:    [[TMP3685:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3685]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5047]]
// SIMD-ONLY0:       if.end5047:
// SIMD-ONLY0-NEXT:    [[TMP3686:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3687:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5048:%.*]] = icmp eq i64 [[TMP3686]], [[TMP3687]]
// SIMD-ONLY0-NEXT:    [[CONV5049:%.*]] = zext i1 [[CMP5048]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5050:%.*]] = sext i32 [[CONV5049]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5050]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3688:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5051:%.*]] = icmp ne i64 [[TMP3688]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5051]], label [[IF_THEN5052:%.*]], label [[IF_END5053:%.*]]
// SIMD-ONLY0:       if.then5052:
// SIMD-ONLY0-NEXT:    [[TMP3689:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3689]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5053]]
// SIMD-ONLY0:       if.end5053:
// SIMD-ONLY0-NEXT:    [[TMP3690:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3691:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5054:%.*]] = icmp eq i64 [[TMP3690]], [[TMP3691]]
// SIMD-ONLY0-NEXT:    [[CONV5055:%.*]] = zext i1 [[CMP5054]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5056:%.*]] = sext i32 [[CONV5055]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5056]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3692:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5057:%.*]] = icmp ne i64 [[TMP3692]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5057]], label [[IF_THEN5058:%.*]], label [[IF_ELSE5059:%.*]]
// SIMD-ONLY0:       if.then5058:
// SIMD-ONLY0-NEXT:    [[TMP3693:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3693]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5060:%.*]]
// SIMD-ONLY0:       if.else5059:
// SIMD-ONLY0-NEXT:    [[TMP3694:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3694]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5060]]
// SIMD-ONLY0:       if.end5060:
// SIMD-ONLY0-NEXT:    [[TMP3695:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3696:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5061:%.*]] = icmp eq i64 [[TMP3695]], [[TMP3696]]
// SIMD-ONLY0-NEXT:    [[CONV5062:%.*]] = zext i1 [[CMP5061]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5063:%.*]] = sext i32 [[CONV5062]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5063]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3697:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5064:%.*]] = icmp ne i64 [[TMP3697]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5064]], label [[IF_THEN5065:%.*]], label [[IF_ELSE5066:%.*]]
// SIMD-ONLY0:       if.then5065:
// SIMD-ONLY0-NEXT:    [[TMP3698:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3698]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5067:%.*]]
// SIMD-ONLY0:       if.else5066:
// SIMD-ONLY0-NEXT:    [[TMP3699:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3699]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5067]]
// SIMD-ONLY0:       if.end5067:
// SIMD-ONLY0-NEXT:    [[TMP3700:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3700]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3701:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3702:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5068:%.*]] = icmp sgt i64 [[TMP3701]], [[TMP3702]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5068]], label [[IF_THEN5070:%.*]], label [[IF_END5071:%.*]]
// SIMD-ONLY0:       if.then5070:
// SIMD-ONLY0-NEXT:    [[TMP3703:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3703]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5071]]
// SIMD-ONLY0:       if.end5071:
// SIMD-ONLY0-NEXT:    [[TMP3704:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3704]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3705:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3706:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5072:%.*]] = icmp sgt i64 [[TMP3705]], [[TMP3706]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5072]], label [[IF_THEN5074:%.*]], label [[IF_END5075:%.*]]
// SIMD-ONLY0:       if.then5074:
// SIMD-ONLY0-NEXT:    [[TMP3707:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3707]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5075]]
// SIMD-ONLY0:       if.end5075:
// SIMD-ONLY0-NEXT:    [[TMP3708:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3708]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3709:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3710:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5076:%.*]] = icmp slt i64 [[TMP3709]], [[TMP3710]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5076]], label [[IF_THEN5078:%.*]], label [[IF_END5079:%.*]]
// SIMD-ONLY0:       if.then5078:
// SIMD-ONLY0-NEXT:    [[TMP3711:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3711]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5079]]
// SIMD-ONLY0:       if.end5079:
// SIMD-ONLY0-NEXT:    [[TMP3712:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3712]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3713:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3714:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5080:%.*]] = icmp slt i64 [[TMP3713]], [[TMP3714]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5080]], label [[IF_THEN5082:%.*]], label [[IF_END5083:%.*]]
// SIMD-ONLY0:       if.then5082:
// SIMD-ONLY0-NEXT:    [[TMP3715:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3715]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5083]]
// SIMD-ONLY0:       if.end5083:
// SIMD-ONLY0-NEXT:    [[TMP3716:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3716]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3717:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3718:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5084:%.*]] = icmp eq i64 [[TMP3717]], [[TMP3718]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5084]], label [[IF_THEN5086:%.*]], label [[IF_END5087:%.*]]
// SIMD-ONLY0:       if.then5086:
// SIMD-ONLY0-NEXT:    [[TMP3719:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3719]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5087]]
// SIMD-ONLY0:       if.end5087:
// SIMD-ONLY0-NEXT:    [[TMP3720:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3720]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3721:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3722:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5088:%.*]] = icmp eq i64 [[TMP3721]], [[TMP3722]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5088]], label [[IF_THEN5090:%.*]], label [[IF_END5091:%.*]]
// SIMD-ONLY0:       if.then5090:
// SIMD-ONLY0-NEXT:    [[TMP3723:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3723]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5091]]
// SIMD-ONLY0:       if.end5091:
// SIMD-ONLY0-NEXT:    [[TMP3724:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3725:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5092:%.*]] = icmp sgt i64 [[TMP3724]], [[TMP3725]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5092]], label [[IF_THEN5094:%.*]], label [[IF_END5095:%.*]]
// SIMD-ONLY0:       if.then5094:
// SIMD-ONLY0-NEXT:    [[TMP3726:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3726]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5095]]
// SIMD-ONLY0:       if.end5095:
// SIMD-ONLY0-NEXT:    [[TMP3727:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3727]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3728:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3729:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5096:%.*]] = icmp sgt i64 [[TMP3728]], [[TMP3729]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5096]], label [[IF_THEN5098:%.*]], label [[IF_END5099:%.*]]
// SIMD-ONLY0:       if.then5098:
// SIMD-ONLY0-NEXT:    [[TMP3730:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3730]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5099]]
// SIMD-ONLY0:       if.end5099:
// SIMD-ONLY0-NEXT:    [[TMP3731:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3731]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3732:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3733:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5100:%.*]] = icmp slt i64 [[TMP3732]], [[TMP3733]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5100]], label [[IF_THEN5102:%.*]], label [[IF_END5103:%.*]]
// SIMD-ONLY0:       if.then5102:
// SIMD-ONLY0-NEXT:    [[TMP3734:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3734]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5103]]
// SIMD-ONLY0:       if.end5103:
// SIMD-ONLY0-NEXT:    [[TMP3735:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3735]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3736:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3737:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5104:%.*]] = icmp slt i64 [[TMP3736]], [[TMP3737]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5104]], label [[IF_THEN5106:%.*]], label [[IF_END5107:%.*]]
// SIMD-ONLY0:       if.then5106:
// SIMD-ONLY0-NEXT:    [[TMP3738:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3738]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5107]]
// SIMD-ONLY0:       if.end5107:
// SIMD-ONLY0-NEXT:    [[TMP3739:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3739]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3740:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3741:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5108:%.*]] = icmp eq i64 [[TMP3740]], [[TMP3741]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5108]], label [[IF_THEN5110:%.*]], label [[IF_END5111:%.*]]
// SIMD-ONLY0:       if.then5110:
// SIMD-ONLY0-NEXT:    [[TMP3742:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3742]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5111]]
// SIMD-ONLY0:       if.end5111:
// SIMD-ONLY0-NEXT:    [[TMP3743:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3743]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3744:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3745:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5112:%.*]] = icmp eq i64 [[TMP3744]], [[TMP3745]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5112]], label [[IF_THEN5114:%.*]], label [[IF_END5115:%.*]]
// SIMD-ONLY0:       if.then5114:
// SIMD-ONLY0-NEXT:    [[TMP3746:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3746]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5115]]
// SIMD-ONLY0:       if.end5115:
// SIMD-ONLY0-NEXT:    [[TMP3747:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3747]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3748:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3749:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5116:%.*]] = icmp eq i64 [[TMP3748]], [[TMP3749]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5116]], label [[IF_THEN5118:%.*]], label [[IF_ELSE5119:%.*]]
// SIMD-ONLY0:       if.then5118:
// SIMD-ONLY0-NEXT:    [[TMP3750:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3750]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5120:%.*]]
// SIMD-ONLY0:       if.else5119:
// SIMD-ONLY0-NEXT:    [[TMP3751:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3751]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5120]]
// SIMD-ONLY0:       if.end5120:
// SIMD-ONLY0-NEXT:    [[TMP3752:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3753:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5121:%.*]] = icmp eq i64 [[TMP3752]], [[TMP3753]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5121]], label [[IF_THEN5123:%.*]], label [[IF_ELSE5124:%.*]]
// SIMD-ONLY0:       if.then5123:
// SIMD-ONLY0-NEXT:    [[TMP3754:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3754]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5125:%.*]]
// SIMD-ONLY0:       if.else5124:
// SIMD-ONLY0-NEXT:    [[TMP3755:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3755]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5125]]
// SIMD-ONLY0:       if.end5125:
// SIMD-ONLY0-NEXT:    [[TMP3756:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3757:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5126:%.*]] = icmp eq i64 [[TMP3756]], [[TMP3757]]
// SIMD-ONLY0-NEXT:    [[CONV5127:%.*]] = zext i1 [[CMP5126]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5128:%.*]] = sext i32 [[CONV5127]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5128]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3758:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5129:%.*]] = icmp ne i64 [[TMP3758]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5129]], label [[IF_THEN5130:%.*]], label [[IF_END5131:%.*]]
// SIMD-ONLY0:       if.then5130:
// SIMD-ONLY0-NEXT:    [[TMP3759:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3759]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5131]]
// SIMD-ONLY0:       if.end5131:
// SIMD-ONLY0-NEXT:    [[TMP3760:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3761:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5132:%.*]] = icmp eq i64 [[TMP3760]], [[TMP3761]]
// SIMD-ONLY0-NEXT:    [[CONV5133:%.*]] = zext i1 [[CMP5132]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5134:%.*]] = sext i32 [[CONV5133]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5134]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3762:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5135:%.*]] = icmp ne i64 [[TMP3762]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5135]], label [[IF_THEN5136:%.*]], label [[IF_END5137:%.*]]
// SIMD-ONLY0:       if.then5136:
// SIMD-ONLY0-NEXT:    [[TMP3763:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3763]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5137]]
// SIMD-ONLY0:       if.end5137:
// SIMD-ONLY0-NEXT:    [[TMP3764:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3765:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5138:%.*]] = icmp eq i64 [[TMP3764]], [[TMP3765]]
// SIMD-ONLY0-NEXT:    [[CONV5139:%.*]] = zext i1 [[CMP5138]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5140:%.*]] = sext i32 [[CONV5139]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5140]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3766:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5141:%.*]] = icmp ne i64 [[TMP3766]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5141]], label [[IF_THEN5142:%.*]], label [[IF_ELSE5143:%.*]]
// SIMD-ONLY0:       if.then5142:
// SIMD-ONLY0-NEXT:    [[TMP3767:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3767]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5144:%.*]]
// SIMD-ONLY0:       if.else5143:
// SIMD-ONLY0-NEXT:    [[TMP3768:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3768]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5144]]
// SIMD-ONLY0:       if.end5144:
// SIMD-ONLY0-NEXT:    [[TMP3769:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3770:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5145:%.*]] = icmp eq i64 [[TMP3769]], [[TMP3770]]
// SIMD-ONLY0-NEXT:    [[CONV5146:%.*]] = zext i1 [[CMP5145]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5147:%.*]] = sext i32 [[CONV5146]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5147]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3771:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5148:%.*]] = icmp ne i64 [[TMP3771]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5148]], label [[IF_THEN5149:%.*]], label [[IF_ELSE5150:%.*]]
// SIMD-ONLY0:       if.then5149:
// SIMD-ONLY0-NEXT:    [[TMP3772:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3772]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5151:%.*]]
// SIMD-ONLY0:       if.else5150:
// SIMD-ONLY0-NEXT:    [[TMP3773:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3773]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5151]]
// SIMD-ONLY0:       if.end5151:
// SIMD-ONLY0-NEXT:    [[TMP3774:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3774]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3775:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3776:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5152:%.*]] = icmp sgt i64 [[TMP3775]], [[TMP3776]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5152]], label [[IF_THEN5154:%.*]], label [[IF_END5155:%.*]]
// SIMD-ONLY0:       if.then5154:
// SIMD-ONLY0-NEXT:    [[TMP3777:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3777]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5155]]
// SIMD-ONLY0:       if.end5155:
// SIMD-ONLY0-NEXT:    [[TMP3778:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3778]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3779:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3780:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5156:%.*]] = icmp sgt i64 [[TMP3779]], [[TMP3780]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5156]], label [[IF_THEN5158:%.*]], label [[IF_END5159:%.*]]
// SIMD-ONLY0:       if.then5158:
// SIMD-ONLY0-NEXT:    [[TMP3781:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3781]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5159]]
// SIMD-ONLY0:       if.end5159:
// SIMD-ONLY0-NEXT:    [[TMP3782:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3782]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3783:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3784:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5160:%.*]] = icmp slt i64 [[TMP3783]], [[TMP3784]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5160]], label [[IF_THEN5162:%.*]], label [[IF_END5163:%.*]]
// SIMD-ONLY0:       if.then5162:
// SIMD-ONLY0-NEXT:    [[TMP3785:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3785]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5163]]
// SIMD-ONLY0:       if.end5163:
// SIMD-ONLY0-NEXT:    [[TMP3786:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3786]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3787:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3788:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5164:%.*]] = icmp slt i64 [[TMP3787]], [[TMP3788]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5164]], label [[IF_THEN5166:%.*]], label [[IF_END5167:%.*]]
// SIMD-ONLY0:       if.then5166:
// SIMD-ONLY0-NEXT:    [[TMP3789:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3789]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5167]]
// SIMD-ONLY0:       if.end5167:
// SIMD-ONLY0-NEXT:    [[TMP3790:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3790]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3791:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3792:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5168:%.*]] = icmp eq i64 [[TMP3791]], [[TMP3792]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5168]], label [[IF_THEN5170:%.*]], label [[IF_END5171:%.*]]
// SIMD-ONLY0:       if.then5170:
// SIMD-ONLY0-NEXT:    [[TMP3793:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3793]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5171]]
// SIMD-ONLY0:       if.end5171:
// SIMD-ONLY0-NEXT:    [[TMP3794:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3794]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3795:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3796:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5172:%.*]] = icmp eq i64 [[TMP3795]], [[TMP3796]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5172]], label [[IF_THEN5174:%.*]], label [[IF_END5175:%.*]]
// SIMD-ONLY0:       if.then5174:
// SIMD-ONLY0-NEXT:    [[TMP3797:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3797]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5175]]
// SIMD-ONLY0:       if.end5175:
// SIMD-ONLY0-NEXT:    [[TMP3798:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3799:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5176:%.*]] = icmp sgt i64 [[TMP3798]], [[TMP3799]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5176]], label [[IF_THEN5178:%.*]], label [[IF_END5179:%.*]]
// SIMD-ONLY0:       if.then5178:
// SIMD-ONLY0-NEXT:    [[TMP3800:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3800]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5179]]
// SIMD-ONLY0:       if.end5179:
// SIMD-ONLY0-NEXT:    [[TMP3801:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3801]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3802:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3803:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5180:%.*]] = icmp sgt i64 [[TMP3802]], [[TMP3803]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5180]], label [[IF_THEN5182:%.*]], label [[IF_END5183:%.*]]
// SIMD-ONLY0:       if.then5182:
// SIMD-ONLY0-NEXT:    [[TMP3804:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3804]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5183]]
// SIMD-ONLY0:       if.end5183:
// SIMD-ONLY0-NEXT:    [[TMP3805:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3805]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3806:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3807:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5184:%.*]] = icmp slt i64 [[TMP3806]], [[TMP3807]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5184]], label [[IF_THEN5186:%.*]], label [[IF_END5187:%.*]]
// SIMD-ONLY0:       if.then5186:
// SIMD-ONLY0-NEXT:    [[TMP3808:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3808]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5187]]
// SIMD-ONLY0:       if.end5187:
// SIMD-ONLY0-NEXT:    [[TMP3809:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3809]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3810:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3811:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5188:%.*]] = icmp slt i64 [[TMP3810]], [[TMP3811]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5188]], label [[IF_THEN5190:%.*]], label [[IF_END5191:%.*]]
// SIMD-ONLY0:       if.then5190:
// SIMD-ONLY0-NEXT:    [[TMP3812:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3812]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5191]]
// SIMD-ONLY0:       if.end5191:
// SIMD-ONLY0-NEXT:    [[TMP3813:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3813]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3814:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3815:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5192:%.*]] = icmp eq i64 [[TMP3814]], [[TMP3815]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5192]], label [[IF_THEN5194:%.*]], label [[IF_END5195:%.*]]
// SIMD-ONLY0:       if.then5194:
// SIMD-ONLY0-NEXT:    [[TMP3816:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3816]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5195]]
// SIMD-ONLY0:       if.end5195:
// SIMD-ONLY0-NEXT:    [[TMP3817:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3817]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3818:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3819:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5196:%.*]] = icmp eq i64 [[TMP3818]], [[TMP3819]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5196]], label [[IF_THEN5198:%.*]], label [[IF_END5199:%.*]]
// SIMD-ONLY0:       if.then5198:
// SIMD-ONLY0-NEXT:    [[TMP3820:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3820]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5199]]
// SIMD-ONLY0:       if.end5199:
// SIMD-ONLY0-NEXT:    [[TMP3821:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3821]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3822:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3823:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5200:%.*]] = icmp eq i64 [[TMP3822]], [[TMP3823]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5200]], label [[IF_THEN5202:%.*]], label [[IF_ELSE5203:%.*]]
// SIMD-ONLY0:       if.then5202:
// SIMD-ONLY0-NEXT:    [[TMP3824:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3824]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5204:%.*]]
// SIMD-ONLY0:       if.else5203:
// SIMD-ONLY0-NEXT:    [[TMP3825:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3825]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5204]]
// SIMD-ONLY0:       if.end5204:
// SIMD-ONLY0-NEXT:    [[TMP3826:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3827:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5205:%.*]] = icmp eq i64 [[TMP3826]], [[TMP3827]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5205]], label [[IF_THEN5207:%.*]], label [[IF_ELSE5208:%.*]]
// SIMD-ONLY0:       if.then5207:
// SIMD-ONLY0-NEXT:    [[TMP3828:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3828]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5209:%.*]]
// SIMD-ONLY0:       if.else5208:
// SIMD-ONLY0-NEXT:    [[TMP3829:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3829]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5209]]
// SIMD-ONLY0:       if.end5209:
// SIMD-ONLY0-NEXT:    [[TMP3830:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3831:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5210:%.*]] = icmp eq i64 [[TMP3830]], [[TMP3831]]
// SIMD-ONLY0-NEXT:    [[CONV5211:%.*]] = zext i1 [[CMP5210]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5212:%.*]] = sext i32 [[CONV5211]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5212]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3832:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5213:%.*]] = icmp ne i64 [[TMP3832]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5213]], label [[IF_THEN5214:%.*]], label [[IF_END5215:%.*]]
// SIMD-ONLY0:       if.then5214:
// SIMD-ONLY0-NEXT:    [[TMP3833:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3833]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5215]]
// SIMD-ONLY0:       if.end5215:
// SIMD-ONLY0-NEXT:    [[TMP3834:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3835:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5216:%.*]] = icmp eq i64 [[TMP3834]], [[TMP3835]]
// SIMD-ONLY0-NEXT:    [[CONV5217:%.*]] = zext i1 [[CMP5216]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5218:%.*]] = sext i32 [[CONV5217]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5218]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3836:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5219:%.*]] = icmp ne i64 [[TMP3836]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5219]], label [[IF_THEN5220:%.*]], label [[IF_END5221:%.*]]
// SIMD-ONLY0:       if.then5220:
// SIMD-ONLY0-NEXT:    [[TMP3837:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3837]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5221]]
// SIMD-ONLY0:       if.end5221:
// SIMD-ONLY0-NEXT:    [[TMP3838:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3839:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5222:%.*]] = icmp eq i64 [[TMP3838]], [[TMP3839]]
// SIMD-ONLY0-NEXT:    [[CONV5223:%.*]] = zext i1 [[CMP5222]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5224:%.*]] = sext i32 [[CONV5223]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5224]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3840:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5225:%.*]] = icmp ne i64 [[TMP3840]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5225]], label [[IF_THEN5226:%.*]], label [[IF_ELSE5227:%.*]]
// SIMD-ONLY0:       if.then5226:
// SIMD-ONLY0-NEXT:    [[TMP3841:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3841]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5228:%.*]]
// SIMD-ONLY0:       if.else5227:
// SIMD-ONLY0-NEXT:    [[TMP3842:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3842]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5228]]
// SIMD-ONLY0:       if.end5228:
// SIMD-ONLY0-NEXT:    [[TMP3843:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3844:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5229:%.*]] = icmp eq i64 [[TMP3843]], [[TMP3844]]
// SIMD-ONLY0-NEXT:    [[CONV5230:%.*]] = zext i1 [[CMP5229]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5231:%.*]] = sext i32 [[CONV5230]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5231]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3845:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5232:%.*]] = icmp ne i64 [[TMP3845]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5232]], label [[IF_THEN5233:%.*]], label [[IF_ELSE5234:%.*]]
// SIMD-ONLY0:       if.then5233:
// SIMD-ONLY0-NEXT:    [[TMP3846:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3846]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5235:%.*]]
// SIMD-ONLY0:       if.else5234:
// SIMD-ONLY0-NEXT:    [[TMP3847:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3847]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5235]]
// SIMD-ONLY0:       if.end5235:
// SIMD-ONLY0-NEXT:    [[TMP3848:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3848]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3849:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3850:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5236:%.*]] = icmp sgt i64 [[TMP3849]], [[TMP3850]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5236]], label [[IF_THEN5238:%.*]], label [[IF_END5239:%.*]]
// SIMD-ONLY0:       if.then5238:
// SIMD-ONLY0-NEXT:    [[TMP3851:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3851]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5239]]
// SIMD-ONLY0:       if.end5239:
// SIMD-ONLY0-NEXT:    [[TMP3852:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3852]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3853:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3854:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5240:%.*]] = icmp sgt i64 [[TMP3853]], [[TMP3854]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5240]], label [[IF_THEN5242:%.*]], label [[IF_END5243:%.*]]
// SIMD-ONLY0:       if.then5242:
// SIMD-ONLY0-NEXT:    [[TMP3855:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3855]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5243]]
// SIMD-ONLY0:       if.end5243:
// SIMD-ONLY0-NEXT:    [[TMP3856:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3856]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3857:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3858:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5244:%.*]] = icmp slt i64 [[TMP3857]], [[TMP3858]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5244]], label [[IF_THEN5246:%.*]], label [[IF_END5247:%.*]]
// SIMD-ONLY0:       if.then5246:
// SIMD-ONLY0-NEXT:    [[TMP3859:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3859]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5247]]
// SIMD-ONLY0:       if.end5247:
// SIMD-ONLY0-NEXT:    [[TMP3860:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3860]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3861:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3862:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5248:%.*]] = icmp slt i64 [[TMP3861]], [[TMP3862]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5248]], label [[IF_THEN5250:%.*]], label [[IF_END5251:%.*]]
// SIMD-ONLY0:       if.then5250:
// SIMD-ONLY0-NEXT:    [[TMP3863:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3863]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5251]]
// SIMD-ONLY0:       if.end5251:
// SIMD-ONLY0-NEXT:    [[TMP3864:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3864]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3865:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3866:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5252:%.*]] = icmp eq i64 [[TMP3865]], [[TMP3866]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5252]], label [[IF_THEN5254:%.*]], label [[IF_END5255:%.*]]
// SIMD-ONLY0:       if.then5254:
// SIMD-ONLY0-NEXT:    [[TMP3867:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3867]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5255]]
// SIMD-ONLY0:       if.end5255:
// SIMD-ONLY0-NEXT:    [[TMP3868:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3868]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3869:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3870:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5256:%.*]] = icmp eq i64 [[TMP3869]], [[TMP3870]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5256]], label [[IF_THEN5258:%.*]], label [[IF_END5259:%.*]]
// SIMD-ONLY0:       if.then5258:
// SIMD-ONLY0-NEXT:    [[TMP3871:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3871]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5259]]
// SIMD-ONLY0:       if.end5259:
// SIMD-ONLY0-NEXT:    [[TMP3872:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3873:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5260:%.*]] = icmp sgt i64 [[TMP3872]], [[TMP3873]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5260]], label [[IF_THEN5262:%.*]], label [[IF_END5263:%.*]]
// SIMD-ONLY0:       if.then5262:
// SIMD-ONLY0-NEXT:    [[TMP3874:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3874]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5263]]
// SIMD-ONLY0:       if.end5263:
// SIMD-ONLY0-NEXT:    [[TMP3875:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3875]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3876:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3877:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5264:%.*]] = icmp sgt i64 [[TMP3876]], [[TMP3877]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5264]], label [[IF_THEN5266:%.*]], label [[IF_END5267:%.*]]
// SIMD-ONLY0:       if.then5266:
// SIMD-ONLY0-NEXT:    [[TMP3878:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3878]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5267]]
// SIMD-ONLY0:       if.end5267:
// SIMD-ONLY0-NEXT:    [[TMP3879:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3879]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3880:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3881:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5268:%.*]] = icmp slt i64 [[TMP3880]], [[TMP3881]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5268]], label [[IF_THEN5270:%.*]], label [[IF_END5271:%.*]]
// SIMD-ONLY0:       if.then5270:
// SIMD-ONLY0-NEXT:    [[TMP3882:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3882]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5271]]
// SIMD-ONLY0:       if.end5271:
// SIMD-ONLY0-NEXT:    [[TMP3883:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3883]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3884:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3885:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5272:%.*]] = icmp slt i64 [[TMP3884]], [[TMP3885]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5272]], label [[IF_THEN5274:%.*]], label [[IF_END5275:%.*]]
// SIMD-ONLY0:       if.then5274:
// SIMD-ONLY0-NEXT:    [[TMP3886:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3886]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5275]]
// SIMD-ONLY0:       if.end5275:
// SIMD-ONLY0-NEXT:    [[TMP3887:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3887]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3888:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3889:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5276:%.*]] = icmp eq i64 [[TMP3888]], [[TMP3889]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5276]], label [[IF_THEN5278:%.*]], label [[IF_END5279:%.*]]
// SIMD-ONLY0:       if.then5278:
// SIMD-ONLY0-NEXT:    [[TMP3890:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3890]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5279]]
// SIMD-ONLY0:       if.end5279:
// SIMD-ONLY0-NEXT:    [[TMP3891:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3891]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3892:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3893:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5280:%.*]] = icmp eq i64 [[TMP3892]], [[TMP3893]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5280]], label [[IF_THEN5282:%.*]], label [[IF_END5283:%.*]]
// SIMD-ONLY0:       if.then5282:
// SIMD-ONLY0-NEXT:    [[TMP3894:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3894]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5283]]
// SIMD-ONLY0:       if.end5283:
// SIMD-ONLY0-NEXT:    [[TMP3895:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3895]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3896:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3897:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5284:%.*]] = icmp eq i64 [[TMP3896]], [[TMP3897]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5284]], label [[IF_THEN5286:%.*]], label [[IF_ELSE5287:%.*]]
// SIMD-ONLY0:       if.then5286:
// SIMD-ONLY0-NEXT:    [[TMP3898:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3898]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5288:%.*]]
// SIMD-ONLY0:       if.else5287:
// SIMD-ONLY0-NEXT:    [[TMP3899:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3899]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5288]]
// SIMD-ONLY0:       if.end5288:
// SIMD-ONLY0-NEXT:    [[TMP3900:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3901:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5289:%.*]] = icmp eq i64 [[TMP3900]], [[TMP3901]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5289]], label [[IF_THEN5291:%.*]], label [[IF_ELSE5292:%.*]]
// SIMD-ONLY0:       if.then5291:
// SIMD-ONLY0-NEXT:    [[TMP3902:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3902]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5293:%.*]]
// SIMD-ONLY0:       if.else5292:
// SIMD-ONLY0-NEXT:    [[TMP3903:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3903]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5293]]
// SIMD-ONLY0:       if.end5293:
// SIMD-ONLY0-NEXT:    [[TMP3904:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3905:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5294:%.*]] = icmp eq i64 [[TMP3904]], [[TMP3905]]
// SIMD-ONLY0-NEXT:    [[CONV5295:%.*]] = zext i1 [[CMP5294]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5296:%.*]] = sext i32 [[CONV5295]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5296]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3906:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5297:%.*]] = icmp ne i64 [[TMP3906]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5297]], label [[IF_THEN5298:%.*]], label [[IF_END5299:%.*]]
// SIMD-ONLY0:       if.then5298:
// SIMD-ONLY0-NEXT:    [[TMP3907:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3907]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5299]]
// SIMD-ONLY0:       if.end5299:
// SIMD-ONLY0-NEXT:    [[TMP3908:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3909:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5300:%.*]] = icmp eq i64 [[TMP3908]], [[TMP3909]]
// SIMD-ONLY0-NEXT:    [[CONV5301:%.*]] = zext i1 [[CMP5300]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5302:%.*]] = sext i32 [[CONV5301]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5302]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3910:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5303:%.*]] = icmp ne i64 [[TMP3910]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5303]], label [[IF_THEN5304:%.*]], label [[IF_END5305:%.*]]
// SIMD-ONLY0:       if.then5304:
// SIMD-ONLY0-NEXT:    [[TMP3911:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3911]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5305]]
// SIMD-ONLY0:       if.end5305:
// SIMD-ONLY0-NEXT:    [[TMP3912:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3913:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5306:%.*]] = icmp eq i64 [[TMP3912]], [[TMP3913]]
// SIMD-ONLY0-NEXT:    [[CONV5307:%.*]] = zext i1 [[CMP5306]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5308:%.*]] = sext i32 [[CONV5307]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5308]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3914:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5309:%.*]] = icmp ne i64 [[TMP3914]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5309]], label [[IF_THEN5310:%.*]], label [[IF_ELSE5311:%.*]]
// SIMD-ONLY0:       if.then5310:
// SIMD-ONLY0-NEXT:    [[TMP3915:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3915]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5312:%.*]]
// SIMD-ONLY0:       if.else5311:
// SIMD-ONLY0-NEXT:    [[TMP3916:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3916]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5312]]
// SIMD-ONLY0:       if.end5312:
// SIMD-ONLY0-NEXT:    [[TMP3917:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3918:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5313:%.*]] = icmp eq i64 [[TMP3917]], [[TMP3918]]
// SIMD-ONLY0-NEXT:    [[CONV5314:%.*]] = zext i1 [[CMP5313]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5315:%.*]] = sext i32 [[CONV5314]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5315]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3919:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5316:%.*]] = icmp ne i64 [[TMP3919]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5316]], label [[IF_THEN5317:%.*]], label [[IF_ELSE5318:%.*]]
// SIMD-ONLY0:       if.then5317:
// SIMD-ONLY0-NEXT:    [[TMP3920:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3920]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5319:%.*]]
// SIMD-ONLY0:       if.else5318:
// SIMD-ONLY0-NEXT:    [[TMP3921:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3921]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5319]]
// SIMD-ONLY0:       if.end5319:
// SIMD-ONLY0-NEXT:    [[TMP3922:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3922]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3923:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3924:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5320:%.*]] = icmp sgt i64 [[TMP3923]], [[TMP3924]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5320]], label [[IF_THEN5322:%.*]], label [[IF_END5323:%.*]]
// SIMD-ONLY0:       if.then5322:
// SIMD-ONLY0-NEXT:    [[TMP3925:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3925]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5323]]
// SIMD-ONLY0:       if.end5323:
// SIMD-ONLY0-NEXT:    [[TMP3926:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3926]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3927:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3928:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5324:%.*]] = icmp sgt i64 [[TMP3927]], [[TMP3928]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5324]], label [[IF_THEN5326:%.*]], label [[IF_END5327:%.*]]
// SIMD-ONLY0:       if.then5326:
// SIMD-ONLY0-NEXT:    [[TMP3929:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3929]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5327]]
// SIMD-ONLY0:       if.end5327:
// SIMD-ONLY0-NEXT:    [[TMP3930:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3930]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3931:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3932:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5328:%.*]] = icmp slt i64 [[TMP3931]], [[TMP3932]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5328]], label [[IF_THEN5330:%.*]], label [[IF_END5331:%.*]]
// SIMD-ONLY0:       if.then5330:
// SIMD-ONLY0-NEXT:    [[TMP3933:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3933]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5331]]
// SIMD-ONLY0:       if.end5331:
// SIMD-ONLY0-NEXT:    [[TMP3934:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3934]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3935:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3936:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5332:%.*]] = icmp slt i64 [[TMP3935]], [[TMP3936]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5332]], label [[IF_THEN5334:%.*]], label [[IF_END5335:%.*]]
// SIMD-ONLY0:       if.then5334:
// SIMD-ONLY0-NEXT:    [[TMP3937:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3937]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5335]]
// SIMD-ONLY0:       if.end5335:
// SIMD-ONLY0-NEXT:    [[TMP3938:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3938]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3939:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3940:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5336:%.*]] = icmp eq i64 [[TMP3939]], [[TMP3940]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5336]], label [[IF_THEN5338:%.*]], label [[IF_END5339:%.*]]
// SIMD-ONLY0:       if.then5338:
// SIMD-ONLY0-NEXT:    [[TMP3941:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3941]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5339]]
// SIMD-ONLY0:       if.end5339:
// SIMD-ONLY0-NEXT:    [[TMP3942:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3942]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3943:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3944:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5340:%.*]] = icmp eq i64 [[TMP3943]], [[TMP3944]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5340]], label [[IF_THEN5342:%.*]], label [[IF_END5343:%.*]]
// SIMD-ONLY0:       if.then5342:
// SIMD-ONLY0-NEXT:    [[TMP3945:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3945]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5343]]
// SIMD-ONLY0:       if.end5343:
// SIMD-ONLY0-NEXT:    [[TMP3946:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3947:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5344:%.*]] = icmp sgt i64 [[TMP3946]], [[TMP3947]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5344]], label [[IF_THEN5346:%.*]], label [[IF_END5347:%.*]]
// SIMD-ONLY0:       if.then5346:
// SIMD-ONLY0-NEXT:    [[TMP3948:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3948]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5347]]
// SIMD-ONLY0:       if.end5347:
// SIMD-ONLY0-NEXT:    [[TMP3949:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3949]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3950:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3951:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5348:%.*]] = icmp sgt i64 [[TMP3950]], [[TMP3951]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5348]], label [[IF_THEN5350:%.*]], label [[IF_END5351:%.*]]
// SIMD-ONLY0:       if.then5350:
// SIMD-ONLY0-NEXT:    [[TMP3952:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3952]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5351]]
// SIMD-ONLY0:       if.end5351:
// SIMD-ONLY0-NEXT:    [[TMP3953:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3953]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3954:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3955:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5352:%.*]] = icmp slt i64 [[TMP3954]], [[TMP3955]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5352]], label [[IF_THEN5354:%.*]], label [[IF_END5355:%.*]]
// SIMD-ONLY0:       if.then5354:
// SIMD-ONLY0-NEXT:    [[TMP3956:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3956]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5355]]
// SIMD-ONLY0:       if.end5355:
// SIMD-ONLY0-NEXT:    [[TMP3957:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3957]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3958:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3959:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5356:%.*]] = icmp slt i64 [[TMP3958]], [[TMP3959]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5356]], label [[IF_THEN5358:%.*]], label [[IF_END5359:%.*]]
// SIMD-ONLY0:       if.then5358:
// SIMD-ONLY0-NEXT:    [[TMP3960:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3960]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5359]]
// SIMD-ONLY0:       if.end5359:
// SIMD-ONLY0-NEXT:    [[TMP3961:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3961]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3962:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3963:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5360:%.*]] = icmp eq i64 [[TMP3962]], [[TMP3963]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5360]], label [[IF_THEN5362:%.*]], label [[IF_END5363:%.*]]
// SIMD-ONLY0:       if.then5362:
// SIMD-ONLY0-NEXT:    [[TMP3964:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3964]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5363]]
// SIMD-ONLY0:       if.end5363:
// SIMD-ONLY0-NEXT:    [[TMP3965:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3965]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3966:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3967:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5364:%.*]] = icmp eq i64 [[TMP3966]], [[TMP3967]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5364]], label [[IF_THEN5366:%.*]], label [[IF_END5367:%.*]]
// SIMD-ONLY0:       if.then5366:
// SIMD-ONLY0-NEXT:    [[TMP3968:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3968]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5367]]
// SIMD-ONLY0:       if.end5367:
// SIMD-ONLY0-NEXT:    [[TMP3969:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3969]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3970:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3971:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5368:%.*]] = icmp eq i64 [[TMP3970]], [[TMP3971]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5368]], label [[IF_THEN5370:%.*]], label [[IF_ELSE5371:%.*]]
// SIMD-ONLY0:       if.then5370:
// SIMD-ONLY0-NEXT:    [[TMP3972:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3972]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5372:%.*]]
// SIMD-ONLY0:       if.else5371:
// SIMD-ONLY0-NEXT:    [[TMP3973:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3973]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5372]]
// SIMD-ONLY0:       if.end5372:
// SIMD-ONLY0-NEXT:    [[TMP3974:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3975:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5373:%.*]] = icmp eq i64 [[TMP3974]], [[TMP3975]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5373]], label [[IF_THEN5375:%.*]], label [[IF_ELSE5376:%.*]]
// SIMD-ONLY0:       if.then5375:
// SIMD-ONLY0-NEXT:    [[TMP3976:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3976]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5377:%.*]]
// SIMD-ONLY0:       if.else5376:
// SIMD-ONLY0-NEXT:    [[TMP3977:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3977]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5377]]
// SIMD-ONLY0:       if.end5377:
// SIMD-ONLY0-NEXT:    [[TMP3978:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3979:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5378:%.*]] = icmp eq i64 [[TMP3978]], [[TMP3979]]
// SIMD-ONLY0-NEXT:    [[CONV5379:%.*]] = zext i1 [[CMP5378]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5380:%.*]] = sext i32 [[CONV5379]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5380]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3980:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5381:%.*]] = icmp ne i64 [[TMP3980]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5381]], label [[IF_THEN5382:%.*]], label [[IF_END5383:%.*]]
// SIMD-ONLY0:       if.then5382:
// SIMD-ONLY0-NEXT:    [[TMP3981:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3981]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5383]]
// SIMD-ONLY0:       if.end5383:
// SIMD-ONLY0-NEXT:    [[TMP3982:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3983:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5384:%.*]] = icmp eq i64 [[TMP3982]], [[TMP3983]]
// SIMD-ONLY0-NEXT:    [[CONV5385:%.*]] = zext i1 [[CMP5384]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5386:%.*]] = sext i32 [[CONV5385]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5386]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3984:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5387:%.*]] = icmp ne i64 [[TMP3984]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5387]], label [[IF_THEN5388:%.*]], label [[IF_END5389:%.*]]
// SIMD-ONLY0:       if.then5388:
// SIMD-ONLY0-NEXT:    [[TMP3985:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3985]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5389]]
// SIMD-ONLY0:       if.end5389:
// SIMD-ONLY0-NEXT:    [[TMP3986:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3987:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5390:%.*]] = icmp eq i64 [[TMP3986]], [[TMP3987]]
// SIMD-ONLY0-NEXT:    [[CONV5391:%.*]] = zext i1 [[CMP5390]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5392:%.*]] = sext i32 [[CONV5391]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5392]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3988:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5393:%.*]] = icmp ne i64 [[TMP3988]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5393]], label [[IF_THEN5394:%.*]], label [[IF_ELSE5395:%.*]]
// SIMD-ONLY0:       if.then5394:
// SIMD-ONLY0-NEXT:    [[TMP3989:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3989]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5396:%.*]]
// SIMD-ONLY0:       if.else5395:
// SIMD-ONLY0-NEXT:    [[TMP3990:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3990]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5396]]
// SIMD-ONLY0:       if.end5396:
// SIMD-ONLY0-NEXT:    [[TMP3991:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3992:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5397:%.*]] = icmp eq i64 [[TMP3991]], [[TMP3992]]
// SIMD-ONLY0-NEXT:    [[CONV5398:%.*]] = zext i1 [[CMP5397]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5399:%.*]] = sext i32 [[CONV5398]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5399]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3993:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5400:%.*]] = icmp ne i64 [[TMP3993]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5400]], label [[IF_THEN5401:%.*]], label [[IF_ELSE5402:%.*]]
// SIMD-ONLY0:       if.then5401:
// SIMD-ONLY0-NEXT:    [[TMP3994:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3994]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5403:%.*]]
// SIMD-ONLY0:       if.else5402:
// SIMD-ONLY0-NEXT:    [[TMP3995:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3995]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5403]]
// SIMD-ONLY0:       if.end5403:
// SIMD-ONLY0-NEXT:    [[TMP3996:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3996]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3997:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3998:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5404:%.*]] = icmp ugt i64 [[TMP3997]], [[TMP3998]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5404]], label [[IF_THEN5406:%.*]], label [[IF_END5407:%.*]]
// SIMD-ONLY0:       if.then5406:
// SIMD-ONLY0-NEXT:    [[TMP3999:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3999]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5407]]
// SIMD-ONLY0:       if.end5407:
// SIMD-ONLY0-NEXT:    [[TMP4000:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4000]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4001:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4002:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5408:%.*]] = icmp ugt i64 [[TMP4001]], [[TMP4002]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5408]], label [[IF_THEN5410:%.*]], label [[IF_END5411:%.*]]
// SIMD-ONLY0:       if.then5410:
// SIMD-ONLY0-NEXT:    [[TMP4003:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4003]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5411]]
// SIMD-ONLY0:       if.end5411:
// SIMD-ONLY0-NEXT:    [[TMP4004:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4004]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4005:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4006:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5412:%.*]] = icmp ult i64 [[TMP4005]], [[TMP4006]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5412]], label [[IF_THEN5414:%.*]], label [[IF_END5415:%.*]]
// SIMD-ONLY0:       if.then5414:
// SIMD-ONLY0-NEXT:    [[TMP4007:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4007]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5415]]
// SIMD-ONLY0:       if.end5415:
// SIMD-ONLY0-NEXT:    [[TMP4008:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4008]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4009:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4010:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5416:%.*]] = icmp ult i64 [[TMP4009]], [[TMP4010]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5416]], label [[IF_THEN5418:%.*]], label [[IF_END5419:%.*]]
// SIMD-ONLY0:       if.then5418:
// SIMD-ONLY0-NEXT:    [[TMP4011:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4011]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5419]]
// SIMD-ONLY0:       if.end5419:
// SIMD-ONLY0-NEXT:    [[TMP4012:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4012]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4013:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4014:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5420:%.*]] = icmp eq i64 [[TMP4013]], [[TMP4014]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5420]], label [[IF_THEN5422:%.*]], label [[IF_END5423:%.*]]
// SIMD-ONLY0:       if.then5422:
// SIMD-ONLY0-NEXT:    [[TMP4015:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4015]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5423]]
// SIMD-ONLY0:       if.end5423:
// SIMD-ONLY0-NEXT:    [[TMP4016:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4016]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4017:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4018:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5424:%.*]] = icmp eq i64 [[TMP4017]], [[TMP4018]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5424]], label [[IF_THEN5426:%.*]], label [[IF_END5427:%.*]]
// SIMD-ONLY0:       if.then5426:
// SIMD-ONLY0-NEXT:    [[TMP4019:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4019]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5427]]
// SIMD-ONLY0:       if.end5427:
// SIMD-ONLY0-NEXT:    [[TMP4020:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4021:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5428:%.*]] = icmp ugt i64 [[TMP4020]], [[TMP4021]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5428]], label [[IF_THEN5430:%.*]], label [[IF_END5431:%.*]]
// SIMD-ONLY0:       if.then5430:
// SIMD-ONLY0-NEXT:    [[TMP4022:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4022]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5431]]
// SIMD-ONLY0:       if.end5431:
// SIMD-ONLY0-NEXT:    [[TMP4023:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4023]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4024:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4025:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5432:%.*]] = icmp ugt i64 [[TMP4024]], [[TMP4025]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5432]], label [[IF_THEN5434:%.*]], label [[IF_END5435:%.*]]
// SIMD-ONLY0:       if.then5434:
// SIMD-ONLY0-NEXT:    [[TMP4026:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4026]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5435]]
// SIMD-ONLY0:       if.end5435:
// SIMD-ONLY0-NEXT:    [[TMP4027:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4027]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4028:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4029:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5436:%.*]] = icmp ult i64 [[TMP4028]], [[TMP4029]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5436]], label [[IF_THEN5438:%.*]], label [[IF_END5439:%.*]]
// SIMD-ONLY0:       if.then5438:
// SIMD-ONLY0-NEXT:    [[TMP4030:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4030]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5439]]
// SIMD-ONLY0:       if.end5439:
// SIMD-ONLY0-NEXT:    [[TMP4031:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4031]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4032:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4033:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5440:%.*]] = icmp ult i64 [[TMP4032]], [[TMP4033]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5440]], label [[IF_THEN5442:%.*]], label [[IF_END5443:%.*]]
// SIMD-ONLY0:       if.then5442:
// SIMD-ONLY0-NEXT:    [[TMP4034:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4034]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5443]]
// SIMD-ONLY0:       if.end5443:
// SIMD-ONLY0-NEXT:    [[TMP4035:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4035]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4036:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4037:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5444:%.*]] = icmp eq i64 [[TMP4036]], [[TMP4037]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5444]], label [[IF_THEN5446:%.*]], label [[IF_END5447:%.*]]
// SIMD-ONLY0:       if.then5446:
// SIMD-ONLY0-NEXT:    [[TMP4038:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4038]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5447]]
// SIMD-ONLY0:       if.end5447:
// SIMD-ONLY0-NEXT:    [[TMP4039:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4039]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4040:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4041:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5448:%.*]] = icmp eq i64 [[TMP4040]], [[TMP4041]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5448]], label [[IF_THEN5450:%.*]], label [[IF_END5451:%.*]]
// SIMD-ONLY0:       if.then5450:
// SIMD-ONLY0-NEXT:    [[TMP4042:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4042]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5451]]
// SIMD-ONLY0:       if.end5451:
// SIMD-ONLY0-NEXT:    [[TMP4043:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4043]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4044:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4045:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5452:%.*]] = icmp eq i64 [[TMP4044]], [[TMP4045]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5452]], label [[IF_THEN5454:%.*]], label [[IF_ELSE5455:%.*]]
// SIMD-ONLY0:       if.then5454:
// SIMD-ONLY0-NEXT:    [[TMP4046:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4046]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5456:%.*]]
// SIMD-ONLY0:       if.else5455:
// SIMD-ONLY0-NEXT:    [[TMP4047:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4047]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5456]]
// SIMD-ONLY0:       if.end5456:
// SIMD-ONLY0-NEXT:    [[TMP4048:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4049:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5457:%.*]] = icmp eq i64 [[TMP4048]], [[TMP4049]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5457]], label [[IF_THEN5459:%.*]], label [[IF_ELSE5460:%.*]]
// SIMD-ONLY0:       if.then5459:
// SIMD-ONLY0-NEXT:    [[TMP4050:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4050]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5461:%.*]]
// SIMD-ONLY0:       if.else5460:
// SIMD-ONLY0-NEXT:    [[TMP4051:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4051]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5461]]
// SIMD-ONLY0:       if.end5461:
// SIMD-ONLY0-NEXT:    [[TMP4052:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4053:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5462:%.*]] = icmp eq i64 [[TMP4052]], [[TMP4053]]
// SIMD-ONLY0-NEXT:    [[CONV5463:%.*]] = zext i1 [[CMP5462]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5464:%.*]] = sext i32 [[CONV5463]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5464]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4054:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5465:%.*]] = icmp ne i64 [[TMP4054]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5465]], label [[IF_THEN5466:%.*]], label [[IF_END5467:%.*]]
// SIMD-ONLY0:       if.then5466:
// SIMD-ONLY0-NEXT:    [[TMP4055:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4055]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5467]]
// SIMD-ONLY0:       if.end5467:
// SIMD-ONLY0-NEXT:    [[TMP4056:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4057:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5468:%.*]] = icmp eq i64 [[TMP4056]], [[TMP4057]]
// SIMD-ONLY0-NEXT:    [[CONV5469:%.*]] = zext i1 [[CMP5468]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5470:%.*]] = sext i32 [[CONV5469]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5470]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4058:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5471:%.*]] = icmp ne i64 [[TMP4058]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5471]], label [[IF_THEN5472:%.*]], label [[IF_END5473:%.*]]
// SIMD-ONLY0:       if.then5472:
// SIMD-ONLY0-NEXT:    [[TMP4059:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4059]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5473]]
// SIMD-ONLY0:       if.end5473:
// SIMD-ONLY0-NEXT:    [[TMP4060:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4061:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5474:%.*]] = icmp eq i64 [[TMP4060]], [[TMP4061]]
// SIMD-ONLY0-NEXT:    [[CONV5475:%.*]] = zext i1 [[CMP5474]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5476:%.*]] = sext i32 [[CONV5475]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5476]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4062:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5477:%.*]] = icmp ne i64 [[TMP4062]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5477]], label [[IF_THEN5478:%.*]], label [[IF_ELSE5479:%.*]]
// SIMD-ONLY0:       if.then5478:
// SIMD-ONLY0-NEXT:    [[TMP4063:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4063]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5480:%.*]]
// SIMD-ONLY0:       if.else5479:
// SIMD-ONLY0-NEXT:    [[TMP4064:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4064]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5480]]
// SIMD-ONLY0:       if.end5480:
// SIMD-ONLY0-NEXT:    [[TMP4065:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4066:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5481:%.*]] = icmp eq i64 [[TMP4065]], [[TMP4066]]
// SIMD-ONLY0-NEXT:    [[CONV5482:%.*]] = zext i1 [[CMP5481]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5483:%.*]] = sext i32 [[CONV5482]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5483]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4067:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5484:%.*]] = icmp ne i64 [[TMP4067]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5484]], label [[IF_THEN5485:%.*]], label [[IF_ELSE5486:%.*]]
// SIMD-ONLY0:       if.then5485:
// SIMD-ONLY0-NEXT:    [[TMP4068:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4068]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5487:%.*]]
// SIMD-ONLY0:       if.else5486:
// SIMD-ONLY0-NEXT:    [[TMP4069:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4069]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5487]]
// SIMD-ONLY0:       if.end5487:
// SIMD-ONLY0-NEXT:    [[TMP4070:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4070]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4071:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4072:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5488:%.*]] = icmp ugt i64 [[TMP4071]], [[TMP4072]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5488]], label [[IF_THEN5490:%.*]], label [[IF_END5491:%.*]]
// SIMD-ONLY0:       if.then5490:
// SIMD-ONLY0-NEXT:    [[TMP4073:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4073]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5491]]
// SIMD-ONLY0:       if.end5491:
// SIMD-ONLY0-NEXT:    [[TMP4074:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4074]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4075:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4076:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5492:%.*]] = icmp ugt i64 [[TMP4075]], [[TMP4076]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5492]], label [[IF_THEN5494:%.*]], label [[IF_END5495:%.*]]
// SIMD-ONLY0:       if.then5494:
// SIMD-ONLY0-NEXT:    [[TMP4077:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4077]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5495]]
// SIMD-ONLY0:       if.end5495:
// SIMD-ONLY0-NEXT:    [[TMP4078:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4078]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4079:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4080:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5496:%.*]] = icmp ult i64 [[TMP4079]], [[TMP4080]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5496]], label [[IF_THEN5498:%.*]], label [[IF_END5499:%.*]]
// SIMD-ONLY0:       if.then5498:
// SIMD-ONLY0-NEXT:    [[TMP4081:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4081]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5499]]
// SIMD-ONLY0:       if.end5499:
// SIMD-ONLY0-NEXT:    [[TMP4082:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4082]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4083:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4084:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5500:%.*]] = icmp ult i64 [[TMP4083]], [[TMP4084]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5500]], label [[IF_THEN5502:%.*]], label [[IF_END5503:%.*]]
// SIMD-ONLY0:       if.then5502:
// SIMD-ONLY0-NEXT:    [[TMP4085:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4085]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5503]]
// SIMD-ONLY0:       if.end5503:
// SIMD-ONLY0-NEXT:    [[TMP4086:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4086]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4087:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4088:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5504:%.*]] = icmp eq i64 [[TMP4087]], [[TMP4088]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5504]], label [[IF_THEN5506:%.*]], label [[IF_END5507:%.*]]
// SIMD-ONLY0:       if.then5506:
// SIMD-ONLY0-NEXT:    [[TMP4089:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4089]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5507]]
// SIMD-ONLY0:       if.end5507:
// SIMD-ONLY0-NEXT:    [[TMP4090:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4090]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4091:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4092:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5508:%.*]] = icmp eq i64 [[TMP4091]], [[TMP4092]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5508]], label [[IF_THEN5510:%.*]], label [[IF_END5511:%.*]]
// SIMD-ONLY0:       if.then5510:
// SIMD-ONLY0-NEXT:    [[TMP4093:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4093]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5511]]
// SIMD-ONLY0:       if.end5511:
// SIMD-ONLY0-NEXT:    [[TMP4094:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4095:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5512:%.*]] = icmp ugt i64 [[TMP4094]], [[TMP4095]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5512]], label [[IF_THEN5514:%.*]], label [[IF_END5515:%.*]]
// SIMD-ONLY0:       if.then5514:
// SIMD-ONLY0-NEXT:    [[TMP4096:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4096]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5515]]
// SIMD-ONLY0:       if.end5515:
// SIMD-ONLY0-NEXT:    [[TMP4097:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4097]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4098:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4099:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5516:%.*]] = icmp ugt i64 [[TMP4098]], [[TMP4099]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5516]], label [[IF_THEN5518:%.*]], label [[IF_END5519:%.*]]
// SIMD-ONLY0:       if.then5518:
// SIMD-ONLY0-NEXT:    [[TMP4100:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4100]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5519]]
// SIMD-ONLY0:       if.end5519:
// SIMD-ONLY0-NEXT:    [[TMP4101:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4101]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4102:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4103:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5520:%.*]] = icmp ult i64 [[TMP4102]], [[TMP4103]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5520]], label [[IF_THEN5522:%.*]], label [[IF_END5523:%.*]]
// SIMD-ONLY0:       if.then5522:
// SIMD-ONLY0-NEXT:    [[TMP4104:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4104]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5523]]
// SIMD-ONLY0:       if.end5523:
// SIMD-ONLY0-NEXT:    [[TMP4105:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4105]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4106:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4107:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5524:%.*]] = icmp ult i64 [[TMP4106]], [[TMP4107]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5524]], label [[IF_THEN5526:%.*]], label [[IF_END5527:%.*]]
// SIMD-ONLY0:       if.then5526:
// SIMD-ONLY0-NEXT:    [[TMP4108:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4108]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5527]]
// SIMD-ONLY0:       if.end5527:
// SIMD-ONLY0-NEXT:    [[TMP4109:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4109]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4110:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4111:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5528:%.*]] = icmp eq i64 [[TMP4110]], [[TMP4111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5528]], label [[IF_THEN5530:%.*]], label [[IF_END5531:%.*]]
// SIMD-ONLY0:       if.then5530:
// SIMD-ONLY0-NEXT:    [[TMP4112:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4112]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5531]]
// SIMD-ONLY0:       if.end5531:
// SIMD-ONLY0-NEXT:    [[TMP4113:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4113]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4114:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4115:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5532:%.*]] = icmp eq i64 [[TMP4114]], [[TMP4115]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5532]], label [[IF_THEN5534:%.*]], label [[IF_END5535:%.*]]
// SIMD-ONLY0:       if.then5534:
// SIMD-ONLY0-NEXT:    [[TMP4116:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4116]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5535]]
// SIMD-ONLY0:       if.end5535:
// SIMD-ONLY0-NEXT:    [[TMP4117:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4117]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4118:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4119:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5536:%.*]] = icmp eq i64 [[TMP4118]], [[TMP4119]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5536]], label [[IF_THEN5538:%.*]], label [[IF_ELSE5539:%.*]]
// SIMD-ONLY0:       if.then5538:
// SIMD-ONLY0-NEXT:    [[TMP4120:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4120]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5540:%.*]]
// SIMD-ONLY0:       if.else5539:
// SIMD-ONLY0-NEXT:    [[TMP4121:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4121]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5540]]
// SIMD-ONLY0:       if.end5540:
// SIMD-ONLY0-NEXT:    [[TMP4122:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4123:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5541:%.*]] = icmp eq i64 [[TMP4122]], [[TMP4123]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5541]], label [[IF_THEN5543:%.*]], label [[IF_ELSE5544:%.*]]
// SIMD-ONLY0:       if.then5543:
// SIMD-ONLY0-NEXT:    [[TMP4124:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4124]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5545:%.*]]
// SIMD-ONLY0:       if.else5544:
// SIMD-ONLY0-NEXT:    [[TMP4125:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4125]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5545]]
// SIMD-ONLY0:       if.end5545:
// SIMD-ONLY0-NEXT:    [[TMP4126:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4127:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5546:%.*]] = icmp eq i64 [[TMP4126]], [[TMP4127]]
// SIMD-ONLY0-NEXT:    [[CONV5547:%.*]] = zext i1 [[CMP5546]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5548:%.*]] = sext i32 [[CONV5547]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5548]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4128:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5549:%.*]] = icmp ne i64 [[TMP4128]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5549]], label [[IF_THEN5550:%.*]], label [[IF_END5551:%.*]]
// SIMD-ONLY0:       if.then5550:
// SIMD-ONLY0-NEXT:    [[TMP4129:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4129]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5551]]
// SIMD-ONLY0:       if.end5551:
// SIMD-ONLY0-NEXT:    [[TMP4130:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4131:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5552:%.*]] = icmp eq i64 [[TMP4130]], [[TMP4131]]
// SIMD-ONLY0-NEXT:    [[CONV5553:%.*]] = zext i1 [[CMP5552]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5554:%.*]] = sext i32 [[CONV5553]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5554]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4132:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5555:%.*]] = icmp ne i64 [[TMP4132]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5555]], label [[IF_THEN5556:%.*]], label [[IF_END5557:%.*]]
// SIMD-ONLY0:       if.then5556:
// SIMD-ONLY0-NEXT:    [[TMP4133:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4133]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5557]]
// SIMD-ONLY0:       if.end5557:
// SIMD-ONLY0-NEXT:    [[TMP4134:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4135:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5558:%.*]] = icmp eq i64 [[TMP4134]], [[TMP4135]]
// SIMD-ONLY0-NEXT:    [[CONV5559:%.*]] = zext i1 [[CMP5558]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5560:%.*]] = sext i32 [[CONV5559]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5560]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4136:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5561:%.*]] = icmp ne i64 [[TMP4136]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5561]], label [[IF_THEN5562:%.*]], label [[IF_ELSE5563:%.*]]
// SIMD-ONLY0:       if.then5562:
// SIMD-ONLY0-NEXT:    [[TMP4137:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4137]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5564:%.*]]
// SIMD-ONLY0:       if.else5563:
// SIMD-ONLY0-NEXT:    [[TMP4138:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4138]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5564]]
// SIMD-ONLY0:       if.end5564:
// SIMD-ONLY0-NEXT:    [[TMP4139:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4140:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5565:%.*]] = icmp eq i64 [[TMP4139]], [[TMP4140]]
// SIMD-ONLY0-NEXT:    [[CONV5566:%.*]] = zext i1 [[CMP5565]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5567:%.*]] = sext i32 [[CONV5566]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5567]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4141:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5568:%.*]] = icmp ne i64 [[TMP4141]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5568]], label [[IF_THEN5569:%.*]], label [[IF_ELSE5570:%.*]]
// SIMD-ONLY0:       if.then5569:
// SIMD-ONLY0-NEXT:    [[TMP4142:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4142]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5571:%.*]]
// SIMD-ONLY0:       if.else5570:
// SIMD-ONLY0-NEXT:    [[TMP4143:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4143]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5571]]
// SIMD-ONLY0:       if.end5571:
// SIMD-ONLY0-NEXT:    [[TMP4144:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4144]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4145:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4146:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5572:%.*]] = icmp ugt i64 [[TMP4145]], [[TMP4146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5572]], label [[IF_THEN5574:%.*]], label [[IF_END5575:%.*]]
// SIMD-ONLY0:       if.then5574:
// SIMD-ONLY0-NEXT:    [[TMP4147:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4147]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5575]]
// SIMD-ONLY0:       if.end5575:
// SIMD-ONLY0-NEXT:    [[TMP4148:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4148]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4149:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4150:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5576:%.*]] = icmp ugt i64 [[TMP4149]], [[TMP4150]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5576]], label [[IF_THEN5578:%.*]], label [[IF_END5579:%.*]]
// SIMD-ONLY0:       if.then5578:
// SIMD-ONLY0-NEXT:    [[TMP4151:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4151]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5579]]
// SIMD-ONLY0:       if.end5579:
// SIMD-ONLY0-NEXT:    [[TMP4152:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4152]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4153:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4154:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5580:%.*]] = icmp ult i64 [[TMP4153]], [[TMP4154]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5580]], label [[IF_THEN5582:%.*]], label [[IF_END5583:%.*]]
// SIMD-ONLY0:       if.then5582:
// SIMD-ONLY0-NEXT:    [[TMP4155:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4155]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5583]]
// SIMD-ONLY0:       if.end5583:
// SIMD-ONLY0-NEXT:    [[TMP4156:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4156]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4157:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4158:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5584:%.*]] = icmp ult i64 [[TMP4157]], [[TMP4158]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5584]], label [[IF_THEN5586:%.*]], label [[IF_END5587:%.*]]
// SIMD-ONLY0:       if.then5586:
// SIMD-ONLY0-NEXT:    [[TMP4159:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4159]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5587]]
// SIMD-ONLY0:       if.end5587:
// SIMD-ONLY0-NEXT:    [[TMP4160:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4160]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4161:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4162:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5588:%.*]] = icmp eq i64 [[TMP4161]], [[TMP4162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5588]], label [[IF_THEN5590:%.*]], label [[IF_END5591:%.*]]
// SIMD-ONLY0:       if.then5590:
// SIMD-ONLY0-NEXT:    [[TMP4163:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4163]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5591]]
// SIMD-ONLY0:       if.end5591:
// SIMD-ONLY0-NEXT:    [[TMP4164:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4164]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4165:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4166:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5592:%.*]] = icmp eq i64 [[TMP4165]], [[TMP4166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5592]], label [[IF_THEN5594:%.*]], label [[IF_END5595:%.*]]
// SIMD-ONLY0:       if.then5594:
// SIMD-ONLY0-NEXT:    [[TMP4167:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4167]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5595]]
// SIMD-ONLY0:       if.end5595:
// SIMD-ONLY0-NEXT:    [[TMP4168:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4169:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5596:%.*]] = icmp ugt i64 [[TMP4168]], [[TMP4169]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5596]], label [[IF_THEN5598:%.*]], label [[IF_END5599:%.*]]
// SIMD-ONLY0:       if.then5598:
// SIMD-ONLY0-NEXT:    [[TMP4170:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4170]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5599]]
// SIMD-ONLY0:       if.end5599:
// SIMD-ONLY0-NEXT:    [[TMP4171:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4171]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4172:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4173:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5600:%.*]] = icmp ugt i64 [[TMP4172]], [[TMP4173]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5600]], label [[IF_THEN5602:%.*]], label [[IF_END5603:%.*]]
// SIMD-ONLY0:       if.then5602:
// SIMD-ONLY0-NEXT:    [[TMP4174:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4174]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5603]]
// SIMD-ONLY0:       if.end5603:
// SIMD-ONLY0-NEXT:    [[TMP4175:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4175]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4176:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4177:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5604:%.*]] = icmp ult i64 [[TMP4176]], [[TMP4177]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5604]], label [[IF_THEN5606:%.*]], label [[IF_END5607:%.*]]
// SIMD-ONLY0:       if.then5606:
// SIMD-ONLY0-NEXT:    [[TMP4178:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4178]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5607]]
// SIMD-ONLY0:       if.end5607:
// SIMD-ONLY0-NEXT:    [[TMP4179:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4179]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4180:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4181:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5608:%.*]] = icmp ult i64 [[TMP4180]], [[TMP4181]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5608]], label [[IF_THEN5610:%.*]], label [[IF_END5611:%.*]]
// SIMD-ONLY0:       if.then5610:
// SIMD-ONLY0-NEXT:    [[TMP4182:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4182]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5611]]
// SIMD-ONLY0:       if.end5611:
// SIMD-ONLY0-NEXT:    [[TMP4183:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4183]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4184:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4185:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5612:%.*]] = icmp eq i64 [[TMP4184]], [[TMP4185]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5612]], label [[IF_THEN5614:%.*]], label [[IF_END5615:%.*]]
// SIMD-ONLY0:       if.then5614:
// SIMD-ONLY0-NEXT:    [[TMP4186:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4186]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5615]]
// SIMD-ONLY0:       if.end5615:
// SIMD-ONLY0-NEXT:    [[TMP4187:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4187]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4188:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4189:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5616:%.*]] = icmp eq i64 [[TMP4188]], [[TMP4189]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5616]], label [[IF_THEN5618:%.*]], label [[IF_END5619:%.*]]
// SIMD-ONLY0:       if.then5618:
// SIMD-ONLY0-NEXT:    [[TMP4190:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4190]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5619]]
// SIMD-ONLY0:       if.end5619:
// SIMD-ONLY0-NEXT:    [[TMP4191:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4191]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4192:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4193:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5620:%.*]] = icmp eq i64 [[TMP4192]], [[TMP4193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5620]], label [[IF_THEN5622:%.*]], label [[IF_ELSE5623:%.*]]
// SIMD-ONLY0:       if.then5622:
// SIMD-ONLY0-NEXT:    [[TMP4194:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4194]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5624:%.*]]
// SIMD-ONLY0:       if.else5623:
// SIMD-ONLY0-NEXT:    [[TMP4195:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4195]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5624]]
// SIMD-ONLY0:       if.end5624:
// SIMD-ONLY0-NEXT:    [[TMP4196:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4197:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5625:%.*]] = icmp eq i64 [[TMP4196]], [[TMP4197]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5625]], label [[IF_THEN5627:%.*]], label [[IF_ELSE5628:%.*]]
// SIMD-ONLY0:       if.then5627:
// SIMD-ONLY0-NEXT:    [[TMP4198:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4198]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5629:%.*]]
// SIMD-ONLY0:       if.else5628:
// SIMD-ONLY0-NEXT:    [[TMP4199:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4199]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5629]]
// SIMD-ONLY0:       if.end5629:
// SIMD-ONLY0-NEXT:    [[TMP4200:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4201:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5630:%.*]] = icmp eq i64 [[TMP4200]], [[TMP4201]]
// SIMD-ONLY0-NEXT:    [[CONV5631:%.*]] = zext i1 [[CMP5630]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5632:%.*]] = sext i32 [[CONV5631]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5632]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4202:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5633:%.*]] = icmp ne i64 [[TMP4202]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5633]], label [[IF_THEN5634:%.*]], label [[IF_END5635:%.*]]
// SIMD-ONLY0:       if.then5634:
// SIMD-ONLY0-NEXT:    [[TMP4203:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4203]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5635]]
// SIMD-ONLY0:       if.end5635:
// SIMD-ONLY0-NEXT:    [[TMP4204:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4205:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5636:%.*]] = icmp eq i64 [[TMP4204]], [[TMP4205]]
// SIMD-ONLY0-NEXT:    [[CONV5637:%.*]] = zext i1 [[CMP5636]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5638:%.*]] = sext i32 [[CONV5637]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5638]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4206:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5639:%.*]] = icmp ne i64 [[TMP4206]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5639]], label [[IF_THEN5640:%.*]], label [[IF_END5641:%.*]]
// SIMD-ONLY0:       if.then5640:
// SIMD-ONLY0-NEXT:    [[TMP4207:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4207]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5641]]
// SIMD-ONLY0:       if.end5641:
// SIMD-ONLY0-NEXT:    [[TMP4208:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4209:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5642:%.*]] = icmp eq i64 [[TMP4208]], [[TMP4209]]
// SIMD-ONLY0-NEXT:    [[CONV5643:%.*]] = zext i1 [[CMP5642]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5644:%.*]] = sext i32 [[CONV5643]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5644]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4210:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5645:%.*]] = icmp ne i64 [[TMP4210]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5645]], label [[IF_THEN5646:%.*]], label [[IF_ELSE5647:%.*]]
// SIMD-ONLY0:       if.then5646:
// SIMD-ONLY0-NEXT:    [[TMP4211:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4211]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5648:%.*]]
// SIMD-ONLY0:       if.else5647:
// SIMD-ONLY0-NEXT:    [[TMP4212:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4212]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5648]]
// SIMD-ONLY0:       if.end5648:
// SIMD-ONLY0-NEXT:    [[TMP4213:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4214:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5649:%.*]] = icmp eq i64 [[TMP4213]], [[TMP4214]]
// SIMD-ONLY0-NEXT:    [[CONV5650:%.*]] = zext i1 [[CMP5649]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5651:%.*]] = sext i32 [[CONV5650]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5651]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4215:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5652:%.*]] = icmp ne i64 [[TMP4215]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5652]], label [[IF_THEN5653:%.*]], label [[IF_ELSE5654:%.*]]
// SIMD-ONLY0:       if.then5653:
// SIMD-ONLY0-NEXT:    [[TMP4216:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4216]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5655:%.*]]
// SIMD-ONLY0:       if.else5654:
// SIMD-ONLY0-NEXT:    [[TMP4217:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4217]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5655]]
// SIMD-ONLY0:       if.end5655:
// SIMD-ONLY0-NEXT:    [[TMP4218:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4218]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4219:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4220:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5656:%.*]] = icmp ugt i64 [[TMP4219]], [[TMP4220]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5656]], label [[IF_THEN5658:%.*]], label [[IF_END5659:%.*]]
// SIMD-ONLY0:       if.then5658:
// SIMD-ONLY0-NEXT:    [[TMP4221:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4221]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5659]]
// SIMD-ONLY0:       if.end5659:
// SIMD-ONLY0-NEXT:    [[TMP4222:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4222]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4223:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4224:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5660:%.*]] = icmp ugt i64 [[TMP4223]], [[TMP4224]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5660]], label [[IF_THEN5662:%.*]], label [[IF_END5663:%.*]]
// SIMD-ONLY0:       if.then5662:
// SIMD-ONLY0-NEXT:    [[TMP4225:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4225]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5663]]
// SIMD-ONLY0:       if.end5663:
// SIMD-ONLY0-NEXT:    [[TMP4226:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4226]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4227:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4228:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5664:%.*]] = icmp ult i64 [[TMP4227]], [[TMP4228]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5664]], label [[IF_THEN5666:%.*]], label [[IF_END5667:%.*]]
// SIMD-ONLY0:       if.then5666:
// SIMD-ONLY0-NEXT:    [[TMP4229:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4229]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5667]]
// SIMD-ONLY0:       if.end5667:
// SIMD-ONLY0-NEXT:    [[TMP4230:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4230]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4231:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4232:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5668:%.*]] = icmp ult i64 [[TMP4231]], [[TMP4232]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5668]], label [[IF_THEN5670:%.*]], label [[IF_END5671:%.*]]
// SIMD-ONLY0:       if.then5670:
// SIMD-ONLY0-NEXT:    [[TMP4233:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4233]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5671]]
// SIMD-ONLY0:       if.end5671:
// SIMD-ONLY0-NEXT:    [[TMP4234:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4234]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4235:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4236:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5672:%.*]] = icmp eq i64 [[TMP4235]], [[TMP4236]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5672]], label [[IF_THEN5674:%.*]], label [[IF_END5675:%.*]]
// SIMD-ONLY0:       if.then5674:
// SIMD-ONLY0-NEXT:    [[TMP4237:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4237]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5675]]
// SIMD-ONLY0:       if.end5675:
// SIMD-ONLY0-NEXT:    [[TMP4238:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4238]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4239:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4240:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5676:%.*]] = icmp eq i64 [[TMP4239]], [[TMP4240]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5676]], label [[IF_THEN5678:%.*]], label [[IF_END5679:%.*]]
// SIMD-ONLY0:       if.then5678:
// SIMD-ONLY0-NEXT:    [[TMP4241:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4241]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5679]]
// SIMD-ONLY0:       if.end5679:
// SIMD-ONLY0-NEXT:    [[TMP4242:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4243:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5680:%.*]] = icmp ugt i64 [[TMP4242]], [[TMP4243]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5680]], label [[IF_THEN5682:%.*]], label [[IF_END5683:%.*]]
// SIMD-ONLY0:       if.then5682:
// SIMD-ONLY0-NEXT:    [[TMP4244:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4244]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5683]]
// SIMD-ONLY0:       if.end5683:
// SIMD-ONLY0-NEXT:    [[TMP4245:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4245]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4246:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4247:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5684:%.*]] = icmp ugt i64 [[TMP4246]], [[TMP4247]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5684]], label [[IF_THEN5686:%.*]], label [[IF_END5687:%.*]]
// SIMD-ONLY0:       if.then5686:
// SIMD-ONLY0-NEXT:    [[TMP4248:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4248]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5687]]
// SIMD-ONLY0:       if.end5687:
// SIMD-ONLY0-NEXT:    [[TMP4249:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4249]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4250:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4251:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5688:%.*]] = icmp ult i64 [[TMP4250]], [[TMP4251]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5688]], label [[IF_THEN5690:%.*]], label [[IF_END5691:%.*]]
// SIMD-ONLY0:       if.then5690:
// SIMD-ONLY0-NEXT:    [[TMP4252:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4252]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5691]]
// SIMD-ONLY0:       if.end5691:
// SIMD-ONLY0-NEXT:    [[TMP4253:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4253]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4254:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4255:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5692:%.*]] = icmp ult i64 [[TMP4254]], [[TMP4255]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5692]], label [[IF_THEN5694:%.*]], label [[IF_END5695:%.*]]
// SIMD-ONLY0:       if.then5694:
// SIMD-ONLY0-NEXT:    [[TMP4256:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4256]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5695]]
// SIMD-ONLY0:       if.end5695:
// SIMD-ONLY0-NEXT:    [[TMP4257:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4257]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4258:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4259:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5696:%.*]] = icmp eq i64 [[TMP4258]], [[TMP4259]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5696]], label [[IF_THEN5698:%.*]], label [[IF_END5699:%.*]]
// SIMD-ONLY0:       if.then5698:
// SIMD-ONLY0-NEXT:    [[TMP4260:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4260]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5699]]
// SIMD-ONLY0:       if.end5699:
// SIMD-ONLY0-NEXT:    [[TMP4261:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4261]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4262:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4263:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5700:%.*]] = icmp eq i64 [[TMP4262]], [[TMP4263]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5700]], label [[IF_THEN5702:%.*]], label [[IF_END5703:%.*]]
// SIMD-ONLY0:       if.then5702:
// SIMD-ONLY0-NEXT:    [[TMP4264:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4264]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5703]]
// SIMD-ONLY0:       if.end5703:
// SIMD-ONLY0-NEXT:    [[TMP4265:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4265]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4266:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4267:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5704:%.*]] = icmp eq i64 [[TMP4266]], [[TMP4267]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5704]], label [[IF_THEN5706:%.*]], label [[IF_ELSE5707:%.*]]
// SIMD-ONLY0:       if.then5706:
// SIMD-ONLY0-NEXT:    [[TMP4268:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4268]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5708:%.*]]
// SIMD-ONLY0:       if.else5707:
// SIMD-ONLY0-NEXT:    [[TMP4269:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4269]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5708]]
// SIMD-ONLY0:       if.end5708:
// SIMD-ONLY0-NEXT:    [[TMP4270:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4271:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5709:%.*]] = icmp eq i64 [[TMP4270]], [[TMP4271]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5709]], label [[IF_THEN5711:%.*]], label [[IF_ELSE5712:%.*]]
// SIMD-ONLY0:       if.then5711:
// SIMD-ONLY0-NEXT:    [[TMP4272:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4272]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5713:%.*]]
// SIMD-ONLY0:       if.else5712:
// SIMD-ONLY0-NEXT:    [[TMP4273:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4273]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5713]]
// SIMD-ONLY0:       if.end5713:
// SIMD-ONLY0-NEXT:    [[TMP4274:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4275:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5714:%.*]] = icmp eq i64 [[TMP4274]], [[TMP4275]]
// SIMD-ONLY0-NEXT:    [[CONV5715:%.*]] = zext i1 [[CMP5714]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5716:%.*]] = sext i32 [[CONV5715]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5716]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4276:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5717:%.*]] = icmp ne i64 [[TMP4276]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5717]], label [[IF_THEN5718:%.*]], label [[IF_END5719:%.*]]
// SIMD-ONLY0:       if.then5718:
// SIMD-ONLY0-NEXT:    [[TMP4277:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4277]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5719]]
// SIMD-ONLY0:       if.end5719:
// SIMD-ONLY0-NEXT:    [[TMP4278:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4279:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5720:%.*]] = icmp eq i64 [[TMP4278]], [[TMP4279]]
// SIMD-ONLY0-NEXT:    [[CONV5721:%.*]] = zext i1 [[CMP5720]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5722:%.*]] = sext i32 [[CONV5721]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5722]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4280:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5723:%.*]] = icmp ne i64 [[TMP4280]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5723]], label [[IF_THEN5724:%.*]], label [[IF_END5725:%.*]]
// SIMD-ONLY0:       if.then5724:
// SIMD-ONLY0-NEXT:    [[TMP4281:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4281]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5725]]
// SIMD-ONLY0:       if.end5725:
// SIMD-ONLY0-NEXT:    [[TMP4282:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4283:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5726:%.*]] = icmp eq i64 [[TMP4282]], [[TMP4283]]
// SIMD-ONLY0-NEXT:    [[CONV5727:%.*]] = zext i1 [[CMP5726]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5728:%.*]] = sext i32 [[CONV5727]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5728]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4284:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5729:%.*]] = icmp ne i64 [[TMP4284]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5729]], label [[IF_THEN5730:%.*]], label [[IF_ELSE5731:%.*]]
// SIMD-ONLY0:       if.then5730:
// SIMD-ONLY0-NEXT:    [[TMP4285:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4285]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5732:%.*]]
// SIMD-ONLY0:       if.else5731:
// SIMD-ONLY0-NEXT:    [[TMP4286:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4286]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5732]]
// SIMD-ONLY0:       if.end5732:
// SIMD-ONLY0-NEXT:    [[TMP4287:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4288:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5733:%.*]] = icmp eq i64 [[TMP4287]], [[TMP4288]]
// SIMD-ONLY0-NEXT:    [[CONV5734:%.*]] = zext i1 [[CMP5733]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5735:%.*]] = sext i32 [[CONV5734]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5735]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4289:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5736:%.*]] = icmp ne i64 [[TMP4289]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5736]], label [[IF_THEN5737:%.*]], label [[IF_ELSE5738:%.*]]
// SIMD-ONLY0:       if.then5737:
// SIMD-ONLY0-NEXT:    [[TMP4290:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4290]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5739:%.*]]
// SIMD-ONLY0:       if.else5738:
// SIMD-ONLY0-NEXT:    [[TMP4291:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4291]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5739]]
// SIMD-ONLY0:       if.end5739:
// SIMD-ONLY0-NEXT:    [[TMP4292:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4292]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4293:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4294:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5740:%.*]] = icmp ugt i64 [[TMP4293]], [[TMP4294]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5740]], label [[IF_THEN5742:%.*]], label [[IF_END5743:%.*]]
// SIMD-ONLY0:       if.then5742:
// SIMD-ONLY0-NEXT:    [[TMP4295:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4295]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5743]]
// SIMD-ONLY0:       if.end5743:
// SIMD-ONLY0-NEXT:    [[TMP4296:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4296]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4297:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4298:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5744:%.*]] = icmp ugt i64 [[TMP4297]], [[TMP4298]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5744]], label [[IF_THEN5746:%.*]], label [[IF_END5747:%.*]]
// SIMD-ONLY0:       if.then5746:
// SIMD-ONLY0-NEXT:    [[TMP4299:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4299]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5747]]
// SIMD-ONLY0:       if.end5747:
// SIMD-ONLY0-NEXT:    [[TMP4300:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4300]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4301:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4302:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5748:%.*]] = icmp ult i64 [[TMP4301]], [[TMP4302]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5748]], label [[IF_THEN5750:%.*]], label [[IF_END5751:%.*]]
// SIMD-ONLY0:       if.then5750:
// SIMD-ONLY0-NEXT:    [[TMP4303:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4303]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5751]]
// SIMD-ONLY0:       if.end5751:
// SIMD-ONLY0-NEXT:    [[TMP4304:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4304]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4305:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4306:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5752:%.*]] = icmp ult i64 [[TMP4305]], [[TMP4306]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5752]], label [[IF_THEN5754:%.*]], label [[IF_END5755:%.*]]
// SIMD-ONLY0:       if.then5754:
// SIMD-ONLY0-NEXT:    [[TMP4307:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4307]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5755]]
// SIMD-ONLY0:       if.end5755:
// SIMD-ONLY0-NEXT:    [[TMP4308:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4308]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4309:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4310:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5756:%.*]] = icmp eq i64 [[TMP4309]], [[TMP4310]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5756]], label [[IF_THEN5758:%.*]], label [[IF_END5759:%.*]]
// SIMD-ONLY0:       if.then5758:
// SIMD-ONLY0-NEXT:    [[TMP4311:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4311]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5759]]
// SIMD-ONLY0:       if.end5759:
// SIMD-ONLY0-NEXT:    [[TMP4312:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4312]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4313:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4314:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5760:%.*]] = icmp eq i64 [[TMP4313]], [[TMP4314]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5760]], label [[IF_THEN5762:%.*]], label [[IF_END5763:%.*]]
// SIMD-ONLY0:       if.then5762:
// SIMD-ONLY0-NEXT:    [[TMP4315:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4315]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5763]]
// SIMD-ONLY0:       if.end5763:
// SIMD-ONLY0-NEXT:    [[TMP4316:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4317:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5764:%.*]] = icmp ugt i64 [[TMP4316]], [[TMP4317]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5764]], label [[IF_THEN5766:%.*]], label [[IF_END5767:%.*]]
// SIMD-ONLY0:       if.then5766:
// SIMD-ONLY0-NEXT:    [[TMP4318:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4318]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5767]]
// SIMD-ONLY0:       if.end5767:
// SIMD-ONLY0-NEXT:    [[TMP4319:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4319]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4320:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4321:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5768:%.*]] = icmp ugt i64 [[TMP4320]], [[TMP4321]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5768]], label [[IF_THEN5770:%.*]], label [[IF_END5771:%.*]]
// SIMD-ONLY0:       if.then5770:
// SIMD-ONLY0-NEXT:    [[TMP4322:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4322]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5771]]
// SIMD-ONLY0:       if.end5771:
// SIMD-ONLY0-NEXT:    [[TMP4323:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4323]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4324:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4325:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5772:%.*]] = icmp ult i64 [[TMP4324]], [[TMP4325]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5772]], label [[IF_THEN5774:%.*]], label [[IF_END5775:%.*]]
// SIMD-ONLY0:       if.then5774:
// SIMD-ONLY0-NEXT:    [[TMP4326:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4326]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5775]]
// SIMD-ONLY0:       if.end5775:
// SIMD-ONLY0-NEXT:    [[TMP4327:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4327]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4328:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4329:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5776:%.*]] = icmp ult i64 [[TMP4328]], [[TMP4329]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5776]], label [[IF_THEN5778:%.*]], label [[IF_END5779:%.*]]
// SIMD-ONLY0:       if.then5778:
// SIMD-ONLY0-NEXT:    [[TMP4330:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4330]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5779]]
// SIMD-ONLY0:       if.end5779:
// SIMD-ONLY0-NEXT:    [[TMP4331:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4331]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4332:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4333:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5780:%.*]] = icmp eq i64 [[TMP4332]], [[TMP4333]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5780]], label [[IF_THEN5782:%.*]], label [[IF_END5783:%.*]]
// SIMD-ONLY0:       if.then5782:
// SIMD-ONLY0-NEXT:    [[TMP4334:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4334]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5783]]
// SIMD-ONLY0:       if.end5783:
// SIMD-ONLY0-NEXT:    [[TMP4335:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4335]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4336:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4337:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5784:%.*]] = icmp eq i64 [[TMP4336]], [[TMP4337]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5784]], label [[IF_THEN5786:%.*]], label [[IF_END5787:%.*]]
// SIMD-ONLY0:       if.then5786:
// SIMD-ONLY0-NEXT:    [[TMP4338:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4338]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5787]]
// SIMD-ONLY0:       if.end5787:
// SIMD-ONLY0-NEXT:    [[TMP4339:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4339]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4340:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4341:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5788:%.*]] = icmp eq i64 [[TMP4340]], [[TMP4341]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5788]], label [[IF_THEN5790:%.*]], label [[IF_ELSE5791:%.*]]
// SIMD-ONLY0:       if.then5790:
// SIMD-ONLY0-NEXT:    [[TMP4342:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4342]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5792:%.*]]
// SIMD-ONLY0:       if.else5791:
// SIMD-ONLY0-NEXT:    [[TMP4343:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4343]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5792]]
// SIMD-ONLY0:       if.end5792:
// SIMD-ONLY0-NEXT:    [[TMP4344:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4345:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5793:%.*]] = icmp eq i64 [[TMP4344]], [[TMP4345]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5793]], label [[IF_THEN5795:%.*]], label [[IF_ELSE5796:%.*]]
// SIMD-ONLY0:       if.then5795:
// SIMD-ONLY0-NEXT:    [[TMP4346:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4346]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5797:%.*]]
// SIMD-ONLY0:       if.else5796:
// SIMD-ONLY0-NEXT:    [[TMP4347:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4347]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5797]]
// SIMD-ONLY0:       if.end5797:
// SIMD-ONLY0-NEXT:    [[TMP4348:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4349:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5798:%.*]] = icmp eq i64 [[TMP4348]], [[TMP4349]]
// SIMD-ONLY0-NEXT:    [[CONV5799:%.*]] = zext i1 [[CMP5798]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5800:%.*]] = sext i32 [[CONV5799]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5800]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4350:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5801:%.*]] = icmp ne i64 [[TMP4350]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5801]], label [[IF_THEN5802:%.*]], label [[IF_END5803:%.*]]
// SIMD-ONLY0:       if.then5802:
// SIMD-ONLY0-NEXT:    [[TMP4351:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4351]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5803]]
// SIMD-ONLY0:       if.end5803:
// SIMD-ONLY0-NEXT:    [[TMP4352:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4353:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5804:%.*]] = icmp eq i64 [[TMP4352]], [[TMP4353]]
// SIMD-ONLY0-NEXT:    [[CONV5805:%.*]] = zext i1 [[CMP5804]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5806:%.*]] = sext i32 [[CONV5805]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5806]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4354:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5807:%.*]] = icmp ne i64 [[TMP4354]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5807]], label [[IF_THEN5808:%.*]], label [[IF_END5809:%.*]]
// SIMD-ONLY0:       if.then5808:
// SIMD-ONLY0-NEXT:    [[TMP4355:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4355]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5809]]
// SIMD-ONLY0:       if.end5809:
// SIMD-ONLY0-NEXT:    [[TMP4356:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4357:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5810:%.*]] = icmp eq i64 [[TMP4356]], [[TMP4357]]
// SIMD-ONLY0-NEXT:    [[CONV5811:%.*]] = zext i1 [[CMP5810]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5812:%.*]] = sext i32 [[CONV5811]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5812]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4358:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5813:%.*]] = icmp ne i64 [[TMP4358]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5813]], label [[IF_THEN5814:%.*]], label [[IF_ELSE5815:%.*]]
// SIMD-ONLY0:       if.then5814:
// SIMD-ONLY0-NEXT:    [[TMP4359:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4359]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5816:%.*]]
// SIMD-ONLY0:       if.else5815:
// SIMD-ONLY0-NEXT:    [[TMP4360:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4360]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5816]]
// SIMD-ONLY0:       if.end5816:
// SIMD-ONLY0-NEXT:    [[TMP4361:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4362:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5817:%.*]] = icmp eq i64 [[TMP4361]], [[TMP4362]]
// SIMD-ONLY0-NEXT:    [[CONV5818:%.*]] = zext i1 [[CMP5817]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5819:%.*]] = sext i32 [[CONV5818]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5819]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4363:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5820:%.*]] = icmp ne i64 [[TMP4363]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5820]], label [[IF_THEN5821:%.*]], label [[IF_ELSE5822:%.*]]
// SIMD-ONLY0:       if.then5821:
// SIMD-ONLY0-NEXT:    [[TMP4364:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4364]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5823:%.*]]
// SIMD-ONLY0:       if.else5822:
// SIMD-ONLY0-NEXT:    [[TMP4365:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4365]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5823]]
// SIMD-ONLY0:       if.end5823:
// SIMD-ONLY0-NEXT:    [[TMP4366:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4366]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4367:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4368:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5824:%.*]] = icmp ugt i64 [[TMP4367]], [[TMP4368]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5824]], label [[IF_THEN5826:%.*]], label [[IF_END5827:%.*]]
// SIMD-ONLY0:       if.then5826:
// SIMD-ONLY0-NEXT:    [[TMP4369:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4369]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5827]]
// SIMD-ONLY0:       if.end5827:
// SIMD-ONLY0-NEXT:    [[TMP4370:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4370]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4371:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4372:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5828:%.*]] = icmp ugt i64 [[TMP4371]], [[TMP4372]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5828]], label [[IF_THEN5830:%.*]], label [[IF_END5831:%.*]]
// SIMD-ONLY0:       if.then5830:
// SIMD-ONLY0-NEXT:    [[TMP4373:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4373]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5831]]
// SIMD-ONLY0:       if.end5831:
// SIMD-ONLY0-NEXT:    [[TMP4374:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4374]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4375:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4376:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5832:%.*]] = icmp ult i64 [[TMP4375]], [[TMP4376]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5832]], label [[IF_THEN5834:%.*]], label [[IF_END5835:%.*]]
// SIMD-ONLY0:       if.then5834:
// SIMD-ONLY0-NEXT:    [[TMP4377:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4377]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5835]]
// SIMD-ONLY0:       if.end5835:
// SIMD-ONLY0-NEXT:    [[TMP4378:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4378]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4379:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4380:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5836:%.*]] = icmp ult i64 [[TMP4379]], [[TMP4380]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5836]], label [[IF_THEN5838:%.*]], label [[IF_END5839:%.*]]
// SIMD-ONLY0:       if.then5838:
// SIMD-ONLY0-NEXT:    [[TMP4381:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4381]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5839]]
// SIMD-ONLY0:       if.end5839:
// SIMD-ONLY0-NEXT:    [[TMP4382:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4382]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4383:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4384:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5840:%.*]] = icmp eq i64 [[TMP4383]], [[TMP4384]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5840]], label [[IF_THEN5842:%.*]], label [[IF_END5843:%.*]]
// SIMD-ONLY0:       if.then5842:
// SIMD-ONLY0-NEXT:    [[TMP4385:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4385]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5843]]
// SIMD-ONLY0:       if.end5843:
// SIMD-ONLY0-NEXT:    [[TMP4386:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4386]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4387:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4388:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5844:%.*]] = icmp eq i64 [[TMP4387]], [[TMP4388]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5844]], label [[IF_THEN5846:%.*]], label [[IF_END5847:%.*]]
// SIMD-ONLY0:       if.then5846:
// SIMD-ONLY0-NEXT:    [[TMP4389:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4389]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5847]]
// SIMD-ONLY0:       if.end5847:
// SIMD-ONLY0-NEXT:    [[TMP4390:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4391:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5848:%.*]] = icmp ugt i64 [[TMP4390]], [[TMP4391]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5848]], label [[IF_THEN5850:%.*]], label [[IF_END5851:%.*]]
// SIMD-ONLY0:       if.then5850:
// SIMD-ONLY0-NEXT:    [[TMP4392:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4392]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5851]]
// SIMD-ONLY0:       if.end5851:
// SIMD-ONLY0-NEXT:    [[TMP4393:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4393]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4394:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4395:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5852:%.*]] = icmp ugt i64 [[TMP4394]], [[TMP4395]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5852]], label [[IF_THEN5854:%.*]], label [[IF_END5855:%.*]]
// SIMD-ONLY0:       if.then5854:
// SIMD-ONLY0-NEXT:    [[TMP4396:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4396]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5855]]
// SIMD-ONLY0:       if.end5855:
// SIMD-ONLY0-NEXT:    [[TMP4397:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4397]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4398:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4399:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5856:%.*]] = icmp ult i64 [[TMP4398]], [[TMP4399]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5856]], label [[IF_THEN5858:%.*]], label [[IF_END5859:%.*]]
// SIMD-ONLY0:       if.then5858:
// SIMD-ONLY0-NEXT:    [[TMP4400:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4400]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5859]]
// SIMD-ONLY0:       if.end5859:
// SIMD-ONLY0-NEXT:    [[TMP4401:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4401]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4402:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4403:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5860:%.*]] = icmp ult i64 [[TMP4402]], [[TMP4403]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5860]], label [[IF_THEN5862:%.*]], label [[IF_END5863:%.*]]
// SIMD-ONLY0:       if.then5862:
// SIMD-ONLY0-NEXT:    [[TMP4404:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4404]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5863]]
// SIMD-ONLY0:       if.end5863:
// SIMD-ONLY0-NEXT:    [[TMP4405:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4405]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4406:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4407:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5864:%.*]] = icmp eq i64 [[TMP4406]], [[TMP4407]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5864]], label [[IF_THEN5866:%.*]], label [[IF_END5867:%.*]]
// SIMD-ONLY0:       if.then5866:
// SIMD-ONLY0-NEXT:    [[TMP4408:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4408]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5867]]
// SIMD-ONLY0:       if.end5867:
// SIMD-ONLY0-NEXT:    [[TMP4409:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4409]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4410:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4411:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5868:%.*]] = icmp eq i64 [[TMP4410]], [[TMP4411]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5868]], label [[IF_THEN5870:%.*]], label [[IF_END5871:%.*]]
// SIMD-ONLY0:       if.then5870:
// SIMD-ONLY0-NEXT:    [[TMP4412:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4412]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5871]]
// SIMD-ONLY0:       if.end5871:
// SIMD-ONLY0-NEXT:    [[TMP4413:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4413]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4414:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4415:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5872:%.*]] = icmp eq i64 [[TMP4414]], [[TMP4415]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5872]], label [[IF_THEN5874:%.*]], label [[IF_ELSE5875:%.*]]
// SIMD-ONLY0:       if.then5874:
// SIMD-ONLY0-NEXT:    [[TMP4416:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4416]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5876:%.*]]
// SIMD-ONLY0:       if.else5875:
// SIMD-ONLY0-NEXT:    [[TMP4417:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4417]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5876]]
// SIMD-ONLY0:       if.end5876:
// SIMD-ONLY0-NEXT:    [[TMP4418:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4419:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5877:%.*]] = icmp eq i64 [[TMP4418]], [[TMP4419]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5877]], label [[IF_THEN5879:%.*]], label [[IF_ELSE5880:%.*]]
// SIMD-ONLY0:       if.then5879:
// SIMD-ONLY0-NEXT:    [[TMP4420:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4420]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5881:%.*]]
// SIMD-ONLY0:       if.else5880:
// SIMD-ONLY0-NEXT:    [[TMP4421:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4421]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5881]]
// SIMD-ONLY0:       if.end5881:
// SIMD-ONLY0-NEXT:    [[TMP4422:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4423:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5882:%.*]] = icmp eq i64 [[TMP4422]], [[TMP4423]]
// SIMD-ONLY0-NEXT:    [[CONV5883:%.*]] = zext i1 [[CMP5882]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5884:%.*]] = sext i32 [[CONV5883]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5884]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4424:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5885:%.*]] = icmp ne i64 [[TMP4424]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5885]], label [[IF_THEN5886:%.*]], label [[IF_END5887:%.*]]
// SIMD-ONLY0:       if.then5886:
// SIMD-ONLY0-NEXT:    [[TMP4425:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4425]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5887]]
// SIMD-ONLY0:       if.end5887:
// SIMD-ONLY0-NEXT:    [[TMP4426:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4427:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5888:%.*]] = icmp eq i64 [[TMP4426]], [[TMP4427]]
// SIMD-ONLY0-NEXT:    [[CONV5889:%.*]] = zext i1 [[CMP5888]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5890:%.*]] = sext i32 [[CONV5889]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5890]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4428:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5891:%.*]] = icmp ne i64 [[TMP4428]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5891]], label [[IF_THEN5892:%.*]], label [[IF_END5893:%.*]]
// SIMD-ONLY0:       if.then5892:
// SIMD-ONLY0-NEXT:    [[TMP4429:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4429]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5893]]
// SIMD-ONLY0:       if.end5893:
// SIMD-ONLY0-NEXT:    [[TMP4430:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4431:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5894:%.*]] = icmp eq i64 [[TMP4430]], [[TMP4431]]
// SIMD-ONLY0-NEXT:    [[CONV5895:%.*]] = zext i1 [[CMP5894]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5896:%.*]] = sext i32 [[CONV5895]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5896]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4432:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5897:%.*]] = icmp ne i64 [[TMP4432]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5897]], label [[IF_THEN5898:%.*]], label [[IF_ELSE5899:%.*]]
// SIMD-ONLY0:       if.then5898:
// SIMD-ONLY0-NEXT:    [[TMP4433:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4433]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5900:%.*]]
// SIMD-ONLY0:       if.else5899:
// SIMD-ONLY0-NEXT:    [[TMP4434:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4434]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5900]]
// SIMD-ONLY0:       if.end5900:
// SIMD-ONLY0-NEXT:    [[TMP4435:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4436:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5901:%.*]] = icmp eq i64 [[TMP4435]], [[TMP4436]]
// SIMD-ONLY0-NEXT:    [[CONV5902:%.*]] = zext i1 [[CMP5901]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5903:%.*]] = sext i32 [[CONV5902]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5903]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4437:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5904:%.*]] = icmp ne i64 [[TMP4437]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5904]], label [[IF_THEN5905:%.*]], label [[IF_ELSE5906:%.*]]
// SIMD-ONLY0:       if.then5905:
// SIMD-ONLY0-NEXT:    [[TMP4438:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4438]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5907:%.*]]
// SIMD-ONLY0:       if.else5906:
// SIMD-ONLY0-NEXT:    [[TMP4439:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4439]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5907]]
// SIMD-ONLY0:       if.end5907:
// SIMD-ONLY0-NEXT:    [[TMP4440:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4440]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4441:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4442:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5908:%.*]] = fcmp ogt float [[TMP4441]], [[TMP4442]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5908]], label [[IF_THEN5910:%.*]], label [[IF_END5911:%.*]]
// SIMD-ONLY0:       if.then5910:
// SIMD-ONLY0-NEXT:    [[TMP4443:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4443]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5911]]
// SIMD-ONLY0:       if.end5911:
// SIMD-ONLY0-NEXT:    [[TMP4444:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4444]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4445:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4446:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5912:%.*]] = fcmp ogt float [[TMP4445]], [[TMP4446]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5912]], label [[IF_THEN5914:%.*]], label [[IF_END5915:%.*]]
// SIMD-ONLY0:       if.then5914:
// SIMD-ONLY0-NEXT:    [[TMP4447:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4447]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5915]]
// SIMD-ONLY0:       if.end5915:
// SIMD-ONLY0-NEXT:    [[TMP4448:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4448]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4449:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4450:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5916:%.*]] = fcmp olt float [[TMP4449]], [[TMP4450]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5916]], label [[IF_THEN5918:%.*]], label [[IF_END5919:%.*]]
// SIMD-ONLY0:       if.then5918:
// SIMD-ONLY0-NEXT:    [[TMP4451:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4451]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5919]]
// SIMD-ONLY0:       if.end5919:
// SIMD-ONLY0-NEXT:    [[TMP4452:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4452]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4453:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4454:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5920:%.*]] = fcmp olt float [[TMP4453]], [[TMP4454]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5920]], label [[IF_THEN5922:%.*]], label [[IF_END5923:%.*]]
// SIMD-ONLY0:       if.then5922:
// SIMD-ONLY0-NEXT:    [[TMP4455:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4455]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5923]]
// SIMD-ONLY0:       if.end5923:
// SIMD-ONLY0-NEXT:    [[TMP4456:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4456]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4457:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4458:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5924:%.*]] = fcmp oeq float [[TMP4457]], [[TMP4458]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5924]], label [[IF_THEN5926:%.*]], label [[IF_END5927:%.*]]
// SIMD-ONLY0:       if.then5926:
// SIMD-ONLY0-NEXT:    [[TMP4459:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4459]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5927]]
// SIMD-ONLY0:       if.end5927:
// SIMD-ONLY0-NEXT:    [[TMP4460:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4460]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4461:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4462:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5928:%.*]] = fcmp oeq float [[TMP4461]], [[TMP4462]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5928]], label [[IF_THEN5930:%.*]], label [[IF_END5931:%.*]]
// SIMD-ONLY0:       if.then5930:
// SIMD-ONLY0-NEXT:    [[TMP4463:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4463]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5931]]
// SIMD-ONLY0:       if.end5931:
// SIMD-ONLY0-NEXT:    [[TMP4464:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4465:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5932:%.*]] = fcmp ogt float [[TMP4464]], [[TMP4465]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5932]], label [[IF_THEN5934:%.*]], label [[IF_END5935:%.*]]
// SIMD-ONLY0:       if.then5934:
// SIMD-ONLY0-NEXT:    [[TMP4466:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4466]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5935]]
// SIMD-ONLY0:       if.end5935:
// SIMD-ONLY0-NEXT:    [[TMP4467:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4467]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4468:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4469:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5936:%.*]] = fcmp ogt float [[TMP4468]], [[TMP4469]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5936]], label [[IF_THEN5938:%.*]], label [[IF_END5939:%.*]]
// SIMD-ONLY0:       if.then5938:
// SIMD-ONLY0-NEXT:    [[TMP4470:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4470]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5939]]
// SIMD-ONLY0:       if.end5939:
// SIMD-ONLY0-NEXT:    [[TMP4471:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4471]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4472:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4473:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5940:%.*]] = fcmp olt float [[TMP4472]], [[TMP4473]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5940]], label [[IF_THEN5942:%.*]], label [[IF_END5943:%.*]]
// SIMD-ONLY0:       if.then5942:
// SIMD-ONLY0-NEXT:    [[TMP4474:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4474]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5943]]
// SIMD-ONLY0:       if.end5943:
// SIMD-ONLY0-NEXT:    [[TMP4475:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4475]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4476:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4477:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5944:%.*]] = fcmp olt float [[TMP4476]], [[TMP4477]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5944]], label [[IF_THEN5946:%.*]], label [[IF_END5947:%.*]]
// SIMD-ONLY0:       if.then5946:
// SIMD-ONLY0-NEXT:    [[TMP4478:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4478]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5947]]
// SIMD-ONLY0:       if.end5947:
// SIMD-ONLY0-NEXT:    [[TMP4479:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4479]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4480:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4481:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5948:%.*]] = fcmp oeq float [[TMP4480]], [[TMP4481]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5948]], label [[IF_THEN5950:%.*]], label [[IF_END5951:%.*]]
// SIMD-ONLY0:       if.then5950:
// SIMD-ONLY0-NEXT:    [[TMP4482:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4482]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5951]]
// SIMD-ONLY0:       if.end5951:
// SIMD-ONLY0-NEXT:    [[TMP4483:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4483]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4484:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4485:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5952:%.*]] = fcmp oeq float [[TMP4484]], [[TMP4485]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5952]], label [[IF_THEN5954:%.*]], label [[IF_END5955:%.*]]
// SIMD-ONLY0:       if.then5954:
// SIMD-ONLY0-NEXT:    [[TMP4486:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4486]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5955]]
// SIMD-ONLY0:       if.end5955:
// SIMD-ONLY0-NEXT:    [[TMP4487:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4487]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4488:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4489:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5956:%.*]] = fcmp oeq float [[TMP4488]], [[TMP4489]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5956]], label [[IF_THEN5958:%.*]], label [[IF_ELSE5959:%.*]]
// SIMD-ONLY0:       if.then5958:
// SIMD-ONLY0-NEXT:    [[TMP4490:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4490]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5960:%.*]]
// SIMD-ONLY0:       if.else5959:
// SIMD-ONLY0-NEXT:    [[TMP4491:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4491]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5960]]
// SIMD-ONLY0:       if.end5960:
// SIMD-ONLY0-NEXT:    [[TMP4492:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4493:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5961:%.*]] = fcmp oeq float [[TMP4492]], [[TMP4493]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5961]], label [[IF_THEN5963:%.*]], label [[IF_ELSE5964:%.*]]
// SIMD-ONLY0:       if.then5963:
// SIMD-ONLY0-NEXT:    [[TMP4494:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4494]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5965:%.*]]
// SIMD-ONLY0:       if.else5964:
// SIMD-ONLY0-NEXT:    [[TMP4495:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4495]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5965]]
// SIMD-ONLY0:       if.end5965:
// SIMD-ONLY0-NEXT:    [[TMP4496:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4497:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5966:%.*]] = fcmp oeq float [[TMP4496]], [[TMP4497]]
// SIMD-ONLY0-NEXT:    [[CONV5967:%.*]] = zext i1 [[CMP5966]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV5967]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4498:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL5968:%.*]] = icmp ne i32 [[TMP4498]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5968]], label [[IF_THEN5969:%.*]], label [[IF_END5970:%.*]]
// SIMD-ONLY0:       if.then5969:
// SIMD-ONLY0-NEXT:    [[TMP4499:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4499]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5970]]
// SIMD-ONLY0:       if.end5970:
// SIMD-ONLY0-NEXT:    [[TMP4500:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4501:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5971:%.*]] = fcmp oeq float [[TMP4500]], [[TMP4501]]
// SIMD-ONLY0-NEXT:    [[CONV5972:%.*]] = zext i1 [[CMP5971]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV5972]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4502:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL5973:%.*]] = icmp ne i32 [[TMP4502]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5973]], label [[IF_THEN5974:%.*]], label [[IF_END5975:%.*]]
// SIMD-ONLY0:       if.then5974:
// SIMD-ONLY0-NEXT:    [[TMP4503:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4503]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5975]]
// SIMD-ONLY0:       if.end5975:
// SIMD-ONLY0-NEXT:    [[TMP4504:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4505:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5976:%.*]] = fcmp oeq float [[TMP4504]], [[TMP4505]]
// SIMD-ONLY0-NEXT:    [[CONV5977:%.*]] = zext i1 [[CMP5976]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV5977]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4506:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL5978:%.*]] = icmp ne i32 [[TMP4506]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5978]], label [[IF_THEN5979:%.*]], label [[IF_ELSE5980:%.*]]
// SIMD-ONLY0:       if.then5979:
// SIMD-ONLY0-NEXT:    [[TMP4507:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4507]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5981:%.*]]
// SIMD-ONLY0:       if.else5980:
// SIMD-ONLY0-NEXT:    [[TMP4508:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4508]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5981]]
// SIMD-ONLY0:       if.end5981:
// SIMD-ONLY0-NEXT:    [[TMP4509:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4510:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5982:%.*]] = fcmp oeq float [[TMP4509]], [[TMP4510]]
// SIMD-ONLY0-NEXT:    [[CONV5983:%.*]] = zext i1 [[CMP5982]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV5983]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4511:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL5984:%.*]] = icmp ne i32 [[TMP4511]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5984]], label [[IF_THEN5985:%.*]], label [[IF_ELSE5986:%.*]]
// SIMD-ONLY0:       if.then5985:
// SIMD-ONLY0-NEXT:    [[TMP4512:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4512]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5987:%.*]]
// SIMD-ONLY0:       if.else5986:
// SIMD-ONLY0-NEXT:    [[TMP4513:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4513]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5987]]
// SIMD-ONLY0:       if.end5987:
// SIMD-ONLY0-NEXT:    [[TMP4514:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4514]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4515:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4516:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5988:%.*]] = fcmp ogt float [[TMP4515]], [[TMP4516]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5988]], label [[IF_THEN5990:%.*]], label [[IF_END5991:%.*]]
// SIMD-ONLY0:       if.then5990:
// SIMD-ONLY0-NEXT:    [[TMP4517:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4517]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5991]]
// SIMD-ONLY0:       if.end5991:
// SIMD-ONLY0-NEXT:    [[TMP4518:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4518]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4519:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4520:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5992:%.*]] = fcmp ogt float [[TMP4519]], [[TMP4520]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5992]], label [[IF_THEN5994:%.*]], label [[IF_END5995:%.*]]
// SIMD-ONLY0:       if.then5994:
// SIMD-ONLY0-NEXT:    [[TMP4521:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4521]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5995]]
// SIMD-ONLY0:       if.end5995:
// SIMD-ONLY0-NEXT:    [[TMP4522:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4522]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4523:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4524:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5996:%.*]] = fcmp olt float [[TMP4523]], [[TMP4524]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5996]], label [[IF_THEN5998:%.*]], label [[IF_END5999:%.*]]
// SIMD-ONLY0:       if.then5998:
// SIMD-ONLY0-NEXT:    [[TMP4525:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4525]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5999]]
// SIMD-ONLY0:       if.end5999:
// SIMD-ONLY0-NEXT:    [[TMP4526:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4526]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4527:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4528:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6000:%.*]] = fcmp olt float [[TMP4527]], [[TMP4528]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6000]], label [[IF_THEN6002:%.*]], label [[IF_END6003:%.*]]
// SIMD-ONLY0:       if.then6002:
// SIMD-ONLY0-NEXT:    [[TMP4529:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4529]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6003]]
// SIMD-ONLY0:       if.end6003:
// SIMD-ONLY0-NEXT:    [[TMP4530:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4530]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4531:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4532:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6004:%.*]] = fcmp oeq float [[TMP4531]], [[TMP4532]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6004]], label [[IF_THEN6006:%.*]], label [[IF_END6007:%.*]]
// SIMD-ONLY0:       if.then6006:
// SIMD-ONLY0-NEXT:    [[TMP4533:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4533]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6007]]
// SIMD-ONLY0:       if.end6007:
// SIMD-ONLY0-NEXT:    [[TMP4534:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4534]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4535:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4536:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6008:%.*]] = fcmp oeq float [[TMP4535]], [[TMP4536]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6008]], label [[IF_THEN6010:%.*]], label [[IF_END6011:%.*]]
// SIMD-ONLY0:       if.then6010:
// SIMD-ONLY0-NEXT:    [[TMP4537:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4537]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6011]]
// SIMD-ONLY0:       if.end6011:
// SIMD-ONLY0-NEXT:    [[TMP4538:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4539:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6012:%.*]] = fcmp ogt float [[TMP4538]], [[TMP4539]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6012]], label [[IF_THEN6014:%.*]], label [[IF_END6015:%.*]]
// SIMD-ONLY0:       if.then6014:
// SIMD-ONLY0-NEXT:    [[TMP4540:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4540]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6015]]
// SIMD-ONLY0:       if.end6015:
// SIMD-ONLY0-NEXT:    [[TMP4541:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4541]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4542:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4543:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6016:%.*]] = fcmp ogt float [[TMP4542]], [[TMP4543]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6016]], label [[IF_THEN6018:%.*]], label [[IF_END6019:%.*]]
// SIMD-ONLY0:       if.then6018:
// SIMD-ONLY0-NEXT:    [[TMP4544:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4544]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6019]]
// SIMD-ONLY0:       if.end6019:
// SIMD-ONLY0-NEXT:    [[TMP4545:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4545]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4546:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4547:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6020:%.*]] = fcmp olt float [[TMP4546]], [[TMP4547]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6020]], label [[IF_THEN6022:%.*]], label [[IF_END6023:%.*]]
// SIMD-ONLY0:       if.then6022:
// SIMD-ONLY0-NEXT:    [[TMP4548:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4548]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6023]]
// SIMD-ONLY0:       if.end6023:
// SIMD-ONLY0-NEXT:    [[TMP4549:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4549]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4550:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4551:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6024:%.*]] = fcmp olt float [[TMP4550]], [[TMP4551]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6024]], label [[IF_THEN6026:%.*]], label [[IF_END6027:%.*]]
// SIMD-ONLY0:       if.then6026:
// SIMD-ONLY0-NEXT:    [[TMP4552:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4552]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6027]]
// SIMD-ONLY0:       if.end6027:
// SIMD-ONLY0-NEXT:    [[TMP4553:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4553]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4554:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4555:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6028:%.*]] = fcmp oeq float [[TMP4554]], [[TMP4555]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6028]], label [[IF_THEN6030:%.*]], label [[IF_END6031:%.*]]
// SIMD-ONLY0:       if.then6030:
// SIMD-ONLY0-NEXT:    [[TMP4556:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4556]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6031]]
// SIMD-ONLY0:       if.end6031:
// SIMD-ONLY0-NEXT:    [[TMP4557:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4557]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4558:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4559:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6032:%.*]] = fcmp oeq float [[TMP4558]], [[TMP4559]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6032]], label [[IF_THEN6034:%.*]], label [[IF_END6035:%.*]]
// SIMD-ONLY0:       if.then6034:
// SIMD-ONLY0-NEXT:    [[TMP4560:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4560]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6035]]
// SIMD-ONLY0:       if.end6035:
// SIMD-ONLY0-NEXT:    [[TMP4561:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4561]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4562:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4563:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6036:%.*]] = fcmp oeq float [[TMP4562]], [[TMP4563]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6036]], label [[IF_THEN6038:%.*]], label [[IF_ELSE6039:%.*]]
// SIMD-ONLY0:       if.then6038:
// SIMD-ONLY0-NEXT:    [[TMP4564:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4564]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6040:%.*]]
// SIMD-ONLY0:       if.else6039:
// SIMD-ONLY0-NEXT:    [[TMP4565:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4565]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6040]]
// SIMD-ONLY0:       if.end6040:
// SIMD-ONLY0-NEXT:    [[TMP4566:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4567:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6041:%.*]] = fcmp oeq float [[TMP4566]], [[TMP4567]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6041]], label [[IF_THEN6043:%.*]], label [[IF_ELSE6044:%.*]]
// SIMD-ONLY0:       if.then6043:
// SIMD-ONLY0-NEXT:    [[TMP4568:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4568]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6045:%.*]]
// SIMD-ONLY0:       if.else6044:
// SIMD-ONLY0-NEXT:    [[TMP4569:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4569]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6045]]
// SIMD-ONLY0:       if.end6045:
// SIMD-ONLY0-NEXT:    [[TMP4570:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4571:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6046:%.*]] = fcmp oeq float [[TMP4570]], [[TMP4571]]
// SIMD-ONLY0-NEXT:    [[CONV6047:%.*]] = zext i1 [[CMP6046]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6047]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4572:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6048:%.*]] = icmp ne i32 [[TMP4572]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6048]], label [[IF_THEN6049:%.*]], label [[IF_END6050:%.*]]
// SIMD-ONLY0:       if.then6049:
// SIMD-ONLY0-NEXT:    [[TMP4573:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4573]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6050]]
// SIMD-ONLY0:       if.end6050:
// SIMD-ONLY0-NEXT:    [[TMP4574:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4575:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6051:%.*]] = fcmp oeq float [[TMP4574]], [[TMP4575]]
// SIMD-ONLY0-NEXT:    [[CONV6052:%.*]] = zext i1 [[CMP6051]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6052]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4576:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6053:%.*]] = icmp ne i32 [[TMP4576]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6053]], label [[IF_THEN6054:%.*]], label [[IF_END6055:%.*]]
// SIMD-ONLY0:       if.then6054:
// SIMD-ONLY0-NEXT:    [[TMP4577:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4577]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6055]]
// SIMD-ONLY0:       if.end6055:
// SIMD-ONLY0-NEXT:    [[TMP4578:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4579:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6056:%.*]] = fcmp oeq float [[TMP4578]], [[TMP4579]]
// SIMD-ONLY0-NEXT:    [[CONV6057:%.*]] = zext i1 [[CMP6056]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6057]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4580:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6058:%.*]] = icmp ne i32 [[TMP4580]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6058]], label [[IF_THEN6059:%.*]], label [[IF_ELSE6060:%.*]]
// SIMD-ONLY0:       if.then6059:
// SIMD-ONLY0-NEXT:    [[TMP4581:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4581]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6061:%.*]]
// SIMD-ONLY0:       if.else6060:
// SIMD-ONLY0-NEXT:    [[TMP4582:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4582]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6061]]
// SIMD-ONLY0:       if.end6061:
// SIMD-ONLY0-NEXT:    [[TMP4583:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4584:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6062:%.*]] = fcmp oeq float [[TMP4583]], [[TMP4584]]
// SIMD-ONLY0-NEXT:    [[CONV6063:%.*]] = zext i1 [[CMP6062]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6063]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4585:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6064:%.*]] = icmp ne i32 [[TMP4585]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6064]], label [[IF_THEN6065:%.*]], label [[IF_ELSE6066:%.*]]
// SIMD-ONLY0:       if.then6065:
// SIMD-ONLY0-NEXT:    [[TMP4586:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4586]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6067:%.*]]
// SIMD-ONLY0:       if.else6066:
// SIMD-ONLY0-NEXT:    [[TMP4587:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4587]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6067]]
// SIMD-ONLY0:       if.end6067:
// SIMD-ONLY0-NEXT:    [[TMP4588:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4588]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4589:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4590:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6068:%.*]] = fcmp ogt float [[TMP4589]], [[TMP4590]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6068]], label [[IF_THEN6070:%.*]], label [[IF_END6071:%.*]]
// SIMD-ONLY0:       if.then6070:
// SIMD-ONLY0-NEXT:    [[TMP4591:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4591]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6071]]
// SIMD-ONLY0:       if.end6071:
// SIMD-ONLY0-NEXT:    [[TMP4592:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4592]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4593:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4594:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6072:%.*]] = fcmp ogt float [[TMP4593]], [[TMP4594]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6072]], label [[IF_THEN6074:%.*]], label [[IF_END6075:%.*]]
// SIMD-ONLY0:       if.then6074:
// SIMD-ONLY0-NEXT:    [[TMP4595:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4595]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6075]]
// SIMD-ONLY0:       if.end6075:
// SIMD-ONLY0-NEXT:    [[TMP4596:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4596]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4597:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4598:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6076:%.*]] = fcmp olt float [[TMP4597]], [[TMP4598]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6076]], label [[IF_THEN6078:%.*]], label [[IF_END6079:%.*]]
// SIMD-ONLY0:       if.then6078:
// SIMD-ONLY0-NEXT:    [[TMP4599:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4599]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6079]]
// SIMD-ONLY0:       if.end6079:
// SIMD-ONLY0-NEXT:    [[TMP4600:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4600]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4601:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4602:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6080:%.*]] = fcmp olt float [[TMP4601]], [[TMP4602]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6080]], label [[IF_THEN6082:%.*]], label [[IF_END6083:%.*]]
// SIMD-ONLY0:       if.then6082:
// SIMD-ONLY0-NEXT:    [[TMP4603:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4603]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6083]]
// SIMD-ONLY0:       if.end6083:
// SIMD-ONLY0-NEXT:    [[TMP4604:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4604]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4605:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4606:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6084:%.*]] = fcmp oeq float [[TMP4605]], [[TMP4606]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6084]], label [[IF_THEN6086:%.*]], label [[IF_END6087:%.*]]
// SIMD-ONLY0:       if.then6086:
// SIMD-ONLY0-NEXT:    [[TMP4607:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4607]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6087]]
// SIMD-ONLY0:       if.end6087:
// SIMD-ONLY0-NEXT:    [[TMP4608:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4608]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4609:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4610:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6088:%.*]] = fcmp oeq float [[TMP4609]], [[TMP4610]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6088]], label [[IF_THEN6090:%.*]], label [[IF_END6091:%.*]]
// SIMD-ONLY0:       if.then6090:
// SIMD-ONLY0-NEXT:    [[TMP4611:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4611]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6091]]
// SIMD-ONLY0:       if.end6091:
// SIMD-ONLY0-NEXT:    [[TMP4612:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4613:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6092:%.*]] = fcmp ogt float [[TMP4612]], [[TMP4613]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6092]], label [[IF_THEN6094:%.*]], label [[IF_END6095:%.*]]
// SIMD-ONLY0:       if.then6094:
// SIMD-ONLY0-NEXT:    [[TMP4614:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4614]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6095]]
// SIMD-ONLY0:       if.end6095:
// SIMD-ONLY0-NEXT:    [[TMP4615:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4615]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4616:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4617:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6096:%.*]] = fcmp ogt float [[TMP4616]], [[TMP4617]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6096]], label [[IF_THEN6098:%.*]], label [[IF_END6099:%.*]]
// SIMD-ONLY0:       if.then6098:
// SIMD-ONLY0-NEXT:    [[TMP4618:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4618]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6099]]
// SIMD-ONLY0:       if.end6099:
// SIMD-ONLY0-NEXT:    [[TMP4619:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4619]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4620:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4621:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6100:%.*]] = fcmp olt float [[TMP4620]], [[TMP4621]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6100]], label [[IF_THEN6102:%.*]], label [[IF_END6103:%.*]]
// SIMD-ONLY0:       if.then6102:
// SIMD-ONLY0-NEXT:    [[TMP4622:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4622]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6103]]
// SIMD-ONLY0:       if.end6103:
// SIMD-ONLY0-NEXT:    [[TMP4623:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4623]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4624:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4625:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6104:%.*]] = fcmp olt float [[TMP4624]], [[TMP4625]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6104]], label [[IF_THEN6106:%.*]], label [[IF_END6107:%.*]]
// SIMD-ONLY0:       if.then6106:
// SIMD-ONLY0-NEXT:    [[TMP4626:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4626]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6107]]
// SIMD-ONLY0:       if.end6107:
// SIMD-ONLY0-NEXT:    [[TMP4627:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4627]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4628:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4629:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6108:%.*]] = fcmp oeq float [[TMP4628]], [[TMP4629]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6108]], label [[IF_THEN6110:%.*]], label [[IF_END6111:%.*]]
// SIMD-ONLY0:       if.then6110:
// SIMD-ONLY0-NEXT:    [[TMP4630:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4630]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6111]]
// SIMD-ONLY0:       if.end6111:
// SIMD-ONLY0-NEXT:    [[TMP4631:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4631]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4632:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4633:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6112:%.*]] = fcmp oeq float [[TMP4632]], [[TMP4633]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6112]], label [[IF_THEN6114:%.*]], label [[IF_END6115:%.*]]
// SIMD-ONLY0:       if.then6114:
// SIMD-ONLY0-NEXT:    [[TMP4634:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4634]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6115]]
// SIMD-ONLY0:       if.end6115:
// SIMD-ONLY0-NEXT:    [[TMP4635:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4635]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4636:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4637:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6116:%.*]] = fcmp oeq float [[TMP4636]], [[TMP4637]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6116]], label [[IF_THEN6118:%.*]], label [[IF_ELSE6119:%.*]]
// SIMD-ONLY0:       if.then6118:
// SIMD-ONLY0-NEXT:    [[TMP4638:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4638]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6120:%.*]]
// SIMD-ONLY0:       if.else6119:
// SIMD-ONLY0-NEXT:    [[TMP4639:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4639]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6120]]
// SIMD-ONLY0:       if.end6120:
// SIMD-ONLY0-NEXT:    [[TMP4640:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4641:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6121:%.*]] = fcmp oeq float [[TMP4640]], [[TMP4641]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6121]], label [[IF_THEN6123:%.*]], label [[IF_ELSE6124:%.*]]
// SIMD-ONLY0:       if.then6123:
// SIMD-ONLY0-NEXT:    [[TMP4642:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4642]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6125:%.*]]
// SIMD-ONLY0:       if.else6124:
// SIMD-ONLY0-NEXT:    [[TMP4643:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4643]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6125]]
// SIMD-ONLY0:       if.end6125:
// SIMD-ONLY0-NEXT:    [[TMP4644:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4645:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6126:%.*]] = fcmp oeq float [[TMP4644]], [[TMP4645]]
// SIMD-ONLY0-NEXT:    [[CONV6127:%.*]] = zext i1 [[CMP6126]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6127]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4646:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6128:%.*]] = icmp ne i32 [[TMP4646]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6128]], label [[IF_THEN6129:%.*]], label [[IF_END6130:%.*]]
// SIMD-ONLY0:       if.then6129:
// SIMD-ONLY0-NEXT:    [[TMP4647:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4647]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6130]]
// SIMD-ONLY0:       if.end6130:
// SIMD-ONLY0-NEXT:    [[TMP4648:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4649:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6131:%.*]] = fcmp oeq float [[TMP4648]], [[TMP4649]]
// SIMD-ONLY0-NEXT:    [[CONV6132:%.*]] = zext i1 [[CMP6131]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6132]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4650:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6133:%.*]] = icmp ne i32 [[TMP4650]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6133]], label [[IF_THEN6134:%.*]], label [[IF_END6135:%.*]]
// SIMD-ONLY0:       if.then6134:
// SIMD-ONLY0-NEXT:    [[TMP4651:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4651]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6135]]
// SIMD-ONLY0:       if.end6135:
// SIMD-ONLY0-NEXT:    [[TMP4652:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4653:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6136:%.*]] = fcmp oeq float [[TMP4652]], [[TMP4653]]
// SIMD-ONLY0-NEXT:    [[CONV6137:%.*]] = zext i1 [[CMP6136]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6137]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4654:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6138:%.*]] = icmp ne i32 [[TMP4654]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6138]], label [[IF_THEN6139:%.*]], label [[IF_ELSE6140:%.*]]
// SIMD-ONLY0:       if.then6139:
// SIMD-ONLY0-NEXT:    [[TMP4655:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4655]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6141:%.*]]
// SIMD-ONLY0:       if.else6140:
// SIMD-ONLY0-NEXT:    [[TMP4656:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4656]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6141]]
// SIMD-ONLY0:       if.end6141:
// SIMD-ONLY0-NEXT:    [[TMP4657:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4658:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6142:%.*]] = fcmp oeq float [[TMP4657]], [[TMP4658]]
// SIMD-ONLY0-NEXT:    [[CONV6143:%.*]] = zext i1 [[CMP6142]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6143]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4659:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6144:%.*]] = icmp ne i32 [[TMP4659]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6144]], label [[IF_THEN6145:%.*]], label [[IF_ELSE6146:%.*]]
// SIMD-ONLY0:       if.then6145:
// SIMD-ONLY0-NEXT:    [[TMP4660:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4660]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6147:%.*]]
// SIMD-ONLY0:       if.else6146:
// SIMD-ONLY0-NEXT:    [[TMP4661:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4661]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6147]]
// SIMD-ONLY0:       if.end6147:
// SIMD-ONLY0-NEXT:    [[TMP4662:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4662]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4663:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4664:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6148:%.*]] = fcmp ogt float [[TMP4663]], [[TMP4664]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6148]], label [[IF_THEN6150:%.*]], label [[IF_END6151:%.*]]
// SIMD-ONLY0:       if.then6150:
// SIMD-ONLY0-NEXT:    [[TMP4665:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4665]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6151]]
// SIMD-ONLY0:       if.end6151:
// SIMD-ONLY0-NEXT:    [[TMP4666:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4666]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4667:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4668:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6152:%.*]] = fcmp ogt float [[TMP4667]], [[TMP4668]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6152]], label [[IF_THEN6154:%.*]], label [[IF_END6155:%.*]]
// SIMD-ONLY0:       if.then6154:
// SIMD-ONLY0-NEXT:    [[TMP4669:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4669]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6155]]
// SIMD-ONLY0:       if.end6155:
// SIMD-ONLY0-NEXT:    [[TMP4670:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4670]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4671:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4672:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6156:%.*]] = fcmp olt float [[TMP4671]], [[TMP4672]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6156]], label [[IF_THEN6158:%.*]], label [[IF_END6159:%.*]]
// SIMD-ONLY0:       if.then6158:
// SIMD-ONLY0-NEXT:    [[TMP4673:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4673]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6159]]
// SIMD-ONLY0:       if.end6159:
// SIMD-ONLY0-NEXT:    [[TMP4674:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4674]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4675:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4676:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6160:%.*]] = fcmp olt float [[TMP4675]], [[TMP4676]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6160]], label [[IF_THEN6162:%.*]], label [[IF_END6163:%.*]]
// SIMD-ONLY0:       if.then6162:
// SIMD-ONLY0-NEXT:    [[TMP4677:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4677]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6163]]
// SIMD-ONLY0:       if.end6163:
// SIMD-ONLY0-NEXT:    [[TMP4678:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4678]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4679:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4680:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6164:%.*]] = fcmp oeq float [[TMP4679]], [[TMP4680]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6164]], label [[IF_THEN6166:%.*]], label [[IF_END6167:%.*]]
// SIMD-ONLY0:       if.then6166:
// SIMD-ONLY0-NEXT:    [[TMP4681:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4681]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6167]]
// SIMD-ONLY0:       if.end6167:
// SIMD-ONLY0-NEXT:    [[TMP4682:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4682]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4683:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4684:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6168:%.*]] = fcmp oeq float [[TMP4683]], [[TMP4684]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6168]], label [[IF_THEN6170:%.*]], label [[IF_END6171:%.*]]
// SIMD-ONLY0:       if.then6170:
// SIMD-ONLY0-NEXT:    [[TMP4685:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4685]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6171]]
// SIMD-ONLY0:       if.end6171:
// SIMD-ONLY0-NEXT:    [[TMP4686:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4687:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6172:%.*]] = fcmp ogt float [[TMP4686]], [[TMP4687]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6172]], label [[IF_THEN6174:%.*]], label [[IF_END6175:%.*]]
// SIMD-ONLY0:       if.then6174:
// SIMD-ONLY0-NEXT:    [[TMP4688:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4688]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6175]]
// SIMD-ONLY0:       if.end6175:
// SIMD-ONLY0-NEXT:    [[TMP4689:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4689]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4690:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4691:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6176:%.*]] = fcmp ogt float [[TMP4690]], [[TMP4691]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6176]], label [[IF_THEN6178:%.*]], label [[IF_END6179:%.*]]
// SIMD-ONLY0:       if.then6178:
// SIMD-ONLY0-NEXT:    [[TMP4692:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4692]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6179]]
// SIMD-ONLY0:       if.end6179:
// SIMD-ONLY0-NEXT:    [[TMP4693:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4693]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4694:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4695:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6180:%.*]] = fcmp olt float [[TMP4694]], [[TMP4695]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6180]], label [[IF_THEN6182:%.*]], label [[IF_END6183:%.*]]
// SIMD-ONLY0:       if.then6182:
// SIMD-ONLY0-NEXT:    [[TMP4696:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4696]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6183]]
// SIMD-ONLY0:       if.end6183:
// SIMD-ONLY0-NEXT:    [[TMP4697:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4697]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4698:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4699:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6184:%.*]] = fcmp olt float [[TMP4698]], [[TMP4699]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6184]], label [[IF_THEN6186:%.*]], label [[IF_END6187:%.*]]
// SIMD-ONLY0:       if.then6186:
// SIMD-ONLY0-NEXT:    [[TMP4700:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4700]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6187]]
// SIMD-ONLY0:       if.end6187:
// SIMD-ONLY0-NEXT:    [[TMP4701:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4701]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4702:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4703:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6188:%.*]] = fcmp oeq float [[TMP4702]], [[TMP4703]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6188]], label [[IF_THEN6190:%.*]], label [[IF_END6191:%.*]]
// SIMD-ONLY0:       if.then6190:
// SIMD-ONLY0-NEXT:    [[TMP4704:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4704]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6191]]
// SIMD-ONLY0:       if.end6191:
// SIMD-ONLY0-NEXT:    [[TMP4705:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4705]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4706:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4707:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6192:%.*]] = fcmp oeq float [[TMP4706]], [[TMP4707]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6192]], label [[IF_THEN6194:%.*]], label [[IF_END6195:%.*]]
// SIMD-ONLY0:       if.then6194:
// SIMD-ONLY0-NEXT:    [[TMP4708:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4708]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6195]]
// SIMD-ONLY0:       if.end6195:
// SIMD-ONLY0-NEXT:    [[TMP4709:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4709]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4710:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4711:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6196:%.*]] = fcmp oeq float [[TMP4710]], [[TMP4711]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6196]], label [[IF_THEN6198:%.*]], label [[IF_ELSE6199:%.*]]
// SIMD-ONLY0:       if.then6198:
// SIMD-ONLY0-NEXT:    [[TMP4712:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4712]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6200:%.*]]
// SIMD-ONLY0:       if.else6199:
// SIMD-ONLY0-NEXT:    [[TMP4713:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4713]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6200]]
// SIMD-ONLY0:       if.end6200:
// SIMD-ONLY0-NEXT:    [[TMP4714:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4715:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6201:%.*]] = fcmp oeq float [[TMP4714]], [[TMP4715]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6201]], label [[IF_THEN6203:%.*]], label [[IF_ELSE6204:%.*]]
// SIMD-ONLY0:       if.then6203:
// SIMD-ONLY0-NEXT:    [[TMP4716:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4716]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6205:%.*]]
// SIMD-ONLY0:       if.else6204:
// SIMD-ONLY0-NEXT:    [[TMP4717:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4717]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6205]]
// SIMD-ONLY0:       if.end6205:
// SIMD-ONLY0-NEXT:    [[TMP4718:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4719:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6206:%.*]] = fcmp oeq float [[TMP4718]], [[TMP4719]]
// SIMD-ONLY0-NEXT:    [[CONV6207:%.*]] = zext i1 [[CMP6206]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6207]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4720:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6208:%.*]] = icmp ne i32 [[TMP4720]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6208]], label [[IF_THEN6209:%.*]], label [[IF_END6210:%.*]]
// SIMD-ONLY0:       if.then6209:
// SIMD-ONLY0-NEXT:    [[TMP4721:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4721]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6210]]
// SIMD-ONLY0:       if.end6210:
// SIMD-ONLY0-NEXT:    [[TMP4722:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4723:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6211:%.*]] = fcmp oeq float [[TMP4722]], [[TMP4723]]
// SIMD-ONLY0-NEXT:    [[CONV6212:%.*]] = zext i1 [[CMP6211]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6212]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4724:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6213:%.*]] = icmp ne i32 [[TMP4724]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6213]], label [[IF_THEN6214:%.*]], label [[IF_END6215:%.*]]
// SIMD-ONLY0:       if.then6214:
// SIMD-ONLY0-NEXT:    [[TMP4725:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4725]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6215]]
// SIMD-ONLY0:       if.end6215:
// SIMD-ONLY0-NEXT:    [[TMP4726:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4727:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6216:%.*]] = fcmp oeq float [[TMP4726]], [[TMP4727]]
// SIMD-ONLY0-NEXT:    [[CONV6217:%.*]] = zext i1 [[CMP6216]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6217]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4728:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6218:%.*]] = icmp ne i32 [[TMP4728]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6218]], label [[IF_THEN6219:%.*]], label [[IF_ELSE6220:%.*]]
// SIMD-ONLY0:       if.then6219:
// SIMD-ONLY0-NEXT:    [[TMP4729:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4729]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6221:%.*]]
// SIMD-ONLY0:       if.else6220:
// SIMD-ONLY0-NEXT:    [[TMP4730:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4730]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6221]]
// SIMD-ONLY0:       if.end6221:
// SIMD-ONLY0-NEXT:    [[TMP4731:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4732:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6222:%.*]] = fcmp oeq float [[TMP4731]], [[TMP4732]]
// SIMD-ONLY0-NEXT:    [[CONV6223:%.*]] = zext i1 [[CMP6222]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6223]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4733:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6224:%.*]] = icmp ne i32 [[TMP4733]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6224]], label [[IF_THEN6225:%.*]], label [[IF_ELSE6226:%.*]]
// SIMD-ONLY0:       if.then6225:
// SIMD-ONLY0-NEXT:    [[TMP4734:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4734]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6227:%.*]]
// SIMD-ONLY0:       if.else6226:
// SIMD-ONLY0-NEXT:    [[TMP4735:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4735]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6227]]
// SIMD-ONLY0:       if.end6227:
// SIMD-ONLY0-NEXT:    [[TMP4736:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4736]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4737:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4738:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6228:%.*]] = fcmp ogt float [[TMP4737]], [[TMP4738]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6228]], label [[IF_THEN6230:%.*]], label [[IF_END6231:%.*]]
// SIMD-ONLY0:       if.then6230:
// SIMD-ONLY0-NEXT:    [[TMP4739:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4739]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6231]]
// SIMD-ONLY0:       if.end6231:
// SIMD-ONLY0-NEXT:    [[TMP4740:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4740]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4741:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4742:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6232:%.*]] = fcmp ogt float [[TMP4741]], [[TMP4742]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6232]], label [[IF_THEN6234:%.*]], label [[IF_END6235:%.*]]
// SIMD-ONLY0:       if.then6234:
// SIMD-ONLY0-NEXT:    [[TMP4743:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4743]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6235]]
// SIMD-ONLY0:       if.end6235:
// SIMD-ONLY0-NEXT:    [[TMP4744:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4744]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4745:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4746:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6236:%.*]] = fcmp olt float [[TMP4745]], [[TMP4746]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6236]], label [[IF_THEN6238:%.*]], label [[IF_END6239:%.*]]
// SIMD-ONLY0:       if.then6238:
// SIMD-ONLY0-NEXT:    [[TMP4747:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4747]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6239]]
// SIMD-ONLY0:       if.end6239:
// SIMD-ONLY0-NEXT:    [[TMP4748:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4748]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4749:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4750:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6240:%.*]] = fcmp olt float [[TMP4749]], [[TMP4750]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6240]], label [[IF_THEN6242:%.*]], label [[IF_END6243:%.*]]
// SIMD-ONLY0:       if.then6242:
// SIMD-ONLY0-NEXT:    [[TMP4751:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4751]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6243]]
// SIMD-ONLY0:       if.end6243:
// SIMD-ONLY0-NEXT:    [[TMP4752:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4752]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4753:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4754:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6244:%.*]] = fcmp oeq float [[TMP4753]], [[TMP4754]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6244]], label [[IF_THEN6246:%.*]], label [[IF_END6247:%.*]]
// SIMD-ONLY0:       if.then6246:
// SIMD-ONLY0-NEXT:    [[TMP4755:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4755]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6247]]
// SIMD-ONLY0:       if.end6247:
// SIMD-ONLY0-NEXT:    [[TMP4756:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4756]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4757:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4758:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6248:%.*]] = fcmp oeq float [[TMP4757]], [[TMP4758]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6248]], label [[IF_THEN6250:%.*]], label [[IF_END6251:%.*]]
// SIMD-ONLY0:       if.then6250:
// SIMD-ONLY0-NEXT:    [[TMP4759:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4759]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6251]]
// SIMD-ONLY0:       if.end6251:
// SIMD-ONLY0-NEXT:    [[TMP4760:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4761:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6252:%.*]] = fcmp ogt float [[TMP4760]], [[TMP4761]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6252]], label [[IF_THEN6254:%.*]], label [[IF_END6255:%.*]]
// SIMD-ONLY0:       if.then6254:
// SIMD-ONLY0-NEXT:    [[TMP4762:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4762]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6255]]
// SIMD-ONLY0:       if.end6255:
// SIMD-ONLY0-NEXT:    [[TMP4763:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4763]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4764:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4765:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6256:%.*]] = fcmp ogt float [[TMP4764]], [[TMP4765]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6256]], label [[IF_THEN6258:%.*]], label [[IF_END6259:%.*]]
// SIMD-ONLY0:       if.then6258:
// SIMD-ONLY0-NEXT:    [[TMP4766:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4766]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6259]]
// SIMD-ONLY0:       if.end6259:
// SIMD-ONLY0-NEXT:    [[TMP4767:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4767]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4768:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4769:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6260:%.*]] = fcmp olt float [[TMP4768]], [[TMP4769]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6260]], label [[IF_THEN6262:%.*]], label [[IF_END6263:%.*]]
// SIMD-ONLY0:       if.then6262:
// SIMD-ONLY0-NEXT:    [[TMP4770:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4770]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6263]]
// SIMD-ONLY0:       if.end6263:
// SIMD-ONLY0-NEXT:    [[TMP4771:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4771]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4772:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4773:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6264:%.*]] = fcmp olt float [[TMP4772]], [[TMP4773]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6264]], label [[IF_THEN6266:%.*]], label [[IF_END6267:%.*]]
// SIMD-ONLY0:       if.then6266:
// SIMD-ONLY0-NEXT:    [[TMP4774:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4774]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6267]]
// SIMD-ONLY0:       if.end6267:
// SIMD-ONLY0-NEXT:    [[TMP4775:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4775]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4776:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4777:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6268:%.*]] = fcmp oeq float [[TMP4776]], [[TMP4777]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6268]], label [[IF_THEN6270:%.*]], label [[IF_END6271:%.*]]
// SIMD-ONLY0:       if.then6270:
// SIMD-ONLY0-NEXT:    [[TMP4778:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4778]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6271]]
// SIMD-ONLY0:       if.end6271:
// SIMD-ONLY0-NEXT:    [[TMP4779:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4779]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4780:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4781:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6272:%.*]] = fcmp oeq float [[TMP4780]], [[TMP4781]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6272]], label [[IF_THEN6274:%.*]], label [[IF_END6275:%.*]]
// SIMD-ONLY0:       if.then6274:
// SIMD-ONLY0-NEXT:    [[TMP4782:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4782]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6275]]
// SIMD-ONLY0:       if.end6275:
// SIMD-ONLY0-NEXT:    [[TMP4783:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4783]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4784:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4785:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6276:%.*]] = fcmp oeq float [[TMP4784]], [[TMP4785]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6276]], label [[IF_THEN6278:%.*]], label [[IF_ELSE6279:%.*]]
// SIMD-ONLY0:       if.then6278:
// SIMD-ONLY0-NEXT:    [[TMP4786:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4786]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6280:%.*]]
// SIMD-ONLY0:       if.else6279:
// SIMD-ONLY0-NEXT:    [[TMP4787:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4787]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6280]]
// SIMD-ONLY0:       if.end6280:
// SIMD-ONLY0-NEXT:    [[TMP4788:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4789:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6281:%.*]] = fcmp oeq float [[TMP4788]], [[TMP4789]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6281]], label [[IF_THEN6283:%.*]], label [[IF_ELSE6284:%.*]]
// SIMD-ONLY0:       if.then6283:
// SIMD-ONLY0-NEXT:    [[TMP4790:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4790]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6285:%.*]]
// SIMD-ONLY0:       if.else6284:
// SIMD-ONLY0-NEXT:    [[TMP4791:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4791]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6285]]
// SIMD-ONLY0:       if.end6285:
// SIMD-ONLY0-NEXT:    [[TMP4792:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4793:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6286:%.*]] = fcmp oeq float [[TMP4792]], [[TMP4793]]
// SIMD-ONLY0-NEXT:    [[CONV6287:%.*]] = zext i1 [[CMP6286]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6287]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4794:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6288:%.*]] = icmp ne i32 [[TMP4794]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6288]], label [[IF_THEN6289:%.*]], label [[IF_END6290:%.*]]
// SIMD-ONLY0:       if.then6289:
// SIMD-ONLY0-NEXT:    [[TMP4795:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4795]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6290]]
// SIMD-ONLY0:       if.end6290:
// SIMD-ONLY0-NEXT:    [[TMP4796:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4797:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6291:%.*]] = fcmp oeq float [[TMP4796]], [[TMP4797]]
// SIMD-ONLY0-NEXT:    [[CONV6292:%.*]] = zext i1 [[CMP6291]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6292]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4798:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6293:%.*]] = icmp ne i32 [[TMP4798]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6293]], label [[IF_THEN6294:%.*]], label [[IF_END6295:%.*]]
// SIMD-ONLY0:       if.then6294:
// SIMD-ONLY0-NEXT:    [[TMP4799:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4799]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6295]]
// SIMD-ONLY0:       if.end6295:
// SIMD-ONLY0-NEXT:    [[TMP4800:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4801:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6296:%.*]] = fcmp oeq float [[TMP4800]], [[TMP4801]]
// SIMD-ONLY0-NEXT:    [[CONV6297:%.*]] = zext i1 [[CMP6296]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6297]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4802:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6298:%.*]] = icmp ne i32 [[TMP4802]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6298]], label [[IF_THEN6299:%.*]], label [[IF_ELSE6300:%.*]]
// SIMD-ONLY0:       if.then6299:
// SIMD-ONLY0-NEXT:    [[TMP4803:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4803]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6301:%.*]]
// SIMD-ONLY0:       if.else6300:
// SIMD-ONLY0-NEXT:    [[TMP4804:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4804]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6301]]
// SIMD-ONLY0:       if.end6301:
// SIMD-ONLY0-NEXT:    [[TMP4805:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4806:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6302:%.*]] = fcmp oeq float [[TMP4805]], [[TMP4806]]
// SIMD-ONLY0-NEXT:    [[CONV6303:%.*]] = zext i1 [[CMP6302]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6303]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4807:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6304:%.*]] = icmp ne i32 [[TMP4807]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6304]], label [[IF_THEN6305:%.*]], label [[IF_ELSE6306:%.*]]
// SIMD-ONLY0:       if.then6305:
// SIMD-ONLY0-NEXT:    [[TMP4808:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4808]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6307:%.*]]
// SIMD-ONLY0:       if.else6306:
// SIMD-ONLY0-NEXT:    [[TMP4809:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4809]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6307]]
// SIMD-ONLY0:       if.end6307:
// SIMD-ONLY0-NEXT:    [[TMP4810:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4810]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4811:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4812:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6308:%.*]] = fcmp ogt float [[TMP4811]], [[TMP4812]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6308]], label [[IF_THEN6310:%.*]], label [[IF_END6311:%.*]]
// SIMD-ONLY0:       if.then6310:
// SIMD-ONLY0-NEXT:    [[TMP4813:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4813]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6311]]
// SIMD-ONLY0:       if.end6311:
// SIMD-ONLY0-NEXT:    [[TMP4814:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4814]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4815:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4816:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6312:%.*]] = fcmp ogt float [[TMP4815]], [[TMP4816]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6312]], label [[IF_THEN6314:%.*]], label [[IF_END6315:%.*]]
// SIMD-ONLY0:       if.then6314:
// SIMD-ONLY0-NEXT:    [[TMP4817:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4817]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6315]]
// SIMD-ONLY0:       if.end6315:
// SIMD-ONLY0-NEXT:    [[TMP4818:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4818]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4819:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4820:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6316:%.*]] = fcmp olt float [[TMP4819]], [[TMP4820]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6316]], label [[IF_THEN6318:%.*]], label [[IF_END6319:%.*]]
// SIMD-ONLY0:       if.then6318:
// SIMD-ONLY0-NEXT:    [[TMP4821:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4821]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6319]]
// SIMD-ONLY0:       if.end6319:
// SIMD-ONLY0-NEXT:    [[TMP4822:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4822]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4823:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4824:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6320:%.*]] = fcmp olt float [[TMP4823]], [[TMP4824]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6320]], label [[IF_THEN6322:%.*]], label [[IF_END6323:%.*]]
// SIMD-ONLY0:       if.then6322:
// SIMD-ONLY0-NEXT:    [[TMP4825:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4825]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6323]]
// SIMD-ONLY0:       if.end6323:
// SIMD-ONLY0-NEXT:    [[TMP4826:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4826]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4827:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4828:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6324:%.*]] = fcmp oeq float [[TMP4827]], [[TMP4828]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6324]], label [[IF_THEN6326:%.*]], label [[IF_END6327:%.*]]
// SIMD-ONLY0:       if.then6326:
// SIMD-ONLY0-NEXT:    [[TMP4829:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4829]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6327]]
// SIMD-ONLY0:       if.end6327:
// SIMD-ONLY0-NEXT:    [[TMP4830:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4830]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4831:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4832:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6328:%.*]] = fcmp oeq float [[TMP4831]], [[TMP4832]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6328]], label [[IF_THEN6330:%.*]], label [[IF_END6331:%.*]]
// SIMD-ONLY0:       if.then6330:
// SIMD-ONLY0-NEXT:    [[TMP4833:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4833]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6331]]
// SIMD-ONLY0:       if.end6331:
// SIMD-ONLY0-NEXT:    [[TMP4834:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4835:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6332:%.*]] = fcmp ogt float [[TMP4834]], [[TMP4835]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6332]], label [[IF_THEN6334:%.*]], label [[IF_END6335:%.*]]
// SIMD-ONLY0:       if.then6334:
// SIMD-ONLY0-NEXT:    [[TMP4836:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4836]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6335]]
// SIMD-ONLY0:       if.end6335:
// SIMD-ONLY0-NEXT:    [[TMP4837:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4837]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4838:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4839:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6336:%.*]] = fcmp ogt float [[TMP4838]], [[TMP4839]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6336]], label [[IF_THEN6338:%.*]], label [[IF_END6339:%.*]]
// SIMD-ONLY0:       if.then6338:
// SIMD-ONLY0-NEXT:    [[TMP4840:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4840]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6339]]
// SIMD-ONLY0:       if.end6339:
// SIMD-ONLY0-NEXT:    [[TMP4841:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4841]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4842:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4843:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6340:%.*]] = fcmp olt float [[TMP4842]], [[TMP4843]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6340]], label [[IF_THEN6342:%.*]], label [[IF_END6343:%.*]]
// SIMD-ONLY0:       if.then6342:
// SIMD-ONLY0-NEXT:    [[TMP4844:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4844]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6343]]
// SIMD-ONLY0:       if.end6343:
// SIMD-ONLY0-NEXT:    [[TMP4845:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4845]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4846:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4847:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6344:%.*]] = fcmp olt float [[TMP4846]], [[TMP4847]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6344]], label [[IF_THEN6346:%.*]], label [[IF_END6347:%.*]]
// SIMD-ONLY0:       if.then6346:
// SIMD-ONLY0-NEXT:    [[TMP4848:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4848]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6347]]
// SIMD-ONLY0:       if.end6347:
// SIMD-ONLY0-NEXT:    [[TMP4849:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4849]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4850:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4851:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6348:%.*]] = fcmp oeq float [[TMP4850]], [[TMP4851]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6348]], label [[IF_THEN6350:%.*]], label [[IF_END6351:%.*]]
// SIMD-ONLY0:       if.then6350:
// SIMD-ONLY0-NEXT:    [[TMP4852:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4852]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6351]]
// SIMD-ONLY0:       if.end6351:
// SIMD-ONLY0-NEXT:    [[TMP4853:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4853]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4854:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4855:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6352:%.*]] = fcmp oeq float [[TMP4854]], [[TMP4855]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6352]], label [[IF_THEN6354:%.*]], label [[IF_END6355:%.*]]
// SIMD-ONLY0:       if.then6354:
// SIMD-ONLY0-NEXT:    [[TMP4856:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4856]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6355]]
// SIMD-ONLY0:       if.end6355:
// SIMD-ONLY0-NEXT:    [[TMP4857:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4857]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4858:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4859:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6356:%.*]] = fcmp oeq float [[TMP4858]], [[TMP4859]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6356]], label [[IF_THEN6358:%.*]], label [[IF_ELSE6359:%.*]]
// SIMD-ONLY0:       if.then6358:
// SIMD-ONLY0-NEXT:    [[TMP4860:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4860]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6360:%.*]]
// SIMD-ONLY0:       if.else6359:
// SIMD-ONLY0-NEXT:    [[TMP4861:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4861]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6360]]
// SIMD-ONLY0:       if.end6360:
// SIMD-ONLY0-NEXT:    [[TMP4862:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4863:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6361:%.*]] = fcmp oeq float [[TMP4862]], [[TMP4863]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6361]], label [[IF_THEN6363:%.*]], label [[IF_ELSE6364:%.*]]
// SIMD-ONLY0:       if.then6363:
// SIMD-ONLY0-NEXT:    [[TMP4864:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4864]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6365:%.*]]
// SIMD-ONLY0:       if.else6364:
// SIMD-ONLY0-NEXT:    [[TMP4865:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4865]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6365]]
// SIMD-ONLY0:       if.end6365:
// SIMD-ONLY0-NEXT:    [[TMP4866:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4867:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6366:%.*]] = fcmp oeq float [[TMP4866]], [[TMP4867]]
// SIMD-ONLY0-NEXT:    [[CONV6367:%.*]] = zext i1 [[CMP6366]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6367]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4868:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6368:%.*]] = icmp ne i32 [[TMP4868]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6368]], label [[IF_THEN6369:%.*]], label [[IF_END6370:%.*]]
// SIMD-ONLY0:       if.then6369:
// SIMD-ONLY0-NEXT:    [[TMP4869:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4869]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6370]]
// SIMD-ONLY0:       if.end6370:
// SIMD-ONLY0-NEXT:    [[TMP4870:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4871:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6371:%.*]] = fcmp oeq float [[TMP4870]], [[TMP4871]]
// SIMD-ONLY0-NEXT:    [[CONV6372:%.*]] = zext i1 [[CMP6371]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6372]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4872:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6373:%.*]] = icmp ne i32 [[TMP4872]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6373]], label [[IF_THEN6374:%.*]], label [[IF_END6375:%.*]]
// SIMD-ONLY0:       if.then6374:
// SIMD-ONLY0-NEXT:    [[TMP4873:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4873]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6375]]
// SIMD-ONLY0:       if.end6375:
// SIMD-ONLY0-NEXT:    [[TMP4874:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4875:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6376:%.*]] = fcmp oeq float [[TMP4874]], [[TMP4875]]
// SIMD-ONLY0-NEXT:    [[CONV6377:%.*]] = zext i1 [[CMP6376]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6377]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4876:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6378:%.*]] = icmp ne i32 [[TMP4876]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6378]], label [[IF_THEN6379:%.*]], label [[IF_ELSE6380:%.*]]
// SIMD-ONLY0:       if.then6379:
// SIMD-ONLY0-NEXT:    [[TMP4877:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4877]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6381:%.*]]
// SIMD-ONLY0:       if.else6380:
// SIMD-ONLY0-NEXT:    [[TMP4878:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4878]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6381]]
// SIMD-ONLY0:       if.end6381:
// SIMD-ONLY0-NEXT:    [[TMP4879:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4880:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6382:%.*]] = fcmp oeq float [[TMP4879]], [[TMP4880]]
// SIMD-ONLY0-NEXT:    [[CONV6383:%.*]] = zext i1 [[CMP6382]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6383]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4881:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6384:%.*]] = icmp ne i32 [[TMP4881]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6384]], label [[IF_THEN6385:%.*]], label [[IF_ELSE6386:%.*]]
// SIMD-ONLY0:       if.then6385:
// SIMD-ONLY0-NEXT:    [[TMP4882:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4882]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6387:%.*]]
// SIMD-ONLY0:       if.else6386:
// SIMD-ONLY0-NEXT:    [[TMP4883:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4883]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6387]]
// SIMD-ONLY0:       if.end6387:
// SIMD-ONLY0-NEXT:    [[TMP4884:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4884]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4885:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4886:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6388:%.*]] = fcmp ogt double [[TMP4885]], [[TMP4886]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6388]], label [[IF_THEN6390:%.*]], label [[IF_END6391:%.*]]
// SIMD-ONLY0:       if.then6390:
// SIMD-ONLY0-NEXT:    [[TMP4887:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4887]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6391]]
// SIMD-ONLY0:       if.end6391:
// SIMD-ONLY0-NEXT:    [[TMP4888:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4888]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4889:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4890:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6392:%.*]] = fcmp ogt double [[TMP4889]], [[TMP4890]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6392]], label [[IF_THEN6394:%.*]], label [[IF_END6395:%.*]]
// SIMD-ONLY0:       if.then6394:
// SIMD-ONLY0-NEXT:    [[TMP4891:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4891]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6395]]
// SIMD-ONLY0:       if.end6395:
// SIMD-ONLY0-NEXT:    [[TMP4892:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4892]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4893:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4894:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6396:%.*]] = fcmp olt double [[TMP4893]], [[TMP4894]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6396]], label [[IF_THEN6398:%.*]], label [[IF_END6399:%.*]]
// SIMD-ONLY0:       if.then6398:
// SIMD-ONLY0-NEXT:    [[TMP4895:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4895]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6399]]
// SIMD-ONLY0:       if.end6399:
// SIMD-ONLY0-NEXT:    [[TMP4896:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4896]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4897:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4898:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6400:%.*]] = fcmp olt double [[TMP4897]], [[TMP4898]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6400]], label [[IF_THEN6402:%.*]], label [[IF_END6403:%.*]]
// SIMD-ONLY0:       if.then6402:
// SIMD-ONLY0-NEXT:    [[TMP4899:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4899]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6403]]
// SIMD-ONLY0:       if.end6403:
// SIMD-ONLY0-NEXT:    [[TMP4900:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4900]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4901:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4902:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6404:%.*]] = fcmp oeq double [[TMP4901]], [[TMP4902]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6404]], label [[IF_THEN6406:%.*]], label [[IF_END6407:%.*]]
// SIMD-ONLY0:       if.then6406:
// SIMD-ONLY0-NEXT:    [[TMP4903:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4903]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6407]]
// SIMD-ONLY0:       if.end6407:
// SIMD-ONLY0-NEXT:    [[TMP4904:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4904]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4905:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4906:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6408:%.*]] = fcmp oeq double [[TMP4905]], [[TMP4906]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6408]], label [[IF_THEN6410:%.*]], label [[IF_END6411:%.*]]
// SIMD-ONLY0:       if.then6410:
// SIMD-ONLY0-NEXT:    [[TMP4907:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4907]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6411]]
// SIMD-ONLY0:       if.end6411:
// SIMD-ONLY0-NEXT:    [[TMP4908:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4909:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6412:%.*]] = fcmp ogt double [[TMP4908]], [[TMP4909]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6412]], label [[IF_THEN6414:%.*]], label [[IF_END6415:%.*]]
// SIMD-ONLY0:       if.then6414:
// SIMD-ONLY0-NEXT:    [[TMP4910:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4910]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6415]]
// SIMD-ONLY0:       if.end6415:
// SIMD-ONLY0-NEXT:    [[TMP4911:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4911]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4912:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4913:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6416:%.*]] = fcmp ogt double [[TMP4912]], [[TMP4913]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6416]], label [[IF_THEN6418:%.*]], label [[IF_END6419:%.*]]
// SIMD-ONLY0:       if.then6418:
// SIMD-ONLY0-NEXT:    [[TMP4914:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4914]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6419]]
// SIMD-ONLY0:       if.end6419:
// SIMD-ONLY0-NEXT:    [[TMP4915:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4915]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4916:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4917:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6420:%.*]] = fcmp olt double [[TMP4916]], [[TMP4917]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6420]], label [[IF_THEN6422:%.*]], label [[IF_END6423:%.*]]
// SIMD-ONLY0:       if.then6422:
// SIMD-ONLY0-NEXT:    [[TMP4918:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4918]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6423]]
// SIMD-ONLY0:       if.end6423:
// SIMD-ONLY0-NEXT:    [[TMP4919:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4919]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4920:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4921:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6424:%.*]] = fcmp olt double [[TMP4920]], [[TMP4921]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6424]], label [[IF_THEN6426:%.*]], label [[IF_END6427:%.*]]
// SIMD-ONLY0:       if.then6426:
// SIMD-ONLY0-NEXT:    [[TMP4922:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4922]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6427]]
// SIMD-ONLY0:       if.end6427:
// SIMD-ONLY0-NEXT:    [[TMP4923:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4923]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4924:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4925:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6428:%.*]] = fcmp oeq double [[TMP4924]], [[TMP4925]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6428]], label [[IF_THEN6430:%.*]], label [[IF_END6431:%.*]]
// SIMD-ONLY0:       if.then6430:
// SIMD-ONLY0-NEXT:    [[TMP4926:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4926]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6431]]
// SIMD-ONLY0:       if.end6431:
// SIMD-ONLY0-NEXT:    [[TMP4927:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4927]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4928:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4929:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6432:%.*]] = fcmp oeq double [[TMP4928]], [[TMP4929]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6432]], label [[IF_THEN6434:%.*]], label [[IF_END6435:%.*]]
// SIMD-ONLY0:       if.then6434:
// SIMD-ONLY0-NEXT:    [[TMP4930:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4930]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6435]]
// SIMD-ONLY0:       if.end6435:
// SIMD-ONLY0-NEXT:    [[TMP4931:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4931]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4932:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4933:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6436:%.*]] = fcmp oeq double [[TMP4932]], [[TMP4933]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6436]], label [[IF_THEN6438:%.*]], label [[IF_ELSE6439:%.*]]
// SIMD-ONLY0:       if.then6438:
// SIMD-ONLY0-NEXT:    [[TMP4934:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4934]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6440:%.*]]
// SIMD-ONLY0:       if.else6439:
// SIMD-ONLY0-NEXT:    [[TMP4935:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4935]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6440]]
// SIMD-ONLY0:       if.end6440:
// SIMD-ONLY0-NEXT:    [[TMP4936:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4937:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6441:%.*]] = fcmp oeq double [[TMP4936]], [[TMP4937]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6441]], label [[IF_THEN6443:%.*]], label [[IF_ELSE6444:%.*]]
// SIMD-ONLY0:       if.then6443:
// SIMD-ONLY0-NEXT:    [[TMP4938:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4938]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6445:%.*]]
// SIMD-ONLY0:       if.else6444:
// SIMD-ONLY0-NEXT:    [[TMP4939:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4939]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6445]]
// SIMD-ONLY0:       if.end6445:
// SIMD-ONLY0-NEXT:    [[TMP4940:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4941:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6446:%.*]] = fcmp oeq double [[TMP4940]], [[TMP4941]]
// SIMD-ONLY0-NEXT:    [[CONV6447:%.*]] = zext i1 [[CMP6446]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6447]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4942:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6448:%.*]] = icmp ne i32 [[TMP4942]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6448]], label [[IF_THEN6449:%.*]], label [[IF_END6450:%.*]]
// SIMD-ONLY0:       if.then6449:
// SIMD-ONLY0-NEXT:    [[TMP4943:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4943]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6450]]
// SIMD-ONLY0:       if.end6450:
// SIMD-ONLY0-NEXT:    [[TMP4944:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4945:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6451:%.*]] = fcmp oeq double [[TMP4944]], [[TMP4945]]
// SIMD-ONLY0-NEXT:    [[CONV6452:%.*]] = zext i1 [[CMP6451]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6452]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4946:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6453:%.*]] = icmp ne i32 [[TMP4946]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6453]], label [[IF_THEN6454:%.*]], label [[IF_END6455:%.*]]
// SIMD-ONLY0:       if.then6454:
// SIMD-ONLY0-NEXT:    [[TMP4947:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4947]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6455]]
// SIMD-ONLY0:       if.end6455:
// SIMD-ONLY0-NEXT:    [[TMP4948:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4949:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6456:%.*]] = fcmp oeq double [[TMP4948]], [[TMP4949]]
// SIMD-ONLY0-NEXT:    [[CONV6457:%.*]] = zext i1 [[CMP6456]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6457]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4950:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6458:%.*]] = icmp ne i32 [[TMP4950]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6458]], label [[IF_THEN6459:%.*]], label [[IF_ELSE6460:%.*]]
// SIMD-ONLY0:       if.then6459:
// SIMD-ONLY0-NEXT:    [[TMP4951:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4951]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6461:%.*]]
// SIMD-ONLY0:       if.else6460:
// SIMD-ONLY0-NEXT:    [[TMP4952:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4952]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6461]]
// SIMD-ONLY0:       if.end6461:
// SIMD-ONLY0-NEXT:    [[TMP4953:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4954:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6462:%.*]] = fcmp oeq double [[TMP4953]], [[TMP4954]]
// SIMD-ONLY0-NEXT:    [[CONV6463:%.*]] = zext i1 [[CMP6462]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6463]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4955:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6464:%.*]] = icmp ne i32 [[TMP4955]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6464]], label [[IF_THEN6465:%.*]], label [[IF_ELSE6466:%.*]]
// SIMD-ONLY0:       if.then6465:
// SIMD-ONLY0-NEXT:    [[TMP4956:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4956]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6467:%.*]]
// SIMD-ONLY0:       if.else6466:
// SIMD-ONLY0-NEXT:    [[TMP4957:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4957]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6467]]
// SIMD-ONLY0:       if.end6467:
// SIMD-ONLY0-NEXT:    [[TMP4958:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4958]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4959:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4960:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6468:%.*]] = fcmp ogt double [[TMP4959]], [[TMP4960]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6468]], label [[IF_THEN6470:%.*]], label [[IF_END6471:%.*]]
// SIMD-ONLY0:       if.then6470:
// SIMD-ONLY0-NEXT:    [[TMP4961:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4961]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6471]]
// SIMD-ONLY0:       if.end6471:
// SIMD-ONLY0-NEXT:    [[TMP4962:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4962]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4963:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4964:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6472:%.*]] = fcmp ogt double [[TMP4963]], [[TMP4964]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6472]], label [[IF_THEN6474:%.*]], label [[IF_END6475:%.*]]
// SIMD-ONLY0:       if.then6474:
// SIMD-ONLY0-NEXT:    [[TMP4965:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4965]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6475]]
// SIMD-ONLY0:       if.end6475:
// SIMD-ONLY0-NEXT:    [[TMP4966:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4966]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4967:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4968:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6476:%.*]] = fcmp olt double [[TMP4967]], [[TMP4968]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6476]], label [[IF_THEN6478:%.*]], label [[IF_END6479:%.*]]
// SIMD-ONLY0:       if.then6478:
// SIMD-ONLY0-NEXT:    [[TMP4969:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4969]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6479]]
// SIMD-ONLY0:       if.end6479:
// SIMD-ONLY0-NEXT:    [[TMP4970:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4970]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4971:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4972:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6480:%.*]] = fcmp olt double [[TMP4971]], [[TMP4972]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6480]], label [[IF_THEN6482:%.*]], label [[IF_END6483:%.*]]
// SIMD-ONLY0:       if.then6482:
// SIMD-ONLY0-NEXT:    [[TMP4973:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4973]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6483]]
// SIMD-ONLY0:       if.end6483:
// SIMD-ONLY0-NEXT:    [[TMP4974:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4974]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4975:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4976:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6484:%.*]] = fcmp oeq double [[TMP4975]], [[TMP4976]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6484]], label [[IF_THEN6486:%.*]], label [[IF_END6487:%.*]]
// SIMD-ONLY0:       if.then6486:
// SIMD-ONLY0-NEXT:    [[TMP4977:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4977]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6487]]
// SIMD-ONLY0:       if.end6487:
// SIMD-ONLY0-NEXT:    [[TMP4978:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4978]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4979:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4980:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6488:%.*]] = fcmp oeq double [[TMP4979]], [[TMP4980]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6488]], label [[IF_THEN6490:%.*]], label [[IF_END6491:%.*]]
// SIMD-ONLY0:       if.then6490:
// SIMD-ONLY0-NEXT:    [[TMP4981:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4981]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6491]]
// SIMD-ONLY0:       if.end6491:
// SIMD-ONLY0-NEXT:    [[TMP4982:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4983:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6492:%.*]] = fcmp ogt double [[TMP4982]], [[TMP4983]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6492]], label [[IF_THEN6494:%.*]], label [[IF_END6495:%.*]]
// SIMD-ONLY0:       if.then6494:
// SIMD-ONLY0-NEXT:    [[TMP4984:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4984]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6495]]
// SIMD-ONLY0:       if.end6495:
// SIMD-ONLY0-NEXT:    [[TMP4985:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4985]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4986:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4987:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6496:%.*]] = fcmp ogt double [[TMP4986]], [[TMP4987]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6496]], label [[IF_THEN6498:%.*]], label [[IF_END6499:%.*]]
// SIMD-ONLY0:       if.then6498:
// SIMD-ONLY0-NEXT:    [[TMP4988:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4988]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6499]]
// SIMD-ONLY0:       if.end6499:
// SIMD-ONLY0-NEXT:    [[TMP4989:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4989]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4990:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4991:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6500:%.*]] = fcmp olt double [[TMP4990]], [[TMP4991]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6500]], label [[IF_THEN6502:%.*]], label [[IF_END6503:%.*]]
// SIMD-ONLY0:       if.then6502:
// SIMD-ONLY0-NEXT:    [[TMP4992:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4992]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6503]]
// SIMD-ONLY0:       if.end6503:
// SIMD-ONLY0-NEXT:    [[TMP4993:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4993]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4994:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4995:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6504:%.*]] = fcmp olt double [[TMP4994]], [[TMP4995]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6504]], label [[IF_THEN6506:%.*]], label [[IF_END6507:%.*]]
// SIMD-ONLY0:       if.then6506:
// SIMD-ONLY0-NEXT:    [[TMP4996:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4996]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6507]]
// SIMD-ONLY0:       if.end6507:
// SIMD-ONLY0-NEXT:    [[TMP4997:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4997]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4998:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4999:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6508:%.*]] = fcmp oeq double [[TMP4998]], [[TMP4999]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6508]], label [[IF_THEN6510:%.*]], label [[IF_END6511:%.*]]
// SIMD-ONLY0:       if.then6510:
// SIMD-ONLY0-NEXT:    [[TMP5000:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5000]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6511]]
// SIMD-ONLY0:       if.end6511:
// SIMD-ONLY0-NEXT:    [[TMP5001:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5001]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5002:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5003:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6512:%.*]] = fcmp oeq double [[TMP5002]], [[TMP5003]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6512]], label [[IF_THEN6514:%.*]], label [[IF_END6515:%.*]]
// SIMD-ONLY0:       if.then6514:
// SIMD-ONLY0-NEXT:    [[TMP5004:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5004]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6515]]
// SIMD-ONLY0:       if.end6515:
// SIMD-ONLY0-NEXT:    [[TMP5005:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5005]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5006:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5007:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6516:%.*]] = fcmp oeq double [[TMP5006]], [[TMP5007]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6516]], label [[IF_THEN6518:%.*]], label [[IF_ELSE6519:%.*]]
// SIMD-ONLY0:       if.then6518:
// SIMD-ONLY0-NEXT:    [[TMP5008:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5008]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6520:%.*]]
// SIMD-ONLY0:       if.else6519:
// SIMD-ONLY0-NEXT:    [[TMP5009:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5009]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6520]]
// SIMD-ONLY0:       if.end6520:
// SIMD-ONLY0-NEXT:    [[TMP5010:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5011:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6521:%.*]] = fcmp oeq double [[TMP5010]], [[TMP5011]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6521]], label [[IF_THEN6523:%.*]], label [[IF_ELSE6524:%.*]]
// SIMD-ONLY0:       if.then6523:
// SIMD-ONLY0-NEXT:    [[TMP5012:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5012]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6525:%.*]]
// SIMD-ONLY0:       if.else6524:
// SIMD-ONLY0-NEXT:    [[TMP5013:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5013]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6525]]
// SIMD-ONLY0:       if.end6525:
// SIMD-ONLY0-NEXT:    [[TMP5014:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5015:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6526:%.*]] = fcmp oeq double [[TMP5014]], [[TMP5015]]
// SIMD-ONLY0-NEXT:    [[CONV6527:%.*]] = zext i1 [[CMP6526]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6527]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5016:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6528:%.*]] = icmp ne i32 [[TMP5016]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6528]], label [[IF_THEN6529:%.*]], label [[IF_END6530:%.*]]
// SIMD-ONLY0:       if.then6529:
// SIMD-ONLY0-NEXT:    [[TMP5017:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5017]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6530]]
// SIMD-ONLY0:       if.end6530:
// SIMD-ONLY0-NEXT:    [[TMP5018:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5019:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6531:%.*]] = fcmp oeq double [[TMP5018]], [[TMP5019]]
// SIMD-ONLY0-NEXT:    [[CONV6532:%.*]] = zext i1 [[CMP6531]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6532]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5020:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6533:%.*]] = icmp ne i32 [[TMP5020]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6533]], label [[IF_THEN6534:%.*]], label [[IF_END6535:%.*]]
// SIMD-ONLY0:       if.then6534:
// SIMD-ONLY0-NEXT:    [[TMP5021:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5021]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6535]]
// SIMD-ONLY0:       if.end6535:
// SIMD-ONLY0-NEXT:    [[TMP5022:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5023:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6536:%.*]] = fcmp oeq double [[TMP5022]], [[TMP5023]]
// SIMD-ONLY0-NEXT:    [[CONV6537:%.*]] = zext i1 [[CMP6536]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6537]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5024:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6538:%.*]] = icmp ne i32 [[TMP5024]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6538]], label [[IF_THEN6539:%.*]], label [[IF_ELSE6540:%.*]]
// SIMD-ONLY0:       if.then6539:
// SIMD-ONLY0-NEXT:    [[TMP5025:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5025]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6541:%.*]]
// SIMD-ONLY0:       if.else6540:
// SIMD-ONLY0-NEXT:    [[TMP5026:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5026]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6541]]
// SIMD-ONLY0:       if.end6541:
// SIMD-ONLY0-NEXT:    [[TMP5027:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5028:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6542:%.*]] = fcmp oeq double [[TMP5027]], [[TMP5028]]
// SIMD-ONLY0-NEXT:    [[CONV6543:%.*]] = zext i1 [[CMP6542]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6543]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5029:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6544:%.*]] = icmp ne i32 [[TMP5029]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6544]], label [[IF_THEN6545:%.*]], label [[IF_ELSE6546:%.*]]
// SIMD-ONLY0:       if.then6545:
// SIMD-ONLY0-NEXT:    [[TMP5030:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5030]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6547:%.*]]
// SIMD-ONLY0:       if.else6546:
// SIMD-ONLY0-NEXT:    [[TMP5031:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5031]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6547]]
// SIMD-ONLY0:       if.end6547:
// SIMD-ONLY0-NEXT:    [[TMP5032:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5032]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5033:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5034:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6548:%.*]] = fcmp ogt double [[TMP5033]], [[TMP5034]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6548]], label [[IF_THEN6550:%.*]], label [[IF_END6551:%.*]]
// SIMD-ONLY0:       if.then6550:
// SIMD-ONLY0-NEXT:    [[TMP5035:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5035]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6551]]
// SIMD-ONLY0:       if.end6551:
// SIMD-ONLY0-NEXT:    [[TMP5036:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5036]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5037:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5038:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6552:%.*]] = fcmp ogt double [[TMP5037]], [[TMP5038]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6552]], label [[IF_THEN6554:%.*]], label [[IF_END6555:%.*]]
// SIMD-ONLY0:       if.then6554:
// SIMD-ONLY0-NEXT:    [[TMP5039:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5039]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6555]]
// SIMD-ONLY0:       if.end6555:
// SIMD-ONLY0-NEXT:    [[TMP5040:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5040]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5041:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5042:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6556:%.*]] = fcmp olt double [[TMP5041]], [[TMP5042]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6556]], label [[IF_THEN6558:%.*]], label [[IF_END6559:%.*]]
// SIMD-ONLY0:       if.then6558:
// SIMD-ONLY0-NEXT:    [[TMP5043:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5043]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6559]]
// SIMD-ONLY0:       if.end6559:
// SIMD-ONLY0-NEXT:    [[TMP5044:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5044]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5045:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5046:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6560:%.*]] = fcmp olt double [[TMP5045]], [[TMP5046]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6560]], label [[IF_THEN6562:%.*]], label [[IF_END6563:%.*]]
// SIMD-ONLY0:       if.then6562:
// SIMD-ONLY0-NEXT:    [[TMP5047:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5047]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6563]]
// SIMD-ONLY0:       if.end6563:
// SIMD-ONLY0-NEXT:    [[TMP5048:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5048]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5049:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5050:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6564:%.*]] = fcmp oeq double [[TMP5049]], [[TMP5050]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6564]], label [[IF_THEN6566:%.*]], label [[IF_END6567:%.*]]
// SIMD-ONLY0:       if.then6566:
// SIMD-ONLY0-NEXT:    [[TMP5051:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5051]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6567]]
// SIMD-ONLY0:       if.end6567:
// SIMD-ONLY0-NEXT:    [[TMP5052:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5052]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5053:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5054:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6568:%.*]] = fcmp oeq double [[TMP5053]], [[TMP5054]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6568]], label [[IF_THEN6570:%.*]], label [[IF_END6571:%.*]]
// SIMD-ONLY0:       if.then6570:
// SIMD-ONLY0-NEXT:    [[TMP5055:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5055]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6571]]
// SIMD-ONLY0:       if.end6571:
// SIMD-ONLY0-NEXT:    [[TMP5056:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5057:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6572:%.*]] = fcmp ogt double [[TMP5056]], [[TMP5057]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6572]], label [[IF_THEN6574:%.*]], label [[IF_END6575:%.*]]
// SIMD-ONLY0:       if.then6574:
// SIMD-ONLY0-NEXT:    [[TMP5058:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5058]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6575]]
// SIMD-ONLY0:       if.end6575:
// SIMD-ONLY0-NEXT:    [[TMP5059:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5059]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5060:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5061:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6576:%.*]] = fcmp ogt double [[TMP5060]], [[TMP5061]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6576]], label [[IF_THEN6578:%.*]], label [[IF_END6579:%.*]]
// SIMD-ONLY0:       if.then6578:
// SIMD-ONLY0-NEXT:    [[TMP5062:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5062]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6579]]
// SIMD-ONLY0:       if.end6579:
// SIMD-ONLY0-NEXT:    [[TMP5063:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5063]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5064:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5065:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6580:%.*]] = fcmp olt double [[TMP5064]], [[TMP5065]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6580]], label [[IF_THEN6582:%.*]], label [[IF_END6583:%.*]]
// SIMD-ONLY0:       if.then6582:
// SIMD-ONLY0-NEXT:    [[TMP5066:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5066]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6583]]
// SIMD-ONLY0:       if.end6583:
// SIMD-ONLY0-NEXT:    [[TMP5067:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5067]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5068:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5069:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6584:%.*]] = fcmp olt double [[TMP5068]], [[TMP5069]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6584]], label [[IF_THEN6586:%.*]], label [[IF_END6587:%.*]]
// SIMD-ONLY0:       if.then6586:
// SIMD-ONLY0-NEXT:    [[TMP5070:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5070]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6587]]
// SIMD-ONLY0:       if.end6587:
// SIMD-ONLY0-NEXT:    [[TMP5071:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5071]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5072:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5073:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6588:%.*]] = fcmp oeq double [[TMP5072]], [[TMP5073]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6588]], label [[IF_THEN6590:%.*]], label [[IF_END6591:%.*]]
// SIMD-ONLY0:       if.then6590:
// SIMD-ONLY0-NEXT:    [[TMP5074:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5074]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6591]]
// SIMD-ONLY0:       if.end6591:
// SIMD-ONLY0-NEXT:    [[TMP5075:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5075]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5076:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5077:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6592:%.*]] = fcmp oeq double [[TMP5076]], [[TMP5077]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6592]], label [[IF_THEN6594:%.*]], label [[IF_END6595:%.*]]
// SIMD-ONLY0:       if.then6594:
// SIMD-ONLY0-NEXT:    [[TMP5078:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5078]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6595]]
// SIMD-ONLY0:       if.end6595:
// SIMD-ONLY0-NEXT:    [[TMP5079:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5079]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5080:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5081:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6596:%.*]] = fcmp oeq double [[TMP5080]], [[TMP5081]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6596]], label [[IF_THEN6598:%.*]], label [[IF_ELSE6599:%.*]]
// SIMD-ONLY0:       if.then6598:
// SIMD-ONLY0-NEXT:    [[TMP5082:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5082]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6600:%.*]]
// SIMD-ONLY0:       if.else6599:
// SIMD-ONLY0-NEXT:    [[TMP5083:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5083]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6600]]
// SIMD-ONLY0:       if.end6600:
// SIMD-ONLY0-NEXT:    [[TMP5084:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5085:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6601:%.*]] = fcmp oeq double [[TMP5084]], [[TMP5085]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6601]], label [[IF_THEN6603:%.*]], label [[IF_ELSE6604:%.*]]
// SIMD-ONLY0:       if.then6603:
// SIMD-ONLY0-NEXT:    [[TMP5086:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5086]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6605:%.*]]
// SIMD-ONLY0:       if.else6604:
// SIMD-ONLY0-NEXT:    [[TMP5087:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5087]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6605]]
// SIMD-ONLY0:       if.end6605:
// SIMD-ONLY0-NEXT:    [[TMP5088:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5089:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6606:%.*]] = fcmp oeq double [[TMP5088]], [[TMP5089]]
// SIMD-ONLY0-NEXT:    [[CONV6607:%.*]] = zext i1 [[CMP6606]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6607]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5090:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6608:%.*]] = icmp ne i32 [[TMP5090]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6608]], label [[IF_THEN6609:%.*]], label [[IF_END6610:%.*]]
// SIMD-ONLY0:       if.then6609:
// SIMD-ONLY0-NEXT:    [[TMP5091:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5091]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6610]]
// SIMD-ONLY0:       if.end6610:
// SIMD-ONLY0-NEXT:    [[TMP5092:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5093:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6611:%.*]] = fcmp oeq double [[TMP5092]], [[TMP5093]]
// SIMD-ONLY0-NEXT:    [[CONV6612:%.*]] = zext i1 [[CMP6611]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6612]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5094:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6613:%.*]] = icmp ne i32 [[TMP5094]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6613]], label [[IF_THEN6614:%.*]], label [[IF_END6615:%.*]]
// SIMD-ONLY0:       if.then6614:
// SIMD-ONLY0-NEXT:    [[TMP5095:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5095]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6615]]
// SIMD-ONLY0:       if.end6615:
// SIMD-ONLY0-NEXT:    [[TMP5096:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5097:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6616:%.*]] = fcmp oeq double [[TMP5096]], [[TMP5097]]
// SIMD-ONLY0-NEXT:    [[CONV6617:%.*]] = zext i1 [[CMP6616]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6617]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5098:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6618:%.*]] = icmp ne i32 [[TMP5098]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6618]], label [[IF_THEN6619:%.*]], label [[IF_ELSE6620:%.*]]
// SIMD-ONLY0:       if.then6619:
// SIMD-ONLY0-NEXT:    [[TMP5099:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5099]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6621:%.*]]
// SIMD-ONLY0:       if.else6620:
// SIMD-ONLY0-NEXT:    [[TMP5100:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5100]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6621]]
// SIMD-ONLY0:       if.end6621:
// SIMD-ONLY0-NEXT:    [[TMP5101:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5102:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6622:%.*]] = fcmp oeq double [[TMP5101]], [[TMP5102]]
// SIMD-ONLY0-NEXT:    [[CONV6623:%.*]] = zext i1 [[CMP6622]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6623]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5103:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6624:%.*]] = icmp ne i32 [[TMP5103]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6624]], label [[IF_THEN6625:%.*]], label [[IF_ELSE6626:%.*]]
// SIMD-ONLY0:       if.then6625:
// SIMD-ONLY0-NEXT:    [[TMP5104:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5104]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6627:%.*]]
// SIMD-ONLY0:       if.else6626:
// SIMD-ONLY0-NEXT:    [[TMP5105:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5105]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6627]]
// SIMD-ONLY0:       if.end6627:
// SIMD-ONLY0-NEXT:    [[TMP5106:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5106]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5107:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5108:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6628:%.*]] = fcmp ogt double [[TMP5107]], [[TMP5108]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6628]], label [[IF_THEN6630:%.*]], label [[IF_END6631:%.*]]
// SIMD-ONLY0:       if.then6630:
// SIMD-ONLY0-NEXT:    [[TMP5109:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5109]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6631]]
// SIMD-ONLY0:       if.end6631:
// SIMD-ONLY0-NEXT:    [[TMP5110:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5110]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5111:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5112:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6632:%.*]] = fcmp ogt double [[TMP5111]], [[TMP5112]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6632]], label [[IF_THEN6634:%.*]], label [[IF_END6635:%.*]]
// SIMD-ONLY0:       if.then6634:
// SIMD-ONLY0-NEXT:    [[TMP5113:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5113]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6635]]
// SIMD-ONLY0:       if.end6635:
// SIMD-ONLY0-NEXT:    [[TMP5114:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5114]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5115:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5116:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6636:%.*]] = fcmp olt double [[TMP5115]], [[TMP5116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6636]], label [[IF_THEN6638:%.*]], label [[IF_END6639:%.*]]
// SIMD-ONLY0:       if.then6638:
// SIMD-ONLY0-NEXT:    [[TMP5117:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5117]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6639]]
// SIMD-ONLY0:       if.end6639:
// SIMD-ONLY0-NEXT:    [[TMP5118:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5118]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5119:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5120:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6640:%.*]] = fcmp olt double [[TMP5119]], [[TMP5120]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6640]], label [[IF_THEN6642:%.*]], label [[IF_END6643:%.*]]
// SIMD-ONLY0:       if.then6642:
// SIMD-ONLY0-NEXT:    [[TMP5121:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5121]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6643]]
// SIMD-ONLY0:       if.end6643:
// SIMD-ONLY0-NEXT:    [[TMP5122:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5122]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5123:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5124:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6644:%.*]] = fcmp oeq double [[TMP5123]], [[TMP5124]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6644]], label [[IF_THEN6646:%.*]], label [[IF_END6647:%.*]]
// SIMD-ONLY0:       if.then6646:
// SIMD-ONLY0-NEXT:    [[TMP5125:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5125]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6647]]
// SIMD-ONLY0:       if.end6647:
// SIMD-ONLY0-NEXT:    [[TMP5126:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5126]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5127:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5128:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6648:%.*]] = fcmp oeq double [[TMP5127]], [[TMP5128]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6648]], label [[IF_THEN6650:%.*]], label [[IF_END6651:%.*]]
// SIMD-ONLY0:       if.then6650:
// SIMD-ONLY0-NEXT:    [[TMP5129:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5129]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6651]]
// SIMD-ONLY0:       if.end6651:
// SIMD-ONLY0-NEXT:    [[TMP5130:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5131:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6652:%.*]] = fcmp ogt double [[TMP5130]], [[TMP5131]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6652]], label [[IF_THEN6654:%.*]], label [[IF_END6655:%.*]]
// SIMD-ONLY0:       if.then6654:
// SIMD-ONLY0-NEXT:    [[TMP5132:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5132]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6655]]
// SIMD-ONLY0:       if.end6655:
// SIMD-ONLY0-NEXT:    [[TMP5133:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5133]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5134:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5135:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6656:%.*]] = fcmp ogt double [[TMP5134]], [[TMP5135]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6656]], label [[IF_THEN6658:%.*]], label [[IF_END6659:%.*]]
// SIMD-ONLY0:       if.then6658:
// SIMD-ONLY0-NEXT:    [[TMP5136:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5136]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6659]]
// SIMD-ONLY0:       if.end6659:
// SIMD-ONLY0-NEXT:    [[TMP5137:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5137]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5138:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5139:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6660:%.*]] = fcmp olt double [[TMP5138]], [[TMP5139]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6660]], label [[IF_THEN6662:%.*]], label [[IF_END6663:%.*]]
// SIMD-ONLY0:       if.then6662:
// SIMD-ONLY0-NEXT:    [[TMP5140:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5140]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6663]]
// SIMD-ONLY0:       if.end6663:
// SIMD-ONLY0-NEXT:    [[TMP5141:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5141]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5142:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5143:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6664:%.*]] = fcmp olt double [[TMP5142]], [[TMP5143]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6664]], label [[IF_THEN6666:%.*]], label [[IF_END6667:%.*]]
// SIMD-ONLY0:       if.then6666:
// SIMD-ONLY0-NEXT:    [[TMP5144:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5144]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6667]]
// SIMD-ONLY0:       if.end6667:
// SIMD-ONLY0-NEXT:    [[TMP5145:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5145]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5146:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5147:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6668:%.*]] = fcmp oeq double [[TMP5146]], [[TMP5147]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6668]], label [[IF_THEN6670:%.*]], label [[IF_END6671:%.*]]
// SIMD-ONLY0:       if.then6670:
// SIMD-ONLY0-NEXT:    [[TMP5148:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5148]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6671]]
// SIMD-ONLY0:       if.end6671:
// SIMD-ONLY0-NEXT:    [[TMP5149:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5149]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5150:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5151:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6672:%.*]] = fcmp oeq double [[TMP5150]], [[TMP5151]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6672]], label [[IF_THEN6674:%.*]], label [[IF_END6675:%.*]]
// SIMD-ONLY0:       if.then6674:
// SIMD-ONLY0-NEXT:    [[TMP5152:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5152]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6675]]
// SIMD-ONLY0:       if.end6675:
// SIMD-ONLY0-NEXT:    [[TMP5153:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5153]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5154:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5155:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6676:%.*]] = fcmp oeq double [[TMP5154]], [[TMP5155]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6676]], label [[IF_THEN6678:%.*]], label [[IF_ELSE6679:%.*]]
// SIMD-ONLY0:       if.then6678:
// SIMD-ONLY0-NEXT:    [[TMP5156:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5156]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6680:%.*]]
// SIMD-ONLY0:       if.else6679:
// SIMD-ONLY0-NEXT:    [[TMP5157:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5157]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6680]]
// SIMD-ONLY0:       if.end6680:
// SIMD-ONLY0-NEXT:    [[TMP5158:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5159:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6681:%.*]] = fcmp oeq double [[TMP5158]], [[TMP5159]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6681]], label [[IF_THEN6683:%.*]], label [[IF_ELSE6684:%.*]]
// SIMD-ONLY0:       if.then6683:
// SIMD-ONLY0-NEXT:    [[TMP5160:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5160]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6685:%.*]]
// SIMD-ONLY0:       if.else6684:
// SIMD-ONLY0-NEXT:    [[TMP5161:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5161]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6685]]
// SIMD-ONLY0:       if.end6685:
// SIMD-ONLY0-NEXT:    [[TMP5162:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5163:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6686:%.*]] = fcmp oeq double [[TMP5162]], [[TMP5163]]
// SIMD-ONLY0-NEXT:    [[CONV6687:%.*]] = zext i1 [[CMP6686]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6687]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5164:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6688:%.*]] = icmp ne i32 [[TMP5164]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6688]], label [[IF_THEN6689:%.*]], label [[IF_END6690:%.*]]
// SIMD-ONLY0:       if.then6689:
// SIMD-ONLY0-NEXT:    [[TMP5165:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5165]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6690]]
// SIMD-ONLY0:       if.end6690:
// SIMD-ONLY0-NEXT:    [[TMP5166:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5167:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6691:%.*]] = fcmp oeq double [[TMP5166]], [[TMP5167]]
// SIMD-ONLY0-NEXT:    [[CONV6692:%.*]] = zext i1 [[CMP6691]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6692]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5168:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6693:%.*]] = icmp ne i32 [[TMP5168]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6693]], label [[IF_THEN6694:%.*]], label [[IF_END6695:%.*]]
// SIMD-ONLY0:       if.then6694:
// SIMD-ONLY0-NEXT:    [[TMP5169:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5169]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6695]]
// SIMD-ONLY0:       if.end6695:
// SIMD-ONLY0-NEXT:    [[TMP5170:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5171:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6696:%.*]] = fcmp oeq double [[TMP5170]], [[TMP5171]]
// SIMD-ONLY0-NEXT:    [[CONV6697:%.*]] = zext i1 [[CMP6696]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6697]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5172:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6698:%.*]] = icmp ne i32 [[TMP5172]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6698]], label [[IF_THEN6699:%.*]], label [[IF_ELSE6700:%.*]]
// SIMD-ONLY0:       if.then6699:
// SIMD-ONLY0-NEXT:    [[TMP5173:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5173]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6701:%.*]]
// SIMD-ONLY0:       if.else6700:
// SIMD-ONLY0-NEXT:    [[TMP5174:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5174]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6701]]
// SIMD-ONLY0:       if.end6701:
// SIMD-ONLY0-NEXT:    [[TMP5175:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5176:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6702:%.*]] = fcmp oeq double [[TMP5175]], [[TMP5176]]
// SIMD-ONLY0-NEXT:    [[CONV6703:%.*]] = zext i1 [[CMP6702]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6703]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5177:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6704:%.*]] = icmp ne i32 [[TMP5177]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6704]], label [[IF_THEN6705:%.*]], label [[IF_ELSE6706:%.*]]
// SIMD-ONLY0:       if.then6705:
// SIMD-ONLY0-NEXT:    [[TMP5178:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5178]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6707:%.*]]
// SIMD-ONLY0:       if.else6706:
// SIMD-ONLY0-NEXT:    [[TMP5179:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5179]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6707]]
// SIMD-ONLY0:       if.end6707:
// SIMD-ONLY0-NEXT:    [[TMP5180:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5180]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5181:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5182:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6708:%.*]] = fcmp ogt double [[TMP5181]], [[TMP5182]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6708]], label [[IF_THEN6710:%.*]], label [[IF_END6711:%.*]]
// SIMD-ONLY0:       if.then6710:
// SIMD-ONLY0-NEXT:    [[TMP5183:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5183]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6711]]
// SIMD-ONLY0:       if.end6711:
// SIMD-ONLY0-NEXT:    [[TMP5184:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5184]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5185:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5186:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6712:%.*]] = fcmp ogt double [[TMP5185]], [[TMP5186]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6712]], label [[IF_THEN6714:%.*]], label [[IF_END6715:%.*]]
// SIMD-ONLY0:       if.then6714:
// SIMD-ONLY0-NEXT:    [[TMP5187:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5187]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6715]]
// SIMD-ONLY0:       if.end6715:
// SIMD-ONLY0-NEXT:    [[TMP5188:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5188]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5189:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5190:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6716:%.*]] = fcmp olt double [[TMP5189]], [[TMP5190]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6716]], label [[IF_THEN6718:%.*]], label [[IF_END6719:%.*]]
// SIMD-ONLY0:       if.then6718:
// SIMD-ONLY0-NEXT:    [[TMP5191:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5191]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6719]]
// SIMD-ONLY0:       if.end6719:
// SIMD-ONLY0-NEXT:    [[TMP5192:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5192]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5193:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5194:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6720:%.*]] = fcmp olt double [[TMP5193]], [[TMP5194]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6720]], label [[IF_THEN6722:%.*]], label [[IF_END6723:%.*]]
// SIMD-ONLY0:       if.then6722:
// SIMD-ONLY0-NEXT:    [[TMP5195:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5195]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6723]]
// SIMD-ONLY0:       if.end6723:
// SIMD-ONLY0-NEXT:    [[TMP5196:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5196]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5197:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5198:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6724:%.*]] = fcmp oeq double [[TMP5197]], [[TMP5198]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6724]], label [[IF_THEN6726:%.*]], label [[IF_END6727:%.*]]
// SIMD-ONLY0:       if.then6726:
// SIMD-ONLY0-NEXT:    [[TMP5199:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5199]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6727]]
// SIMD-ONLY0:       if.end6727:
// SIMD-ONLY0-NEXT:    [[TMP5200:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5200]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5201:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5202:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6728:%.*]] = fcmp oeq double [[TMP5201]], [[TMP5202]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6728]], label [[IF_THEN6730:%.*]], label [[IF_END6731:%.*]]
// SIMD-ONLY0:       if.then6730:
// SIMD-ONLY0-NEXT:    [[TMP5203:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5203]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6731]]
// SIMD-ONLY0:       if.end6731:
// SIMD-ONLY0-NEXT:    [[TMP5204:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5205:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6732:%.*]] = fcmp ogt double [[TMP5204]], [[TMP5205]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6732]], label [[IF_THEN6734:%.*]], label [[IF_END6735:%.*]]
// SIMD-ONLY0:       if.then6734:
// SIMD-ONLY0-NEXT:    [[TMP5206:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5206]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6735]]
// SIMD-ONLY0:       if.end6735:
// SIMD-ONLY0-NEXT:    [[TMP5207:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5207]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5208:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5209:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6736:%.*]] = fcmp ogt double [[TMP5208]], [[TMP5209]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6736]], label [[IF_THEN6738:%.*]], label [[IF_END6739:%.*]]
// SIMD-ONLY0:       if.then6738:
// SIMD-ONLY0-NEXT:    [[TMP5210:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5210]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6739]]
// SIMD-ONLY0:       if.end6739:
// SIMD-ONLY0-NEXT:    [[TMP5211:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5211]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5212:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5213:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6740:%.*]] = fcmp olt double [[TMP5212]], [[TMP5213]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6740]], label [[IF_THEN6742:%.*]], label [[IF_END6743:%.*]]
// SIMD-ONLY0:       if.then6742:
// SIMD-ONLY0-NEXT:    [[TMP5214:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5214]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6743]]
// SIMD-ONLY0:       if.end6743:
// SIMD-ONLY0-NEXT:    [[TMP5215:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5215]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5216:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5217:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6744:%.*]] = fcmp olt double [[TMP5216]], [[TMP5217]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6744]], label [[IF_THEN6746:%.*]], label [[IF_END6747:%.*]]
// SIMD-ONLY0:       if.then6746:
// SIMD-ONLY0-NEXT:    [[TMP5218:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5218]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6747]]
// SIMD-ONLY0:       if.end6747:
// SIMD-ONLY0-NEXT:    [[TMP5219:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5219]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5220:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5221:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6748:%.*]] = fcmp oeq double [[TMP5220]], [[TMP5221]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6748]], label [[IF_THEN6750:%.*]], label [[IF_END6751:%.*]]
// SIMD-ONLY0:       if.then6750:
// SIMD-ONLY0-NEXT:    [[TMP5222:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5222]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6751]]
// SIMD-ONLY0:       if.end6751:
// SIMD-ONLY0-NEXT:    [[TMP5223:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5223]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5224:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5225:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6752:%.*]] = fcmp oeq double [[TMP5224]], [[TMP5225]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6752]], label [[IF_THEN6754:%.*]], label [[IF_END6755:%.*]]
// SIMD-ONLY0:       if.then6754:
// SIMD-ONLY0-NEXT:    [[TMP5226:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5226]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6755]]
// SIMD-ONLY0:       if.end6755:
// SIMD-ONLY0-NEXT:    [[TMP5227:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5227]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5228:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5229:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6756:%.*]] = fcmp oeq double [[TMP5228]], [[TMP5229]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6756]], label [[IF_THEN6758:%.*]], label [[IF_ELSE6759:%.*]]
// SIMD-ONLY0:       if.then6758:
// SIMD-ONLY0-NEXT:    [[TMP5230:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5230]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6760:%.*]]
// SIMD-ONLY0:       if.else6759:
// SIMD-ONLY0-NEXT:    [[TMP5231:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5231]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6760]]
// SIMD-ONLY0:       if.end6760:
// SIMD-ONLY0-NEXT:    [[TMP5232:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5233:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6761:%.*]] = fcmp oeq double [[TMP5232]], [[TMP5233]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6761]], label [[IF_THEN6763:%.*]], label [[IF_ELSE6764:%.*]]
// SIMD-ONLY0:       if.then6763:
// SIMD-ONLY0-NEXT:    [[TMP5234:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5234]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6765:%.*]]
// SIMD-ONLY0:       if.else6764:
// SIMD-ONLY0-NEXT:    [[TMP5235:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5235]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6765]]
// SIMD-ONLY0:       if.end6765:
// SIMD-ONLY0-NEXT:    [[TMP5236:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5237:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6766:%.*]] = fcmp oeq double [[TMP5236]], [[TMP5237]]
// SIMD-ONLY0-NEXT:    [[CONV6767:%.*]] = zext i1 [[CMP6766]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6767]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5238:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6768:%.*]] = icmp ne i32 [[TMP5238]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6768]], label [[IF_THEN6769:%.*]], label [[IF_END6770:%.*]]
// SIMD-ONLY0:       if.then6769:
// SIMD-ONLY0-NEXT:    [[TMP5239:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5239]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6770]]
// SIMD-ONLY0:       if.end6770:
// SIMD-ONLY0-NEXT:    [[TMP5240:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5241:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6771:%.*]] = fcmp oeq double [[TMP5240]], [[TMP5241]]
// SIMD-ONLY0-NEXT:    [[CONV6772:%.*]] = zext i1 [[CMP6771]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6772]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5242:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6773:%.*]] = icmp ne i32 [[TMP5242]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6773]], label [[IF_THEN6774:%.*]], label [[IF_END6775:%.*]]
// SIMD-ONLY0:       if.then6774:
// SIMD-ONLY0-NEXT:    [[TMP5243:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5243]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6775]]
// SIMD-ONLY0:       if.end6775:
// SIMD-ONLY0-NEXT:    [[TMP5244:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5245:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6776:%.*]] = fcmp oeq double [[TMP5244]], [[TMP5245]]
// SIMD-ONLY0-NEXT:    [[CONV6777:%.*]] = zext i1 [[CMP6776]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6777]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5246:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6778:%.*]] = icmp ne i32 [[TMP5246]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6778]], label [[IF_THEN6779:%.*]], label [[IF_ELSE6780:%.*]]
// SIMD-ONLY0:       if.then6779:
// SIMD-ONLY0-NEXT:    [[TMP5247:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5247]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6781:%.*]]
// SIMD-ONLY0:       if.else6780:
// SIMD-ONLY0-NEXT:    [[TMP5248:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5248]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6781]]
// SIMD-ONLY0:       if.end6781:
// SIMD-ONLY0-NEXT:    [[TMP5249:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5250:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6782:%.*]] = fcmp oeq double [[TMP5249]], [[TMP5250]]
// SIMD-ONLY0-NEXT:    [[CONV6783:%.*]] = zext i1 [[CMP6782]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6783]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5251:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6784:%.*]] = icmp ne i32 [[TMP5251]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6784]], label [[IF_THEN6785:%.*]], label [[IF_ELSE6786:%.*]]
// SIMD-ONLY0:       if.then6785:
// SIMD-ONLY0-NEXT:    [[TMP5252:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5252]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6787:%.*]]
// SIMD-ONLY0:       if.else6786:
// SIMD-ONLY0-NEXT:    [[TMP5253:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5253]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6787]]
// SIMD-ONLY0:       if.end6787:
// SIMD-ONLY0-NEXT:    [[TMP5254:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5254]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5255:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5256:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6788:%.*]] = fcmp ogt double [[TMP5255]], [[TMP5256]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6788]], label [[IF_THEN6790:%.*]], label [[IF_END6791:%.*]]
// SIMD-ONLY0:       if.then6790:
// SIMD-ONLY0-NEXT:    [[TMP5257:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5257]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6791]]
// SIMD-ONLY0:       if.end6791:
// SIMD-ONLY0-NEXT:    [[TMP5258:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5258]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5259:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5260:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6792:%.*]] = fcmp ogt double [[TMP5259]], [[TMP5260]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6792]], label [[IF_THEN6794:%.*]], label [[IF_END6795:%.*]]
// SIMD-ONLY0:       if.then6794:
// SIMD-ONLY0-NEXT:    [[TMP5261:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5261]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6795]]
// SIMD-ONLY0:       if.end6795:
// SIMD-ONLY0-NEXT:    [[TMP5262:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5262]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5263:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5264:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6796:%.*]] = fcmp olt double [[TMP5263]], [[TMP5264]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6796]], label [[IF_THEN6798:%.*]], label [[IF_END6799:%.*]]
// SIMD-ONLY0:       if.then6798:
// SIMD-ONLY0-NEXT:    [[TMP5265:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5265]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6799]]
// SIMD-ONLY0:       if.end6799:
// SIMD-ONLY0-NEXT:    [[TMP5266:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5266]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5267:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5268:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6800:%.*]] = fcmp olt double [[TMP5267]], [[TMP5268]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6800]], label [[IF_THEN6802:%.*]], label [[IF_END6803:%.*]]
// SIMD-ONLY0:       if.then6802:
// SIMD-ONLY0-NEXT:    [[TMP5269:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5269]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6803]]
// SIMD-ONLY0:       if.end6803:
// SIMD-ONLY0-NEXT:    [[TMP5270:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5270]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5271:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5272:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6804:%.*]] = fcmp oeq double [[TMP5271]], [[TMP5272]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6804]], label [[IF_THEN6806:%.*]], label [[IF_END6807:%.*]]
// SIMD-ONLY0:       if.then6806:
// SIMD-ONLY0-NEXT:    [[TMP5273:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5273]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6807]]
// SIMD-ONLY0:       if.end6807:
// SIMD-ONLY0-NEXT:    [[TMP5274:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5274]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5275:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5276:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6808:%.*]] = fcmp oeq double [[TMP5275]], [[TMP5276]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6808]], label [[IF_THEN6810:%.*]], label [[IF_END6811:%.*]]
// SIMD-ONLY0:       if.then6810:
// SIMD-ONLY0-NEXT:    [[TMP5277:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5277]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6811]]
// SIMD-ONLY0:       if.end6811:
// SIMD-ONLY0-NEXT:    [[TMP5278:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5279:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6812:%.*]] = fcmp ogt double [[TMP5278]], [[TMP5279]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6812]], label [[IF_THEN6814:%.*]], label [[IF_END6815:%.*]]
// SIMD-ONLY0:       if.then6814:
// SIMD-ONLY0-NEXT:    [[TMP5280:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5280]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6815]]
// SIMD-ONLY0:       if.end6815:
// SIMD-ONLY0-NEXT:    [[TMP5281:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5281]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5282:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5283:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6816:%.*]] = fcmp ogt double [[TMP5282]], [[TMP5283]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6816]], label [[IF_THEN6818:%.*]], label [[IF_END6819:%.*]]
// SIMD-ONLY0:       if.then6818:
// SIMD-ONLY0-NEXT:    [[TMP5284:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5284]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6819]]
// SIMD-ONLY0:       if.end6819:
// SIMD-ONLY0-NEXT:    [[TMP5285:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5285]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5286:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5287:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6820:%.*]] = fcmp olt double [[TMP5286]], [[TMP5287]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6820]], label [[IF_THEN6822:%.*]], label [[IF_END6823:%.*]]
// SIMD-ONLY0:       if.then6822:
// SIMD-ONLY0-NEXT:    [[TMP5288:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5288]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6823]]
// SIMD-ONLY0:       if.end6823:
// SIMD-ONLY0-NEXT:    [[TMP5289:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5289]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5290:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5291:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6824:%.*]] = fcmp olt double [[TMP5290]], [[TMP5291]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6824]], label [[IF_THEN6826:%.*]], label [[IF_END6827:%.*]]
// SIMD-ONLY0:       if.then6826:
// SIMD-ONLY0-NEXT:    [[TMP5292:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5292]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6827]]
// SIMD-ONLY0:       if.end6827:
// SIMD-ONLY0-NEXT:    [[TMP5293:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5293]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5294:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5295:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6828:%.*]] = fcmp oeq double [[TMP5294]], [[TMP5295]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6828]], label [[IF_THEN6830:%.*]], label [[IF_END6831:%.*]]
// SIMD-ONLY0:       if.then6830:
// SIMD-ONLY0-NEXT:    [[TMP5296:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5296]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6831]]
// SIMD-ONLY0:       if.end6831:
// SIMD-ONLY0-NEXT:    [[TMP5297:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5297]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5298:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5299:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6832:%.*]] = fcmp oeq double [[TMP5298]], [[TMP5299]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6832]], label [[IF_THEN6834:%.*]], label [[IF_END6835:%.*]]
// SIMD-ONLY0:       if.then6834:
// SIMD-ONLY0-NEXT:    [[TMP5300:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5300]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6835]]
// SIMD-ONLY0:       if.end6835:
// SIMD-ONLY0-NEXT:    [[TMP5301:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5301]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5302:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5303:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6836:%.*]] = fcmp oeq double [[TMP5302]], [[TMP5303]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6836]], label [[IF_THEN6838:%.*]], label [[IF_ELSE6839:%.*]]
// SIMD-ONLY0:       if.then6838:
// SIMD-ONLY0-NEXT:    [[TMP5304:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5304]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6840:%.*]]
// SIMD-ONLY0:       if.else6839:
// SIMD-ONLY0-NEXT:    [[TMP5305:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5305]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6840]]
// SIMD-ONLY0:       if.end6840:
// SIMD-ONLY0-NEXT:    [[TMP5306:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5307:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6841:%.*]] = fcmp oeq double [[TMP5306]], [[TMP5307]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6841]], label [[IF_THEN6843:%.*]], label [[IF_ELSE6844:%.*]]
// SIMD-ONLY0:       if.then6843:
// SIMD-ONLY0-NEXT:    [[TMP5308:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5308]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6845:%.*]]
// SIMD-ONLY0:       if.else6844:
// SIMD-ONLY0-NEXT:    [[TMP5309:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5309]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6845]]
// SIMD-ONLY0:       if.end6845:
// SIMD-ONLY0-NEXT:    [[TMP5310:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5311:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6846:%.*]] = fcmp oeq double [[TMP5310]], [[TMP5311]]
// SIMD-ONLY0-NEXT:    [[CONV6847:%.*]] = zext i1 [[CMP6846]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6847]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5312:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6848:%.*]] = icmp ne i32 [[TMP5312]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6848]], label [[IF_THEN6849:%.*]], label [[IF_END6850:%.*]]
// SIMD-ONLY0:       if.then6849:
// SIMD-ONLY0-NEXT:    [[TMP5313:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5313]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6850]]
// SIMD-ONLY0:       if.end6850:
// SIMD-ONLY0-NEXT:    [[TMP5314:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5315:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6851:%.*]] = fcmp oeq double [[TMP5314]], [[TMP5315]]
// SIMD-ONLY0-NEXT:    [[CONV6852:%.*]] = zext i1 [[CMP6851]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6852]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5316:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6853:%.*]] = icmp ne i32 [[TMP5316]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6853]], label [[IF_THEN6854:%.*]], label [[IF_END6855:%.*]]
// SIMD-ONLY0:       if.then6854:
// SIMD-ONLY0-NEXT:    [[TMP5317:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5317]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6855]]
// SIMD-ONLY0:       if.end6855:
// SIMD-ONLY0-NEXT:    [[TMP5318:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5319:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6856:%.*]] = fcmp oeq double [[TMP5318]], [[TMP5319]]
// SIMD-ONLY0-NEXT:    [[CONV6857:%.*]] = zext i1 [[CMP6856]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6857]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5320:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6858:%.*]] = icmp ne i32 [[TMP5320]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6858]], label [[IF_THEN6859:%.*]], label [[IF_ELSE6860:%.*]]
// SIMD-ONLY0:       if.then6859:
// SIMD-ONLY0-NEXT:    [[TMP5321:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5321]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6861:%.*]]
// SIMD-ONLY0:       if.else6860:
// SIMD-ONLY0-NEXT:    [[TMP5322:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5322]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6861]]
// SIMD-ONLY0:       if.end6861:
// SIMD-ONLY0-NEXT:    [[TMP5323:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5324:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6862:%.*]] = fcmp oeq double [[TMP5323]], [[TMP5324]]
// SIMD-ONLY0-NEXT:    [[CONV6863:%.*]] = zext i1 [[CMP6862]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6863]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5325:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6864:%.*]] = icmp ne i32 [[TMP5325]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6864]], label [[IF_THEN6865:%.*]], label [[IF_ELSE6866:%.*]]
// SIMD-ONLY0:       if.then6865:
// SIMD-ONLY0-NEXT:    [[TMP5326:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5326]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6867:%.*]]
// SIMD-ONLY0:       if.else6866:
// SIMD-ONLY0-NEXT:    [[TMP5327:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5327]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6867]]
// SIMD-ONLY0:       if.end6867:
// SIMD-ONLY0-NEXT:    ret void
//
//
// SIMD-ONLY0-LABEL: @cxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[CX:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[CV:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[CE:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[CD:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON1]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON2]], ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON3]], ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP0]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = sext i8 [[TMP1]] to i32
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV4:%.*]] = sext i8 [[TMP2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV]], [[CONV4]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV6:%.*]] = sext i8 [[TMP3]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV7:%.*]] = sext i8 [[TMP4]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV6]], [[COND_TRUE]] ], [ [[CONV7]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    [[CONV8:%.*]] = trunc i32 [[COND]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV8]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP5]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV9:%.*]] = sext i8 [[TMP6]] to i32
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV10:%.*]] = sext i8 [[TMP7]] to i32
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = icmp slt i32 [[CONV9]], [[CONV10]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE13:%.*]], label [[COND_FALSE15:%.*]]
// SIMD-ONLY0:       cond.true13:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV14:%.*]] = sext i8 [[TMP8]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false15:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV16:%.*]] = sext i8 [[TMP9]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi i32 [ [[CONV14]], [[COND_TRUE13]] ], [ [[CONV16]], [[COND_FALSE15]] ]
// SIMD-ONLY0-NEXT:    [[CONV19:%.*]] = trunc i32 [[COND18]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV19]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP10]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV20:%.*]] = sext i8 [[TMP11]] to i32
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV21:%.*]] = sext i8 [[TMP12]] to i32
// SIMD-ONLY0-NEXT:    [[CMP22:%.*]] = icmp eq i32 [[CONV20]], [[CONV21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP22]], label [[COND_TRUE24:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true24:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV25:%.*]] = sext i8 [[TMP13]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END28:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV27:%.*]] = sext i8 [[TMP14]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END28]]
// SIMD-ONLY0:       cond.end28:
// SIMD-ONLY0-NEXT:    [[COND29:%.*]] = phi i32 [ [[CONV25]], [[COND_TRUE24]] ], [ [[CONV27]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    [[CONV30:%.*]] = trunc i32 [[COND29]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV30]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV31:%.*]] = sext i8 [[TMP15]] to i32
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV32:%.*]] = sext i8 [[TMP16]] to i32
// SIMD-ONLY0-NEXT:    [[CMP33:%.*]] = icmp sgt i32 [[CONV31]], [[CONV32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP33]], label [[COND_TRUE35:%.*]], label [[COND_FALSE37:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV36:%.*]] = sext i8 [[TMP17]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false37:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV38:%.*]] = sext i8 [[TMP18]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi i32 [ [[CONV36]], [[COND_TRUE35]] ], [ [[CONV38]], [[COND_FALSE37]] ]
// SIMD-ONLY0-NEXT:    [[CONV41:%.*]] = trunc i32 [[COND40]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV41]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP19]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV42:%.*]] = sext i8 [[TMP20]] to i32
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV43:%.*]] = sext i8 [[TMP21]] to i32
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp slt i32 [[CONV42]], [[CONV43]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE46:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true46:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV47:%.*]] = sext i8 [[TMP22]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END50:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV49:%.*]] = sext i8 [[TMP23]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END50]]
// SIMD-ONLY0:       cond.end50:
// SIMD-ONLY0-NEXT:    [[COND51:%.*]] = phi i32 [ [[CONV47]], [[COND_TRUE46]] ], [ [[CONV49]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    [[CONV52:%.*]] = trunc i32 [[COND51]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV52]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP24]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV53:%.*]] = sext i8 [[TMP25]] to i32
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV54:%.*]] = sext i8 [[TMP26]] to i32
// SIMD-ONLY0-NEXT:    [[CMP55:%.*]] = icmp eq i32 [[CONV53]], [[CONV54]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP55]], label [[COND_TRUE57:%.*]], label [[COND_FALSE59:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV58:%.*]] = sext i8 [[TMP27]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END61:%.*]]
// SIMD-ONLY0:       cond.false59:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV60:%.*]] = sext i8 [[TMP28]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END61]]
// SIMD-ONLY0:       cond.end61:
// SIMD-ONLY0-NEXT:    [[COND62:%.*]] = phi i32 [ [[CONV58]], [[COND_TRUE57]] ], [ [[CONV60]], [[COND_FALSE59]] ]
// SIMD-ONLY0-NEXT:    [[CONV63:%.*]] = trunc i32 [[COND62]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV63]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP29]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP30]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV64:%.*]] = sext i8 [[TMP31]] to i32
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV65:%.*]] = sext i8 [[TMP32]] to i32
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = icmp sgt i32 [[CONV64]], [[CONV65]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE68:%.*]], label [[COND_FALSE70:%.*]]
// SIMD-ONLY0:       cond.true68:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV69:%.*]] = sext i8 [[TMP33]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false70:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV71:%.*]] = sext i8 [[TMP34]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi i32 [ [[CONV69]], [[COND_TRUE68]] ], [ [[CONV71]], [[COND_FALSE70]] ]
// SIMD-ONLY0-NEXT:    [[CONV74:%.*]] = trunc i32 [[COND73]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV74]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP35]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV75:%.*]] = sext i8 [[TMP36]] to i32
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV76:%.*]] = sext i8 [[TMP37]] to i32
// SIMD-ONLY0-NEXT:    [[CMP77:%.*]] = icmp slt i32 [[CONV75]], [[CONV76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP77]], label [[COND_TRUE79:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true79:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV80:%.*]] = sext i8 [[TMP38]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END83:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV82:%.*]] = sext i8 [[TMP39]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END83]]
// SIMD-ONLY0:       cond.end83:
// SIMD-ONLY0-NEXT:    [[COND84:%.*]] = phi i32 [ [[CONV80]], [[COND_TRUE79]] ], [ [[CONV82]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    [[CONV85:%.*]] = trunc i32 [[COND84]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV85]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP40]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV86:%.*]] = sext i8 [[TMP41]] to i32
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV87:%.*]] = sext i8 [[TMP42]] to i32
// SIMD-ONLY0-NEXT:    [[CMP88:%.*]] = icmp eq i32 [[CONV86]], [[CONV87]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP88]], label [[COND_TRUE90:%.*]], label [[COND_FALSE92:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV91:%.*]] = sext i8 [[TMP43]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false92:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV93:%.*]] = sext i8 [[TMP44]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi i32 [ [[CONV91]], [[COND_TRUE90]] ], [ [[CONV93]], [[COND_FALSE92]] ]
// SIMD-ONLY0-NEXT:    [[CONV96:%.*]] = trunc i32 [[COND95]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV96]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV97:%.*]] = sext i8 [[TMP45]] to i32
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV98:%.*]] = sext i8 [[TMP46]] to i32
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = icmp sgt i32 [[CONV97]], [[CONV98]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE101:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true101:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV102:%.*]] = sext i8 [[TMP47]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END105:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV104:%.*]] = sext i8 [[TMP48]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END105]]
// SIMD-ONLY0:       cond.end105:
// SIMD-ONLY0-NEXT:    [[COND106:%.*]] = phi i32 [ [[CONV102]], [[COND_TRUE101]] ], [ [[CONV104]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    [[CONV107:%.*]] = trunc i32 [[COND106]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV107]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP49]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV108:%.*]] = sext i8 [[TMP50]] to i32
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV109:%.*]] = sext i8 [[TMP51]] to i32
// SIMD-ONLY0-NEXT:    [[CMP110:%.*]] = icmp slt i32 [[CONV108]], [[CONV109]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP110]], label [[COND_TRUE112:%.*]], label [[COND_FALSE114:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV113:%.*]] = sext i8 [[TMP52]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END116:%.*]]
// SIMD-ONLY0:       cond.false114:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = sext i8 [[TMP53]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END116]]
// SIMD-ONLY0:       cond.end116:
// SIMD-ONLY0-NEXT:    [[COND117:%.*]] = phi i32 [ [[CONV113]], [[COND_TRUE112]] ], [ [[CONV115]], [[COND_FALSE114]] ]
// SIMD-ONLY0-NEXT:    [[CONV118:%.*]] = trunc i32 [[COND117]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV118]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP54]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV119:%.*]] = sext i8 [[TMP55]] to i32
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV120:%.*]] = sext i8 [[TMP56]] to i32
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = icmp eq i32 [[CONV119]], [[CONV120]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE123:%.*]], label [[COND_FALSE125:%.*]]
// SIMD-ONLY0:       cond.true123:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV124:%.*]] = sext i8 [[TMP57]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false125:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = sext i8 [[TMP58]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i32 [ [[CONV124]], [[COND_TRUE123]] ], [ [[CONV126]], [[COND_FALSE125]] ]
// SIMD-ONLY0-NEXT:    [[CONV129:%.*]] = trunc i32 [[COND128]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV129]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP59]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP60]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV130:%.*]] = sext i8 [[TMP61]] to i32
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV131:%.*]] = sext i8 [[TMP62]] to i32
// SIMD-ONLY0-NEXT:    [[CMP132:%.*]] = icmp sgt i32 [[CONV130]], [[CONV131]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP132]], label [[COND_TRUE134:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true134:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV135:%.*]] = sext i8 [[TMP63]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END138:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV137:%.*]] = sext i8 [[TMP64]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END138]]
// SIMD-ONLY0:       cond.end138:
// SIMD-ONLY0-NEXT:    [[COND139:%.*]] = phi i32 [ [[CONV135]], [[COND_TRUE134]] ], [ [[CONV137]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    [[CONV140:%.*]] = trunc i32 [[COND139]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV140]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP65]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV141:%.*]] = sext i8 [[TMP66]] to i32
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV142:%.*]] = sext i8 [[TMP67]] to i32
// SIMD-ONLY0-NEXT:    [[CMP143:%.*]] = icmp slt i32 [[CONV141]], [[CONV142]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP143]], label [[COND_TRUE145:%.*]], label [[COND_FALSE147:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV146:%.*]] = sext i8 [[TMP68]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false147:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = sext i8 [[TMP69]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i32 [ [[CONV146]], [[COND_TRUE145]] ], [ [[CONV148]], [[COND_FALSE147]] ]
// SIMD-ONLY0-NEXT:    [[CONV151:%.*]] = trunc i32 [[COND150]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV151]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP70]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV152:%.*]] = sext i8 [[TMP71]] to i32
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV153:%.*]] = sext i8 [[TMP72]] to i32
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp eq i32 [[CONV152]], [[CONV153]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE156:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true156:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV157:%.*]] = sext i8 [[TMP73]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END160:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV159:%.*]] = sext i8 [[TMP74]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END160]]
// SIMD-ONLY0:       cond.end160:
// SIMD-ONLY0-NEXT:    [[COND161:%.*]] = phi i32 [ [[CONV157]], [[COND_TRUE156]] ], [ [[CONV159]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    [[CONV162:%.*]] = trunc i32 [[COND161]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV162]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV163:%.*]] = sext i8 [[TMP75]] to i32
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV164:%.*]] = sext i8 [[TMP76]] to i32
// SIMD-ONLY0-NEXT:    [[CMP165:%.*]] = icmp sgt i32 [[CONV163]], [[CONV164]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP165]], label [[COND_TRUE167:%.*]], label [[COND_FALSE169:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV168:%.*]] = sext i8 [[TMP77]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END171:%.*]]
// SIMD-ONLY0:       cond.false169:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV170:%.*]] = sext i8 [[TMP78]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END171]]
// SIMD-ONLY0:       cond.end171:
// SIMD-ONLY0-NEXT:    [[COND172:%.*]] = phi i32 [ [[CONV168]], [[COND_TRUE167]] ], [ [[CONV170]], [[COND_FALSE169]] ]
// SIMD-ONLY0-NEXT:    [[CONV173:%.*]] = trunc i32 [[COND172]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV173]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP79]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV174:%.*]] = sext i8 [[TMP80]] to i32
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV175:%.*]] = sext i8 [[TMP81]] to i32
// SIMD-ONLY0-NEXT:    [[CMP176:%.*]] = icmp slt i32 [[CONV174]], [[CONV175]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP176]], label [[COND_TRUE178:%.*]], label [[COND_FALSE180:%.*]]
// SIMD-ONLY0:       cond.true178:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV179:%.*]] = sext i8 [[TMP82]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END182:%.*]]
// SIMD-ONLY0:       cond.false180:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV181:%.*]] = sext i8 [[TMP83]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END182]]
// SIMD-ONLY0:       cond.end182:
// SIMD-ONLY0-NEXT:    [[COND183:%.*]] = phi i32 [ [[CONV179]], [[COND_TRUE178]] ], [ [[CONV181]], [[COND_FALSE180]] ]
// SIMD-ONLY0-NEXT:    [[CONV184:%.*]] = trunc i32 [[COND183]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV184]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP84]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV185:%.*]] = sext i8 [[TMP85]] to i32
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV186:%.*]] = sext i8 [[TMP86]] to i32
// SIMD-ONLY0-NEXT:    [[CMP187:%.*]] = icmp eq i32 [[CONV185]], [[CONV186]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP187]], label [[COND_TRUE189:%.*]], label [[COND_FALSE191:%.*]]
// SIMD-ONLY0:       cond.true189:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV190:%.*]] = sext i8 [[TMP87]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END193:%.*]]
// SIMD-ONLY0:       cond.false191:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV192:%.*]] = sext i8 [[TMP88]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END193]]
// SIMD-ONLY0:       cond.end193:
// SIMD-ONLY0-NEXT:    [[COND194:%.*]] = phi i32 [ [[CONV190]], [[COND_TRUE189]] ], [ [[CONV192]], [[COND_FALSE191]] ]
// SIMD-ONLY0-NEXT:    [[CONV195:%.*]] = trunc i32 [[COND194]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV195]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP89]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP90]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV196:%.*]] = sext i8 [[TMP91]] to i32
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV197:%.*]] = sext i8 [[TMP92]] to i32
// SIMD-ONLY0-NEXT:    [[CMP198:%.*]] = icmp sgt i32 [[CONV196]], [[CONV197]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP198]], label [[COND_TRUE200:%.*]], label [[COND_FALSE202:%.*]]
// SIMD-ONLY0:       cond.true200:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV201:%.*]] = sext i8 [[TMP93]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END204:%.*]]
// SIMD-ONLY0:       cond.false202:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV203:%.*]] = sext i8 [[TMP94]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END204]]
// SIMD-ONLY0:       cond.end204:
// SIMD-ONLY0-NEXT:    [[COND205:%.*]] = phi i32 [ [[CONV201]], [[COND_TRUE200]] ], [ [[CONV203]], [[COND_FALSE202]] ]
// SIMD-ONLY0-NEXT:    [[CONV206:%.*]] = trunc i32 [[COND205]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV206]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP95]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV207:%.*]] = sext i8 [[TMP96]] to i32
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV208:%.*]] = sext i8 [[TMP97]] to i32
// SIMD-ONLY0-NEXT:    [[CMP209:%.*]] = icmp slt i32 [[CONV207]], [[CONV208]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP209]], label [[COND_TRUE211:%.*]], label [[COND_FALSE213:%.*]]
// SIMD-ONLY0:       cond.true211:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV212:%.*]] = sext i8 [[TMP98]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END215:%.*]]
// SIMD-ONLY0:       cond.false213:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV214:%.*]] = sext i8 [[TMP99]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END215]]
// SIMD-ONLY0:       cond.end215:
// SIMD-ONLY0-NEXT:    [[COND216:%.*]] = phi i32 [ [[CONV212]], [[COND_TRUE211]] ], [ [[CONV214]], [[COND_FALSE213]] ]
// SIMD-ONLY0-NEXT:    [[CONV217:%.*]] = trunc i32 [[COND216]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV217]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP100]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV218:%.*]] = sext i8 [[TMP101]] to i32
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV219:%.*]] = sext i8 [[TMP102]] to i32
// SIMD-ONLY0-NEXT:    [[CMP220:%.*]] = icmp eq i32 [[CONV218]], [[CONV219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP220]], label [[COND_TRUE222:%.*]], label [[COND_FALSE224:%.*]]
// SIMD-ONLY0:       cond.true222:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV223:%.*]] = sext i8 [[TMP103]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END226:%.*]]
// SIMD-ONLY0:       cond.false224:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV225:%.*]] = sext i8 [[TMP104]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END226]]
// SIMD-ONLY0:       cond.end226:
// SIMD-ONLY0-NEXT:    [[COND227:%.*]] = phi i32 [ [[CONV223]], [[COND_TRUE222]] ], [ [[CONV225]], [[COND_FALSE224]] ]
// SIMD-ONLY0-NEXT:    [[CONV228:%.*]] = trunc i32 [[COND227]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV228]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV229:%.*]] = sext i8 [[TMP105]] to i32
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV230:%.*]] = sext i8 [[TMP106]] to i32
// SIMD-ONLY0-NEXT:    [[CMP231:%.*]] = icmp sgt i32 [[CONV229]], [[CONV230]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP231]], label [[COND_TRUE233:%.*]], label [[COND_FALSE235:%.*]]
// SIMD-ONLY0:       cond.true233:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV234:%.*]] = sext i8 [[TMP107]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END237:%.*]]
// SIMD-ONLY0:       cond.false235:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV236:%.*]] = sext i8 [[TMP108]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END237]]
// SIMD-ONLY0:       cond.end237:
// SIMD-ONLY0-NEXT:    [[COND238:%.*]] = phi i32 [ [[CONV234]], [[COND_TRUE233]] ], [ [[CONV236]], [[COND_FALSE235]] ]
// SIMD-ONLY0-NEXT:    [[CONV239:%.*]] = trunc i32 [[COND238]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV239]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP109]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV240:%.*]] = sext i8 [[TMP110]] to i32
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV241:%.*]] = sext i8 [[TMP111]] to i32
// SIMD-ONLY0-NEXT:    [[CMP242:%.*]] = icmp slt i32 [[CONV240]], [[CONV241]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP242]], label [[COND_TRUE244:%.*]], label [[COND_FALSE246:%.*]]
// SIMD-ONLY0:       cond.true244:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV245:%.*]] = sext i8 [[TMP112]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END248:%.*]]
// SIMD-ONLY0:       cond.false246:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV247:%.*]] = sext i8 [[TMP113]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END248]]
// SIMD-ONLY0:       cond.end248:
// SIMD-ONLY0-NEXT:    [[COND249:%.*]] = phi i32 [ [[CONV245]], [[COND_TRUE244]] ], [ [[CONV247]], [[COND_FALSE246]] ]
// SIMD-ONLY0-NEXT:    [[CONV250:%.*]] = trunc i32 [[COND249]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV250]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP114]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV251:%.*]] = sext i8 [[TMP115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV252:%.*]] = sext i8 [[TMP116]] to i32
// SIMD-ONLY0-NEXT:    [[CMP253:%.*]] = icmp eq i32 [[CONV251]], [[CONV252]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP253]], label [[COND_TRUE255:%.*]], label [[COND_FALSE257:%.*]]
// SIMD-ONLY0:       cond.true255:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV256:%.*]] = sext i8 [[TMP117]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END259:%.*]]
// SIMD-ONLY0:       cond.false257:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV258:%.*]] = sext i8 [[TMP118]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END259]]
// SIMD-ONLY0:       cond.end259:
// SIMD-ONLY0-NEXT:    [[COND260:%.*]] = phi i32 [ [[CONV256]], [[COND_TRUE255]] ], [ [[CONV258]], [[COND_FALSE257]] ]
// SIMD-ONLY0-NEXT:    [[CONV261:%.*]] = trunc i32 [[COND260]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV261]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP119]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP120]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV262:%.*]] = sext i8 [[TMP121]] to i32
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV263:%.*]] = sext i8 [[TMP122]] to i32
// SIMD-ONLY0-NEXT:    [[CMP264:%.*]] = icmp sgt i32 [[CONV262]], [[CONV263]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP264]], label [[COND_TRUE266:%.*]], label [[COND_FALSE268:%.*]]
// SIMD-ONLY0:       cond.true266:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV267:%.*]] = sext i8 [[TMP123]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END270:%.*]]
// SIMD-ONLY0:       cond.false268:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV269:%.*]] = sext i8 [[TMP124]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END270]]
// SIMD-ONLY0:       cond.end270:
// SIMD-ONLY0-NEXT:    [[COND271:%.*]] = phi i32 [ [[CONV267]], [[COND_TRUE266]] ], [ [[CONV269]], [[COND_FALSE268]] ]
// SIMD-ONLY0-NEXT:    [[CONV272:%.*]] = trunc i32 [[COND271]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV272]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP125]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV273:%.*]] = sext i8 [[TMP126]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV274:%.*]] = sext i8 [[TMP127]] to i32
// SIMD-ONLY0-NEXT:    [[CMP275:%.*]] = icmp slt i32 [[CONV273]], [[CONV274]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP275]], label [[COND_TRUE277:%.*]], label [[COND_FALSE279:%.*]]
// SIMD-ONLY0:       cond.true277:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV278:%.*]] = sext i8 [[TMP128]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END281:%.*]]
// SIMD-ONLY0:       cond.false279:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV280:%.*]] = sext i8 [[TMP129]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END281]]
// SIMD-ONLY0:       cond.end281:
// SIMD-ONLY0-NEXT:    [[COND282:%.*]] = phi i32 [ [[CONV278]], [[COND_TRUE277]] ], [ [[CONV280]], [[COND_FALSE279]] ]
// SIMD-ONLY0-NEXT:    [[CONV283:%.*]] = trunc i32 [[COND282]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV283]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP130]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV284:%.*]] = sext i8 [[TMP131]] to i32
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV285:%.*]] = sext i8 [[TMP132]] to i32
// SIMD-ONLY0-NEXT:    [[CMP286:%.*]] = icmp eq i32 [[CONV284]], [[CONV285]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP286]], label [[COND_TRUE288:%.*]], label [[COND_FALSE290:%.*]]
// SIMD-ONLY0:       cond.true288:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV289:%.*]] = sext i8 [[TMP133]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292:%.*]]
// SIMD-ONLY0:       cond.false290:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV291:%.*]] = sext i8 [[TMP134]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292]]
// SIMD-ONLY0:       cond.end292:
// SIMD-ONLY0-NEXT:    [[COND293:%.*]] = phi i32 [ [[CONV289]], [[COND_TRUE288]] ], [ [[CONV291]], [[COND_FALSE290]] ]
// SIMD-ONLY0-NEXT:    [[CONV294:%.*]] = trunc i32 [[COND293]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV294]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV295:%.*]] = sext i8 [[TMP135]] to i32
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV296:%.*]] = sext i8 [[TMP136]] to i32
// SIMD-ONLY0-NEXT:    [[CMP297:%.*]] = icmp sgt i32 [[CONV295]], [[CONV296]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP297]], label [[COND_TRUE299:%.*]], label [[COND_FALSE301:%.*]]
// SIMD-ONLY0:       cond.true299:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV300:%.*]] = sext i8 [[TMP137]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END303:%.*]]
// SIMD-ONLY0:       cond.false301:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV302:%.*]] = sext i8 [[TMP138]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END303]]
// SIMD-ONLY0:       cond.end303:
// SIMD-ONLY0-NEXT:    [[COND304:%.*]] = phi i32 [ [[CONV300]], [[COND_TRUE299]] ], [ [[CONV302]], [[COND_FALSE301]] ]
// SIMD-ONLY0-NEXT:    [[CONV305:%.*]] = trunc i32 [[COND304]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV305]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP139]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV306:%.*]] = sext i8 [[TMP140]] to i32
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV307:%.*]] = sext i8 [[TMP141]] to i32
// SIMD-ONLY0-NEXT:    [[CMP308:%.*]] = icmp slt i32 [[CONV306]], [[CONV307]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP308]], label [[COND_TRUE310:%.*]], label [[COND_FALSE312:%.*]]
// SIMD-ONLY0:       cond.true310:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV311:%.*]] = sext i8 [[TMP142]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END314:%.*]]
// SIMD-ONLY0:       cond.false312:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV313:%.*]] = sext i8 [[TMP143]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END314]]
// SIMD-ONLY0:       cond.end314:
// SIMD-ONLY0-NEXT:    [[COND315:%.*]] = phi i32 [ [[CONV311]], [[COND_TRUE310]] ], [ [[CONV313]], [[COND_FALSE312]] ]
// SIMD-ONLY0-NEXT:    [[CONV316:%.*]] = trunc i32 [[COND315]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV316]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP144]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV317:%.*]] = sext i8 [[TMP145]] to i32
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV318:%.*]] = sext i8 [[TMP146]] to i32
// SIMD-ONLY0-NEXT:    [[CMP319:%.*]] = icmp eq i32 [[CONV317]], [[CONV318]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP319]], label [[COND_TRUE321:%.*]], label [[COND_FALSE323:%.*]]
// SIMD-ONLY0:       cond.true321:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV322:%.*]] = sext i8 [[TMP147]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END325:%.*]]
// SIMD-ONLY0:       cond.false323:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV324:%.*]] = sext i8 [[TMP148]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END325]]
// SIMD-ONLY0:       cond.end325:
// SIMD-ONLY0-NEXT:    [[COND326:%.*]] = phi i32 [ [[CONV322]], [[COND_TRUE321]] ], [ [[CONV324]], [[COND_FALSE323]] ]
// SIMD-ONLY0-NEXT:    [[CONV327:%.*]] = trunc i32 [[COND326]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV327]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP149]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP150]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV328:%.*]] = sext i8 [[TMP151]] to i32
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV329:%.*]] = sext i8 [[TMP152]] to i32
// SIMD-ONLY0-NEXT:    [[CMP330:%.*]] = icmp sgt i32 [[CONV328]], [[CONV329]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP330]], label [[COND_TRUE332:%.*]], label [[COND_FALSE334:%.*]]
// SIMD-ONLY0:       cond.true332:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV333:%.*]] = sext i8 [[TMP153]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END336:%.*]]
// SIMD-ONLY0:       cond.false334:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV335:%.*]] = sext i8 [[TMP154]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END336]]
// SIMD-ONLY0:       cond.end336:
// SIMD-ONLY0-NEXT:    [[COND337:%.*]] = phi i32 [ [[CONV333]], [[COND_TRUE332]] ], [ [[CONV335]], [[COND_FALSE334]] ]
// SIMD-ONLY0-NEXT:    [[CONV338:%.*]] = trunc i32 [[COND337]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV338]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP155]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV339:%.*]] = sext i8 [[TMP156]] to i32
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV340:%.*]] = sext i8 [[TMP157]] to i32
// SIMD-ONLY0-NEXT:    [[CMP341:%.*]] = icmp slt i32 [[CONV339]], [[CONV340]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP341]], label [[COND_TRUE343:%.*]], label [[COND_FALSE345:%.*]]
// SIMD-ONLY0:       cond.true343:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV344:%.*]] = sext i8 [[TMP158]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END347:%.*]]
// SIMD-ONLY0:       cond.false345:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV346:%.*]] = sext i8 [[TMP159]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END347]]
// SIMD-ONLY0:       cond.end347:
// SIMD-ONLY0-NEXT:    [[COND348:%.*]] = phi i32 [ [[CONV344]], [[COND_TRUE343]] ], [ [[CONV346]], [[COND_FALSE345]] ]
// SIMD-ONLY0-NEXT:    [[CONV349:%.*]] = trunc i32 [[COND348]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV349]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP160]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV350:%.*]] = sext i8 [[TMP161]] to i32
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV351:%.*]] = sext i8 [[TMP162]] to i32
// SIMD-ONLY0-NEXT:    [[CMP352:%.*]] = icmp eq i32 [[CONV350]], [[CONV351]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP352]], label [[COND_TRUE354:%.*]], label [[COND_FALSE356:%.*]]
// SIMD-ONLY0:       cond.true354:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV355:%.*]] = sext i8 [[TMP163]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END358:%.*]]
// SIMD-ONLY0:       cond.false356:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV357:%.*]] = sext i8 [[TMP164]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END358]]
// SIMD-ONLY0:       cond.end358:
// SIMD-ONLY0-NEXT:    [[COND359:%.*]] = phi i32 [ [[CONV355]], [[COND_TRUE354]] ], [ [[CONV357]], [[COND_FALSE356]] ]
// SIMD-ONLY0-NEXT:    [[CONV360:%.*]] = trunc i32 [[COND359]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV360]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV361:%.*]] = sext i8 [[TMP165]] to i32
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV362:%.*]] = sext i8 [[TMP166]] to i32
// SIMD-ONLY0-NEXT:    [[CMP363:%.*]] = icmp sgt i32 [[CONV361]], [[CONV362]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP363]], label [[COND_TRUE365:%.*]], label [[COND_FALSE367:%.*]]
// SIMD-ONLY0:       cond.true365:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV366:%.*]] = sext i8 [[TMP167]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END369:%.*]]
// SIMD-ONLY0:       cond.false367:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV368:%.*]] = sext i8 [[TMP168]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END369]]
// SIMD-ONLY0:       cond.end369:
// SIMD-ONLY0-NEXT:    [[COND370:%.*]] = phi i32 [ [[CONV366]], [[COND_TRUE365]] ], [ [[CONV368]], [[COND_FALSE367]] ]
// SIMD-ONLY0-NEXT:    [[CONV371:%.*]] = trunc i32 [[COND370]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV371]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP169]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV372:%.*]] = sext i8 [[TMP170]] to i32
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV373:%.*]] = sext i8 [[TMP171]] to i32
// SIMD-ONLY0-NEXT:    [[CMP374:%.*]] = icmp slt i32 [[CONV372]], [[CONV373]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP374]], label [[COND_TRUE376:%.*]], label [[COND_FALSE378:%.*]]
// SIMD-ONLY0:       cond.true376:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV377:%.*]] = sext i8 [[TMP172]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END380:%.*]]
// SIMD-ONLY0:       cond.false378:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV379:%.*]] = sext i8 [[TMP173]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END380]]
// SIMD-ONLY0:       cond.end380:
// SIMD-ONLY0-NEXT:    [[COND381:%.*]] = phi i32 [ [[CONV377]], [[COND_TRUE376]] ], [ [[CONV379]], [[COND_FALSE378]] ]
// SIMD-ONLY0-NEXT:    [[CONV382:%.*]] = trunc i32 [[COND381]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV382]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP174]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV383:%.*]] = sext i8 [[TMP175]] to i32
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV384:%.*]] = sext i8 [[TMP176]] to i32
// SIMD-ONLY0-NEXT:    [[CMP385:%.*]] = icmp eq i32 [[CONV383]], [[CONV384]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP385]], label [[COND_TRUE387:%.*]], label [[COND_FALSE389:%.*]]
// SIMD-ONLY0:       cond.true387:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV388:%.*]] = sext i8 [[TMP177]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END391:%.*]]
// SIMD-ONLY0:       cond.false389:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV390:%.*]] = sext i8 [[TMP178]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END391]]
// SIMD-ONLY0:       cond.end391:
// SIMD-ONLY0-NEXT:    [[COND392:%.*]] = phi i32 [ [[CONV388]], [[COND_TRUE387]] ], [ [[CONV390]], [[COND_FALSE389]] ]
// SIMD-ONLY0-NEXT:    [[CONV393:%.*]] = trunc i32 [[COND392]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV393]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP179]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i8, ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    ret i8 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @ucxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[UCX:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCV:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCE:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[UCD:%.*]] = alloca i8, align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON1]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON2]], ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i8 poison
// SIMD-ONLY0-NEXT:    store i8 [[FREEZE_POISON3]], ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP0]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = zext i8 [[TMP1]] to i32
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV4:%.*]] = zext i8 [[TMP2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV]], [[CONV4]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV6:%.*]] = zext i8 [[TMP3]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV7:%.*]] = zext i8 [[TMP4]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV6]], [[COND_TRUE]] ], [ [[CONV7]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    [[CONV8:%.*]] = trunc i32 [[COND]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV8]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP5]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV9:%.*]] = zext i8 [[TMP6]] to i32
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV10:%.*]] = zext i8 [[TMP7]] to i32
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = icmp slt i32 [[CONV9]], [[CONV10]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE13:%.*]], label [[COND_FALSE15:%.*]]
// SIMD-ONLY0:       cond.true13:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV14:%.*]] = zext i8 [[TMP8]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false15:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV16:%.*]] = zext i8 [[TMP9]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi i32 [ [[CONV14]], [[COND_TRUE13]] ], [ [[CONV16]], [[COND_FALSE15]] ]
// SIMD-ONLY0-NEXT:    [[CONV19:%.*]] = trunc i32 [[COND18]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV19]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP10]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV20:%.*]] = zext i8 [[TMP11]] to i32
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV21:%.*]] = zext i8 [[TMP12]] to i32
// SIMD-ONLY0-NEXT:    [[CMP22:%.*]] = icmp eq i32 [[CONV20]], [[CONV21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP22]], label [[COND_TRUE24:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true24:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV25:%.*]] = zext i8 [[TMP13]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END28:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV27:%.*]] = zext i8 [[TMP14]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END28]]
// SIMD-ONLY0:       cond.end28:
// SIMD-ONLY0-NEXT:    [[COND29:%.*]] = phi i32 [ [[CONV25]], [[COND_TRUE24]] ], [ [[CONV27]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    [[CONV30:%.*]] = trunc i32 [[COND29]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV30]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV31:%.*]] = zext i8 [[TMP15]] to i32
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV32:%.*]] = zext i8 [[TMP16]] to i32
// SIMD-ONLY0-NEXT:    [[CMP33:%.*]] = icmp sgt i32 [[CONV31]], [[CONV32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP33]], label [[COND_TRUE35:%.*]], label [[COND_FALSE37:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV36:%.*]] = zext i8 [[TMP17]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false37:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV38:%.*]] = zext i8 [[TMP18]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi i32 [ [[CONV36]], [[COND_TRUE35]] ], [ [[CONV38]], [[COND_FALSE37]] ]
// SIMD-ONLY0-NEXT:    [[CONV41:%.*]] = trunc i32 [[COND40]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV41]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP19]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV42:%.*]] = zext i8 [[TMP20]] to i32
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV43:%.*]] = zext i8 [[TMP21]] to i32
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp slt i32 [[CONV42]], [[CONV43]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE46:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true46:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV47:%.*]] = zext i8 [[TMP22]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END50:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV49:%.*]] = zext i8 [[TMP23]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END50]]
// SIMD-ONLY0:       cond.end50:
// SIMD-ONLY0-NEXT:    [[COND51:%.*]] = phi i32 [ [[CONV47]], [[COND_TRUE46]] ], [ [[CONV49]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    [[CONV52:%.*]] = trunc i32 [[COND51]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV52]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP24]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV53:%.*]] = zext i8 [[TMP25]] to i32
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV54:%.*]] = zext i8 [[TMP26]] to i32
// SIMD-ONLY0-NEXT:    [[CMP55:%.*]] = icmp eq i32 [[CONV53]], [[CONV54]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP55]], label [[COND_TRUE57:%.*]], label [[COND_FALSE59:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV58:%.*]] = zext i8 [[TMP27]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END61:%.*]]
// SIMD-ONLY0:       cond.false59:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV60:%.*]] = zext i8 [[TMP28]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END61]]
// SIMD-ONLY0:       cond.end61:
// SIMD-ONLY0-NEXT:    [[COND62:%.*]] = phi i32 [ [[CONV58]], [[COND_TRUE57]] ], [ [[CONV60]], [[COND_FALSE59]] ]
// SIMD-ONLY0-NEXT:    [[CONV63:%.*]] = trunc i32 [[COND62]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV63]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP29]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP30]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV64:%.*]] = zext i8 [[TMP31]] to i32
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV65:%.*]] = zext i8 [[TMP32]] to i32
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = icmp sgt i32 [[CONV64]], [[CONV65]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE68:%.*]], label [[COND_FALSE70:%.*]]
// SIMD-ONLY0:       cond.true68:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV69:%.*]] = zext i8 [[TMP33]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false70:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV71:%.*]] = zext i8 [[TMP34]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi i32 [ [[CONV69]], [[COND_TRUE68]] ], [ [[CONV71]], [[COND_FALSE70]] ]
// SIMD-ONLY0-NEXT:    [[CONV74:%.*]] = trunc i32 [[COND73]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV74]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP35]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV75:%.*]] = zext i8 [[TMP36]] to i32
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV76:%.*]] = zext i8 [[TMP37]] to i32
// SIMD-ONLY0-NEXT:    [[CMP77:%.*]] = icmp slt i32 [[CONV75]], [[CONV76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP77]], label [[COND_TRUE79:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true79:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV80:%.*]] = zext i8 [[TMP38]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END83:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV82:%.*]] = zext i8 [[TMP39]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END83]]
// SIMD-ONLY0:       cond.end83:
// SIMD-ONLY0-NEXT:    [[COND84:%.*]] = phi i32 [ [[CONV80]], [[COND_TRUE79]] ], [ [[CONV82]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    [[CONV85:%.*]] = trunc i32 [[COND84]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV85]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP40]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV86:%.*]] = zext i8 [[TMP41]] to i32
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV87:%.*]] = zext i8 [[TMP42]] to i32
// SIMD-ONLY0-NEXT:    [[CMP88:%.*]] = icmp eq i32 [[CONV86]], [[CONV87]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP88]], label [[COND_TRUE90:%.*]], label [[COND_FALSE92:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV91:%.*]] = zext i8 [[TMP43]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false92:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV93:%.*]] = zext i8 [[TMP44]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi i32 [ [[CONV91]], [[COND_TRUE90]] ], [ [[CONV93]], [[COND_FALSE92]] ]
// SIMD-ONLY0-NEXT:    [[CONV96:%.*]] = trunc i32 [[COND95]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV96]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV97:%.*]] = zext i8 [[TMP45]] to i32
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV98:%.*]] = zext i8 [[TMP46]] to i32
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = icmp sgt i32 [[CONV97]], [[CONV98]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE101:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true101:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV102:%.*]] = zext i8 [[TMP47]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END105:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV104:%.*]] = zext i8 [[TMP48]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END105]]
// SIMD-ONLY0:       cond.end105:
// SIMD-ONLY0-NEXT:    [[COND106:%.*]] = phi i32 [ [[CONV102]], [[COND_TRUE101]] ], [ [[CONV104]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    [[CONV107:%.*]] = trunc i32 [[COND106]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV107]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP49]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV108:%.*]] = zext i8 [[TMP50]] to i32
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV109:%.*]] = zext i8 [[TMP51]] to i32
// SIMD-ONLY0-NEXT:    [[CMP110:%.*]] = icmp slt i32 [[CONV108]], [[CONV109]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP110]], label [[COND_TRUE112:%.*]], label [[COND_FALSE114:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV113:%.*]] = zext i8 [[TMP52]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END116:%.*]]
// SIMD-ONLY0:       cond.false114:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = zext i8 [[TMP53]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END116]]
// SIMD-ONLY0:       cond.end116:
// SIMD-ONLY0-NEXT:    [[COND117:%.*]] = phi i32 [ [[CONV113]], [[COND_TRUE112]] ], [ [[CONV115]], [[COND_FALSE114]] ]
// SIMD-ONLY0-NEXT:    [[CONV118:%.*]] = trunc i32 [[COND117]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV118]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP54]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV119:%.*]] = zext i8 [[TMP55]] to i32
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV120:%.*]] = zext i8 [[TMP56]] to i32
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = icmp eq i32 [[CONV119]], [[CONV120]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE123:%.*]], label [[COND_FALSE125:%.*]]
// SIMD-ONLY0:       cond.true123:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV124:%.*]] = zext i8 [[TMP57]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false125:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = zext i8 [[TMP58]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i32 [ [[CONV124]], [[COND_TRUE123]] ], [ [[CONV126]], [[COND_FALSE125]] ]
// SIMD-ONLY0-NEXT:    [[CONV129:%.*]] = trunc i32 [[COND128]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV129]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP59]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP60]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV130:%.*]] = zext i8 [[TMP61]] to i32
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV131:%.*]] = zext i8 [[TMP62]] to i32
// SIMD-ONLY0-NEXT:    [[CMP132:%.*]] = icmp sgt i32 [[CONV130]], [[CONV131]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP132]], label [[COND_TRUE134:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true134:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV135:%.*]] = zext i8 [[TMP63]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END138:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV137:%.*]] = zext i8 [[TMP64]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END138]]
// SIMD-ONLY0:       cond.end138:
// SIMD-ONLY0-NEXT:    [[COND139:%.*]] = phi i32 [ [[CONV135]], [[COND_TRUE134]] ], [ [[CONV137]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    [[CONV140:%.*]] = trunc i32 [[COND139]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV140]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP65]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV141:%.*]] = zext i8 [[TMP66]] to i32
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV142:%.*]] = zext i8 [[TMP67]] to i32
// SIMD-ONLY0-NEXT:    [[CMP143:%.*]] = icmp slt i32 [[CONV141]], [[CONV142]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP143]], label [[COND_TRUE145:%.*]], label [[COND_FALSE147:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV146:%.*]] = zext i8 [[TMP68]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false147:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = zext i8 [[TMP69]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i32 [ [[CONV146]], [[COND_TRUE145]] ], [ [[CONV148]], [[COND_FALSE147]] ]
// SIMD-ONLY0-NEXT:    [[CONV151:%.*]] = trunc i32 [[COND150]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV151]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP70]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV152:%.*]] = zext i8 [[TMP71]] to i32
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV153:%.*]] = zext i8 [[TMP72]] to i32
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp eq i32 [[CONV152]], [[CONV153]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE156:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true156:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV157:%.*]] = zext i8 [[TMP73]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END160:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV159:%.*]] = zext i8 [[TMP74]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END160]]
// SIMD-ONLY0:       cond.end160:
// SIMD-ONLY0-NEXT:    [[COND161:%.*]] = phi i32 [ [[CONV157]], [[COND_TRUE156]] ], [ [[CONV159]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    [[CONV162:%.*]] = trunc i32 [[COND161]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV162]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV163:%.*]] = zext i8 [[TMP75]] to i32
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV164:%.*]] = zext i8 [[TMP76]] to i32
// SIMD-ONLY0-NEXT:    [[CMP165:%.*]] = icmp sgt i32 [[CONV163]], [[CONV164]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP165]], label [[COND_TRUE167:%.*]], label [[COND_FALSE169:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV168:%.*]] = zext i8 [[TMP77]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END171:%.*]]
// SIMD-ONLY0:       cond.false169:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV170:%.*]] = zext i8 [[TMP78]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END171]]
// SIMD-ONLY0:       cond.end171:
// SIMD-ONLY0-NEXT:    [[COND172:%.*]] = phi i32 [ [[CONV168]], [[COND_TRUE167]] ], [ [[CONV170]], [[COND_FALSE169]] ]
// SIMD-ONLY0-NEXT:    [[CONV173:%.*]] = trunc i32 [[COND172]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV173]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP79]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV174:%.*]] = zext i8 [[TMP80]] to i32
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV175:%.*]] = zext i8 [[TMP81]] to i32
// SIMD-ONLY0-NEXT:    [[CMP176:%.*]] = icmp slt i32 [[CONV174]], [[CONV175]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP176]], label [[COND_TRUE178:%.*]], label [[COND_FALSE180:%.*]]
// SIMD-ONLY0:       cond.true178:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV179:%.*]] = zext i8 [[TMP82]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END182:%.*]]
// SIMD-ONLY0:       cond.false180:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV181:%.*]] = zext i8 [[TMP83]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END182]]
// SIMD-ONLY0:       cond.end182:
// SIMD-ONLY0-NEXT:    [[COND183:%.*]] = phi i32 [ [[CONV179]], [[COND_TRUE178]] ], [ [[CONV181]], [[COND_FALSE180]] ]
// SIMD-ONLY0-NEXT:    [[CONV184:%.*]] = trunc i32 [[COND183]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV184]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP84]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV185:%.*]] = zext i8 [[TMP85]] to i32
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV186:%.*]] = zext i8 [[TMP86]] to i32
// SIMD-ONLY0-NEXT:    [[CMP187:%.*]] = icmp eq i32 [[CONV185]], [[CONV186]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP187]], label [[COND_TRUE189:%.*]], label [[COND_FALSE191:%.*]]
// SIMD-ONLY0:       cond.true189:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV190:%.*]] = zext i8 [[TMP87]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END193:%.*]]
// SIMD-ONLY0:       cond.false191:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV192:%.*]] = zext i8 [[TMP88]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END193]]
// SIMD-ONLY0:       cond.end193:
// SIMD-ONLY0-NEXT:    [[COND194:%.*]] = phi i32 [ [[CONV190]], [[COND_TRUE189]] ], [ [[CONV192]], [[COND_FALSE191]] ]
// SIMD-ONLY0-NEXT:    [[CONV195:%.*]] = trunc i32 [[COND194]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV195]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP89]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP90]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV196:%.*]] = zext i8 [[TMP91]] to i32
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV197:%.*]] = zext i8 [[TMP92]] to i32
// SIMD-ONLY0-NEXT:    [[CMP198:%.*]] = icmp sgt i32 [[CONV196]], [[CONV197]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP198]], label [[COND_TRUE200:%.*]], label [[COND_FALSE202:%.*]]
// SIMD-ONLY0:       cond.true200:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV201:%.*]] = zext i8 [[TMP93]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END204:%.*]]
// SIMD-ONLY0:       cond.false202:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV203:%.*]] = zext i8 [[TMP94]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END204]]
// SIMD-ONLY0:       cond.end204:
// SIMD-ONLY0-NEXT:    [[COND205:%.*]] = phi i32 [ [[CONV201]], [[COND_TRUE200]] ], [ [[CONV203]], [[COND_FALSE202]] ]
// SIMD-ONLY0-NEXT:    [[CONV206:%.*]] = trunc i32 [[COND205]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV206]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP95]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV207:%.*]] = zext i8 [[TMP96]] to i32
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV208:%.*]] = zext i8 [[TMP97]] to i32
// SIMD-ONLY0-NEXT:    [[CMP209:%.*]] = icmp slt i32 [[CONV207]], [[CONV208]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP209]], label [[COND_TRUE211:%.*]], label [[COND_FALSE213:%.*]]
// SIMD-ONLY0:       cond.true211:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV212:%.*]] = zext i8 [[TMP98]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END215:%.*]]
// SIMD-ONLY0:       cond.false213:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV214:%.*]] = zext i8 [[TMP99]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END215]]
// SIMD-ONLY0:       cond.end215:
// SIMD-ONLY0-NEXT:    [[COND216:%.*]] = phi i32 [ [[CONV212]], [[COND_TRUE211]] ], [ [[CONV214]], [[COND_FALSE213]] ]
// SIMD-ONLY0-NEXT:    [[CONV217:%.*]] = trunc i32 [[COND216]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV217]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP100]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV218:%.*]] = zext i8 [[TMP101]] to i32
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV219:%.*]] = zext i8 [[TMP102]] to i32
// SIMD-ONLY0-NEXT:    [[CMP220:%.*]] = icmp eq i32 [[CONV218]], [[CONV219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP220]], label [[COND_TRUE222:%.*]], label [[COND_FALSE224:%.*]]
// SIMD-ONLY0:       cond.true222:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV223:%.*]] = zext i8 [[TMP103]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END226:%.*]]
// SIMD-ONLY0:       cond.false224:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV225:%.*]] = zext i8 [[TMP104]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END226]]
// SIMD-ONLY0:       cond.end226:
// SIMD-ONLY0-NEXT:    [[COND227:%.*]] = phi i32 [ [[CONV223]], [[COND_TRUE222]] ], [ [[CONV225]], [[COND_FALSE224]] ]
// SIMD-ONLY0-NEXT:    [[CONV228:%.*]] = trunc i32 [[COND227]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV228]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV229:%.*]] = zext i8 [[TMP105]] to i32
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV230:%.*]] = zext i8 [[TMP106]] to i32
// SIMD-ONLY0-NEXT:    [[CMP231:%.*]] = icmp sgt i32 [[CONV229]], [[CONV230]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP231]], label [[COND_TRUE233:%.*]], label [[COND_FALSE235:%.*]]
// SIMD-ONLY0:       cond.true233:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV234:%.*]] = zext i8 [[TMP107]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END237:%.*]]
// SIMD-ONLY0:       cond.false235:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV236:%.*]] = zext i8 [[TMP108]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END237]]
// SIMD-ONLY0:       cond.end237:
// SIMD-ONLY0-NEXT:    [[COND238:%.*]] = phi i32 [ [[CONV234]], [[COND_TRUE233]] ], [ [[CONV236]], [[COND_FALSE235]] ]
// SIMD-ONLY0-NEXT:    [[CONV239:%.*]] = trunc i32 [[COND238]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV239]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP109]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV240:%.*]] = zext i8 [[TMP110]] to i32
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV241:%.*]] = zext i8 [[TMP111]] to i32
// SIMD-ONLY0-NEXT:    [[CMP242:%.*]] = icmp slt i32 [[CONV240]], [[CONV241]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP242]], label [[COND_TRUE244:%.*]], label [[COND_FALSE246:%.*]]
// SIMD-ONLY0:       cond.true244:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV245:%.*]] = zext i8 [[TMP112]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END248:%.*]]
// SIMD-ONLY0:       cond.false246:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV247:%.*]] = zext i8 [[TMP113]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END248]]
// SIMD-ONLY0:       cond.end248:
// SIMD-ONLY0-NEXT:    [[COND249:%.*]] = phi i32 [ [[CONV245]], [[COND_TRUE244]] ], [ [[CONV247]], [[COND_FALSE246]] ]
// SIMD-ONLY0-NEXT:    [[CONV250:%.*]] = trunc i32 [[COND249]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV250]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP114]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV251:%.*]] = zext i8 [[TMP115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV252:%.*]] = zext i8 [[TMP116]] to i32
// SIMD-ONLY0-NEXT:    [[CMP253:%.*]] = icmp eq i32 [[CONV251]], [[CONV252]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP253]], label [[COND_TRUE255:%.*]], label [[COND_FALSE257:%.*]]
// SIMD-ONLY0:       cond.true255:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV256:%.*]] = zext i8 [[TMP117]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END259:%.*]]
// SIMD-ONLY0:       cond.false257:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV258:%.*]] = zext i8 [[TMP118]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END259]]
// SIMD-ONLY0:       cond.end259:
// SIMD-ONLY0-NEXT:    [[COND260:%.*]] = phi i32 [ [[CONV256]], [[COND_TRUE255]] ], [ [[CONV258]], [[COND_FALSE257]] ]
// SIMD-ONLY0-NEXT:    [[CONV261:%.*]] = trunc i32 [[COND260]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV261]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP119]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP120]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV262:%.*]] = zext i8 [[TMP121]] to i32
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV263:%.*]] = zext i8 [[TMP122]] to i32
// SIMD-ONLY0-NEXT:    [[CMP264:%.*]] = icmp sgt i32 [[CONV262]], [[CONV263]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP264]], label [[COND_TRUE266:%.*]], label [[COND_FALSE268:%.*]]
// SIMD-ONLY0:       cond.true266:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV267:%.*]] = zext i8 [[TMP123]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END270:%.*]]
// SIMD-ONLY0:       cond.false268:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV269:%.*]] = zext i8 [[TMP124]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END270]]
// SIMD-ONLY0:       cond.end270:
// SIMD-ONLY0-NEXT:    [[COND271:%.*]] = phi i32 [ [[CONV267]], [[COND_TRUE266]] ], [ [[CONV269]], [[COND_FALSE268]] ]
// SIMD-ONLY0-NEXT:    [[CONV272:%.*]] = trunc i32 [[COND271]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV272]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP125]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV273:%.*]] = zext i8 [[TMP126]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV274:%.*]] = zext i8 [[TMP127]] to i32
// SIMD-ONLY0-NEXT:    [[CMP275:%.*]] = icmp slt i32 [[CONV273]], [[CONV274]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP275]], label [[COND_TRUE277:%.*]], label [[COND_FALSE279:%.*]]
// SIMD-ONLY0:       cond.true277:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV278:%.*]] = zext i8 [[TMP128]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END281:%.*]]
// SIMD-ONLY0:       cond.false279:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV280:%.*]] = zext i8 [[TMP129]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END281]]
// SIMD-ONLY0:       cond.end281:
// SIMD-ONLY0-NEXT:    [[COND282:%.*]] = phi i32 [ [[CONV278]], [[COND_TRUE277]] ], [ [[CONV280]], [[COND_FALSE279]] ]
// SIMD-ONLY0-NEXT:    [[CONV283:%.*]] = trunc i32 [[COND282]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV283]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP130]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV284:%.*]] = zext i8 [[TMP131]] to i32
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV285:%.*]] = zext i8 [[TMP132]] to i32
// SIMD-ONLY0-NEXT:    [[CMP286:%.*]] = icmp eq i32 [[CONV284]], [[CONV285]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP286]], label [[COND_TRUE288:%.*]], label [[COND_FALSE290:%.*]]
// SIMD-ONLY0:       cond.true288:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV289:%.*]] = zext i8 [[TMP133]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292:%.*]]
// SIMD-ONLY0:       cond.false290:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV291:%.*]] = zext i8 [[TMP134]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292]]
// SIMD-ONLY0:       cond.end292:
// SIMD-ONLY0-NEXT:    [[COND293:%.*]] = phi i32 [ [[CONV289]], [[COND_TRUE288]] ], [ [[CONV291]], [[COND_FALSE290]] ]
// SIMD-ONLY0-NEXT:    [[CONV294:%.*]] = trunc i32 [[COND293]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV294]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV295:%.*]] = zext i8 [[TMP135]] to i32
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV296:%.*]] = zext i8 [[TMP136]] to i32
// SIMD-ONLY0-NEXT:    [[CMP297:%.*]] = icmp sgt i32 [[CONV295]], [[CONV296]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP297]], label [[COND_TRUE299:%.*]], label [[COND_FALSE301:%.*]]
// SIMD-ONLY0:       cond.true299:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV300:%.*]] = zext i8 [[TMP137]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END303:%.*]]
// SIMD-ONLY0:       cond.false301:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV302:%.*]] = zext i8 [[TMP138]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END303]]
// SIMD-ONLY0:       cond.end303:
// SIMD-ONLY0-NEXT:    [[COND304:%.*]] = phi i32 [ [[CONV300]], [[COND_TRUE299]] ], [ [[CONV302]], [[COND_FALSE301]] ]
// SIMD-ONLY0-NEXT:    [[CONV305:%.*]] = trunc i32 [[COND304]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV305]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP139]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV306:%.*]] = zext i8 [[TMP140]] to i32
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV307:%.*]] = zext i8 [[TMP141]] to i32
// SIMD-ONLY0-NEXT:    [[CMP308:%.*]] = icmp slt i32 [[CONV306]], [[CONV307]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP308]], label [[COND_TRUE310:%.*]], label [[COND_FALSE312:%.*]]
// SIMD-ONLY0:       cond.true310:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV311:%.*]] = zext i8 [[TMP142]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END314:%.*]]
// SIMD-ONLY0:       cond.false312:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV313:%.*]] = zext i8 [[TMP143]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END314]]
// SIMD-ONLY0:       cond.end314:
// SIMD-ONLY0-NEXT:    [[COND315:%.*]] = phi i32 [ [[CONV311]], [[COND_TRUE310]] ], [ [[CONV313]], [[COND_FALSE312]] ]
// SIMD-ONLY0-NEXT:    [[CONV316:%.*]] = trunc i32 [[COND315]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV316]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP144]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV317:%.*]] = zext i8 [[TMP145]] to i32
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV318:%.*]] = zext i8 [[TMP146]] to i32
// SIMD-ONLY0-NEXT:    [[CMP319:%.*]] = icmp eq i32 [[CONV317]], [[CONV318]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP319]], label [[COND_TRUE321:%.*]], label [[COND_FALSE323:%.*]]
// SIMD-ONLY0:       cond.true321:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV322:%.*]] = zext i8 [[TMP147]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END325:%.*]]
// SIMD-ONLY0:       cond.false323:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV324:%.*]] = zext i8 [[TMP148]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END325]]
// SIMD-ONLY0:       cond.end325:
// SIMD-ONLY0-NEXT:    [[COND326:%.*]] = phi i32 [ [[CONV322]], [[COND_TRUE321]] ], [ [[CONV324]], [[COND_FALSE323]] ]
// SIMD-ONLY0-NEXT:    [[CONV327:%.*]] = trunc i32 [[COND326]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV327]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP149]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP150]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV328:%.*]] = zext i8 [[TMP151]] to i32
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV329:%.*]] = zext i8 [[TMP152]] to i32
// SIMD-ONLY0-NEXT:    [[CMP330:%.*]] = icmp sgt i32 [[CONV328]], [[CONV329]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP330]], label [[COND_TRUE332:%.*]], label [[COND_FALSE334:%.*]]
// SIMD-ONLY0:       cond.true332:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV333:%.*]] = zext i8 [[TMP153]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END336:%.*]]
// SIMD-ONLY0:       cond.false334:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV335:%.*]] = zext i8 [[TMP154]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END336]]
// SIMD-ONLY0:       cond.end336:
// SIMD-ONLY0-NEXT:    [[COND337:%.*]] = phi i32 [ [[CONV333]], [[COND_TRUE332]] ], [ [[CONV335]], [[COND_FALSE334]] ]
// SIMD-ONLY0-NEXT:    [[CONV338:%.*]] = trunc i32 [[COND337]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV338]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP155]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV339:%.*]] = zext i8 [[TMP156]] to i32
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV340:%.*]] = zext i8 [[TMP157]] to i32
// SIMD-ONLY0-NEXT:    [[CMP341:%.*]] = icmp slt i32 [[CONV339]], [[CONV340]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP341]], label [[COND_TRUE343:%.*]], label [[COND_FALSE345:%.*]]
// SIMD-ONLY0:       cond.true343:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV344:%.*]] = zext i8 [[TMP158]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END347:%.*]]
// SIMD-ONLY0:       cond.false345:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV346:%.*]] = zext i8 [[TMP159]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END347]]
// SIMD-ONLY0:       cond.end347:
// SIMD-ONLY0-NEXT:    [[COND348:%.*]] = phi i32 [ [[CONV344]], [[COND_TRUE343]] ], [ [[CONV346]], [[COND_FALSE345]] ]
// SIMD-ONLY0-NEXT:    [[CONV349:%.*]] = trunc i32 [[COND348]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV349]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP160]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV350:%.*]] = zext i8 [[TMP161]] to i32
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV351:%.*]] = zext i8 [[TMP162]] to i32
// SIMD-ONLY0-NEXT:    [[CMP352:%.*]] = icmp eq i32 [[CONV350]], [[CONV351]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP352]], label [[COND_TRUE354:%.*]], label [[COND_FALSE356:%.*]]
// SIMD-ONLY0:       cond.true354:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV355:%.*]] = zext i8 [[TMP163]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END358:%.*]]
// SIMD-ONLY0:       cond.false356:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV357:%.*]] = zext i8 [[TMP164]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END358]]
// SIMD-ONLY0:       cond.end358:
// SIMD-ONLY0-NEXT:    [[COND359:%.*]] = phi i32 [ [[CONV355]], [[COND_TRUE354]] ], [ [[CONV357]], [[COND_FALSE356]] ]
// SIMD-ONLY0-NEXT:    [[CONV360:%.*]] = trunc i32 [[COND359]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV360]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV361:%.*]] = zext i8 [[TMP165]] to i32
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV362:%.*]] = zext i8 [[TMP166]] to i32
// SIMD-ONLY0-NEXT:    [[CMP363:%.*]] = icmp sgt i32 [[CONV361]], [[CONV362]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP363]], label [[COND_TRUE365:%.*]], label [[COND_FALSE367:%.*]]
// SIMD-ONLY0:       cond.true365:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV366:%.*]] = zext i8 [[TMP167]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END369:%.*]]
// SIMD-ONLY0:       cond.false367:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV368:%.*]] = zext i8 [[TMP168]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END369]]
// SIMD-ONLY0:       cond.end369:
// SIMD-ONLY0-NEXT:    [[COND370:%.*]] = phi i32 [ [[CONV366]], [[COND_TRUE365]] ], [ [[CONV368]], [[COND_FALSE367]] ]
// SIMD-ONLY0-NEXT:    [[CONV371:%.*]] = trunc i32 [[COND370]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV371]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP169]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV372:%.*]] = zext i8 [[TMP170]] to i32
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV373:%.*]] = zext i8 [[TMP171]] to i32
// SIMD-ONLY0-NEXT:    [[CMP374:%.*]] = icmp slt i32 [[CONV372]], [[CONV373]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP374]], label [[COND_TRUE376:%.*]], label [[COND_FALSE378:%.*]]
// SIMD-ONLY0:       cond.true376:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV377:%.*]] = zext i8 [[TMP172]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END380:%.*]]
// SIMD-ONLY0:       cond.false378:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV379:%.*]] = zext i8 [[TMP173]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END380]]
// SIMD-ONLY0:       cond.end380:
// SIMD-ONLY0-NEXT:    [[COND381:%.*]] = phi i32 [ [[CONV377]], [[COND_TRUE376]] ], [ [[CONV379]], [[COND_FALSE378]] ]
// SIMD-ONLY0-NEXT:    [[CONV382:%.*]] = trunc i32 [[COND381]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV382]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP174]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV383:%.*]] = zext i8 [[TMP175]] to i32
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV384:%.*]] = zext i8 [[TMP176]] to i32
// SIMD-ONLY0-NEXT:    [[CMP385:%.*]] = icmp eq i32 [[CONV383]], [[CONV384]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP385]], label [[COND_TRUE387:%.*]], label [[COND_FALSE389:%.*]]
// SIMD-ONLY0:       cond.true387:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV388:%.*]] = zext i8 [[TMP177]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END391:%.*]]
// SIMD-ONLY0:       cond.false389:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV390:%.*]] = zext i8 [[TMP178]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END391]]
// SIMD-ONLY0:       cond.end391:
// SIMD-ONLY0-NEXT:    [[COND392:%.*]] = phi i32 [ [[CONV388]], [[COND_TRUE387]] ], [ [[CONV390]], [[COND_FALSE389]] ]
// SIMD-ONLY0-NEXT:    [[CONV393:%.*]] = trunc i32 [[COND392]] to i8
// SIMD-ONLY0-NEXT:    store i8 [[CONV393]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store i8 [[TMP179]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i8, ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    ret i8 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @sxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[SX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SV:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON1]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON2]], ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON3]], ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP0]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = sext i16 [[TMP1]] to i32
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV4:%.*]] = sext i16 [[TMP2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV]], [[CONV4]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV6:%.*]] = sext i16 [[TMP3]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV7:%.*]] = sext i16 [[TMP4]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV6]], [[COND_TRUE]] ], [ [[CONV7]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    [[CONV8:%.*]] = trunc i32 [[COND]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV8]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP5]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV9:%.*]] = sext i16 [[TMP6]] to i32
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV10:%.*]] = sext i16 [[TMP7]] to i32
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = icmp slt i32 [[CONV9]], [[CONV10]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE13:%.*]], label [[COND_FALSE15:%.*]]
// SIMD-ONLY0:       cond.true13:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV14:%.*]] = sext i16 [[TMP8]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false15:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV16:%.*]] = sext i16 [[TMP9]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi i32 [ [[CONV14]], [[COND_TRUE13]] ], [ [[CONV16]], [[COND_FALSE15]] ]
// SIMD-ONLY0-NEXT:    [[CONV19:%.*]] = trunc i32 [[COND18]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV19]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP10]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV20:%.*]] = sext i16 [[TMP11]] to i32
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV21:%.*]] = sext i16 [[TMP12]] to i32
// SIMD-ONLY0-NEXT:    [[CMP22:%.*]] = icmp eq i32 [[CONV20]], [[CONV21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP22]], label [[COND_TRUE24:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true24:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV25:%.*]] = sext i16 [[TMP13]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END28:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV27:%.*]] = sext i16 [[TMP14]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END28]]
// SIMD-ONLY0:       cond.end28:
// SIMD-ONLY0-NEXT:    [[COND29:%.*]] = phi i32 [ [[CONV25]], [[COND_TRUE24]] ], [ [[CONV27]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    [[CONV30:%.*]] = trunc i32 [[COND29]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV30]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV31:%.*]] = sext i16 [[TMP15]] to i32
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV32:%.*]] = sext i16 [[TMP16]] to i32
// SIMD-ONLY0-NEXT:    [[CMP33:%.*]] = icmp sgt i32 [[CONV31]], [[CONV32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP33]], label [[COND_TRUE35:%.*]], label [[COND_FALSE37:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV36:%.*]] = sext i16 [[TMP17]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false37:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV38:%.*]] = sext i16 [[TMP18]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi i32 [ [[CONV36]], [[COND_TRUE35]] ], [ [[CONV38]], [[COND_FALSE37]] ]
// SIMD-ONLY0-NEXT:    [[CONV41:%.*]] = trunc i32 [[COND40]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV41]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP19]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV42:%.*]] = sext i16 [[TMP20]] to i32
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV43:%.*]] = sext i16 [[TMP21]] to i32
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp slt i32 [[CONV42]], [[CONV43]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE46:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true46:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV47:%.*]] = sext i16 [[TMP22]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END50:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV49:%.*]] = sext i16 [[TMP23]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END50]]
// SIMD-ONLY0:       cond.end50:
// SIMD-ONLY0-NEXT:    [[COND51:%.*]] = phi i32 [ [[CONV47]], [[COND_TRUE46]] ], [ [[CONV49]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    [[CONV52:%.*]] = trunc i32 [[COND51]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV52]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP24]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV53:%.*]] = sext i16 [[TMP25]] to i32
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV54:%.*]] = sext i16 [[TMP26]] to i32
// SIMD-ONLY0-NEXT:    [[CMP55:%.*]] = icmp eq i32 [[CONV53]], [[CONV54]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP55]], label [[COND_TRUE57:%.*]], label [[COND_FALSE59:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV58:%.*]] = sext i16 [[TMP27]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END61:%.*]]
// SIMD-ONLY0:       cond.false59:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV60:%.*]] = sext i16 [[TMP28]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END61]]
// SIMD-ONLY0:       cond.end61:
// SIMD-ONLY0-NEXT:    [[COND62:%.*]] = phi i32 [ [[CONV58]], [[COND_TRUE57]] ], [ [[CONV60]], [[COND_FALSE59]] ]
// SIMD-ONLY0-NEXT:    [[CONV63:%.*]] = trunc i32 [[COND62]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV63]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP29]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP30]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV64:%.*]] = sext i16 [[TMP31]] to i32
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV65:%.*]] = sext i16 [[TMP32]] to i32
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = icmp sgt i32 [[CONV64]], [[CONV65]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE68:%.*]], label [[COND_FALSE70:%.*]]
// SIMD-ONLY0:       cond.true68:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV69:%.*]] = sext i16 [[TMP33]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false70:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV71:%.*]] = sext i16 [[TMP34]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi i32 [ [[CONV69]], [[COND_TRUE68]] ], [ [[CONV71]], [[COND_FALSE70]] ]
// SIMD-ONLY0-NEXT:    [[CONV74:%.*]] = trunc i32 [[COND73]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV74]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP35]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV75:%.*]] = sext i16 [[TMP36]] to i32
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV76:%.*]] = sext i16 [[TMP37]] to i32
// SIMD-ONLY0-NEXT:    [[CMP77:%.*]] = icmp slt i32 [[CONV75]], [[CONV76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP77]], label [[COND_TRUE79:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true79:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV80:%.*]] = sext i16 [[TMP38]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END83:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV82:%.*]] = sext i16 [[TMP39]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END83]]
// SIMD-ONLY0:       cond.end83:
// SIMD-ONLY0-NEXT:    [[COND84:%.*]] = phi i32 [ [[CONV80]], [[COND_TRUE79]] ], [ [[CONV82]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    [[CONV85:%.*]] = trunc i32 [[COND84]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV85]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP40]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV86:%.*]] = sext i16 [[TMP41]] to i32
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV87:%.*]] = sext i16 [[TMP42]] to i32
// SIMD-ONLY0-NEXT:    [[CMP88:%.*]] = icmp eq i32 [[CONV86]], [[CONV87]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP88]], label [[COND_TRUE90:%.*]], label [[COND_FALSE92:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV91:%.*]] = sext i16 [[TMP43]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false92:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV93:%.*]] = sext i16 [[TMP44]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi i32 [ [[CONV91]], [[COND_TRUE90]] ], [ [[CONV93]], [[COND_FALSE92]] ]
// SIMD-ONLY0-NEXT:    [[CONV96:%.*]] = trunc i32 [[COND95]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV96]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV97:%.*]] = sext i16 [[TMP45]] to i32
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV98:%.*]] = sext i16 [[TMP46]] to i32
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = icmp sgt i32 [[CONV97]], [[CONV98]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE101:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true101:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV102:%.*]] = sext i16 [[TMP47]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END105:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV104:%.*]] = sext i16 [[TMP48]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END105]]
// SIMD-ONLY0:       cond.end105:
// SIMD-ONLY0-NEXT:    [[COND106:%.*]] = phi i32 [ [[CONV102]], [[COND_TRUE101]] ], [ [[CONV104]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    [[CONV107:%.*]] = trunc i32 [[COND106]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV107]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP49]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV108:%.*]] = sext i16 [[TMP50]] to i32
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV109:%.*]] = sext i16 [[TMP51]] to i32
// SIMD-ONLY0-NEXT:    [[CMP110:%.*]] = icmp slt i32 [[CONV108]], [[CONV109]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP110]], label [[COND_TRUE112:%.*]], label [[COND_FALSE114:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV113:%.*]] = sext i16 [[TMP52]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END116:%.*]]
// SIMD-ONLY0:       cond.false114:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = sext i16 [[TMP53]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END116]]
// SIMD-ONLY0:       cond.end116:
// SIMD-ONLY0-NEXT:    [[COND117:%.*]] = phi i32 [ [[CONV113]], [[COND_TRUE112]] ], [ [[CONV115]], [[COND_FALSE114]] ]
// SIMD-ONLY0-NEXT:    [[CONV118:%.*]] = trunc i32 [[COND117]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV118]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP54]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV119:%.*]] = sext i16 [[TMP55]] to i32
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV120:%.*]] = sext i16 [[TMP56]] to i32
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = icmp eq i32 [[CONV119]], [[CONV120]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE123:%.*]], label [[COND_FALSE125:%.*]]
// SIMD-ONLY0:       cond.true123:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV124:%.*]] = sext i16 [[TMP57]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false125:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = sext i16 [[TMP58]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i32 [ [[CONV124]], [[COND_TRUE123]] ], [ [[CONV126]], [[COND_FALSE125]] ]
// SIMD-ONLY0-NEXT:    [[CONV129:%.*]] = trunc i32 [[COND128]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV129]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP59]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP60]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV130:%.*]] = sext i16 [[TMP61]] to i32
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV131:%.*]] = sext i16 [[TMP62]] to i32
// SIMD-ONLY0-NEXT:    [[CMP132:%.*]] = icmp sgt i32 [[CONV130]], [[CONV131]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP132]], label [[COND_TRUE134:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true134:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV135:%.*]] = sext i16 [[TMP63]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END138:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV137:%.*]] = sext i16 [[TMP64]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END138]]
// SIMD-ONLY0:       cond.end138:
// SIMD-ONLY0-NEXT:    [[COND139:%.*]] = phi i32 [ [[CONV135]], [[COND_TRUE134]] ], [ [[CONV137]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    [[CONV140:%.*]] = trunc i32 [[COND139]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV140]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP65]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV141:%.*]] = sext i16 [[TMP66]] to i32
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV142:%.*]] = sext i16 [[TMP67]] to i32
// SIMD-ONLY0-NEXT:    [[CMP143:%.*]] = icmp slt i32 [[CONV141]], [[CONV142]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP143]], label [[COND_TRUE145:%.*]], label [[COND_FALSE147:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV146:%.*]] = sext i16 [[TMP68]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false147:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = sext i16 [[TMP69]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i32 [ [[CONV146]], [[COND_TRUE145]] ], [ [[CONV148]], [[COND_FALSE147]] ]
// SIMD-ONLY0-NEXT:    [[CONV151:%.*]] = trunc i32 [[COND150]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV151]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP70]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV152:%.*]] = sext i16 [[TMP71]] to i32
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV153:%.*]] = sext i16 [[TMP72]] to i32
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp eq i32 [[CONV152]], [[CONV153]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE156:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true156:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV157:%.*]] = sext i16 [[TMP73]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END160:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV159:%.*]] = sext i16 [[TMP74]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END160]]
// SIMD-ONLY0:       cond.end160:
// SIMD-ONLY0-NEXT:    [[COND161:%.*]] = phi i32 [ [[CONV157]], [[COND_TRUE156]] ], [ [[CONV159]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    [[CONV162:%.*]] = trunc i32 [[COND161]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV162]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV163:%.*]] = sext i16 [[TMP75]] to i32
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV164:%.*]] = sext i16 [[TMP76]] to i32
// SIMD-ONLY0-NEXT:    [[CMP165:%.*]] = icmp sgt i32 [[CONV163]], [[CONV164]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP165]], label [[COND_TRUE167:%.*]], label [[COND_FALSE169:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV168:%.*]] = sext i16 [[TMP77]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END171:%.*]]
// SIMD-ONLY0:       cond.false169:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV170:%.*]] = sext i16 [[TMP78]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END171]]
// SIMD-ONLY0:       cond.end171:
// SIMD-ONLY0-NEXT:    [[COND172:%.*]] = phi i32 [ [[CONV168]], [[COND_TRUE167]] ], [ [[CONV170]], [[COND_FALSE169]] ]
// SIMD-ONLY0-NEXT:    [[CONV173:%.*]] = trunc i32 [[COND172]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV173]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP79]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV174:%.*]] = sext i16 [[TMP80]] to i32
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV175:%.*]] = sext i16 [[TMP81]] to i32
// SIMD-ONLY0-NEXT:    [[CMP176:%.*]] = icmp slt i32 [[CONV174]], [[CONV175]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP176]], label [[COND_TRUE178:%.*]], label [[COND_FALSE180:%.*]]
// SIMD-ONLY0:       cond.true178:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV179:%.*]] = sext i16 [[TMP82]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END182:%.*]]
// SIMD-ONLY0:       cond.false180:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV181:%.*]] = sext i16 [[TMP83]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END182]]
// SIMD-ONLY0:       cond.end182:
// SIMD-ONLY0-NEXT:    [[COND183:%.*]] = phi i32 [ [[CONV179]], [[COND_TRUE178]] ], [ [[CONV181]], [[COND_FALSE180]] ]
// SIMD-ONLY0-NEXT:    [[CONV184:%.*]] = trunc i32 [[COND183]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV184]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP84]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV185:%.*]] = sext i16 [[TMP85]] to i32
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV186:%.*]] = sext i16 [[TMP86]] to i32
// SIMD-ONLY0-NEXT:    [[CMP187:%.*]] = icmp eq i32 [[CONV185]], [[CONV186]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP187]], label [[COND_TRUE189:%.*]], label [[COND_FALSE191:%.*]]
// SIMD-ONLY0:       cond.true189:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV190:%.*]] = sext i16 [[TMP87]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END193:%.*]]
// SIMD-ONLY0:       cond.false191:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV192:%.*]] = sext i16 [[TMP88]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END193]]
// SIMD-ONLY0:       cond.end193:
// SIMD-ONLY0-NEXT:    [[COND194:%.*]] = phi i32 [ [[CONV190]], [[COND_TRUE189]] ], [ [[CONV192]], [[COND_FALSE191]] ]
// SIMD-ONLY0-NEXT:    [[CONV195:%.*]] = trunc i32 [[COND194]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV195]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP89]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP90]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV196:%.*]] = sext i16 [[TMP91]] to i32
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV197:%.*]] = sext i16 [[TMP92]] to i32
// SIMD-ONLY0-NEXT:    [[CMP198:%.*]] = icmp sgt i32 [[CONV196]], [[CONV197]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP198]], label [[COND_TRUE200:%.*]], label [[COND_FALSE202:%.*]]
// SIMD-ONLY0:       cond.true200:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV201:%.*]] = sext i16 [[TMP93]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END204:%.*]]
// SIMD-ONLY0:       cond.false202:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV203:%.*]] = sext i16 [[TMP94]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END204]]
// SIMD-ONLY0:       cond.end204:
// SIMD-ONLY0-NEXT:    [[COND205:%.*]] = phi i32 [ [[CONV201]], [[COND_TRUE200]] ], [ [[CONV203]], [[COND_FALSE202]] ]
// SIMD-ONLY0-NEXT:    [[CONV206:%.*]] = trunc i32 [[COND205]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV206]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP95]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV207:%.*]] = sext i16 [[TMP96]] to i32
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV208:%.*]] = sext i16 [[TMP97]] to i32
// SIMD-ONLY0-NEXT:    [[CMP209:%.*]] = icmp slt i32 [[CONV207]], [[CONV208]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP209]], label [[COND_TRUE211:%.*]], label [[COND_FALSE213:%.*]]
// SIMD-ONLY0:       cond.true211:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV212:%.*]] = sext i16 [[TMP98]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END215:%.*]]
// SIMD-ONLY0:       cond.false213:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV214:%.*]] = sext i16 [[TMP99]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END215]]
// SIMD-ONLY0:       cond.end215:
// SIMD-ONLY0-NEXT:    [[COND216:%.*]] = phi i32 [ [[CONV212]], [[COND_TRUE211]] ], [ [[CONV214]], [[COND_FALSE213]] ]
// SIMD-ONLY0-NEXT:    [[CONV217:%.*]] = trunc i32 [[COND216]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV217]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP100]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV218:%.*]] = sext i16 [[TMP101]] to i32
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV219:%.*]] = sext i16 [[TMP102]] to i32
// SIMD-ONLY0-NEXT:    [[CMP220:%.*]] = icmp eq i32 [[CONV218]], [[CONV219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP220]], label [[COND_TRUE222:%.*]], label [[COND_FALSE224:%.*]]
// SIMD-ONLY0:       cond.true222:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV223:%.*]] = sext i16 [[TMP103]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END226:%.*]]
// SIMD-ONLY0:       cond.false224:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV225:%.*]] = sext i16 [[TMP104]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END226]]
// SIMD-ONLY0:       cond.end226:
// SIMD-ONLY0-NEXT:    [[COND227:%.*]] = phi i32 [ [[CONV223]], [[COND_TRUE222]] ], [ [[CONV225]], [[COND_FALSE224]] ]
// SIMD-ONLY0-NEXT:    [[CONV228:%.*]] = trunc i32 [[COND227]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV228]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV229:%.*]] = sext i16 [[TMP105]] to i32
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV230:%.*]] = sext i16 [[TMP106]] to i32
// SIMD-ONLY0-NEXT:    [[CMP231:%.*]] = icmp sgt i32 [[CONV229]], [[CONV230]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP231]], label [[COND_TRUE233:%.*]], label [[COND_FALSE235:%.*]]
// SIMD-ONLY0:       cond.true233:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV234:%.*]] = sext i16 [[TMP107]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END237:%.*]]
// SIMD-ONLY0:       cond.false235:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV236:%.*]] = sext i16 [[TMP108]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END237]]
// SIMD-ONLY0:       cond.end237:
// SIMD-ONLY0-NEXT:    [[COND238:%.*]] = phi i32 [ [[CONV234]], [[COND_TRUE233]] ], [ [[CONV236]], [[COND_FALSE235]] ]
// SIMD-ONLY0-NEXT:    [[CONV239:%.*]] = trunc i32 [[COND238]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV239]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP109]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV240:%.*]] = sext i16 [[TMP110]] to i32
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV241:%.*]] = sext i16 [[TMP111]] to i32
// SIMD-ONLY0-NEXT:    [[CMP242:%.*]] = icmp slt i32 [[CONV240]], [[CONV241]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP242]], label [[COND_TRUE244:%.*]], label [[COND_FALSE246:%.*]]
// SIMD-ONLY0:       cond.true244:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV245:%.*]] = sext i16 [[TMP112]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END248:%.*]]
// SIMD-ONLY0:       cond.false246:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV247:%.*]] = sext i16 [[TMP113]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END248]]
// SIMD-ONLY0:       cond.end248:
// SIMD-ONLY0-NEXT:    [[COND249:%.*]] = phi i32 [ [[CONV245]], [[COND_TRUE244]] ], [ [[CONV247]], [[COND_FALSE246]] ]
// SIMD-ONLY0-NEXT:    [[CONV250:%.*]] = trunc i32 [[COND249]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV250]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP114]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV251:%.*]] = sext i16 [[TMP115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV252:%.*]] = sext i16 [[TMP116]] to i32
// SIMD-ONLY0-NEXT:    [[CMP253:%.*]] = icmp eq i32 [[CONV251]], [[CONV252]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP253]], label [[COND_TRUE255:%.*]], label [[COND_FALSE257:%.*]]
// SIMD-ONLY0:       cond.true255:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV256:%.*]] = sext i16 [[TMP117]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END259:%.*]]
// SIMD-ONLY0:       cond.false257:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV258:%.*]] = sext i16 [[TMP118]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END259]]
// SIMD-ONLY0:       cond.end259:
// SIMD-ONLY0-NEXT:    [[COND260:%.*]] = phi i32 [ [[CONV256]], [[COND_TRUE255]] ], [ [[CONV258]], [[COND_FALSE257]] ]
// SIMD-ONLY0-NEXT:    [[CONV261:%.*]] = trunc i32 [[COND260]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV261]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP119]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP120]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV262:%.*]] = sext i16 [[TMP121]] to i32
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV263:%.*]] = sext i16 [[TMP122]] to i32
// SIMD-ONLY0-NEXT:    [[CMP264:%.*]] = icmp sgt i32 [[CONV262]], [[CONV263]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP264]], label [[COND_TRUE266:%.*]], label [[COND_FALSE268:%.*]]
// SIMD-ONLY0:       cond.true266:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV267:%.*]] = sext i16 [[TMP123]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END270:%.*]]
// SIMD-ONLY0:       cond.false268:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV269:%.*]] = sext i16 [[TMP124]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END270]]
// SIMD-ONLY0:       cond.end270:
// SIMD-ONLY0-NEXT:    [[COND271:%.*]] = phi i32 [ [[CONV267]], [[COND_TRUE266]] ], [ [[CONV269]], [[COND_FALSE268]] ]
// SIMD-ONLY0-NEXT:    [[CONV272:%.*]] = trunc i32 [[COND271]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV272]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP125]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV273:%.*]] = sext i16 [[TMP126]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV274:%.*]] = sext i16 [[TMP127]] to i32
// SIMD-ONLY0-NEXT:    [[CMP275:%.*]] = icmp slt i32 [[CONV273]], [[CONV274]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP275]], label [[COND_TRUE277:%.*]], label [[COND_FALSE279:%.*]]
// SIMD-ONLY0:       cond.true277:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV278:%.*]] = sext i16 [[TMP128]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END281:%.*]]
// SIMD-ONLY0:       cond.false279:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV280:%.*]] = sext i16 [[TMP129]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END281]]
// SIMD-ONLY0:       cond.end281:
// SIMD-ONLY0-NEXT:    [[COND282:%.*]] = phi i32 [ [[CONV278]], [[COND_TRUE277]] ], [ [[CONV280]], [[COND_FALSE279]] ]
// SIMD-ONLY0-NEXT:    [[CONV283:%.*]] = trunc i32 [[COND282]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV283]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP130]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV284:%.*]] = sext i16 [[TMP131]] to i32
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV285:%.*]] = sext i16 [[TMP132]] to i32
// SIMD-ONLY0-NEXT:    [[CMP286:%.*]] = icmp eq i32 [[CONV284]], [[CONV285]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP286]], label [[COND_TRUE288:%.*]], label [[COND_FALSE290:%.*]]
// SIMD-ONLY0:       cond.true288:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV289:%.*]] = sext i16 [[TMP133]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292:%.*]]
// SIMD-ONLY0:       cond.false290:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV291:%.*]] = sext i16 [[TMP134]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292]]
// SIMD-ONLY0:       cond.end292:
// SIMD-ONLY0-NEXT:    [[COND293:%.*]] = phi i32 [ [[CONV289]], [[COND_TRUE288]] ], [ [[CONV291]], [[COND_FALSE290]] ]
// SIMD-ONLY0-NEXT:    [[CONV294:%.*]] = trunc i32 [[COND293]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV294]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV295:%.*]] = sext i16 [[TMP135]] to i32
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV296:%.*]] = sext i16 [[TMP136]] to i32
// SIMD-ONLY0-NEXT:    [[CMP297:%.*]] = icmp sgt i32 [[CONV295]], [[CONV296]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP297]], label [[COND_TRUE299:%.*]], label [[COND_FALSE301:%.*]]
// SIMD-ONLY0:       cond.true299:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV300:%.*]] = sext i16 [[TMP137]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END303:%.*]]
// SIMD-ONLY0:       cond.false301:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV302:%.*]] = sext i16 [[TMP138]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END303]]
// SIMD-ONLY0:       cond.end303:
// SIMD-ONLY0-NEXT:    [[COND304:%.*]] = phi i32 [ [[CONV300]], [[COND_TRUE299]] ], [ [[CONV302]], [[COND_FALSE301]] ]
// SIMD-ONLY0-NEXT:    [[CONV305:%.*]] = trunc i32 [[COND304]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV305]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP139]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV306:%.*]] = sext i16 [[TMP140]] to i32
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV307:%.*]] = sext i16 [[TMP141]] to i32
// SIMD-ONLY0-NEXT:    [[CMP308:%.*]] = icmp slt i32 [[CONV306]], [[CONV307]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP308]], label [[COND_TRUE310:%.*]], label [[COND_FALSE312:%.*]]
// SIMD-ONLY0:       cond.true310:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV311:%.*]] = sext i16 [[TMP142]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END314:%.*]]
// SIMD-ONLY0:       cond.false312:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV313:%.*]] = sext i16 [[TMP143]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END314]]
// SIMD-ONLY0:       cond.end314:
// SIMD-ONLY0-NEXT:    [[COND315:%.*]] = phi i32 [ [[CONV311]], [[COND_TRUE310]] ], [ [[CONV313]], [[COND_FALSE312]] ]
// SIMD-ONLY0-NEXT:    [[CONV316:%.*]] = trunc i32 [[COND315]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV316]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP144]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV317:%.*]] = sext i16 [[TMP145]] to i32
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV318:%.*]] = sext i16 [[TMP146]] to i32
// SIMD-ONLY0-NEXT:    [[CMP319:%.*]] = icmp eq i32 [[CONV317]], [[CONV318]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP319]], label [[COND_TRUE321:%.*]], label [[COND_FALSE323:%.*]]
// SIMD-ONLY0:       cond.true321:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV322:%.*]] = sext i16 [[TMP147]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END325:%.*]]
// SIMD-ONLY0:       cond.false323:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV324:%.*]] = sext i16 [[TMP148]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END325]]
// SIMD-ONLY0:       cond.end325:
// SIMD-ONLY0-NEXT:    [[COND326:%.*]] = phi i32 [ [[CONV322]], [[COND_TRUE321]] ], [ [[CONV324]], [[COND_FALSE323]] ]
// SIMD-ONLY0-NEXT:    [[CONV327:%.*]] = trunc i32 [[COND326]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV327]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP149]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP150]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV328:%.*]] = sext i16 [[TMP151]] to i32
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV329:%.*]] = sext i16 [[TMP152]] to i32
// SIMD-ONLY0-NEXT:    [[CMP330:%.*]] = icmp sgt i32 [[CONV328]], [[CONV329]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP330]], label [[COND_TRUE332:%.*]], label [[COND_FALSE334:%.*]]
// SIMD-ONLY0:       cond.true332:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV333:%.*]] = sext i16 [[TMP153]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END336:%.*]]
// SIMD-ONLY0:       cond.false334:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV335:%.*]] = sext i16 [[TMP154]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END336]]
// SIMD-ONLY0:       cond.end336:
// SIMD-ONLY0-NEXT:    [[COND337:%.*]] = phi i32 [ [[CONV333]], [[COND_TRUE332]] ], [ [[CONV335]], [[COND_FALSE334]] ]
// SIMD-ONLY0-NEXT:    [[CONV338:%.*]] = trunc i32 [[COND337]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV338]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP155]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV339:%.*]] = sext i16 [[TMP156]] to i32
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV340:%.*]] = sext i16 [[TMP157]] to i32
// SIMD-ONLY0-NEXT:    [[CMP341:%.*]] = icmp slt i32 [[CONV339]], [[CONV340]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP341]], label [[COND_TRUE343:%.*]], label [[COND_FALSE345:%.*]]
// SIMD-ONLY0:       cond.true343:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV344:%.*]] = sext i16 [[TMP158]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END347:%.*]]
// SIMD-ONLY0:       cond.false345:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV346:%.*]] = sext i16 [[TMP159]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END347]]
// SIMD-ONLY0:       cond.end347:
// SIMD-ONLY0-NEXT:    [[COND348:%.*]] = phi i32 [ [[CONV344]], [[COND_TRUE343]] ], [ [[CONV346]], [[COND_FALSE345]] ]
// SIMD-ONLY0-NEXT:    [[CONV349:%.*]] = trunc i32 [[COND348]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV349]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP160]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV350:%.*]] = sext i16 [[TMP161]] to i32
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV351:%.*]] = sext i16 [[TMP162]] to i32
// SIMD-ONLY0-NEXT:    [[CMP352:%.*]] = icmp eq i32 [[CONV350]], [[CONV351]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP352]], label [[COND_TRUE354:%.*]], label [[COND_FALSE356:%.*]]
// SIMD-ONLY0:       cond.true354:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV355:%.*]] = sext i16 [[TMP163]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END358:%.*]]
// SIMD-ONLY0:       cond.false356:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV357:%.*]] = sext i16 [[TMP164]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END358]]
// SIMD-ONLY0:       cond.end358:
// SIMD-ONLY0-NEXT:    [[COND359:%.*]] = phi i32 [ [[CONV355]], [[COND_TRUE354]] ], [ [[CONV357]], [[COND_FALSE356]] ]
// SIMD-ONLY0-NEXT:    [[CONV360:%.*]] = trunc i32 [[COND359]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV360]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV361:%.*]] = sext i16 [[TMP165]] to i32
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV362:%.*]] = sext i16 [[TMP166]] to i32
// SIMD-ONLY0-NEXT:    [[CMP363:%.*]] = icmp sgt i32 [[CONV361]], [[CONV362]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP363]], label [[COND_TRUE365:%.*]], label [[COND_FALSE367:%.*]]
// SIMD-ONLY0:       cond.true365:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV366:%.*]] = sext i16 [[TMP167]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END369:%.*]]
// SIMD-ONLY0:       cond.false367:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV368:%.*]] = sext i16 [[TMP168]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END369]]
// SIMD-ONLY0:       cond.end369:
// SIMD-ONLY0-NEXT:    [[COND370:%.*]] = phi i32 [ [[CONV366]], [[COND_TRUE365]] ], [ [[CONV368]], [[COND_FALSE367]] ]
// SIMD-ONLY0-NEXT:    [[CONV371:%.*]] = trunc i32 [[COND370]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV371]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP169]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV372:%.*]] = sext i16 [[TMP170]] to i32
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV373:%.*]] = sext i16 [[TMP171]] to i32
// SIMD-ONLY0-NEXT:    [[CMP374:%.*]] = icmp slt i32 [[CONV372]], [[CONV373]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP374]], label [[COND_TRUE376:%.*]], label [[COND_FALSE378:%.*]]
// SIMD-ONLY0:       cond.true376:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV377:%.*]] = sext i16 [[TMP172]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END380:%.*]]
// SIMD-ONLY0:       cond.false378:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV379:%.*]] = sext i16 [[TMP173]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END380]]
// SIMD-ONLY0:       cond.end380:
// SIMD-ONLY0-NEXT:    [[COND381:%.*]] = phi i32 [ [[CONV377]], [[COND_TRUE376]] ], [ [[CONV379]], [[COND_FALSE378]] ]
// SIMD-ONLY0-NEXT:    [[CONV382:%.*]] = trunc i32 [[COND381]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV382]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP174]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV383:%.*]] = sext i16 [[TMP175]] to i32
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV384:%.*]] = sext i16 [[TMP176]] to i32
// SIMD-ONLY0-NEXT:    [[CMP385:%.*]] = icmp eq i32 [[CONV383]], [[CONV384]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP385]], label [[COND_TRUE387:%.*]], label [[COND_FALSE389:%.*]]
// SIMD-ONLY0:       cond.true387:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV388:%.*]] = sext i16 [[TMP177]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END391:%.*]]
// SIMD-ONLY0:       cond.false389:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV390:%.*]] = sext i16 [[TMP178]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END391]]
// SIMD-ONLY0:       cond.end391:
// SIMD-ONLY0-NEXT:    [[COND392:%.*]] = phi i32 [ [[CONV388]], [[COND_TRUE387]] ], [ [[CONV390]], [[COND_FALSE389]] ]
// SIMD-ONLY0-NEXT:    [[CONV393:%.*]] = trunc i32 [[COND392]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV393]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP179]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i16, ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    ret i16 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @usxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[USX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USV:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON1]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON2]], ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i16 poison
// SIMD-ONLY0-NEXT:    store i16 [[FREEZE_POISON3]], ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP0]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = zext i16 [[TMP1]] to i32
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV4:%.*]] = zext i16 [[TMP2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV]], [[CONV4]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV6:%.*]] = zext i16 [[TMP3]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV7:%.*]] = zext i16 [[TMP4]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV6]], [[COND_TRUE]] ], [ [[CONV7]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    [[CONV8:%.*]] = trunc i32 [[COND]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV8]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP5]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV9:%.*]] = zext i16 [[TMP6]] to i32
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV10:%.*]] = zext i16 [[TMP7]] to i32
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = icmp slt i32 [[CONV9]], [[CONV10]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE13:%.*]], label [[COND_FALSE15:%.*]]
// SIMD-ONLY0:       cond.true13:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV14:%.*]] = zext i16 [[TMP8]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false15:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV16:%.*]] = zext i16 [[TMP9]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi i32 [ [[CONV14]], [[COND_TRUE13]] ], [ [[CONV16]], [[COND_FALSE15]] ]
// SIMD-ONLY0-NEXT:    [[CONV19:%.*]] = trunc i32 [[COND18]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV19]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP10]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV20:%.*]] = zext i16 [[TMP11]] to i32
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV21:%.*]] = zext i16 [[TMP12]] to i32
// SIMD-ONLY0-NEXT:    [[CMP22:%.*]] = icmp eq i32 [[CONV20]], [[CONV21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP22]], label [[COND_TRUE24:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true24:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV25:%.*]] = zext i16 [[TMP13]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END28:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV27:%.*]] = zext i16 [[TMP14]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END28]]
// SIMD-ONLY0:       cond.end28:
// SIMD-ONLY0-NEXT:    [[COND29:%.*]] = phi i32 [ [[CONV25]], [[COND_TRUE24]] ], [ [[CONV27]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    [[CONV30:%.*]] = trunc i32 [[COND29]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV30]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV31:%.*]] = zext i16 [[TMP15]] to i32
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV32:%.*]] = zext i16 [[TMP16]] to i32
// SIMD-ONLY0-NEXT:    [[CMP33:%.*]] = icmp sgt i32 [[CONV31]], [[CONV32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP33]], label [[COND_TRUE35:%.*]], label [[COND_FALSE37:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV36:%.*]] = zext i16 [[TMP17]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false37:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV38:%.*]] = zext i16 [[TMP18]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi i32 [ [[CONV36]], [[COND_TRUE35]] ], [ [[CONV38]], [[COND_FALSE37]] ]
// SIMD-ONLY0-NEXT:    [[CONV41:%.*]] = trunc i32 [[COND40]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV41]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP19]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV42:%.*]] = zext i16 [[TMP20]] to i32
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV43:%.*]] = zext i16 [[TMP21]] to i32
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp slt i32 [[CONV42]], [[CONV43]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE46:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true46:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV47:%.*]] = zext i16 [[TMP22]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END50:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV49:%.*]] = zext i16 [[TMP23]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END50]]
// SIMD-ONLY0:       cond.end50:
// SIMD-ONLY0-NEXT:    [[COND51:%.*]] = phi i32 [ [[CONV47]], [[COND_TRUE46]] ], [ [[CONV49]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    [[CONV52:%.*]] = trunc i32 [[COND51]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV52]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP24]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV53:%.*]] = zext i16 [[TMP25]] to i32
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV54:%.*]] = zext i16 [[TMP26]] to i32
// SIMD-ONLY0-NEXT:    [[CMP55:%.*]] = icmp eq i32 [[CONV53]], [[CONV54]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP55]], label [[COND_TRUE57:%.*]], label [[COND_FALSE59:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV58:%.*]] = zext i16 [[TMP27]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END61:%.*]]
// SIMD-ONLY0:       cond.false59:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV60:%.*]] = zext i16 [[TMP28]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END61]]
// SIMD-ONLY0:       cond.end61:
// SIMD-ONLY0-NEXT:    [[COND62:%.*]] = phi i32 [ [[CONV58]], [[COND_TRUE57]] ], [ [[CONV60]], [[COND_FALSE59]] ]
// SIMD-ONLY0-NEXT:    [[CONV63:%.*]] = trunc i32 [[COND62]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV63]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP29]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP30]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV64:%.*]] = zext i16 [[TMP31]] to i32
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV65:%.*]] = zext i16 [[TMP32]] to i32
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = icmp sgt i32 [[CONV64]], [[CONV65]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE68:%.*]], label [[COND_FALSE70:%.*]]
// SIMD-ONLY0:       cond.true68:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV69:%.*]] = zext i16 [[TMP33]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false70:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV71:%.*]] = zext i16 [[TMP34]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi i32 [ [[CONV69]], [[COND_TRUE68]] ], [ [[CONV71]], [[COND_FALSE70]] ]
// SIMD-ONLY0-NEXT:    [[CONV74:%.*]] = trunc i32 [[COND73]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV74]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP35]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV75:%.*]] = zext i16 [[TMP36]] to i32
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV76:%.*]] = zext i16 [[TMP37]] to i32
// SIMD-ONLY0-NEXT:    [[CMP77:%.*]] = icmp slt i32 [[CONV75]], [[CONV76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP77]], label [[COND_TRUE79:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true79:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV80:%.*]] = zext i16 [[TMP38]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END83:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV82:%.*]] = zext i16 [[TMP39]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END83]]
// SIMD-ONLY0:       cond.end83:
// SIMD-ONLY0-NEXT:    [[COND84:%.*]] = phi i32 [ [[CONV80]], [[COND_TRUE79]] ], [ [[CONV82]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    [[CONV85:%.*]] = trunc i32 [[COND84]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV85]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP40]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV86:%.*]] = zext i16 [[TMP41]] to i32
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV87:%.*]] = zext i16 [[TMP42]] to i32
// SIMD-ONLY0-NEXT:    [[CMP88:%.*]] = icmp eq i32 [[CONV86]], [[CONV87]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP88]], label [[COND_TRUE90:%.*]], label [[COND_FALSE92:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV91:%.*]] = zext i16 [[TMP43]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false92:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV93:%.*]] = zext i16 [[TMP44]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi i32 [ [[CONV91]], [[COND_TRUE90]] ], [ [[CONV93]], [[COND_FALSE92]] ]
// SIMD-ONLY0-NEXT:    [[CONV96:%.*]] = trunc i32 [[COND95]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV96]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV97:%.*]] = zext i16 [[TMP45]] to i32
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV98:%.*]] = zext i16 [[TMP46]] to i32
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = icmp sgt i32 [[CONV97]], [[CONV98]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE101:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true101:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV102:%.*]] = zext i16 [[TMP47]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END105:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV104:%.*]] = zext i16 [[TMP48]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END105]]
// SIMD-ONLY0:       cond.end105:
// SIMD-ONLY0-NEXT:    [[COND106:%.*]] = phi i32 [ [[CONV102]], [[COND_TRUE101]] ], [ [[CONV104]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    [[CONV107:%.*]] = trunc i32 [[COND106]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV107]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP49]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV108:%.*]] = zext i16 [[TMP50]] to i32
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV109:%.*]] = zext i16 [[TMP51]] to i32
// SIMD-ONLY0-NEXT:    [[CMP110:%.*]] = icmp slt i32 [[CONV108]], [[CONV109]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP110]], label [[COND_TRUE112:%.*]], label [[COND_FALSE114:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV113:%.*]] = zext i16 [[TMP52]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END116:%.*]]
// SIMD-ONLY0:       cond.false114:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = zext i16 [[TMP53]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END116]]
// SIMD-ONLY0:       cond.end116:
// SIMD-ONLY0-NEXT:    [[COND117:%.*]] = phi i32 [ [[CONV113]], [[COND_TRUE112]] ], [ [[CONV115]], [[COND_FALSE114]] ]
// SIMD-ONLY0-NEXT:    [[CONV118:%.*]] = trunc i32 [[COND117]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV118]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP54]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV119:%.*]] = zext i16 [[TMP55]] to i32
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV120:%.*]] = zext i16 [[TMP56]] to i32
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = icmp eq i32 [[CONV119]], [[CONV120]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE123:%.*]], label [[COND_FALSE125:%.*]]
// SIMD-ONLY0:       cond.true123:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV124:%.*]] = zext i16 [[TMP57]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false125:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = zext i16 [[TMP58]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i32 [ [[CONV124]], [[COND_TRUE123]] ], [ [[CONV126]], [[COND_FALSE125]] ]
// SIMD-ONLY0-NEXT:    [[CONV129:%.*]] = trunc i32 [[COND128]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV129]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP59]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP60]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV130:%.*]] = zext i16 [[TMP61]] to i32
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV131:%.*]] = zext i16 [[TMP62]] to i32
// SIMD-ONLY0-NEXT:    [[CMP132:%.*]] = icmp sgt i32 [[CONV130]], [[CONV131]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP132]], label [[COND_TRUE134:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true134:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV135:%.*]] = zext i16 [[TMP63]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END138:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV137:%.*]] = zext i16 [[TMP64]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END138]]
// SIMD-ONLY0:       cond.end138:
// SIMD-ONLY0-NEXT:    [[COND139:%.*]] = phi i32 [ [[CONV135]], [[COND_TRUE134]] ], [ [[CONV137]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    [[CONV140:%.*]] = trunc i32 [[COND139]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV140]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP65]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV141:%.*]] = zext i16 [[TMP66]] to i32
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV142:%.*]] = zext i16 [[TMP67]] to i32
// SIMD-ONLY0-NEXT:    [[CMP143:%.*]] = icmp slt i32 [[CONV141]], [[CONV142]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP143]], label [[COND_TRUE145:%.*]], label [[COND_FALSE147:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV146:%.*]] = zext i16 [[TMP68]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false147:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = zext i16 [[TMP69]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i32 [ [[CONV146]], [[COND_TRUE145]] ], [ [[CONV148]], [[COND_FALSE147]] ]
// SIMD-ONLY0-NEXT:    [[CONV151:%.*]] = trunc i32 [[COND150]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV151]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP70]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV152:%.*]] = zext i16 [[TMP71]] to i32
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV153:%.*]] = zext i16 [[TMP72]] to i32
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp eq i32 [[CONV152]], [[CONV153]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE156:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true156:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV157:%.*]] = zext i16 [[TMP73]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END160:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV159:%.*]] = zext i16 [[TMP74]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END160]]
// SIMD-ONLY0:       cond.end160:
// SIMD-ONLY0-NEXT:    [[COND161:%.*]] = phi i32 [ [[CONV157]], [[COND_TRUE156]] ], [ [[CONV159]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    [[CONV162:%.*]] = trunc i32 [[COND161]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV162]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV163:%.*]] = zext i16 [[TMP75]] to i32
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV164:%.*]] = zext i16 [[TMP76]] to i32
// SIMD-ONLY0-NEXT:    [[CMP165:%.*]] = icmp sgt i32 [[CONV163]], [[CONV164]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP165]], label [[COND_TRUE167:%.*]], label [[COND_FALSE169:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV168:%.*]] = zext i16 [[TMP77]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END171:%.*]]
// SIMD-ONLY0:       cond.false169:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV170:%.*]] = zext i16 [[TMP78]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END171]]
// SIMD-ONLY0:       cond.end171:
// SIMD-ONLY0-NEXT:    [[COND172:%.*]] = phi i32 [ [[CONV168]], [[COND_TRUE167]] ], [ [[CONV170]], [[COND_FALSE169]] ]
// SIMD-ONLY0-NEXT:    [[CONV173:%.*]] = trunc i32 [[COND172]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV173]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP79]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV174:%.*]] = zext i16 [[TMP80]] to i32
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV175:%.*]] = zext i16 [[TMP81]] to i32
// SIMD-ONLY0-NEXT:    [[CMP176:%.*]] = icmp slt i32 [[CONV174]], [[CONV175]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP176]], label [[COND_TRUE178:%.*]], label [[COND_FALSE180:%.*]]
// SIMD-ONLY0:       cond.true178:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV179:%.*]] = zext i16 [[TMP82]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END182:%.*]]
// SIMD-ONLY0:       cond.false180:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV181:%.*]] = zext i16 [[TMP83]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END182]]
// SIMD-ONLY0:       cond.end182:
// SIMD-ONLY0-NEXT:    [[COND183:%.*]] = phi i32 [ [[CONV179]], [[COND_TRUE178]] ], [ [[CONV181]], [[COND_FALSE180]] ]
// SIMD-ONLY0-NEXT:    [[CONV184:%.*]] = trunc i32 [[COND183]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV184]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP84]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV185:%.*]] = zext i16 [[TMP85]] to i32
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV186:%.*]] = zext i16 [[TMP86]] to i32
// SIMD-ONLY0-NEXT:    [[CMP187:%.*]] = icmp eq i32 [[CONV185]], [[CONV186]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP187]], label [[COND_TRUE189:%.*]], label [[COND_FALSE191:%.*]]
// SIMD-ONLY0:       cond.true189:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV190:%.*]] = zext i16 [[TMP87]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END193:%.*]]
// SIMD-ONLY0:       cond.false191:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV192:%.*]] = zext i16 [[TMP88]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END193]]
// SIMD-ONLY0:       cond.end193:
// SIMD-ONLY0-NEXT:    [[COND194:%.*]] = phi i32 [ [[CONV190]], [[COND_TRUE189]] ], [ [[CONV192]], [[COND_FALSE191]] ]
// SIMD-ONLY0-NEXT:    [[CONV195:%.*]] = trunc i32 [[COND194]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV195]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP89]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP90]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV196:%.*]] = zext i16 [[TMP91]] to i32
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV197:%.*]] = zext i16 [[TMP92]] to i32
// SIMD-ONLY0-NEXT:    [[CMP198:%.*]] = icmp sgt i32 [[CONV196]], [[CONV197]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP198]], label [[COND_TRUE200:%.*]], label [[COND_FALSE202:%.*]]
// SIMD-ONLY0:       cond.true200:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV201:%.*]] = zext i16 [[TMP93]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END204:%.*]]
// SIMD-ONLY0:       cond.false202:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV203:%.*]] = zext i16 [[TMP94]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END204]]
// SIMD-ONLY0:       cond.end204:
// SIMD-ONLY0-NEXT:    [[COND205:%.*]] = phi i32 [ [[CONV201]], [[COND_TRUE200]] ], [ [[CONV203]], [[COND_FALSE202]] ]
// SIMD-ONLY0-NEXT:    [[CONV206:%.*]] = trunc i32 [[COND205]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV206]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP95]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV207:%.*]] = zext i16 [[TMP96]] to i32
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV208:%.*]] = zext i16 [[TMP97]] to i32
// SIMD-ONLY0-NEXT:    [[CMP209:%.*]] = icmp slt i32 [[CONV207]], [[CONV208]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP209]], label [[COND_TRUE211:%.*]], label [[COND_FALSE213:%.*]]
// SIMD-ONLY0:       cond.true211:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV212:%.*]] = zext i16 [[TMP98]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END215:%.*]]
// SIMD-ONLY0:       cond.false213:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV214:%.*]] = zext i16 [[TMP99]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END215]]
// SIMD-ONLY0:       cond.end215:
// SIMD-ONLY0-NEXT:    [[COND216:%.*]] = phi i32 [ [[CONV212]], [[COND_TRUE211]] ], [ [[CONV214]], [[COND_FALSE213]] ]
// SIMD-ONLY0-NEXT:    [[CONV217:%.*]] = trunc i32 [[COND216]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV217]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP100]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV218:%.*]] = zext i16 [[TMP101]] to i32
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV219:%.*]] = zext i16 [[TMP102]] to i32
// SIMD-ONLY0-NEXT:    [[CMP220:%.*]] = icmp eq i32 [[CONV218]], [[CONV219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP220]], label [[COND_TRUE222:%.*]], label [[COND_FALSE224:%.*]]
// SIMD-ONLY0:       cond.true222:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV223:%.*]] = zext i16 [[TMP103]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END226:%.*]]
// SIMD-ONLY0:       cond.false224:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV225:%.*]] = zext i16 [[TMP104]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END226]]
// SIMD-ONLY0:       cond.end226:
// SIMD-ONLY0-NEXT:    [[COND227:%.*]] = phi i32 [ [[CONV223]], [[COND_TRUE222]] ], [ [[CONV225]], [[COND_FALSE224]] ]
// SIMD-ONLY0-NEXT:    [[CONV228:%.*]] = trunc i32 [[COND227]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV228]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV229:%.*]] = zext i16 [[TMP105]] to i32
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV230:%.*]] = zext i16 [[TMP106]] to i32
// SIMD-ONLY0-NEXT:    [[CMP231:%.*]] = icmp sgt i32 [[CONV229]], [[CONV230]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP231]], label [[COND_TRUE233:%.*]], label [[COND_FALSE235:%.*]]
// SIMD-ONLY0:       cond.true233:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV234:%.*]] = zext i16 [[TMP107]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END237:%.*]]
// SIMD-ONLY0:       cond.false235:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV236:%.*]] = zext i16 [[TMP108]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END237]]
// SIMD-ONLY0:       cond.end237:
// SIMD-ONLY0-NEXT:    [[COND238:%.*]] = phi i32 [ [[CONV234]], [[COND_TRUE233]] ], [ [[CONV236]], [[COND_FALSE235]] ]
// SIMD-ONLY0-NEXT:    [[CONV239:%.*]] = trunc i32 [[COND238]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV239]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP109]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV240:%.*]] = zext i16 [[TMP110]] to i32
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV241:%.*]] = zext i16 [[TMP111]] to i32
// SIMD-ONLY0-NEXT:    [[CMP242:%.*]] = icmp slt i32 [[CONV240]], [[CONV241]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP242]], label [[COND_TRUE244:%.*]], label [[COND_FALSE246:%.*]]
// SIMD-ONLY0:       cond.true244:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV245:%.*]] = zext i16 [[TMP112]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END248:%.*]]
// SIMD-ONLY0:       cond.false246:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV247:%.*]] = zext i16 [[TMP113]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END248]]
// SIMD-ONLY0:       cond.end248:
// SIMD-ONLY0-NEXT:    [[COND249:%.*]] = phi i32 [ [[CONV245]], [[COND_TRUE244]] ], [ [[CONV247]], [[COND_FALSE246]] ]
// SIMD-ONLY0-NEXT:    [[CONV250:%.*]] = trunc i32 [[COND249]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV250]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP114]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV251:%.*]] = zext i16 [[TMP115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV252:%.*]] = zext i16 [[TMP116]] to i32
// SIMD-ONLY0-NEXT:    [[CMP253:%.*]] = icmp eq i32 [[CONV251]], [[CONV252]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP253]], label [[COND_TRUE255:%.*]], label [[COND_FALSE257:%.*]]
// SIMD-ONLY0:       cond.true255:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV256:%.*]] = zext i16 [[TMP117]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END259:%.*]]
// SIMD-ONLY0:       cond.false257:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV258:%.*]] = zext i16 [[TMP118]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END259]]
// SIMD-ONLY0:       cond.end259:
// SIMD-ONLY0-NEXT:    [[COND260:%.*]] = phi i32 [ [[CONV256]], [[COND_TRUE255]] ], [ [[CONV258]], [[COND_FALSE257]] ]
// SIMD-ONLY0-NEXT:    [[CONV261:%.*]] = trunc i32 [[COND260]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV261]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP119]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP120]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV262:%.*]] = zext i16 [[TMP121]] to i32
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV263:%.*]] = zext i16 [[TMP122]] to i32
// SIMD-ONLY0-NEXT:    [[CMP264:%.*]] = icmp sgt i32 [[CONV262]], [[CONV263]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP264]], label [[COND_TRUE266:%.*]], label [[COND_FALSE268:%.*]]
// SIMD-ONLY0:       cond.true266:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV267:%.*]] = zext i16 [[TMP123]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END270:%.*]]
// SIMD-ONLY0:       cond.false268:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV269:%.*]] = zext i16 [[TMP124]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END270]]
// SIMD-ONLY0:       cond.end270:
// SIMD-ONLY0-NEXT:    [[COND271:%.*]] = phi i32 [ [[CONV267]], [[COND_TRUE266]] ], [ [[CONV269]], [[COND_FALSE268]] ]
// SIMD-ONLY0-NEXT:    [[CONV272:%.*]] = trunc i32 [[COND271]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV272]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP125]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV273:%.*]] = zext i16 [[TMP126]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV274:%.*]] = zext i16 [[TMP127]] to i32
// SIMD-ONLY0-NEXT:    [[CMP275:%.*]] = icmp slt i32 [[CONV273]], [[CONV274]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP275]], label [[COND_TRUE277:%.*]], label [[COND_FALSE279:%.*]]
// SIMD-ONLY0:       cond.true277:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV278:%.*]] = zext i16 [[TMP128]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END281:%.*]]
// SIMD-ONLY0:       cond.false279:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV280:%.*]] = zext i16 [[TMP129]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END281]]
// SIMD-ONLY0:       cond.end281:
// SIMD-ONLY0-NEXT:    [[COND282:%.*]] = phi i32 [ [[CONV278]], [[COND_TRUE277]] ], [ [[CONV280]], [[COND_FALSE279]] ]
// SIMD-ONLY0-NEXT:    [[CONV283:%.*]] = trunc i32 [[COND282]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV283]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP130]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV284:%.*]] = zext i16 [[TMP131]] to i32
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV285:%.*]] = zext i16 [[TMP132]] to i32
// SIMD-ONLY0-NEXT:    [[CMP286:%.*]] = icmp eq i32 [[CONV284]], [[CONV285]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP286]], label [[COND_TRUE288:%.*]], label [[COND_FALSE290:%.*]]
// SIMD-ONLY0:       cond.true288:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV289:%.*]] = zext i16 [[TMP133]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292:%.*]]
// SIMD-ONLY0:       cond.false290:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV291:%.*]] = zext i16 [[TMP134]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292]]
// SIMD-ONLY0:       cond.end292:
// SIMD-ONLY0-NEXT:    [[COND293:%.*]] = phi i32 [ [[CONV289]], [[COND_TRUE288]] ], [ [[CONV291]], [[COND_FALSE290]] ]
// SIMD-ONLY0-NEXT:    [[CONV294:%.*]] = trunc i32 [[COND293]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV294]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV295:%.*]] = zext i16 [[TMP135]] to i32
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV296:%.*]] = zext i16 [[TMP136]] to i32
// SIMD-ONLY0-NEXT:    [[CMP297:%.*]] = icmp sgt i32 [[CONV295]], [[CONV296]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP297]], label [[COND_TRUE299:%.*]], label [[COND_FALSE301:%.*]]
// SIMD-ONLY0:       cond.true299:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV300:%.*]] = zext i16 [[TMP137]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END303:%.*]]
// SIMD-ONLY0:       cond.false301:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV302:%.*]] = zext i16 [[TMP138]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END303]]
// SIMD-ONLY0:       cond.end303:
// SIMD-ONLY0-NEXT:    [[COND304:%.*]] = phi i32 [ [[CONV300]], [[COND_TRUE299]] ], [ [[CONV302]], [[COND_FALSE301]] ]
// SIMD-ONLY0-NEXT:    [[CONV305:%.*]] = trunc i32 [[COND304]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV305]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP139]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV306:%.*]] = zext i16 [[TMP140]] to i32
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV307:%.*]] = zext i16 [[TMP141]] to i32
// SIMD-ONLY0-NEXT:    [[CMP308:%.*]] = icmp slt i32 [[CONV306]], [[CONV307]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP308]], label [[COND_TRUE310:%.*]], label [[COND_FALSE312:%.*]]
// SIMD-ONLY0:       cond.true310:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV311:%.*]] = zext i16 [[TMP142]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END314:%.*]]
// SIMD-ONLY0:       cond.false312:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV313:%.*]] = zext i16 [[TMP143]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END314]]
// SIMD-ONLY0:       cond.end314:
// SIMD-ONLY0-NEXT:    [[COND315:%.*]] = phi i32 [ [[CONV311]], [[COND_TRUE310]] ], [ [[CONV313]], [[COND_FALSE312]] ]
// SIMD-ONLY0-NEXT:    [[CONV316:%.*]] = trunc i32 [[COND315]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV316]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP144]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV317:%.*]] = zext i16 [[TMP145]] to i32
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV318:%.*]] = zext i16 [[TMP146]] to i32
// SIMD-ONLY0-NEXT:    [[CMP319:%.*]] = icmp eq i32 [[CONV317]], [[CONV318]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP319]], label [[COND_TRUE321:%.*]], label [[COND_FALSE323:%.*]]
// SIMD-ONLY0:       cond.true321:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV322:%.*]] = zext i16 [[TMP147]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END325:%.*]]
// SIMD-ONLY0:       cond.false323:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV324:%.*]] = zext i16 [[TMP148]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END325]]
// SIMD-ONLY0:       cond.end325:
// SIMD-ONLY0-NEXT:    [[COND326:%.*]] = phi i32 [ [[CONV322]], [[COND_TRUE321]] ], [ [[CONV324]], [[COND_FALSE323]] ]
// SIMD-ONLY0-NEXT:    [[CONV327:%.*]] = trunc i32 [[COND326]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV327]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP149]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP150]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV328:%.*]] = zext i16 [[TMP151]] to i32
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV329:%.*]] = zext i16 [[TMP152]] to i32
// SIMD-ONLY0-NEXT:    [[CMP330:%.*]] = icmp sgt i32 [[CONV328]], [[CONV329]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP330]], label [[COND_TRUE332:%.*]], label [[COND_FALSE334:%.*]]
// SIMD-ONLY0:       cond.true332:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV333:%.*]] = zext i16 [[TMP153]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END336:%.*]]
// SIMD-ONLY0:       cond.false334:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV335:%.*]] = zext i16 [[TMP154]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END336]]
// SIMD-ONLY0:       cond.end336:
// SIMD-ONLY0-NEXT:    [[COND337:%.*]] = phi i32 [ [[CONV333]], [[COND_TRUE332]] ], [ [[CONV335]], [[COND_FALSE334]] ]
// SIMD-ONLY0-NEXT:    [[CONV338:%.*]] = trunc i32 [[COND337]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV338]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP155]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV339:%.*]] = zext i16 [[TMP156]] to i32
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV340:%.*]] = zext i16 [[TMP157]] to i32
// SIMD-ONLY0-NEXT:    [[CMP341:%.*]] = icmp slt i32 [[CONV339]], [[CONV340]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP341]], label [[COND_TRUE343:%.*]], label [[COND_FALSE345:%.*]]
// SIMD-ONLY0:       cond.true343:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV344:%.*]] = zext i16 [[TMP158]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END347:%.*]]
// SIMD-ONLY0:       cond.false345:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV346:%.*]] = zext i16 [[TMP159]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END347]]
// SIMD-ONLY0:       cond.end347:
// SIMD-ONLY0-NEXT:    [[COND348:%.*]] = phi i32 [ [[CONV344]], [[COND_TRUE343]] ], [ [[CONV346]], [[COND_FALSE345]] ]
// SIMD-ONLY0-NEXT:    [[CONV349:%.*]] = trunc i32 [[COND348]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV349]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP160]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV350:%.*]] = zext i16 [[TMP161]] to i32
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV351:%.*]] = zext i16 [[TMP162]] to i32
// SIMD-ONLY0-NEXT:    [[CMP352:%.*]] = icmp eq i32 [[CONV350]], [[CONV351]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP352]], label [[COND_TRUE354:%.*]], label [[COND_FALSE356:%.*]]
// SIMD-ONLY0:       cond.true354:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV355:%.*]] = zext i16 [[TMP163]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END358:%.*]]
// SIMD-ONLY0:       cond.false356:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV357:%.*]] = zext i16 [[TMP164]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END358]]
// SIMD-ONLY0:       cond.end358:
// SIMD-ONLY0-NEXT:    [[COND359:%.*]] = phi i32 [ [[CONV355]], [[COND_TRUE354]] ], [ [[CONV357]], [[COND_FALSE356]] ]
// SIMD-ONLY0-NEXT:    [[CONV360:%.*]] = trunc i32 [[COND359]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV360]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV361:%.*]] = zext i16 [[TMP165]] to i32
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV362:%.*]] = zext i16 [[TMP166]] to i32
// SIMD-ONLY0-NEXT:    [[CMP363:%.*]] = icmp sgt i32 [[CONV361]], [[CONV362]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP363]], label [[COND_TRUE365:%.*]], label [[COND_FALSE367:%.*]]
// SIMD-ONLY0:       cond.true365:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV366:%.*]] = zext i16 [[TMP167]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END369:%.*]]
// SIMD-ONLY0:       cond.false367:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV368:%.*]] = zext i16 [[TMP168]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END369]]
// SIMD-ONLY0:       cond.end369:
// SIMD-ONLY0-NEXT:    [[COND370:%.*]] = phi i32 [ [[CONV366]], [[COND_TRUE365]] ], [ [[CONV368]], [[COND_FALSE367]] ]
// SIMD-ONLY0-NEXT:    [[CONV371:%.*]] = trunc i32 [[COND370]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV371]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP169]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV372:%.*]] = zext i16 [[TMP170]] to i32
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV373:%.*]] = zext i16 [[TMP171]] to i32
// SIMD-ONLY0-NEXT:    [[CMP374:%.*]] = icmp slt i32 [[CONV372]], [[CONV373]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP374]], label [[COND_TRUE376:%.*]], label [[COND_FALSE378:%.*]]
// SIMD-ONLY0:       cond.true376:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV377:%.*]] = zext i16 [[TMP172]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END380:%.*]]
// SIMD-ONLY0:       cond.false378:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV379:%.*]] = zext i16 [[TMP173]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END380]]
// SIMD-ONLY0:       cond.end380:
// SIMD-ONLY0-NEXT:    [[COND381:%.*]] = phi i32 [ [[CONV377]], [[COND_TRUE376]] ], [ [[CONV379]], [[COND_FALSE378]] ]
// SIMD-ONLY0-NEXT:    [[CONV382:%.*]] = trunc i32 [[COND381]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV382]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP174]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV383:%.*]] = zext i16 [[TMP175]] to i32
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV384:%.*]] = zext i16 [[TMP176]] to i32
// SIMD-ONLY0-NEXT:    [[CMP385:%.*]] = icmp eq i32 [[CONV383]], [[CONV384]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP385]], label [[COND_TRUE387:%.*]], label [[COND_FALSE389:%.*]]
// SIMD-ONLY0:       cond.true387:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV388:%.*]] = zext i16 [[TMP177]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END391:%.*]]
// SIMD-ONLY0:       cond.false389:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV390:%.*]] = zext i16 [[TMP178]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END391]]
// SIMD-ONLY0:       cond.end391:
// SIMD-ONLY0-NEXT:    [[COND392:%.*]] = phi i32 [ [[CONV388]], [[COND_TRUE387]] ], [ [[CONV390]], [[COND_FALSE389]] ]
// SIMD-ONLY0-NEXT:    [[CONV393:%.*]] = trunc i32 [[COND392]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV393]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP179]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i16, ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    ret i16 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @ixevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[IX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IV:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[ID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON1]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON2]], ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON3]], ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP0]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP5]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4:%.*]] = icmp slt i32 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4]], label [[COND_TRUE5:%.*]], label [[COND_FALSE6:%.*]]
// SIMD-ONLY0:       cond.true5:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END7:%.*]]
// SIMD-ONLY0:       cond.false6:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END7]]
// SIMD-ONLY0:       cond.end7:
// SIMD-ONLY0-NEXT:    [[COND8:%.*]] = phi i32 [ [[TMP8]], [[COND_TRUE5]] ], [ [[TMP9]], [[COND_FALSE6]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND8]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP10]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP9:%.*]] = icmp eq i32 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP9]], label [[COND_TRUE10:%.*]], label [[COND_FALSE11:%.*]]
// SIMD-ONLY0:       cond.true10:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END12:%.*]]
// SIMD-ONLY0:       cond.false11:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END12]]
// SIMD-ONLY0:       cond.end12:
// SIMD-ONLY0-NEXT:    [[COND13:%.*]] = phi i32 [ [[TMP13]], [[COND_TRUE10]] ], [ [[TMP14]], [[COND_FALSE11]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND13]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = icmp sgt i32 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE15:%.*]], label [[COND_FALSE16:%.*]]
// SIMD-ONLY0:       cond.true15:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false16:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi i32 [ [[TMP17]], [[COND_TRUE15]] ], [ [[TMP18]], [[COND_FALSE16]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND18]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP19]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP19:%.*]] = icmp slt i32 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP19]], label [[COND_TRUE20:%.*]], label [[COND_FALSE21:%.*]]
// SIMD-ONLY0:       cond.true20:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false21:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi i32 [ [[TMP22]], [[COND_TRUE20]] ], [ [[TMP23]], [[COND_FALSE21]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND23]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP24]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP24:%.*]] = icmp eq i32 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP24]], label [[COND_TRUE25:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true25:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END27:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END27]]
// SIMD-ONLY0:       cond.end27:
// SIMD-ONLY0-NEXT:    [[COND28:%.*]] = phi i32 [ [[TMP27]], [[COND_TRUE25]] ], [ [[TMP28]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND28]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP29]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP30]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = icmp sgt i32 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE30:%.*]], label [[COND_FALSE31:%.*]]
// SIMD-ONLY0:       cond.true30:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END32:%.*]]
// SIMD-ONLY0:       cond.false31:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END32]]
// SIMD-ONLY0:       cond.end32:
// SIMD-ONLY0-NEXT:    [[COND33:%.*]] = phi i32 [ [[TMP33]], [[COND_TRUE30]] ], [ [[TMP34]], [[COND_FALSE31]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND33]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP35]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP34:%.*]] = icmp slt i32 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP34]], label [[COND_TRUE35:%.*]], label [[COND_FALSE36:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false36:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi i32 [ [[TMP38]], [[COND_TRUE35]] ], [ [[TMP39]], [[COND_FALSE36]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND38]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP40]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP39:%.*]] = icmp eq i32 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP39]], label [[COND_TRUE40:%.*]], label [[COND_FALSE41:%.*]]
// SIMD-ONLY0:       cond.true40:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END42:%.*]]
// SIMD-ONLY0:       cond.false41:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END42]]
// SIMD-ONLY0:       cond.end42:
// SIMD-ONLY0-NEXT:    [[COND43:%.*]] = phi i32 [ [[TMP43]], [[COND_TRUE40]] ], [ [[TMP44]], [[COND_FALSE41]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND43]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp sgt i32 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE45:%.*]], label [[COND_FALSE46:%.*]]
// SIMD-ONLY0:       cond.true45:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END47:%.*]]
// SIMD-ONLY0:       cond.false46:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END47]]
// SIMD-ONLY0:       cond.end47:
// SIMD-ONLY0-NEXT:    [[COND48:%.*]] = phi i32 [ [[TMP47]], [[COND_TRUE45]] ], [ [[TMP48]], [[COND_FALSE46]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND48]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP49]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP49:%.*]] = icmp slt i32 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP49]], label [[COND_TRUE50:%.*]], label [[COND_FALSE51:%.*]]
// SIMD-ONLY0:       cond.true50:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false51:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi i32 [ [[TMP52]], [[COND_TRUE50]] ], [ [[TMP53]], [[COND_FALSE51]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND53]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP54]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP54:%.*]] = icmp eq i32 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP54]], label [[COND_TRUE55:%.*]], label [[COND_FALSE56:%.*]]
// SIMD-ONLY0:       cond.true55:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END57:%.*]]
// SIMD-ONLY0:       cond.false56:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END57]]
// SIMD-ONLY0:       cond.end57:
// SIMD-ONLY0-NEXT:    [[COND58:%.*]] = phi i32 [ [[TMP57]], [[COND_TRUE55]] ], [ [[TMP58]], [[COND_FALSE56]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND58]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP59]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP60]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = icmp sgt i32 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[COND_TRUE60:%.*]], label [[COND_FALSE61:%.*]]
// SIMD-ONLY0:       cond.true60:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END62:%.*]]
// SIMD-ONLY0:       cond.false61:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END62]]
// SIMD-ONLY0:       cond.end62:
// SIMD-ONLY0-NEXT:    [[COND63:%.*]] = phi i32 [ [[TMP63]], [[COND_TRUE60]] ], [ [[TMP64]], [[COND_FALSE61]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND63]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP65]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP64:%.*]] = icmp slt i32 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP64]], label [[COND_TRUE65:%.*]], label [[COND_FALSE66:%.*]]
// SIMD-ONLY0:       cond.true65:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END67:%.*]]
// SIMD-ONLY0:       cond.false66:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END67]]
// SIMD-ONLY0:       cond.end67:
// SIMD-ONLY0-NEXT:    [[COND68:%.*]] = phi i32 [ [[TMP68]], [[COND_TRUE65]] ], [ [[TMP69]], [[COND_FALSE66]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND68]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP70]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP69:%.*]] = icmp eq i32 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP69]], label [[COND_TRUE70:%.*]], label [[COND_FALSE71:%.*]]
// SIMD-ONLY0:       cond.true70:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false71:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi i32 [ [[TMP73]], [[COND_TRUE70]] ], [ [[TMP74]], [[COND_FALSE71]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND73]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp sgt i32 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE75:%.*]], label [[COND_FALSE76:%.*]]
// SIMD-ONLY0:       cond.true75:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END77:%.*]]
// SIMD-ONLY0:       cond.false76:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END77]]
// SIMD-ONLY0:       cond.end77:
// SIMD-ONLY0-NEXT:    [[COND78:%.*]] = phi i32 [ [[TMP77]], [[COND_TRUE75]] ], [ [[TMP78]], [[COND_FALSE76]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND78]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP79]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP79:%.*]] = icmp slt i32 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP79]], label [[COND_TRUE80:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true80:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END82:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END82]]
// SIMD-ONLY0:       cond.end82:
// SIMD-ONLY0-NEXT:    [[COND83:%.*]] = phi i32 [ [[TMP82]], [[COND_TRUE80]] ], [ [[TMP83]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND83]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP84]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP84:%.*]] = icmp eq i32 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP84]], label [[COND_TRUE85:%.*]], label [[COND_FALSE86:%.*]]
// SIMD-ONLY0:       cond.true85:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END87:%.*]]
// SIMD-ONLY0:       cond.false86:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END87]]
// SIMD-ONLY0:       cond.end87:
// SIMD-ONLY0-NEXT:    [[COND88:%.*]] = phi i32 [ [[TMP87]], [[COND_TRUE85]] ], [ [[TMP88]], [[COND_FALSE86]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND88]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP89]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP90]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = icmp sgt i32 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE90:%.*]], label [[COND_FALSE91:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END92:%.*]]
// SIMD-ONLY0:       cond.false91:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END92]]
// SIMD-ONLY0:       cond.end92:
// SIMD-ONLY0-NEXT:    [[COND93:%.*]] = phi i32 [ [[TMP93]], [[COND_TRUE90]] ], [ [[TMP94]], [[COND_FALSE91]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND93]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP95]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP94:%.*]] = icmp slt i32 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP94]], label [[COND_TRUE95:%.*]], label [[COND_FALSE96:%.*]]
// SIMD-ONLY0:       cond.true95:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false96:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi i32 [ [[TMP98]], [[COND_TRUE95]] ], [ [[TMP99]], [[COND_FALSE96]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND98]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP100]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = icmp eq i32 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE100:%.*]], label [[COND_FALSE101:%.*]]
// SIMD-ONLY0:       cond.true100:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END102:%.*]]
// SIMD-ONLY0:       cond.false101:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END102]]
// SIMD-ONLY0:       cond.end102:
// SIMD-ONLY0-NEXT:    [[COND103:%.*]] = phi i32 [ [[TMP103]], [[COND_TRUE100]] ], [ [[TMP104]], [[COND_FALSE101]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND103]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = icmp sgt i32 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE105:%.*]], label [[COND_FALSE106:%.*]]
// SIMD-ONLY0:       cond.true105:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END107:%.*]]
// SIMD-ONLY0:       cond.false106:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END107]]
// SIMD-ONLY0:       cond.end107:
// SIMD-ONLY0-NEXT:    [[COND108:%.*]] = phi i32 [ [[TMP107]], [[COND_TRUE105]] ], [ [[TMP108]], [[COND_FALSE106]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND108]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP109]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP109:%.*]] = icmp slt i32 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP109]], label [[COND_TRUE110:%.*]], label [[COND_FALSE111:%.*]]
// SIMD-ONLY0:       cond.true110:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false111:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi i32 [ [[TMP112]], [[COND_TRUE110]] ], [ [[TMP113]], [[COND_FALSE111]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND113]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP114]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP114:%.*]] = icmp eq i32 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP114]], label [[COND_TRUE115:%.*]], label [[COND_FALSE116:%.*]]
// SIMD-ONLY0:       cond.true115:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END117:%.*]]
// SIMD-ONLY0:       cond.false116:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END117]]
// SIMD-ONLY0:       cond.end117:
// SIMD-ONLY0-NEXT:    [[COND118:%.*]] = phi i32 [ [[TMP117]], [[COND_TRUE115]] ], [ [[TMP118]], [[COND_FALSE116]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND118]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP119]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP120]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = icmp sgt i32 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[COND_TRUE120:%.*]], label [[COND_FALSE121:%.*]]
// SIMD-ONLY0:       cond.true120:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END122:%.*]]
// SIMD-ONLY0:       cond.false121:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END122]]
// SIMD-ONLY0:       cond.end122:
// SIMD-ONLY0-NEXT:    [[COND123:%.*]] = phi i32 [ [[TMP123]], [[COND_TRUE120]] ], [ [[TMP124]], [[COND_FALSE121]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND123]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP125]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP124:%.*]] = icmp slt i32 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP124]], label [[COND_TRUE125:%.*]], label [[COND_FALSE126:%.*]]
// SIMD-ONLY0:       cond.true125:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false126:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i32 [ [[TMP128]], [[COND_TRUE125]] ], [ [[TMP129]], [[COND_FALSE126]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND128]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP130]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP129:%.*]] = icmp eq i32 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP129]], label [[COND_TRUE130:%.*]], label [[COND_FALSE131:%.*]]
// SIMD-ONLY0:       cond.true130:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END132:%.*]]
// SIMD-ONLY0:       cond.false131:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END132]]
// SIMD-ONLY0:       cond.end132:
// SIMD-ONLY0-NEXT:    [[COND133:%.*]] = phi i32 [ [[TMP133]], [[COND_TRUE130]] ], [ [[TMP134]], [[COND_FALSE131]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND133]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = icmp sgt i32 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[COND_TRUE135:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true135:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END137:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END137]]
// SIMD-ONLY0:       cond.end137:
// SIMD-ONLY0-NEXT:    [[COND138:%.*]] = phi i32 [ [[TMP137]], [[COND_TRUE135]] ], [ [[TMP138]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND138]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP139]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP139:%.*]] = icmp slt i32 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP139]], label [[COND_TRUE140:%.*]], label [[COND_FALSE141:%.*]]
// SIMD-ONLY0:       cond.true140:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END142:%.*]]
// SIMD-ONLY0:       cond.false141:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END142]]
// SIMD-ONLY0:       cond.end142:
// SIMD-ONLY0-NEXT:    [[COND143:%.*]] = phi i32 [ [[TMP142]], [[COND_TRUE140]] ], [ [[TMP143]], [[COND_FALSE141]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND143]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP144]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP144:%.*]] = icmp eq i32 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP144]], label [[COND_TRUE145:%.*]], label [[COND_FALSE146:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END147:%.*]]
// SIMD-ONLY0:       cond.false146:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END147]]
// SIMD-ONLY0:       cond.end147:
// SIMD-ONLY0-NEXT:    [[COND148:%.*]] = phi i32 [ [[TMP147]], [[COND_TRUE145]] ], [ [[TMP148]], [[COND_FALSE146]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND148]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP149]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP150]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP149:%.*]] = icmp sgt i32 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP149]], label [[COND_TRUE150:%.*]], label [[COND_FALSE151:%.*]]
// SIMD-ONLY0:       cond.true150:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END152:%.*]]
// SIMD-ONLY0:       cond.false151:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END152]]
// SIMD-ONLY0:       cond.end152:
// SIMD-ONLY0-NEXT:    [[COND153:%.*]] = phi i32 [ [[TMP153]], [[COND_TRUE150]] ], [ [[TMP154]], [[COND_FALSE151]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND153]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP155]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp slt i32 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE155:%.*]], label [[COND_FALSE156:%.*]]
// SIMD-ONLY0:       cond.true155:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false156:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi i32 [ [[TMP158]], [[COND_TRUE155]] ], [ [[TMP159]], [[COND_FALSE156]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND158]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP160]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP159:%.*]] = icmp eq i32 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP159]], label [[COND_TRUE160:%.*]], label [[COND_FALSE161:%.*]]
// SIMD-ONLY0:       cond.true160:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END162:%.*]]
// SIMD-ONLY0:       cond.false161:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END162]]
// SIMD-ONLY0:       cond.end162:
// SIMD-ONLY0-NEXT:    [[COND163:%.*]] = phi i32 [ [[TMP163]], [[COND_TRUE160]] ], [ [[TMP164]], [[COND_FALSE161]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND163]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP164:%.*]] = icmp sgt i32 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP164]], label [[COND_TRUE165:%.*]], label [[COND_FALSE166:%.*]]
// SIMD-ONLY0:       cond.true165:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END167:%.*]]
// SIMD-ONLY0:       cond.false166:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END167]]
// SIMD-ONLY0:       cond.end167:
// SIMD-ONLY0-NEXT:    [[COND168:%.*]] = phi i32 [ [[TMP167]], [[COND_TRUE165]] ], [ [[TMP168]], [[COND_FALSE166]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND168]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP169]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP169:%.*]] = icmp slt i32 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP169]], label [[COND_TRUE170:%.*]], label [[COND_FALSE171:%.*]]
// SIMD-ONLY0:       cond.true170:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END172:%.*]]
// SIMD-ONLY0:       cond.false171:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END172]]
// SIMD-ONLY0:       cond.end172:
// SIMD-ONLY0-NEXT:    [[COND173:%.*]] = phi i32 [ [[TMP172]], [[COND_TRUE170]] ], [ [[TMP173]], [[COND_FALSE171]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND173]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP174]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP174:%.*]] = icmp eq i32 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP174]], label [[COND_TRUE175:%.*]], label [[COND_FALSE176:%.*]]
// SIMD-ONLY0:       cond.true175:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END177:%.*]]
// SIMD-ONLY0:       cond.false176:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END177]]
// SIMD-ONLY0:       cond.end177:
// SIMD-ONLY0-NEXT:    [[COND178:%.*]] = phi i32 [ [[TMP177]], [[COND_TRUE175]] ], [ [[TMP178]], [[COND_FALSE176]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND178]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP179]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i32, ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    ret i32 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @uixevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIV:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON1]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON2]], ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i32 poison
// SIMD-ONLY0-NEXT:    store i32 [[FREEZE_POISON3]], ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP0]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp ugt i32 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP5]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4:%.*]] = icmp ult i32 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4]], label [[COND_TRUE5:%.*]], label [[COND_FALSE6:%.*]]
// SIMD-ONLY0:       cond.true5:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END7:%.*]]
// SIMD-ONLY0:       cond.false6:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END7]]
// SIMD-ONLY0:       cond.end7:
// SIMD-ONLY0-NEXT:    [[COND8:%.*]] = phi i32 [ [[TMP8]], [[COND_TRUE5]] ], [ [[TMP9]], [[COND_FALSE6]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND8]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP10]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP9:%.*]] = icmp eq i32 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP9]], label [[COND_TRUE10:%.*]], label [[COND_FALSE11:%.*]]
// SIMD-ONLY0:       cond.true10:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END12:%.*]]
// SIMD-ONLY0:       cond.false11:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END12]]
// SIMD-ONLY0:       cond.end12:
// SIMD-ONLY0-NEXT:    [[COND13:%.*]] = phi i32 [ [[TMP13]], [[COND_TRUE10]] ], [ [[TMP14]], [[COND_FALSE11]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND13]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = icmp ugt i32 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE15:%.*]], label [[COND_FALSE16:%.*]]
// SIMD-ONLY0:       cond.true15:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false16:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi i32 [ [[TMP17]], [[COND_TRUE15]] ], [ [[TMP18]], [[COND_FALSE16]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND18]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP19]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP19:%.*]] = icmp ult i32 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP19]], label [[COND_TRUE20:%.*]], label [[COND_FALSE21:%.*]]
// SIMD-ONLY0:       cond.true20:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false21:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi i32 [ [[TMP22]], [[COND_TRUE20]] ], [ [[TMP23]], [[COND_FALSE21]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND23]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP24]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP24:%.*]] = icmp eq i32 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP24]], label [[COND_TRUE25:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true25:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END27:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END27]]
// SIMD-ONLY0:       cond.end27:
// SIMD-ONLY0-NEXT:    [[COND28:%.*]] = phi i32 [ [[TMP27]], [[COND_TRUE25]] ], [ [[TMP28]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND28]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP29]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP30]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = icmp ugt i32 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE30:%.*]], label [[COND_FALSE31:%.*]]
// SIMD-ONLY0:       cond.true30:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END32:%.*]]
// SIMD-ONLY0:       cond.false31:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END32]]
// SIMD-ONLY0:       cond.end32:
// SIMD-ONLY0-NEXT:    [[COND33:%.*]] = phi i32 [ [[TMP33]], [[COND_TRUE30]] ], [ [[TMP34]], [[COND_FALSE31]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND33]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP35]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP34:%.*]] = icmp ult i32 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP34]], label [[COND_TRUE35:%.*]], label [[COND_FALSE36:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false36:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi i32 [ [[TMP38]], [[COND_TRUE35]] ], [ [[TMP39]], [[COND_FALSE36]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND38]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP40]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP39:%.*]] = icmp eq i32 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP39]], label [[COND_TRUE40:%.*]], label [[COND_FALSE41:%.*]]
// SIMD-ONLY0:       cond.true40:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END42:%.*]]
// SIMD-ONLY0:       cond.false41:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END42]]
// SIMD-ONLY0:       cond.end42:
// SIMD-ONLY0-NEXT:    [[COND43:%.*]] = phi i32 [ [[TMP43]], [[COND_TRUE40]] ], [ [[TMP44]], [[COND_FALSE41]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND43]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp ugt i32 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE45:%.*]], label [[COND_FALSE46:%.*]]
// SIMD-ONLY0:       cond.true45:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END47:%.*]]
// SIMD-ONLY0:       cond.false46:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END47]]
// SIMD-ONLY0:       cond.end47:
// SIMD-ONLY0-NEXT:    [[COND48:%.*]] = phi i32 [ [[TMP47]], [[COND_TRUE45]] ], [ [[TMP48]], [[COND_FALSE46]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND48]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP49]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP49:%.*]] = icmp ult i32 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP49]], label [[COND_TRUE50:%.*]], label [[COND_FALSE51:%.*]]
// SIMD-ONLY0:       cond.true50:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false51:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi i32 [ [[TMP52]], [[COND_TRUE50]] ], [ [[TMP53]], [[COND_FALSE51]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND53]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP54]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP54:%.*]] = icmp eq i32 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP54]], label [[COND_TRUE55:%.*]], label [[COND_FALSE56:%.*]]
// SIMD-ONLY0:       cond.true55:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END57:%.*]]
// SIMD-ONLY0:       cond.false56:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END57]]
// SIMD-ONLY0:       cond.end57:
// SIMD-ONLY0-NEXT:    [[COND58:%.*]] = phi i32 [ [[TMP57]], [[COND_TRUE55]] ], [ [[TMP58]], [[COND_FALSE56]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND58]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP59]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP60]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = icmp ugt i32 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[COND_TRUE60:%.*]], label [[COND_FALSE61:%.*]]
// SIMD-ONLY0:       cond.true60:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END62:%.*]]
// SIMD-ONLY0:       cond.false61:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END62]]
// SIMD-ONLY0:       cond.end62:
// SIMD-ONLY0-NEXT:    [[COND63:%.*]] = phi i32 [ [[TMP63]], [[COND_TRUE60]] ], [ [[TMP64]], [[COND_FALSE61]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND63]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP65]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP64:%.*]] = icmp ult i32 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP64]], label [[COND_TRUE65:%.*]], label [[COND_FALSE66:%.*]]
// SIMD-ONLY0:       cond.true65:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END67:%.*]]
// SIMD-ONLY0:       cond.false66:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END67]]
// SIMD-ONLY0:       cond.end67:
// SIMD-ONLY0-NEXT:    [[COND68:%.*]] = phi i32 [ [[TMP68]], [[COND_TRUE65]] ], [ [[TMP69]], [[COND_FALSE66]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND68]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP70]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP69:%.*]] = icmp eq i32 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP69]], label [[COND_TRUE70:%.*]], label [[COND_FALSE71:%.*]]
// SIMD-ONLY0:       cond.true70:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false71:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi i32 [ [[TMP73]], [[COND_TRUE70]] ], [ [[TMP74]], [[COND_FALSE71]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND73]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp ugt i32 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE75:%.*]], label [[COND_FALSE76:%.*]]
// SIMD-ONLY0:       cond.true75:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END77:%.*]]
// SIMD-ONLY0:       cond.false76:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END77]]
// SIMD-ONLY0:       cond.end77:
// SIMD-ONLY0-NEXT:    [[COND78:%.*]] = phi i32 [ [[TMP77]], [[COND_TRUE75]] ], [ [[TMP78]], [[COND_FALSE76]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND78]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP79]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP79:%.*]] = icmp ult i32 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP79]], label [[COND_TRUE80:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true80:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END82:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END82]]
// SIMD-ONLY0:       cond.end82:
// SIMD-ONLY0-NEXT:    [[COND83:%.*]] = phi i32 [ [[TMP82]], [[COND_TRUE80]] ], [ [[TMP83]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND83]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP84]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP84:%.*]] = icmp eq i32 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP84]], label [[COND_TRUE85:%.*]], label [[COND_FALSE86:%.*]]
// SIMD-ONLY0:       cond.true85:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END87:%.*]]
// SIMD-ONLY0:       cond.false86:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END87]]
// SIMD-ONLY0:       cond.end87:
// SIMD-ONLY0-NEXT:    [[COND88:%.*]] = phi i32 [ [[TMP87]], [[COND_TRUE85]] ], [ [[TMP88]], [[COND_FALSE86]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND88]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP89]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP90]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = icmp ugt i32 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE90:%.*]], label [[COND_FALSE91:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END92:%.*]]
// SIMD-ONLY0:       cond.false91:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END92]]
// SIMD-ONLY0:       cond.end92:
// SIMD-ONLY0-NEXT:    [[COND93:%.*]] = phi i32 [ [[TMP93]], [[COND_TRUE90]] ], [ [[TMP94]], [[COND_FALSE91]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND93]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP95]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP94:%.*]] = icmp ult i32 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP94]], label [[COND_TRUE95:%.*]], label [[COND_FALSE96:%.*]]
// SIMD-ONLY0:       cond.true95:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false96:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi i32 [ [[TMP98]], [[COND_TRUE95]] ], [ [[TMP99]], [[COND_FALSE96]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND98]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP100]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = icmp eq i32 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE100:%.*]], label [[COND_FALSE101:%.*]]
// SIMD-ONLY0:       cond.true100:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END102:%.*]]
// SIMD-ONLY0:       cond.false101:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END102]]
// SIMD-ONLY0:       cond.end102:
// SIMD-ONLY0-NEXT:    [[COND103:%.*]] = phi i32 [ [[TMP103]], [[COND_TRUE100]] ], [ [[TMP104]], [[COND_FALSE101]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND103]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = icmp ugt i32 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE105:%.*]], label [[COND_FALSE106:%.*]]
// SIMD-ONLY0:       cond.true105:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END107:%.*]]
// SIMD-ONLY0:       cond.false106:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END107]]
// SIMD-ONLY0:       cond.end107:
// SIMD-ONLY0-NEXT:    [[COND108:%.*]] = phi i32 [ [[TMP107]], [[COND_TRUE105]] ], [ [[TMP108]], [[COND_FALSE106]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND108]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP109]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP109:%.*]] = icmp ult i32 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP109]], label [[COND_TRUE110:%.*]], label [[COND_FALSE111:%.*]]
// SIMD-ONLY0:       cond.true110:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false111:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi i32 [ [[TMP112]], [[COND_TRUE110]] ], [ [[TMP113]], [[COND_FALSE111]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND113]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP114]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP114:%.*]] = icmp eq i32 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP114]], label [[COND_TRUE115:%.*]], label [[COND_FALSE116:%.*]]
// SIMD-ONLY0:       cond.true115:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END117:%.*]]
// SIMD-ONLY0:       cond.false116:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END117]]
// SIMD-ONLY0:       cond.end117:
// SIMD-ONLY0-NEXT:    [[COND118:%.*]] = phi i32 [ [[TMP117]], [[COND_TRUE115]] ], [ [[TMP118]], [[COND_FALSE116]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND118]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP119]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP120]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = icmp ugt i32 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[COND_TRUE120:%.*]], label [[COND_FALSE121:%.*]]
// SIMD-ONLY0:       cond.true120:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END122:%.*]]
// SIMD-ONLY0:       cond.false121:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END122]]
// SIMD-ONLY0:       cond.end122:
// SIMD-ONLY0-NEXT:    [[COND123:%.*]] = phi i32 [ [[TMP123]], [[COND_TRUE120]] ], [ [[TMP124]], [[COND_FALSE121]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND123]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP125]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP124:%.*]] = icmp ult i32 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP124]], label [[COND_TRUE125:%.*]], label [[COND_FALSE126:%.*]]
// SIMD-ONLY0:       cond.true125:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false126:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i32 [ [[TMP128]], [[COND_TRUE125]] ], [ [[TMP129]], [[COND_FALSE126]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND128]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP130]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP129:%.*]] = icmp eq i32 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP129]], label [[COND_TRUE130:%.*]], label [[COND_FALSE131:%.*]]
// SIMD-ONLY0:       cond.true130:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END132:%.*]]
// SIMD-ONLY0:       cond.false131:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END132]]
// SIMD-ONLY0:       cond.end132:
// SIMD-ONLY0-NEXT:    [[COND133:%.*]] = phi i32 [ [[TMP133]], [[COND_TRUE130]] ], [ [[TMP134]], [[COND_FALSE131]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND133]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = icmp ugt i32 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[COND_TRUE135:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true135:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END137:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END137]]
// SIMD-ONLY0:       cond.end137:
// SIMD-ONLY0-NEXT:    [[COND138:%.*]] = phi i32 [ [[TMP137]], [[COND_TRUE135]] ], [ [[TMP138]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND138]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP139]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP139:%.*]] = icmp ult i32 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP139]], label [[COND_TRUE140:%.*]], label [[COND_FALSE141:%.*]]
// SIMD-ONLY0:       cond.true140:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END142:%.*]]
// SIMD-ONLY0:       cond.false141:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END142]]
// SIMD-ONLY0:       cond.end142:
// SIMD-ONLY0-NEXT:    [[COND143:%.*]] = phi i32 [ [[TMP142]], [[COND_TRUE140]] ], [ [[TMP143]], [[COND_FALSE141]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND143]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP144]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP144:%.*]] = icmp eq i32 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP144]], label [[COND_TRUE145:%.*]], label [[COND_FALSE146:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END147:%.*]]
// SIMD-ONLY0:       cond.false146:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END147]]
// SIMD-ONLY0:       cond.end147:
// SIMD-ONLY0-NEXT:    [[COND148:%.*]] = phi i32 [ [[TMP147]], [[COND_TRUE145]] ], [ [[TMP148]], [[COND_FALSE146]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND148]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP149]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP150]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP149:%.*]] = icmp ugt i32 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP149]], label [[COND_TRUE150:%.*]], label [[COND_FALSE151:%.*]]
// SIMD-ONLY0:       cond.true150:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END152:%.*]]
// SIMD-ONLY0:       cond.false151:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END152]]
// SIMD-ONLY0:       cond.end152:
// SIMD-ONLY0-NEXT:    [[COND153:%.*]] = phi i32 [ [[TMP153]], [[COND_TRUE150]] ], [ [[TMP154]], [[COND_FALSE151]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND153]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP155]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp ult i32 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE155:%.*]], label [[COND_FALSE156:%.*]]
// SIMD-ONLY0:       cond.true155:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false156:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi i32 [ [[TMP158]], [[COND_TRUE155]] ], [ [[TMP159]], [[COND_FALSE156]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND158]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP160]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP159:%.*]] = icmp eq i32 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP159]], label [[COND_TRUE160:%.*]], label [[COND_FALSE161:%.*]]
// SIMD-ONLY0:       cond.true160:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END162:%.*]]
// SIMD-ONLY0:       cond.false161:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END162]]
// SIMD-ONLY0:       cond.end162:
// SIMD-ONLY0-NEXT:    [[COND163:%.*]] = phi i32 [ [[TMP163]], [[COND_TRUE160]] ], [ [[TMP164]], [[COND_FALSE161]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND163]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP164:%.*]] = icmp ugt i32 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP164]], label [[COND_TRUE165:%.*]], label [[COND_FALSE166:%.*]]
// SIMD-ONLY0:       cond.true165:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END167:%.*]]
// SIMD-ONLY0:       cond.false166:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END167]]
// SIMD-ONLY0:       cond.end167:
// SIMD-ONLY0-NEXT:    [[COND168:%.*]] = phi i32 [ [[TMP167]], [[COND_TRUE165]] ], [ [[TMP168]], [[COND_FALSE166]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND168]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP169]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP169:%.*]] = icmp ult i32 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP169]], label [[COND_TRUE170:%.*]], label [[COND_FALSE171:%.*]]
// SIMD-ONLY0:       cond.true170:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END172:%.*]]
// SIMD-ONLY0:       cond.false171:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END172]]
// SIMD-ONLY0:       cond.end172:
// SIMD-ONLY0-NEXT:    [[COND173:%.*]] = phi i32 [ [[TMP172]], [[COND_TRUE170]] ], [ [[TMP173]], [[COND_FALSE171]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND173]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP174]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP174:%.*]] = icmp eq i32 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP174]], label [[COND_TRUE175:%.*]], label [[COND_FALSE176:%.*]]
// SIMD-ONLY0:       cond.true175:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END177:%.*]]
// SIMD-ONLY0:       cond.false176:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END177]]
// SIMD-ONLY0:       cond.end177:
// SIMD-ONLY0-NEXT:    [[COND178:%.*]] = phi i32 [ [[TMP177]], [[COND_TRUE175]] ], [ [[TMP178]], [[COND_FALSE176]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND178]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP179]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i32, ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    ret i32 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @lxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[LX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON1]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON2]], ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON3]], ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP0]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP5]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4:%.*]] = icmp slt i64 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4]], label [[COND_TRUE5:%.*]], label [[COND_FALSE6:%.*]]
// SIMD-ONLY0:       cond.true5:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END7:%.*]]
// SIMD-ONLY0:       cond.false6:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END7]]
// SIMD-ONLY0:       cond.end7:
// SIMD-ONLY0-NEXT:    [[COND8:%.*]] = phi i64 [ [[TMP8]], [[COND_TRUE5]] ], [ [[TMP9]], [[COND_FALSE6]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND8]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP10]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP9:%.*]] = icmp eq i64 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP9]], label [[COND_TRUE10:%.*]], label [[COND_FALSE11:%.*]]
// SIMD-ONLY0:       cond.true10:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END12:%.*]]
// SIMD-ONLY0:       cond.false11:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END12]]
// SIMD-ONLY0:       cond.end12:
// SIMD-ONLY0-NEXT:    [[COND13:%.*]] = phi i64 [ [[TMP13]], [[COND_TRUE10]] ], [ [[TMP14]], [[COND_FALSE11]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND13]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = icmp sgt i64 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE15:%.*]], label [[COND_FALSE16:%.*]]
// SIMD-ONLY0:       cond.true15:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false16:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi i64 [ [[TMP17]], [[COND_TRUE15]] ], [ [[TMP18]], [[COND_FALSE16]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND18]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP19]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP19:%.*]] = icmp slt i64 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP19]], label [[COND_TRUE20:%.*]], label [[COND_FALSE21:%.*]]
// SIMD-ONLY0:       cond.true20:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false21:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi i64 [ [[TMP22]], [[COND_TRUE20]] ], [ [[TMP23]], [[COND_FALSE21]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND23]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP24]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP24]], label [[COND_TRUE25:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true25:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END27:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END27]]
// SIMD-ONLY0:       cond.end27:
// SIMD-ONLY0-NEXT:    [[COND28:%.*]] = phi i64 [ [[TMP27]], [[COND_TRUE25]] ], [ [[TMP28]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND28]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP29]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP30]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = icmp sgt i64 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE30:%.*]], label [[COND_FALSE31:%.*]]
// SIMD-ONLY0:       cond.true30:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END32:%.*]]
// SIMD-ONLY0:       cond.false31:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END32]]
// SIMD-ONLY0:       cond.end32:
// SIMD-ONLY0-NEXT:    [[COND33:%.*]] = phi i64 [ [[TMP33]], [[COND_TRUE30]] ], [ [[TMP34]], [[COND_FALSE31]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND33]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP35]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP34:%.*]] = icmp slt i64 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP34]], label [[COND_TRUE35:%.*]], label [[COND_FALSE36:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false36:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi i64 [ [[TMP38]], [[COND_TRUE35]] ], [ [[TMP39]], [[COND_FALSE36]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND38]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP40]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP39:%.*]] = icmp eq i64 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP39]], label [[COND_TRUE40:%.*]], label [[COND_FALSE41:%.*]]
// SIMD-ONLY0:       cond.true40:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END42:%.*]]
// SIMD-ONLY0:       cond.false41:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END42]]
// SIMD-ONLY0:       cond.end42:
// SIMD-ONLY0-NEXT:    [[COND43:%.*]] = phi i64 [ [[TMP43]], [[COND_TRUE40]] ], [ [[TMP44]], [[COND_FALSE41]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND43]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp sgt i64 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE45:%.*]], label [[COND_FALSE46:%.*]]
// SIMD-ONLY0:       cond.true45:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END47:%.*]]
// SIMD-ONLY0:       cond.false46:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END47]]
// SIMD-ONLY0:       cond.end47:
// SIMD-ONLY0-NEXT:    [[COND48:%.*]] = phi i64 [ [[TMP47]], [[COND_TRUE45]] ], [ [[TMP48]], [[COND_FALSE46]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND48]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP49]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP49:%.*]] = icmp slt i64 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP49]], label [[COND_TRUE50:%.*]], label [[COND_FALSE51:%.*]]
// SIMD-ONLY0:       cond.true50:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false51:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi i64 [ [[TMP52]], [[COND_TRUE50]] ], [ [[TMP53]], [[COND_FALSE51]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND53]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP54]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP54:%.*]] = icmp eq i64 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP54]], label [[COND_TRUE55:%.*]], label [[COND_FALSE56:%.*]]
// SIMD-ONLY0:       cond.true55:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END57:%.*]]
// SIMD-ONLY0:       cond.false56:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END57]]
// SIMD-ONLY0:       cond.end57:
// SIMD-ONLY0-NEXT:    [[COND58:%.*]] = phi i64 [ [[TMP57]], [[COND_TRUE55]] ], [ [[TMP58]], [[COND_FALSE56]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND58]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP59]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP60]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = icmp sgt i64 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[COND_TRUE60:%.*]], label [[COND_FALSE61:%.*]]
// SIMD-ONLY0:       cond.true60:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END62:%.*]]
// SIMD-ONLY0:       cond.false61:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END62]]
// SIMD-ONLY0:       cond.end62:
// SIMD-ONLY0-NEXT:    [[COND63:%.*]] = phi i64 [ [[TMP63]], [[COND_TRUE60]] ], [ [[TMP64]], [[COND_FALSE61]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND63]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP65]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP64:%.*]] = icmp slt i64 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP64]], label [[COND_TRUE65:%.*]], label [[COND_FALSE66:%.*]]
// SIMD-ONLY0:       cond.true65:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END67:%.*]]
// SIMD-ONLY0:       cond.false66:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END67]]
// SIMD-ONLY0:       cond.end67:
// SIMD-ONLY0-NEXT:    [[COND68:%.*]] = phi i64 [ [[TMP68]], [[COND_TRUE65]] ], [ [[TMP69]], [[COND_FALSE66]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND68]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP70]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP69:%.*]] = icmp eq i64 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP69]], label [[COND_TRUE70:%.*]], label [[COND_FALSE71:%.*]]
// SIMD-ONLY0:       cond.true70:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false71:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi i64 [ [[TMP73]], [[COND_TRUE70]] ], [ [[TMP74]], [[COND_FALSE71]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND73]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp sgt i64 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE75:%.*]], label [[COND_FALSE76:%.*]]
// SIMD-ONLY0:       cond.true75:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END77:%.*]]
// SIMD-ONLY0:       cond.false76:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END77]]
// SIMD-ONLY0:       cond.end77:
// SIMD-ONLY0-NEXT:    [[COND78:%.*]] = phi i64 [ [[TMP77]], [[COND_TRUE75]] ], [ [[TMP78]], [[COND_FALSE76]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND78]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP79]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP79:%.*]] = icmp slt i64 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP79]], label [[COND_TRUE80:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true80:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END82:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END82]]
// SIMD-ONLY0:       cond.end82:
// SIMD-ONLY0-NEXT:    [[COND83:%.*]] = phi i64 [ [[TMP82]], [[COND_TRUE80]] ], [ [[TMP83]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND83]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP84]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP84:%.*]] = icmp eq i64 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP84]], label [[COND_TRUE85:%.*]], label [[COND_FALSE86:%.*]]
// SIMD-ONLY0:       cond.true85:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END87:%.*]]
// SIMD-ONLY0:       cond.false86:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END87]]
// SIMD-ONLY0:       cond.end87:
// SIMD-ONLY0-NEXT:    [[COND88:%.*]] = phi i64 [ [[TMP87]], [[COND_TRUE85]] ], [ [[TMP88]], [[COND_FALSE86]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND88]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP89]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP90]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = icmp sgt i64 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE90:%.*]], label [[COND_FALSE91:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END92:%.*]]
// SIMD-ONLY0:       cond.false91:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END92]]
// SIMD-ONLY0:       cond.end92:
// SIMD-ONLY0-NEXT:    [[COND93:%.*]] = phi i64 [ [[TMP93]], [[COND_TRUE90]] ], [ [[TMP94]], [[COND_FALSE91]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND93]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP95]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP94:%.*]] = icmp slt i64 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP94]], label [[COND_TRUE95:%.*]], label [[COND_FALSE96:%.*]]
// SIMD-ONLY0:       cond.true95:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false96:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi i64 [ [[TMP98]], [[COND_TRUE95]] ], [ [[TMP99]], [[COND_FALSE96]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND98]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP100]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = icmp eq i64 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE100:%.*]], label [[COND_FALSE101:%.*]]
// SIMD-ONLY0:       cond.true100:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END102:%.*]]
// SIMD-ONLY0:       cond.false101:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END102]]
// SIMD-ONLY0:       cond.end102:
// SIMD-ONLY0-NEXT:    [[COND103:%.*]] = phi i64 [ [[TMP103]], [[COND_TRUE100]] ], [ [[TMP104]], [[COND_FALSE101]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND103]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = icmp sgt i64 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE105:%.*]], label [[COND_FALSE106:%.*]]
// SIMD-ONLY0:       cond.true105:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END107:%.*]]
// SIMD-ONLY0:       cond.false106:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END107]]
// SIMD-ONLY0:       cond.end107:
// SIMD-ONLY0-NEXT:    [[COND108:%.*]] = phi i64 [ [[TMP107]], [[COND_TRUE105]] ], [ [[TMP108]], [[COND_FALSE106]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND108]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP109]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP109:%.*]] = icmp slt i64 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP109]], label [[COND_TRUE110:%.*]], label [[COND_FALSE111:%.*]]
// SIMD-ONLY0:       cond.true110:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false111:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi i64 [ [[TMP112]], [[COND_TRUE110]] ], [ [[TMP113]], [[COND_FALSE111]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND113]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP114]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP114:%.*]] = icmp eq i64 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP114]], label [[COND_TRUE115:%.*]], label [[COND_FALSE116:%.*]]
// SIMD-ONLY0:       cond.true115:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END117:%.*]]
// SIMD-ONLY0:       cond.false116:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END117]]
// SIMD-ONLY0:       cond.end117:
// SIMD-ONLY0-NEXT:    [[COND118:%.*]] = phi i64 [ [[TMP117]], [[COND_TRUE115]] ], [ [[TMP118]], [[COND_FALSE116]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND118]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP119]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP120]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = icmp sgt i64 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[COND_TRUE120:%.*]], label [[COND_FALSE121:%.*]]
// SIMD-ONLY0:       cond.true120:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END122:%.*]]
// SIMD-ONLY0:       cond.false121:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END122]]
// SIMD-ONLY0:       cond.end122:
// SIMD-ONLY0-NEXT:    [[COND123:%.*]] = phi i64 [ [[TMP123]], [[COND_TRUE120]] ], [ [[TMP124]], [[COND_FALSE121]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND123]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP125]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP124:%.*]] = icmp slt i64 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP124]], label [[COND_TRUE125:%.*]], label [[COND_FALSE126:%.*]]
// SIMD-ONLY0:       cond.true125:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false126:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i64 [ [[TMP128]], [[COND_TRUE125]] ], [ [[TMP129]], [[COND_FALSE126]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND128]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP130]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP129:%.*]] = icmp eq i64 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP129]], label [[COND_TRUE130:%.*]], label [[COND_FALSE131:%.*]]
// SIMD-ONLY0:       cond.true130:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END132:%.*]]
// SIMD-ONLY0:       cond.false131:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END132]]
// SIMD-ONLY0:       cond.end132:
// SIMD-ONLY0-NEXT:    [[COND133:%.*]] = phi i64 [ [[TMP133]], [[COND_TRUE130]] ], [ [[TMP134]], [[COND_FALSE131]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND133]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = icmp sgt i64 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[COND_TRUE135:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true135:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END137:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END137]]
// SIMD-ONLY0:       cond.end137:
// SIMD-ONLY0-NEXT:    [[COND138:%.*]] = phi i64 [ [[TMP137]], [[COND_TRUE135]] ], [ [[TMP138]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND138]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP139]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP139:%.*]] = icmp slt i64 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP139]], label [[COND_TRUE140:%.*]], label [[COND_FALSE141:%.*]]
// SIMD-ONLY0:       cond.true140:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END142:%.*]]
// SIMD-ONLY0:       cond.false141:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END142]]
// SIMD-ONLY0:       cond.end142:
// SIMD-ONLY0-NEXT:    [[COND143:%.*]] = phi i64 [ [[TMP142]], [[COND_TRUE140]] ], [ [[TMP143]], [[COND_FALSE141]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND143]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP144]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP144:%.*]] = icmp eq i64 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP144]], label [[COND_TRUE145:%.*]], label [[COND_FALSE146:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END147:%.*]]
// SIMD-ONLY0:       cond.false146:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END147]]
// SIMD-ONLY0:       cond.end147:
// SIMD-ONLY0-NEXT:    [[COND148:%.*]] = phi i64 [ [[TMP147]], [[COND_TRUE145]] ], [ [[TMP148]], [[COND_FALSE146]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND148]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP149]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP150]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP149:%.*]] = icmp sgt i64 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP149]], label [[COND_TRUE150:%.*]], label [[COND_FALSE151:%.*]]
// SIMD-ONLY0:       cond.true150:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END152:%.*]]
// SIMD-ONLY0:       cond.false151:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END152]]
// SIMD-ONLY0:       cond.end152:
// SIMD-ONLY0-NEXT:    [[COND153:%.*]] = phi i64 [ [[TMP153]], [[COND_TRUE150]] ], [ [[TMP154]], [[COND_FALSE151]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND153]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP155]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp slt i64 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE155:%.*]], label [[COND_FALSE156:%.*]]
// SIMD-ONLY0:       cond.true155:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false156:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi i64 [ [[TMP158]], [[COND_TRUE155]] ], [ [[TMP159]], [[COND_FALSE156]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND158]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP160]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP159:%.*]] = icmp eq i64 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP159]], label [[COND_TRUE160:%.*]], label [[COND_FALSE161:%.*]]
// SIMD-ONLY0:       cond.true160:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END162:%.*]]
// SIMD-ONLY0:       cond.false161:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END162]]
// SIMD-ONLY0:       cond.end162:
// SIMD-ONLY0-NEXT:    [[COND163:%.*]] = phi i64 [ [[TMP163]], [[COND_TRUE160]] ], [ [[TMP164]], [[COND_FALSE161]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND163]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP164:%.*]] = icmp sgt i64 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP164]], label [[COND_TRUE165:%.*]], label [[COND_FALSE166:%.*]]
// SIMD-ONLY0:       cond.true165:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END167:%.*]]
// SIMD-ONLY0:       cond.false166:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END167]]
// SIMD-ONLY0:       cond.end167:
// SIMD-ONLY0-NEXT:    [[COND168:%.*]] = phi i64 [ [[TMP167]], [[COND_TRUE165]] ], [ [[TMP168]], [[COND_FALSE166]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND168]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP169]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP169:%.*]] = icmp slt i64 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP169]], label [[COND_TRUE170:%.*]], label [[COND_FALSE171:%.*]]
// SIMD-ONLY0:       cond.true170:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END172:%.*]]
// SIMD-ONLY0:       cond.false171:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END172]]
// SIMD-ONLY0:       cond.end172:
// SIMD-ONLY0-NEXT:    [[COND173:%.*]] = phi i64 [ [[TMP172]], [[COND_TRUE170]] ], [ [[TMP173]], [[COND_FALSE171]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND173]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP174]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP174:%.*]] = icmp eq i64 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP174]], label [[COND_TRUE175:%.*]], label [[COND_FALSE176:%.*]]
// SIMD-ONLY0:       cond.true175:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END177:%.*]]
// SIMD-ONLY0:       cond.false176:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END177]]
// SIMD-ONLY0:       cond.end177:
// SIMD-ONLY0-NEXT:    [[COND178:%.*]] = phi i64 [ [[TMP177]], [[COND_TRUE175]] ], [ [[TMP178]], [[COND_FALSE176]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND178]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP179]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i64, ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    ret i64 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @ulxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON1]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON2]], ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON3]], ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP0]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp ugt i64 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP5]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4:%.*]] = icmp ult i64 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4]], label [[COND_TRUE5:%.*]], label [[COND_FALSE6:%.*]]
// SIMD-ONLY0:       cond.true5:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END7:%.*]]
// SIMD-ONLY0:       cond.false6:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END7]]
// SIMD-ONLY0:       cond.end7:
// SIMD-ONLY0-NEXT:    [[COND8:%.*]] = phi i64 [ [[TMP8]], [[COND_TRUE5]] ], [ [[TMP9]], [[COND_FALSE6]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND8]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP10]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP9:%.*]] = icmp eq i64 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP9]], label [[COND_TRUE10:%.*]], label [[COND_FALSE11:%.*]]
// SIMD-ONLY0:       cond.true10:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END12:%.*]]
// SIMD-ONLY0:       cond.false11:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END12]]
// SIMD-ONLY0:       cond.end12:
// SIMD-ONLY0-NEXT:    [[COND13:%.*]] = phi i64 [ [[TMP13]], [[COND_TRUE10]] ], [ [[TMP14]], [[COND_FALSE11]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND13]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = icmp ugt i64 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE15:%.*]], label [[COND_FALSE16:%.*]]
// SIMD-ONLY0:       cond.true15:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false16:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi i64 [ [[TMP17]], [[COND_TRUE15]] ], [ [[TMP18]], [[COND_FALSE16]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND18]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP19]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP19:%.*]] = icmp ult i64 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP19]], label [[COND_TRUE20:%.*]], label [[COND_FALSE21:%.*]]
// SIMD-ONLY0:       cond.true20:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false21:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi i64 [ [[TMP22]], [[COND_TRUE20]] ], [ [[TMP23]], [[COND_FALSE21]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND23]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP24]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP24]], label [[COND_TRUE25:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true25:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END27:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END27]]
// SIMD-ONLY0:       cond.end27:
// SIMD-ONLY0-NEXT:    [[COND28:%.*]] = phi i64 [ [[TMP27]], [[COND_TRUE25]] ], [ [[TMP28]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND28]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP29]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP30]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = icmp ugt i64 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE30:%.*]], label [[COND_FALSE31:%.*]]
// SIMD-ONLY0:       cond.true30:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END32:%.*]]
// SIMD-ONLY0:       cond.false31:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END32]]
// SIMD-ONLY0:       cond.end32:
// SIMD-ONLY0-NEXT:    [[COND33:%.*]] = phi i64 [ [[TMP33]], [[COND_TRUE30]] ], [ [[TMP34]], [[COND_FALSE31]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND33]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP35]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP34:%.*]] = icmp ult i64 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP34]], label [[COND_TRUE35:%.*]], label [[COND_FALSE36:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false36:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi i64 [ [[TMP38]], [[COND_TRUE35]] ], [ [[TMP39]], [[COND_FALSE36]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND38]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP40]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP39:%.*]] = icmp eq i64 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP39]], label [[COND_TRUE40:%.*]], label [[COND_FALSE41:%.*]]
// SIMD-ONLY0:       cond.true40:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END42:%.*]]
// SIMD-ONLY0:       cond.false41:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END42]]
// SIMD-ONLY0:       cond.end42:
// SIMD-ONLY0-NEXT:    [[COND43:%.*]] = phi i64 [ [[TMP43]], [[COND_TRUE40]] ], [ [[TMP44]], [[COND_FALSE41]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND43]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp ugt i64 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE45:%.*]], label [[COND_FALSE46:%.*]]
// SIMD-ONLY0:       cond.true45:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END47:%.*]]
// SIMD-ONLY0:       cond.false46:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END47]]
// SIMD-ONLY0:       cond.end47:
// SIMD-ONLY0-NEXT:    [[COND48:%.*]] = phi i64 [ [[TMP47]], [[COND_TRUE45]] ], [ [[TMP48]], [[COND_FALSE46]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND48]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP49]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP49:%.*]] = icmp ult i64 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP49]], label [[COND_TRUE50:%.*]], label [[COND_FALSE51:%.*]]
// SIMD-ONLY0:       cond.true50:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false51:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi i64 [ [[TMP52]], [[COND_TRUE50]] ], [ [[TMP53]], [[COND_FALSE51]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND53]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP54]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP54:%.*]] = icmp eq i64 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP54]], label [[COND_TRUE55:%.*]], label [[COND_FALSE56:%.*]]
// SIMD-ONLY0:       cond.true55:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END57:%.*]]
// SIMD-ONLY0:       cond.false56:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END57]]
// SIMD-ONLY0:       cond.end57:
// SIMD-ONLY0-NEXT:    [[COND58:%.*]] = phi i64 [ [[TMP57]], [[COND_TRUE55]] ], [ [[TMP58]], [[COND_FALSE56]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND58]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP59]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP60]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = icmp ugt i64 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[COND_TRUE60:%.*]], label [[COND_FALSE61:%.*]]
// SIMD-ONLY0:       cond.true60:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END62:%.*]]
// SIMD-ONLY0:       cond.false61:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END62]]
// SIMD-ONLY0:       cond.end62:
// SIMD-ONLY0-NEXT:    [[COND63:%.*]] = phi i64 [ [[TMP63]], [[COND_TRUE60]] ], [ [[TMP64]], [[COND_FALSE61]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND63]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP65]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP64:%.*]] = icmp ult i64 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP64]], label [[COND_TRUE65:%.*]], label [[COND_FALSE66:%.*]]
// SIMD-ONLY0:       cond.true65:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END67:%.*]]
// SIMD-ONLY0:       cond.false66:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END67]]
// SIMD-ONLY0:       cond.end67:
// SIMD-ONLY0-NEXT:    [[COND68:%.*]] = phi i64 [ [[TMP68]], [[COND_TRUE65]] ], [ [[TMP69]], [[COND_FALSE66]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND68]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP70]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP69:%.*]] = icmp eq i64 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP69]], label [[COND_TRUE70:%.*]], label [[COND_FALSE71:%.*]]
// SIMD-ONLY0:       cond.true70:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false71:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi i64 [ [[TMP73]], [[COND_TRUE70]] ], [ [[TMP74]], [[COND_FALSE71]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND73]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp ugt i64 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE75:%.*]], label [[COND_FALSE76:%.*]]
// SIMD-ONLY0:       cond.true75:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END77:%.*]]
// SIMD-ONLY0:       cond.false76:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END77]]
// SIMD-ONLY0:       cond.end77:
// SIMD-ONLY0-NEXT:    [[COND78:%.*]] = phi i64 [ [[TMP77]], [[COND_TRUE75]] ], [ [[TMP78]], [[COND_FALSE76]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND78]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP79]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP79:%.*]] = icmp ult i64 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP79]], label [[COND_TRUE80:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true80:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END82:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END82]]
// SIMD-ONLY0:       cond.end82:
// SIMD-ONLY0-NEXT:    [[COND83:%.*]] = phi i64 [ [[TMP82]], [[COND_TRUE80]] ], [ [[TMP83]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND83]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP84]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP84:%.*]] = icmp eq i64 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP84]], label [[COND_TRUE85:%.*]], label [[COND_FALSE86:%.*]]
// SIMD-ONLY0:       cond.true85:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END87:%.*]]
// SIMD-ONLY0:       cond.false86:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END87]]
// SIMD-ONLY0:       cond.end87:
// SIMD-ONLY0-NEXT:    [[COND88:%.*]] = phi i64 [ [[TMP87]], [[COND_TRUE85]] ], [ [[TMP88]], [[COND_FALSE86]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND88]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP89]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP90]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = icmp ugt i64 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE90:%.*]], label [[COND_FALSE91:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END92:%.*]]
// SIMD-ONLY0:       cond.false91:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END92]]
// SIMD-ONLY0:       cond.end92:
// SIMD-ONLY0-NEXT:    [[COND93:%.*]] = phi i64 [ [[TMP93]], [[COND_TRUE90]] ], [ [[TMP94]], [[COND_FALSE91]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND93]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP95]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP94:%.*]] = icmp ult i64 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP94]], label [[COND_TRUE95:%.*]], label [[COND_FALSE96:%.*]]
// SIMD-ONLY0:       cond.true95:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false96:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi i64 [ [[TMP98]], [[COND_TRUE95]] ], [ [[TMP99]], [[COND_FALSE96]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND98]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP100]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = icmp eq i64 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE100:%.*]], label [[COND_FALSE101:%.*]]
// SIMD-ONLY0:       cond.true100:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END102:%.*]]
// SIMD-ONLY0:       cond.false101:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END102]]
// SIMD-ONLY0:       cond.end102:
// SIMD-ONLY0-NEXT:    [[COND103:%.*]] = phi i64 [ [[TMP103]], [[COND_TRUE100]] ], [ [[TMP104]], [[COND_FALSE101]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND103]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = icmp ugt i64 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE105:%.*]], label [[COND_FALSE106:%.*]]
// SIMD-ONLY0:       cond.true105:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END107:%.*]]
// SIMD-ONLY0:       cond.false106:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END107]]
// SIMD-ONLY0:       cond.end107:
// SIMD-ONLY0-NEXT:    [[COND108:%.*]] = phi i64 [ [[TMP107]], [[COND_TRUE105]] ], [ [[TMP108]], [[COND_FALSE106]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND108]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP109]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP109:%.*]] = icmp ult i64 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP109]], label [[COND_TRUE110:%.*]], label [[COND_FALSE111:%.*]]
// SIMD-ONLY0:       cond.true110:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false111:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi i64 [ [[TMP112]], [[COND_TRUE110]] ], [ [[TMP113]], [[COND_FALSE111]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND113]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP114]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP114:%.*]] = icmp eq i64 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP114]], label [[COND_TRUE115:%.*]], label [[COND_FALSE116:%.*]]
// SIMD-ONLY0:       cond.true115:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END117:%.*]]
// SIMD-ONLY0:       cond.false116:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END117]]
// SIMD-ONLY0:       cond.end117:
// SIMD-ONLY0-NEXT:    [[COND118:%.*]] = phi i64 [ [[TMP117]], [[COND_TRUE115]] ], [ [[TMP118]], [[COND_FALSE116]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND118]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP119]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP120]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = icmp ugt i64 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[COND_TRUE120:%.*]], label [[COND_FALSE121:%.*]]
// SIMD-ONLY0:       cond.true120:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END122:%.*]]
// SIMD-ONLY0:       cond.false121:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END122]]
// SIMD-ONLY0:       cond.end122:
// SIMD-ONLY0-NEXT:    [[COND123:%.*]] = phi i64 [ [[TMP123]], [[COND_TRUE120]] ], [ [[TMP124]], [[COND_FALSE121]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND123]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP125]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP124:%.*]] = icmp ult i64 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP124]], label [[COND_TRUE125:%.*]], label [[COND_FALSE126:%.*]]
// SIMD-ONLY0:       cond.true125:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false126:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i64 [ [[TMP128]], [[COND_TRUE125]] ], [ [[TMP129]], [[COND_FALSE126]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND128]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP130]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP129:%.*]] = icmp eq i64 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP129]], label [[COND_TRUE130:%.*]], label [[COND_FALSE131:%.*]]
// SIMD-ONLY0:       cond.true130:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END132:%.*]]
// SIMD-ONLY0:       cond.false131:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END132]]
// SIMD-ONLY0:       cond.end132:
// SIMD-ONLY0-NEXT:    [[COND133:%.*]] = phi i64 [ [[TMP133]], [[COND_TRUE130]] ], [ [[TMP134]], [[COND_FALSE131]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND133]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = icmp ugt i64 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[COND_TRUE135:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true135:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END137:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END137]]
// SIMD-ONLY0:       cond.end137:
// SIMD-ONLY0-NEXT:    [[COND138:%.*]] = phi i64 [ [[TMP137]], [[COND_TRUE135]] ], [ [[TMP138]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND138]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP139]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP139:%.*]] = icmp ult i64 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP139]], label [[COND_TRUE140:%.*]], label [[COND_FALSE141:%.*]]
// SIMD-ONLY0:       cond.true140:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END142:%.*]]
// SIMD-ONLY0:       cond.false141:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END142]]
// SIMD-ONLY0:       cond.end142:
// SIMD-ONLY0-NEXT:    [[COND143:%.*]] = phi i64 [ [[TMP142]], [[COND_TRUE140]] ], [ [[TMP143]], [[COND_FALSE141]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND143]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP144]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP144:%.*]] = icmp eq i64 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP144]], label [[COND_TRUE145:%.*]], label [[COND_FALSE146:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END147:%.*]]
// SIMD-ONLY0:       cond.false146:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END147]]
// SIMD-ONLY0:       cond.end147:
// SIMD-ONLY0-NEXT:    [[COND148:%.*]] = phi i64 [ [[TMP147]], [[COND_TRUE145]] ], [ [[TMP148]], [[COND_FALSE146]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND148]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP149]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP150]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP149:%.*]] = icmp ugt i64 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP149]], label [[COND_TRUE150:%.*]], label [[COND_FALSE151:%.*]]
// SIMD-ONLY0:       cond.true150:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END152:%.*]]
// SIMD-ONLY0:       cond.false151:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END152]]
// SIMD-ONLY0:       cond.end152:
// SIMD-ONLY0-NEXT:    [[COND153:%.*]] = phi i64 [ [[TMP153]], [[COND_TRUE150]] ], [ [[TMP154]], [[COND_FALSE151]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND153]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP155]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp ult i64 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE155:%.*]], label [[COND_FALSE156:%.*]]
// SIMD-ONLY0:       cond.true155:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false156:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi i64 [ [[TMP158]], [[COND_TRUE155]] ], [ [[TMP159]], [[COND_FALSE156]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND158]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP160]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP159:%.*]] = icmp eq i64 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP159]], label [[COND_TRUE160:%.*]], label [[COND_FALSE161:%.*]]
// SIMD-ONLY0:       cond.true160:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END162:%.*]]
// SIMD-ONLY0:       cond.false161:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END162]]
// SIMD-ONLY0:       cond.end162:
// SIMD-ONLY0-NEXT:    [[COND163:%.*]] = phi i64 [ [[TMP163]], [[COND_TRUE160]] ], [ [[TMP164]], [[COND_FALSE161]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND163]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP164:%.*]] = icmp ugt i64 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP164]], label [[COND_TRUE165:%.*]], label [[COND_FALSE166:%.*]]
// SIMD-ONLY0:       cond.true165:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END167:%.*]]
// SIMD-ONLY0:       cond.false166:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END167]]
// SIMD-ONLY0:       cond.end167:
// SIMD-ONLY0-NEXT:    [[COND168:%.*]] = phi i64 [ [[TMP167]], [[COND_TRUE165]] ], [ [[TMP168]], [[COND_FALSE166]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND168]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP169]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP169:%.*]] = icmp ult i64 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP169]], label [[COND_TRUE170:%.*]], label [[COND_FALSE171:%.*]]
// SIMD-ONLY0:       cond.true170:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END172:%.*]]
// SIMD-ONLY0:       cond.false171:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END172]]
// SIMD-ONLY0:       cond.end172:
// SIMD-ONLY0-NEXT:    [[COND173:%.*]] = phi i64 [ [[TMP172]], [[COND_TRUE170]] ], [ [[TMP173]], [[COND_FALSE171]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND173]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP174]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP174:%.*]] = icmp eq i64 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP174]], label [[COND_TRUE175:%.*]], label [[COND_FALSE176:%.*]]
// SIMD-ONLY0:       cond.true175:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END177:%.*]]
// SIMD-ONLY0:       cond.false176:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END177]]
// SIMD-ONLY0:       cond.end177:
// SIMD-ONLY0-NEXT:    [[COND178:%.*]] = phi i64 [ [[TMP177]], [[COND_TRUE175]] ], [ [[TMP178]], [[COND_FALSE176]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND178]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP179]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i64, ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    ret i64 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @llxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON1]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON2]], ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON3]], ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP0]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP5]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4:%.*]] = icmp slt i64 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4]], label [[COND_TRUE5:%.*]], label [[COND_FALSE6:%.*]]
// SIMD-ONLY0:       cond.true5:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END7:%.*]]
// SIMD-ONLY0:       cond.false6:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END7]]
// SIMD-ONLY0:       cond.end7:
// SIMD-ONLY0-NEXT:    [[COND8:%.*]] = phi i64 [ [[TMP8]], [[COND_TRUE5]] ], [ [[TMP9]], [[COND_FALSE6]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND8]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP10]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP9:%.*]] = icmp eq i64 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP9]], label [[COND_TRUE10:%.*]], label [[COND_FALSE11:%.*]]
// SIMD-ONLY0:       cond.true10:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END12:%.*]]
// SIMD-ONLY0:       cond.false11:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END12]]
// SIMD-ONLY0:       cond.end12:
// SIMD-ONLY0-NEXT:    [[COND13:%.*]] = phi i64 [ [[TMP13]], [[COND_TRUE10]] ], [ [[TMP14]], [[COND_FALSE11]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND13]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = icmp sgt i64 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE15:%.*]], label [[COND_FALSE16:%.*]]
// SIMD-ONLY0:       cond.true15:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false16:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi i64 [ [[TMP17]], [[COND_TRUE15]] ], [ [[TMP18]], [[COND_FALSE16]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND18]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP19]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP19:%.*]] = icmp slt i64 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP19]], label [[COND_TRUE20:%.*]], label [[COND_FALSE21:%.*]]
// SIMD-ONLY0:       cond.true20:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false21:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi i64 [ [[TMP22]], [[COND_TRUE20]] ], [ [[TMP23]], [[COND_FALSE21]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND23]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP24]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP24]], label [[COND_TRUE25:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true25:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END27:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END27]]
// SIMD-ONLY0:       cond.end27:
// SIMD-ONLY0-NEXT:    [[COND28:%.*]] = phi i64 [ [[TMP27]], [[COND_TRUE25]] ], [ [[TMP28]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND28]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP29]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP30]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = icmp sgt i64 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE30:%.*]], label [[COND_FALSE31:%.*]]
// SIMD-ONLY0:       cond.true30:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END32:%.*]]
// SIMD-ONLY0:       cond.false31:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END32]]
// SIMD-ONLY0:       cond.end32:
// SIMD-ONLY0-NEXT:    [[COND33:%.*]] = phi i64 [ [[TMP33]], [[COND_TRUE30]] ], [ [[TMP34]], [[COND_FALSE31]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND33]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP35]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP34:%.*]] = icmp slt i64 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP34]], label [[COND_TRUE35:%.*]], label [[COND_FALSE36:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false36:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi i64 [ [[TMP38]], [[COND_TRUE35]] ], [ [[TMP39]], [[COND_FALSE36]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND38]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP40]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP39:%.*]] = icmp eq i64 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP39]], label [[COND_TRUE40:%.*]], label [[COND_FALSE41:%.*]]
// SIMD-ONLY0:       cond.true40:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END42:%.*]]
// SIMD-ONLY0:       cond.false41:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END42]]
// SIMD-ONLY0:       cond.end42:
// SIMD-ONLY0-NEXT:    [[COND43:%.*]] = phi i64 [ [[TMP43]], [[COND_TRUE40]] ], [ [[TMP44]], [[COND_FALSE41]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND43]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp sgt i64 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE45:%.*]], label [[COND_FALSE46:%.*]]
// SIMD-ONLY0:       cond.true45:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END47:%.*]]
// SIMD-ONLY0:       cond.false46:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END47]]
// SIMD-ONLY0:       cond.end47:
// SIMD-ONLY0-NEXT:    [[COND48:%.*]] = phi i64 [ [[TMP47]], [[COND_TRUE45]] ], [ [[TMP48]], [[COND_FALSE46]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND48]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP49]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP49:%.*]] = icmp slt i64 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP49]], label [[COND_TRUE50:%.*]], label [[COND_FALSE51:%.*]]
// SIMD-ONLY0:       cond.true50:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false51:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi i64 [ [[TMP52]], [[COND_TRUE50]] ], [ [[TMP53]], [[COND_FALSE51]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND53]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP54]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP54:%.*]] = icmp eq i64 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP54]], label [[COND_TRUE55:%.*]], label [[COND_FALSE56:%.*]]
// SIMD-ONLY0:       cond.true55:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END57:%.*]]
// SIMD-ONLY0:       cond.false56:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END57]]
// SIMD-ONLY0:       cond.end57:
// SIMD-ONLY0-NEXT:    [[COND58:%.*]] = phi i64 [ [[TMP57]], [[COND_TRUE55]] ], [ [[TMP58]], [[COND_FALSE56]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND58]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP59]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP60]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = icmp sgt i64 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[COND_TRUE60:%.*]], label [[COND_FALSE61:%.*]]
// SIMD-ONLY0:       cond.true60:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END62:%.*]]
// SIMD-ONLY0:       cond.false61:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END62]]
// SIMD-ONLY0:       cond.end62:
// SIMD-ONLY0-NEXT:    [[COND63:%.*]] = phi i64 [ [[TMP63]], [[COND_TRUE60]] ], [ [[TMP64]], [[COND_FALSE61]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND63]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP65]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP64:%.*]] = icmp slt i64 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP64]], label [[COND_TRUE65:%.*]], label [[COND_FALSE66:%.*]]
// SIMD-ONLY0:       cond.true65:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END67:%.*]]
// SIMD-ONLY0:       cond.false66:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END67]]
// SIMD-ONLY0:       cond.end67:
// SIMD-ONLY0-NEXT:    [[COND68:%.*]] = phi i64 [ [[TMP68]], [[COND_TRUE65]] ], [ [[TMP69]], [[COND_FALSE66]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND68]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP70]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP69:%.*]] = icmp eq i64 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP69]], label [[COND_TRUE70:%.*]], label [[COND_FALSE71:%.*]]
// SIMD-ONLY0:       cond.true70:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false71:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi i64 [ [[TMP73]], [[COND_TRUE70]] ], [ [[TMP74]], [[COND_FALSE71]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND73]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp sgt i64 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE75:%.*]], label [[COND_FALSE76:%.*]]
// SIMD-ONLY0:       cond.true75:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END77:%.*]]
// SIMD-ONLY0:       cond.false76:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END77]]
// SIMD-ONLY0:       cond.end77:
// SIMD-ONLY0-NEXT:    [[COND78:%.*]] = phi i64 [ [[TMP77]], [[COND_TRUE75]] ], [ [[TMP78]], [[COND_FALSE76]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND78]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP79]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP79:%.*]] = icmp slt i64 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP79]], label [[COND_TRUE80:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true80:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END82:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END82]]
// SIMD-ONLY0:       cond.end82:
// SIMD-ONLY0-NEXT:    [[COND83:%.*]] = phi i64 [ [[TMP82]], [[COND_TRUE80]] ], [ [[TMP83]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND83]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP84]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP84:%.*]] = icmp eq i64 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP84]], label [[COND_TRUE85:%.*]], label [[COND_FALSE86:%.*]]
// SIMD-ONLY0:       cond.true85:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END87:%.*]]
// SIMD-ONLY0:       cond.false86:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END87]]
// SIMD-ONLY0:       cond.end87:
// SIMD-ONLY0-NEXT:    [[COND88:%.*]] = phi i64 [ [[TMP87]], [[COND_TRUE85]] ], [ [[TMP88]], [[COND_FALSE86]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND88]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP89]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP90]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = icmp sgt i64 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE90:%.*]], label [[COND_FALSE91:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END92:%.*]]
// SIMD-ONLY0:       cond.false91:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END92]]
// SIMD-ONLY0:       cond.end92:
// SIMD-ONLY0-NEXT:    [[COND93:%.*]] = phi i64 [ [[TMP93]], [[COND_TRUE90]] ], [ [[TMP94]], [[COND_FALSE91]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND93]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP95]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP94:%.*]] = icmp slt i64 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP94]], label [[COND_TRUE95:%.*]], label [[COND_FALSE96:%.*]]
// SIMD-ONLY0:       cond.true95:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false96:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi i64 [ [[TMP98]], [[COND_TRUE95]] ], [ [[TMP99]], [[COND_FALSE96]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND98]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP100]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = icmp eq i64 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE100:%.*]], label [[COND_FALSE101:%.*]]
// SIMD-ONLY0:       cond.true100:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END102:%.*]]
// SIMD-ONLY0:       cond.false101:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END102]]
// SIMD-ONLY0:       cond.end102:
// SIMD-ONLY0-NEXT:    [[COND103:%.*]] = phi i64 [ [[TMP103]], [[COND_TRUE100]] ], [ [[TMP104]], [[COND_FALSE101]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND103]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = icmp sgt i64 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE105:%.*]], label [[COND_FALSE106:%.*]]
// SIMD-ONLY0:       cond.true105:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END107:%.*]]
// SIMD-ONLY0:       cond.false106:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END107]]
// SIMD-ONLY0:       cond.end107:
// SIMD-ONLY0-NEXT:    [[COND108:%.*]] = phi i64 [ [[TMP107]], [[COND_TRUE105]] ], [ [[TMP108]], [[COND_FALSE106]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND108]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP109]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP109:%.*]] = icmp slt i64 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP109]], label [[COND_TRUE110:%.*]], label [[COND_FALSE111:%.*]]
// SIMD-ONLY0:       cond.true110:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false111:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi i64 [ [[TMP112]], [[COND_TRUE110]] ], [ [[TMP113]], [[COND_FALSE111]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND113]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP114]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP114:%.*]] = icmp eq i64 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP114]], label [[COND_TRUE115:%.*]], label [[COND_FALSE116:%.*]]
// SIMD-ONLY0:       cond.true115:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END117:%.*]]
// SIMD-ONLY0:       cond.false116:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END117]]
// SIMD-ONLY0:       cond.end117:
// SIMD-ONLY0-NEXT:    [[COND118:%.*]] = phi i64 [ [[TMP117]], [[COND_TRUE115]] ], [ [[TMP118]], [[COND_FALSE116]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND118]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP119]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP120]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = icmp sgt i64 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[COND_TRUE120:%.*]], label [[COND_FALSE121:%.*]]
// SIMD-ONLY0:       cond.true120:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END122:%.*]]
// SIMD-ONLY0:       cond.false121:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END122]]
// SIMD-ONLY0:       cond.end122:
// SIMD-ONLY0-NEXT:    [[COND123:%.*]] = phi i64 [ [[TMP123]], [[COND_TRUE120]] ], [ [[TMP124]], [[COND_FALSE121]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND123]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP125]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP124:%.*]] = icmp slt i64 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP124]], label [[COND_TRUE125:%.*]], label [[COND_FALSE126:%.*]]
// SIMD-ONLY0:       cond.true125:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false126:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i64 [ [[TMP128]], [[COND_TRUE125]] ], [ [[TMP129]], [[COND_FALSE126]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND128]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP130]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP129:%.*]] = icmp eq i64 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP129]], label [[COND_TRUE130:%.*]], label [[COND_FALSE131:%.*]]
// SIMD-ONLY0:       cond.true130:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END132:%.*]]
// SIMD-ONLY0:       cond.false131:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END132]]
// SIMD-ONLY0:       cond.end132:
// SIMD-ONLY0-NEXT:    [[COND133:%.*]] = phi i64 [ [[TMP133]], [[COND_TRUE130]] ], [ [[TMP134]], [[COND_FALSE131]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND133]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = icmp sgt i64 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[COND_TRUE135:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true135:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END137:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END137]]
// SIMD-ONLY0:       cond.end137:
// SIMD-ONLY0-NEXT:    [[COND138:%.*]] = phi i64 [ [[TMP137]], [[COND_TRUE135]] ], [ [[TMP138]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND138]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP139]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP139:%.*]] = icmp slt i64 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP139]], label [[COND_TRUE140:%.*]], label [[COND_FALSE141:%.*]]
// SIMD-ONLY0:       cond.true140:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END142:%.*]]
// SIMD-ONLY0:       cond.false141:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END142]]
// SIMD-ONLY0:       cond.end142:
// SIMD-ONLY0-NEXT:    [[COND143:%.*]] = phi i64 [ [[TMP142]], [[COND_TRUE140]] ], [ [[TMP143]], [[COND_FALSE141]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND143]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP144]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP144:%.*]] = icmp eq i64 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP144]], label [[COND_TRUE145:%.*]], label [[COND_FALSE146:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END147:%.*]]
// SIMD-ONLY0:       cond.false146:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END147]]
// SIMD-ONLY0:       cond.end147:
// SIMD-ONLY0-NEXT:    [[COND148:%.*]] = phi i64 [ [[TMP147]], [[COND_TRUE145]] ], [ [[TMP148]], [[COND_FALSE146]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND148]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP149]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP150]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP149:%.*]] = icmp sgt i64 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP149]], label [[COND_TRUE150:%.*]], label [[COND_FALSE151:%.*]]
// SIMD-ONLY0:       cond.true150:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END152:%.*]]
// SIMD-ONLY0:       cond.false151:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END152]]
// SIMD-ONLY0:       cond.end152:
// SIMD-ONLY0-NEXT:    [[COND153:%.*]] = phi i64 [ [[TMP153]], [[COND_TRUE150]] ], [ [[TMP154]], [[COND_FALSE151]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND153]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP155]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp slt i64 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE155:%.*]], label [[COND_FALSE156:%.*]]
// SIMD-ONLY0:       cond.true155:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false156:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi i64 [ [[TMP158]], [[COND_TRUE155]] ], [ [[TMP159]], [[COND_FALSE156]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND158]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP160]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP159:%.*]] = icmp eq i64 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP159]], label [[COND_TRUE160:%.*]], label [[COND_FALSE161:%.*]]
// SIMD-ONLY0:       cond.true160:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END162:%.*]]
// SIMD-ONLY0:       cond.false161:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END162]]
// SIMD-ONLY0:       cond.end162:
// SIMD-ONLY0-NEXT:    [[COND163:%.*]] = phi i64 [ [[TMP163]], [[COND_TRUE160]] ], [ [[TMP164]], [[COND_FALSE161]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND163]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP164:%.*]] = icmp sgt i64 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP164]], label [[COND_TRUE165:%.*]], label [[COND_FALSE166:%.*]]
// SIMD-ONLY0:       cond.true165:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END167:%.*]]
// SIMD-ONLY0:       cond.false166:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END167]]
// SIMD-ONLY0:       cond.end167:
// SIMD-ONLY0-NEXT:    [[COND168:%.*]] = phi i64 [ [[TMP167]], [[COND_TRUE165]] ], [ [[TMP168]], [[COND_FALSE166]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND168]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP169]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP169:%.*]] = icmp slt i64 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP169]], label [[COND_TRUE170:%.*]], label [[COND_FALSE171:%.*]]
// SIMD-ONLY0:       cond.true170:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END172:%.*]]
// SIMD-ONLY0:       cond.false171:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END172]]
// SIMD-ONLY0:       cond.end172:
// SIMD-ONLY0-NEXT:    [[COND173:%.*]] = phi i64 [ [[TMP172]], [[COND_TRUE170]] ], [ [[TMP173]], [[COND_FALSE171]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND173]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP174]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP174:%.*]] = icmp eq i64 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP174]], label [[COND_TRUE175:%.*]], label [[COND_FALSE176:%.*]]
// SIMD-ONLY0:       cond.true175:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END177:%.*]]
// SIMD-ONLY0:       cond.false176:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END177]]
// SIMD-ONLY0:       cond.end177:
// SIMD-ONLY0-NEXT:    [[COND178:%.*]] = phi i64 [ [[TMP177]], [[COND_TRUE175]] ], [ [[TMP178]], [[COND_FALSE176]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND178]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP179]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i64, ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    ret i64 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @ullxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON1]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON2]], ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze i64 poison
// SIMD-ONLY0-NEXT:    store i64 [[FREEZE_POISON3]], ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP0]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp ugt i64 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP5]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4:%.*]] = icmp ult i64 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4]], label [[COND_TRUE5:%.*]], label [[COND_FALSE6:%.*]]
// SIMD-ONLY0:       cond.true5:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END7:%.*]]
// SIMD-ONLY0:       cond.false6:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END7]]
// SIMD-ONLY0:       cond.end7:
// SIMD-ONLY0-NEXT:    [[COND8:%.*]] = phi i64 [ [[TMP8]], [[COND_TRUE5]] ], [ [[TMP9]], [[COND_FALSE6]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND8]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP10]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP9:%.*]] = icmp eq i64 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP9]], label [[COND_TRUE10:%.*]], label [[COND_FALSE11:%.*]]
// SIMD-ONLY0:       cond.true10:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END12:%.*]]
// SIMD-ONLY0:       cond.false11:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END12]]
// SIMD-ONLY0:       cond.end12:
// SIMD-ONLY0-NEXT:    [[COND13:%.*]] = phi i64 [ [[TMP13]], [[COND_TRUE10]] ], [ [[TMP14]], [[COND_FALSE11]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND13]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = icmp ugt i64 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE15:%.*]], label [[COND_FALSE16:%.*]]
// SIMD-ONLY0:       cond.true15:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false16:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi i64 [ [[TMP17]], [[COND_TRUE15]] ], [ [[TMP18]], [[COND_FALSE16]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND18]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP19]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP19:%.*]] = icmp ult i64 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP19]], label [[COND_TRUE20:%.*]], label [[COND_FALSE21:%.*]]
// SIMD-ONLY0:       cond.true20:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false21:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi i64 [ [[TMP22]], [[COND_TRUE20]] ], [ [[TMP23]], [[COND_FALSE21]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND23]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP24]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP24]], label [[COND_TRUE25:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true25:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END27:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END27]]
// SIMD-ONLY0:       cond.end27:
// SIMD-ONLY0-NEXT:    [[COND28:%.*]] = phi i64 [ [[TMP27]], [[COND_TRUE25]] ], [ [[TMP28]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND28]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP29]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP30]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = icmp ugt i64 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE30:%.*]], label [[COND_FALSE31:%.*]]
// SIMD-ONLY0:       cond.true30:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END32:%.*]]
// SIMD-ONLY0:       cond.false31:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END32]]
// SIMD-ONLY0:       cond.end32:
// SIMD-ONLY0-NEXT:    [[COND33:%.*]] = phi i64 [ [[TMP33]], [[COND_TRUE30]] ], [ [[TMP34]], [[COND_FALSE31]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND33]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP35]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP34:%.*]] = icmp ult i64 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP34]], label [[COND_TRUE35:%.*]], label [[COND_FALSE36:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false36:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi i64 [ [[TMP38]], [[COND_TRUE35]] ], [ [[TMP39]], [[COND_FALSE36]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND38]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP40]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP39:%.*]] = icmp eq i64 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP39]], label [[COND_TRUE40:%.*]], label [[COND_FALSE41:%.*]]
// SIMD-ONLY0:       cond.true40:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END42:%.*]]
// SIMD-ONLY0:       cond.false41:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END42]]
// SIMD-ONLY0:       cond.end42:
// SIMD-ONLY0-NEXT:    [[COND43:%.*]] = phi i64 [ [[TMP43]], [[COND_TRUE40]] ], [ [[TMP44]], [[COND_FALSE41]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND43]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp ugt i64 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE45:%.*]], label [[COND_FALSE46:%.*]]
// SIMD-ONLY0:       cond.true45:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END47:%.*]]
// SIMD-ONLY0:       cond.false46:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END47]]
// SIMD-ONLY0:       cond.end47:
// SIMD-ONLY0-NEXT:    [[COND48:%.*]] = phi i64 [ [[TMP47]], [[COND_TRUE45]] ], [ [[TMP48]], [[COND_FALSE46]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND48]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP49]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP49:%.*]] = icmp ult i64 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP49]], label [[COND_TRUE50:%.*]], label [[COND_FALSE51:%.*]]
// SIMD-ONLY0:       cond.true50:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false51:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi i64 [ [[TMP52]], [[COND_TRUE50]] ], [ [[TMP53]], [[COND_FALSE51]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND53]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP54]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP54:%.*]] = icmp eq i64 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP54]], label [[COND_TRUE55:%.*]], label [[COND_FALSE56:%.*]]
// SIMD-ONLY0:       cond.true55:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END57:%.*]]
// SIMD-ONLY0:       cond.false56:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END57]]
// SIMD-ONLY0:       cond.end57:
// SIMD-ONLY0-NEXT:    [[COND58:%.*]] = phi i64 [ [[TMP57]], [[COND_TRUE55]] ], [ [[TMP58]], [[COND_FALSE56]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND58]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP59]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP60]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = icmp ugt i64 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[COND_TRUE60:%.*]], label [[COND_FALSE61:%.*]]
// SIMD-ONLY0:       cond.true60:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END62:%.*]]
// SIMD-ONLY0:       cond.false61:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END62]]
// SIMD-ONLY0:       cond.end62:
// SIMD-ONLY0-NEXT:    [[COND63:%.*]] = phi i64 [ [[TMP63]], [[COND_TRUE60]] ], [ [[TMP64]], [[COND_FALSE61]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND63]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP65]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP64:%.*]] = icmp ult i64 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP64]], label [[COND_TRUE65:%.*]], label [[COND_FALSE66:%.*]]
// SIMD-ONLY0:       cond.true65:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END67:%.*]]
// SIMD-ONLY0:       cond.false66:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END67]]
// SIMD-ONLY0:       cond.end67:
// SIMD-ONLY0-NEXT:    [[COND68:%.*]] = phi i64 [ [[TMP68]], [[COND_TRUE65]] ], [ [[TMP69]], [[COND_FALSE66]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND68]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP70]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP69:%.*]] = icmp eq i64 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP69]], label [[COND_TRUE70:%.*]], label [[COND_FALSE71:%.*]]
// SIMD-ONLY0:       cond.true70:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false71:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi i64 [ [[TMP73]], [[COND_TRUE70]] ], [ [[TMP74]], [[COND_FALSE71]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND73]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp ugt i64 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE75:%.*]], label [[COND_FALSE76:%.*]]
// SIMD-ONLY0:       cond.true75:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END77:%.*]]
// SIMD-ONLY0:       cond.false76:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END77]]
// SIMD-ONLY0:       cond.end77:
// SIMD-ONLY0-NEXT:    [[COND78:%.*]] = phi i64 [ [[TMP77]], [[COND_TRUE75]] ], [ [[TMP78]], [[COND_FALSE76]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND78]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP79]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP79:%.*]] = icmp ult i64 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP79]], label [[COND_TRUE80:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true80:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END82:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END82]]
// SIMD-ONLY0:       cond.end82:
// SIMD-ONLY0-NEXT:    [[COND83:%.*]] = phi i64 [ [[TMP82]], [[COND_TRUE80]] ], [ [[TMP83]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND83]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP84]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP84:%.*]] = icmp eq i64 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP84]], label [[COND_TRUE85:%.*]], label [[COND_FALSE86:%.*]]
// SIMD-ONLY0:       cond.true85:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END87:%.*]]
// SIMD-ONLY0:       cond.false86:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END87]]
// SIMD-ONLY0:       cond.end87:
// SIMD-ONLY0-NEXT:    [[COND88:%.*]] = phi i64 [ [[TMP87]], [[COND_TRUE85]] ], [ [[TMP88]], [[COND_FALSE86]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND88]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP89]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP90]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = icmp ugt i64 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE90:%.*]], label [[COND_FALSE91:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END92:%.*]]
// SIMD-ONLY0:       cond.false91:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END92]]
// SIMD-ONLY0:       cond.end92:
// SIMD-ONLY0-NEXT:    [[COND93:%.*]] = phi i64 [ [[TMP93]], [[COND_TRUE90]] ], [ [[TMP94]], [[COND_FALSE91]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND93]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP95]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP94:%.*]] = icmp ult i64 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP94]], label [[COND_TRUE95:%.*]], label [[COND_FALSE96:%.*]]
// SIMD-ONLY0:       cond.true95:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false96:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi i64 [ [[TMP98]], [[COND_TRUE95]] ], [ [[TMP99]], [[COND_FALSE96]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND98]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP100]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = icmp eq i64 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE100:%.*]], label [[COND_FALSE101:%.*]]
// SIMD-ONLY0:       cond.true100:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END102:%.*]]
// SIMD-ONLY0:       cond.false101:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END102]]
// SIMD-ONLY0:       cond.end102:
// SIMD-ONLY0-NEXT:    [[COND103:%.*]] = phi i64 [ [[TMP103]], [[COND_TRUE100]] ], [ [[TMP104]], [[COND_FALSE101]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND103]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = icmp ugt i64 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE105:%.*]], label [[COND_FALSE106:%.*]]
// SIMD-ONLY0:       cond.true105:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END107:%.*]]
// SIMD-ONLY0:       cond.false106:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END107]]
// SIMD-ONLY0:       cond.end107:
// SIMD-ONLY0-NEXT:    [[COND108:%.*]] = phi i64 [ [[TMP107]], [[COND_TRUE105]] ], [ [[TMP108]], [[COND_FALSE106]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND108]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP109]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP109:%.*]] = icmp ult i64 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP109]], label [[COND_TRUE110:%.*]], label [[COND_FALSE111:%.*]]
// SIMD-ONLY0:       cond.true110:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false111:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi i64 [ [[TMP112]], [[COND_TRUE110]] ], [ [[TMP113]], [[COND_FALSE111]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND113]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP114]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP114:%.*]] = icmp eq i64 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP114]], label [[COND_TRUE115:%.*]], label [[COND_FALSE116:%.*]]
// SIMD-ONLY0:       cond.true115:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END117:%.*]]
// SIMD-ONLY0:       cond.false116:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END117]]
// SIMD-ONLY0:       cond.end117:
// SIMD-ONLY0-NEXT:    [[COND118:%.*]] = phi i64 [ [[TMP117]], [[COND_TRUE115]] ], [ [[TMP118]], [[COND_FALSE116]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND118]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP119]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP120]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = icmp ugt i64 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[COND_TRUE120:%.*]], label [[COND_FALSE121:%.*]]
// SIMD-ONLY0:       cond.true120:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END122:%.*]]
// SIMD-ONLY0:       cond.false121:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END122]]
// SIMD-ONLY0:       cond.end122:
// SIMD-ONLY0-NEXT:    [[COND123:%.*]] = phi i64 [ [[TMP123]], [[COND_TRUE120]] ], [ [[TMP124]], [[COND_FALSE121]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND123]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP125]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP124:%.*]] = icmp ult i64 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP124]], label [[COND_TRUE125:%.*]], label [[COND_FALSE126:%.*]]
// SIMD-ONLY0:       cond.true125:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false126:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i64 [ [[TMP128]], [[COND_TRUE125]] ], [ [[TMP129]], [[COND_FALSE126]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND128]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP130]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP129:%.*]] = icmp eq i64 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP129]], label [[COND_TRUE130:%.*]], label [[COND_FALSE131:%.*]]
// SIMD-ONLY0:       cond.true130:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END132:%.*]]
// SIMD-ONLY0:       cond.false131:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END132]]
// SIMD-ONLY0:       cond.end132:
// SIMD-ONLY0-NEXT:    [[COND133:%.*]] = phi i64 [ [[TMP133]], [[COND_TRUE130]] ], [ [[TMP134]], [[COND_FALSE131]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND133]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = icmp ugt i64 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[COND_TRUE135:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true135:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END137:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END137]]
// SIMD-ONLY0:       cond.end137:
// SIMD-ONLY0-NEXT:    [[COND138:%.*]] = phi i64 [ [[TMP137]], [[COND_TRUE135]] ], [ [[TMP138]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND138]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP139]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP139:%.*]] = icmp ult i64 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP139]], label [[COND_TRUE140:%.*]], label [[COND_FALSE141:%.*]]
// SIMD-ONLY0:       cond.true140:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END142:%.*]]
// SIMD-ONLY0:       cond.false141:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END142]]
// SIMD-ONLY0:       cond.end142:
// SIMD-ONLY0-NEXT:    [[COND143:%.*]] = phi i64 [ [[TMP142]], [[COND_TRUE140]] ], [ [[TMP143]], [[COND_FALSE141]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND143]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP144]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP144:%.*]] = icmp eq i64 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP144]], label [[COND_TRUE145:%.*]], label [[COND_FALSE146:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END147:%.*]]
// SIMD-ONLY0:       cond.false146:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END147]]
// SIMD-ONLY0:       cond.end147:
// SIMD-ONLY0-NEXT:    [[COND148:%.*]] = phi i64 [ [[TMP147]], [[COND_TRUE145]] ], [ [[TMP148]], [[COND_FALSE146]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND148]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP149]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP150]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP149:%.*]] = icmp ugt i64 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP149]], label [[COND_TRUE150:%.*]], label [[COND_FALSE151:%.*]]
// SIMD-ONLY0:       cond.true150:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END152:%.*]]
// SIMD-ONLY0:       cond.false151:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END152]]
// SIMD-ONLY0:       cond.end152:
// SIMD-ONLY0-NEXT:    [[COND153:%.*]] = phi i64 [ [[TMP153]], [[COND_TRUE150]] ], [ [[TMP154]], [[COND_FALSE151]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND153]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP155]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = icmp ult i64 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE155:%.*]], label [[COND_FALSE156:%.*]]
// SIMD-ONLY0:       cond.true155:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false156:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi i64 [ [[TMP158]], [[COND_TRUE155]] ], [ [[TMP159]], [[COND_FALSE156]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND158]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP160]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP159:%.*]] = icmp eq i64 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP159]], label [[COND_TRUE160:%.*]], label [[COND_FALSE161:%.*]]
// SIMD-ONLY0:       cond.true160:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END162:%.*]]
// SIMD-ONLY0:       cond.false161:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END162]]
// SIMD-ONLY0:       cond.end162:
// SIMD-ONLY0-NEXT:    [[COND163:%.*]] = phi i64 [ [[TMP163]], [[COND_TRUE160]] ], [ [[TMP164]], [[COND_FALSE161]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND163]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP164:%.*]] = icmp ugt i64 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP164]], label [[COND_TRUE165:%.*]], label [[COND_FALSE166:%.*]]
// SIMD-ONLY0:       cond.true165:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END167:%.*]]
// SIMD-ONLY0:       cond.false166:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END167]]
// SIMD-ONLY0:       cond.end167:
// SIMD-ONLY0-NEXT:    [[COND168:%.*]] = phi i64 [ [[TMP167]], [[COND_TRUE165]] ], [ [[TMP168]], [[COND_FALSE166]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND168]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP169]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP169:%.*]] = icmp ult i64 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP169]], label [[COND_TRUE170:%.*]], label [[COND_FALSE171:%.*]]
// SIMD-ONLY0:       cond.true170:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END172:%.*]]
// SIMD-ONLY0:       cond.false171:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END172]]
// SIMD-ONLY0:       cond.end172:
// SIMD-ONLY0-NEXT:    [[COND173:%.*]] = phi i64 [ [[TMP172]], [[COND_TRUE170]] ], [ [[TMP173]], [[COND_FALSE171]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND173]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP174]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP174:%.*]] = icmp eq i64 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP174]], label [[COND_TRUE175:%.*]], label [[COND_FALSE176:%.*]]
// SIMD-ONLY0:       cond.true175:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END177:%.*]]
// SIMD-ONLY0:       cond.false176:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END177]]
// SIMD-ONLY0:       cond.end177:
// SIMD-ONLY0-NEXT:    [[COND178:%.*]] = phi i64 [ [[TMP177]], [[COND_TRUE175]] ], [ [[TMP178]], [[COND_FALSE176]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND178]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP179]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i64, ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    ret i64 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @fxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[FX:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FV:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FE:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FD:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON1]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON2]], ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze float poison
// SIMD-ONLY0-NEXT:    store float [[FREEZE_POISON3]], ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP0]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = fcmp ogt float [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi float [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store float [[COND]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP5]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4:%.*]] = fcmp olt float [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4]], label [[COND_TRUE5:%.*]], label [[COND_FALSE6:%.*]]
// SIMD-ONLY0:       cond.true5:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END7:%.*]]
// SIMD-ONLY0:       cond.false6:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END7]]
// SIMD-ONLY0:       cond.end7:
// SIMD-ONLY0-NEXT:    [[COND8:%.*]] = phi float [ [[TMP8]], [[COND_TRUE5]] ], [ [[TMP9]], [[COND_FALSE6]] ]
// SIMD-ONLY0-NEXT:    store float [[COND8]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP10]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP9:%.*]] = fcmp oeq float [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP9]], label [[COND_TRUE10:%.*]], label [[COND_FALSE11:%.*]]
// SIMD-ONLY0:       cond.true10:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END12:%.*]]
// SIMD-ONLY0:       cond.false11:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END12]]
// SIMD-ONLY0:       cond.end12:
// SIMD-ONLY0-NEXT:    [[COND13:%.*]] = phi float [ [[TMP13]], [[COND_TRUE10]] ], [ [[TMP14]], [[COND_FALSE11]] ]
// SIMD-ONLY0-NEXT:    store float [[COND13]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = fcmp ogt float [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE15:%.*]], label [[COND_FALSE16:%.*]]
// SIMD-ONLY0:       cond.true15:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false16:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi float [ [[TMP17]], [[COND_TRUE15]] ], [ [[TMP18]], [[COND_FALSE16]] ]
// SIMD-ONLY0-NEXT:    store float [[COND18]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP19]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP19:%.*]] = fcmp olt float [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP19]], label [[COND_TRUE20:%.*]], label [[COND_FALSE21:%.*]]
// SIMD-ONLY0:       cond.true20:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false21:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi float [ [[TMP22]], [[COND_TRUE20]] ], [ [[TMP23]], [[COND_FALSE21]] ]
// SIMD-ONLY0-NEXT:    store float [[COND23]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP24]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP24:%.*]] = fcmp oeq float [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP24]], label [[COND_TRUE25:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true25:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END27:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END27]]
// SIMD-ONLY0:       cond.end27:
// SIMD-ONLY0-NEXT:    [[COND28:%.*]] = phi float [ [[TMP27]], [[COND_TRUE25]] ], [ [[TMP28]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    store float [[COND28]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP29]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP30]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = fcmp ogt float [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE30:%.*]], label [[COND_FALSE31:%.*]]
// SIMD-ONLY0:       cond.true30:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END32:%.*]]
// SIMD-ONLY0:       cond.false31:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END32]]
// SIMD-ONLY0:       cond.end32:
// SIMD-ONLY0-NEXT:    [[COND33:%.*]] = phi float [ [[TMP33]], [[COND_TRUE30]] ], [ [[TMP34]], [[COND_FALSE31]] ]
// SIMD-ONLY0-NEXT:    store float [[COND33]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP35]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP34:%.*]] = fcmp olt float [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP34]], label [[COND_TRUE35:%.*]], label [[COND_FALSE36:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false36:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi float [ [[TMP38]], [[COND_TRUE35]] ], [ [[TMP39]], [[COND_FALSE36]] ]
// SIMD-ONLY0-NEXT:    store float [[COND38]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP40]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP39:%.*]] = fcmp oeq float [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP39]], label [[COND_TRUE40:%.*]], label [[COND_FALSE41:%.*]]
// SIMD-ONLY0:       cond.true40:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END42:%.*]]
// SIMD-ONLY0:       cond.false41:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END42]]
// SIMD-ONLY0:       cond.end42:
// SIMD-ONLY0-NEXT:    [[COND43:%.*]] = phi float [ [[TMP43]], [[COND_TRUE40]] ], [ [[TMP44]], [[COND_FALSE41]] ]
// SIMD-ONLY0-NEXT:    store float [[COND43]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = fcmp ogt float [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE45:%.*]], label [[COND_FALSE46:%.*]]
// SIMD-ONLY0:       cond.true45:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END47:%.*]]
// SIMD-ONLY0:       cond.false46:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END47]]
// SIMD-ONLY0:       cond.end47:
// SIMD-ONLY0-NEXT:    [[COND48:%.*]] = phi float [ [[TMP47]], [[COND_TRUE45]] ], [ [[TMP48]], [[COND_FALSE46]] ]
// SIMD-ONLY0-NEXT:    store float [[COND48]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP49]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP49:%.*]] = fcmp olt float [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP49]], label [[COND_TRUE50:%.*]], label [[COND_FALSE51:%.*]]
// SIMD-ONLY0:       cond.true50:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false51:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi float [ [[TMP52]], [[COND_TRUE50]] ], [ [[TMP53]], [[COND_FALSE51]] ]
// SIMD-ONLY0-NEXT:    store float [[COND53]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP54]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP54:%.*]] = fcmp oeq float [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP54]], label [[COND_TRUE55:%.*]], label [[COND_FALSE56:%.*]]
// SIMD-ONLY0:       cond.true55:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END57:%.*]]
// SIMD-ONLY0:       cond.false56:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END57]]
// SIMD-ONLY0:       cond.end57:
// SIMD-ONLY0-NEXT:    [[COND58:%.*]] = phi float [ [[TMP57]], [[COND_TRUE55]] ], [ [[TMP58]], [[COND_FALSE56]] ]
// SIMD-ONLY0-NEXT:    store float [[COND58]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP59]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP60]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = fcmp ogt float [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[COND_TRUE60:%.*]], label [[COND_FALSE61:%.*]]
// SIMD-ONLY0:       cond.true60:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END62:%.*]]
// SIMD-ONLY0:       cond.false61:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END62]]
// SIMD-ONLY0:       cond.end62:
// SIMD-ONLY0-NEXT:    [[COND63:%.*]] = phi float [ [[TMP63]], [[COND_TRUE60]] ], [ [[TMP64]], [[COND_FALSE61]] ]
// SIMD-ONLY0-NEXT:    store float [[COND63]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP65]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP64:%.*]] = fcmp olt float [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP64]], label [[COND_TRUE65:%.*]], label [[COND_FALSE66:%.*]]
// SIMD-ONLY0:       cond.true65:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END67:%.*]]
// SIMD-ONLY0:       cond.false66:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END67]]
// SIMD-ONLY0:       cond.end67:
// SIMD-ONLY0-NEXT:    [[COND68:%.*]] = phi float [ [[TMP68]], [[COND_TRUE65]] ], [ [[TMP69]], [[COND_FALSE66]] ]
// SIMD-ONLY0-NEXT:    store float [[COND68]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP70]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP69:%.*]] = fcmp oeq float [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP69]], label [[COND_TRUE70:%.*]], label [[COND_FALSE71:%.*]]
// SIMD-ONLY0:       cond.true70:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false71:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi float [ [[TMP73]], [[COND_TRUE70]] ], [ [[TMP74]], [[COND_FALSE71]] ]
// SIMD-ONLY0-NEXT:    store float [[COND73]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = fcmp ogt float [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE75:%.*]], label [[COND_FALSE76:%.*]]
// SIMD-ONLY0:       cond.true75:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END77:%.*]]
// SIMD-ONLY0:       cond.false76:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END77]]
// SIMD-ONLY0:       cond.end77:
// SIMD-ONLY0-NEXT:    [[COND78:%.*]] = phi float [ [[TMP77]], [[COND_TRUE75]] ], [ [[TMP78]], [[COND_FALSE76]] ]
// SIMD-ONLY0-NEXT:    store float [[COND78]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP79]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP79:%.*]] = fcmp olt float [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP79]], label [[COND_TRUE80:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true80:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END82:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END82]]
// SIMD-ONLY0:       cond.end82:
// SIMD-ONLY0-NEXT:    [[COND83:%.*]] = phi float [ [[TMP82]], [[COND_TRUE80]] ], [ [[TMP83]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    store float [[COND83]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP84]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP84:%.*]] = fcmp oeq float [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP84]], label [[COND_TRUE85:%.*]], label [[COND_FALSE86:%.*]]
// SIMD-ONLY0:       cond.true85:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END87:%.*]]
// SIMD-ONLY0:       cond.false86:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END87]]
// SIMD-ONLY0:       cond.end87:
// SIMD-ONLY0-NEXT:    [[COND88:%.*]] = phi float [ [[TMP87]], [[COND_TRUE85]] ], [ [[TMP88]], [[COND_FALSE86]] ]
// SIMD-ONLY0-NEXT:    store float [[COND88]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP89]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP90]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = fcmp ogt float [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE90:%.*]], label [[COND_FALSE91:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END92:%.*]]
// SIMD-ONLY0:       cond.false91:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END92]]
// SIMD-ONLY0:       cond.end92:
// SIMD-ONLY0-NEXT:    [[COND93:%.*]] = phi float [ [[TMP93]], [[COND_TRUE90]] ], [ [[TMP94]], [[COND_FALSE91]] ]
// SIMD-ONLY0-NEXT:    store float [[COND93]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP95]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP94:%.*]] = fcmp olt float [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP94]], label [[COND_TRUE95:%.*]], label [[COND_FALSE96:%.*]]
// SIMD-ONLY0:       cond.true95:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false96:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi float [ [[TMP98]], [[COND_TRUE95]] ], [ [[TMP99]], [[COND_FALSE96]] ]
// SIMD-ONLY0-NEXT:    store float [[COND98]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP100]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = fcmp oeq float [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE100:%.*]], label [[COND_FALSE101:%.*]]
// SIMD-ONLY0:       cond.true100:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END102:%.*]]
// SIMD-ONLY0:       cond.false101:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END102]]
// SIMD-ONLY0:       cond.end102:
// SIMD-ONLY0-NEXT:    [[COND103:%.*]] = phi float [ [[TMP103]], [[COND_TRUE100]] ], [ [[TMP104]], [[COND_FALSE101]] ]
// SIMD-ONLY0-NEXT:    store float [[COND103]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = fcmp ogt float [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE105:%.*]], label [[COND_FALSE106:%.*]]
// SIMD-ONLY0:       cond.true105:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END107:%.*]]
// SIMD-ONLY0:       cond.false106:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END107]]
// SIMD-ONLY0:       cond.end107:
// SIMD-ONLY0-NEXT:    [[COND108:%.*]] = phi float [ [[TMP107]], [[COND_TRUE105]] ], [ [[TMP108]], [[COND_FALSE106]] ]
// SIMD-ONLY0-NEXT:    store float [[COND108]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP109]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP109:%.*]] = fcmp olt float [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP109]], label [[COND_TRUE110:%.*]], label [[COND_FALSE111:%.*]]
// SIMD-ONLY0:       cond.true110:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false111:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi float [ [[TMP112]], [[COND_TRUE110]] ], [ [[TMP113]], [[COND_FALSE111]] ]
// SIMD-ONLY0-NEXT:    store float [[COND113]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP114]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP114:%.*]] = fcmp oeq float [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP114]], label [[COND_TRUE115:%.*]], label [[COND_FALSE116:%.*]]
// SIMD-ONLY0:       cond.true115:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END117:%.*]]
// SIMD-ONLY0:       cond.false116:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END117]]
// SIMD-ONLY0:       cond.end117:
// SIMD-ONLY0-NEXT:    [[COND118:%.*]] = phi float [ [[TMP117]], [[COND_TRUE115]] ], [ [[TMP118]], [[COND_FALSE116]] ]
// SIMD-ONLY0-NEXT:    store float [[COND118]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP119]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP120]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = fcmp ogt float [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[COND_TRUE120:%.*]], label [[COND_FALSE121:%.*]]
// SIMD-ONLY0:       cond.true120:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END122:%.*]]
// SIMD-ONLY0:       cond.false121:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END122]]
// SIMD-ONLY0:       cond.end122:
// SIMD-ONLY0-NEXT:    [[COND123:%.*]] = phi float [ [[TMP123]], [[COND_TRUE120]] ], [ [[TMP124]], [[COND_FALSE121]] ]
// SIMD-ONLY0-NEXT:    store float [[COND123]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP125]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP124:%.*]] = fcmp olt float [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP124]], label [[COND_TRUE125:%.*]], label [[COND_FALSE126:%.*]]
// SIMD-ONLY0:       cond.true125:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false126:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi float [ [[TMP128]], [[COND_TRUE125]] ], [ [[TMP129]], [[COND_FALSE126]] ]
// SIMD-ONLY0-NEXT:    store float [[COND128]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP130]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP129:%.*]] = fcmp oeq float [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP129]], label [[COND_TRUE130:%.*]], label [[COND_FALSE131:%.*]]
// SIMD-ONLY0:       cond.true130:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END132:%.*]]
// SIMD-ONLY0:       cond.false131:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END132]]
// SIMD-ONLY0:       cond.end132:
// SIMD-ONLY0-NEXT:    [[COND133:%.*]] = phi float [ [[TMP133]], [[COND_TRUE130]] ], [ [[TMP134]], [[COND_FALSE131]] ]
// SIMD-ONLY0-NEXT:    store float [[COND133]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = fcmp ogt float [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[COND_TRUE135:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true135:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END137:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END137]]
// SIMD-ONLY0:       cond.end137:
// SIMD-ONLY0-NEXT:    [[COND138:%.*]] = phi float [ [[TMP137]], [[COND_TRUE135]] ], [ [[TMP138]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    store float [[COND138]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP139]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP139:%.*]] = fcmp olt float [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP139]], label [[COND_TRUE140:%.*]], label [[COND_FALSE141:%.*]]
// SIMD-ONLY0:       cond.true140:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END142:%.*]]
// SIMD-ONLY0:       cond.false141:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END142]]
// SIMD-ONLY0:       cond.end142:
// SIMD-ONLY0-NEXT:    [[COND143:%.*]] = phi float [ [[TMP142]], [[COND_TRUE140]] ], [ [[TMP143]], [[COND_FALSE141]] ]
// SIMD-ONLY0-NEXT:    store float [[COND143]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP144]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP144:%.*]] = fcmp oeq float [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP144]], label [[COND_TRUE145:%.*]], label [[COND_FALSE146:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END147:%.*]]
// SIMD-ONLY0:       cond.false146:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END147]]
// SIMD-ONLY0:       cond.end147:
// SIMD-ONLY0-NEXT:    [[COND148:%.*]] = phi float [ [[TMP147]], [[COND_TRUE145]] ], [ [[TMP148]], [[COND_FALSE146]] ]
// SIMD-ONLY0-NEXT:    store float [[COND148]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP149]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP150]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP149:%.*]] = fcmp ogt float [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP149]], label [[COND_TRUE150:%.*]], label [[COND_FALSE151:%.*]]
// SIMD-ONLY0:       cond.true150:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END152:%.*]]
// SIMD-ONLY0:       cond.false151:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END152]]
// SIMD-ONLY0:       cond.end152:
// SIMD-ONLY0-NEXT:    [[COND153:%.*]] = phi float [ [[TMP153]], [[COND_TRUE150]] ], [ [[TMP154]], [[COND_FALSE151]] ]
// SIMD-ONLY0-NEXT:    store float [[COND153]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP155]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = fcmp olt float [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE155:%.*]], label [[COND_FALSE156:%.*]]
// SIMD-ONLY0:       cond.true155:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false156:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi float [ [[TMP158]], [[COND_TRUE155]] ], [ [[TMP159]], [[COND_FALSE156]] ]
// SIMD-ONLY0-NEXT:    store float [[COND158]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP160]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP159:%.*]] = fcmp oeq float [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP159]], label [[COND_TRUE160:%.*]], label [[COND_FALSE161:%.*]]
// SIMD-ONLY0:       cond.true160:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END162:%.*]]
// SIMD-ONLY0:       cond.false161:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END162]]
// SIMD-ONLY0:       cond.end162:
// SIMD-ONLY0-NEXT:    [[COND163:%.*]] = phi float [ [[TMP163]], [[COND_TRUE160]] ], [ [[TMP164]], [[COND_FALSE161]] ]
// SIMD-ONLY0-NEXT:    store float [[COND163]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP164:%.*]] = fcmp ogt float [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP164]], label [[COND_TRUE165:%.*]], label [[COND_FALSE166:%.*]]
// SIMD-ONLY0:       cond.true165:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END167:%.*]]
// SIMD-ONLY0:       cond.false166:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END167]]
// SIMD-ONLY0:       cond.end167:
// SIMD-ONLY0-NEXT:    [[COND168:%.*]] = phi float [ [[TMP167]], [[COND_TRUE165]] ], [ [[TMP168]], [[COND_FALSE166]] ]
// SIMD-ONLY0-NEXT:    store float [[COND168]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP169]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP169:%.*]] = fcmp olt float [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP169]], label [[COND_TRUE170:%.*]], label [[COND_FALSE171:%.*]]
// SIMD-ONLY0:       cond.true170:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END172:%.*]]
// SIMD-ONLY0:       cond.false171:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END172]]
// SIMD-ONLY0:       cond.end172:
// SIMD-ONLY0-NEXT:    [[COND173:%.*]] = phi float [ [[TMP172]], [[COND_TRUE170]] ], [ [[TMP173]], [[COND_FALSE171]] ]
// SIMD-ONLY0-NEXT:    store float [[COND173]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP174]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP174:%.*]] = fcmp oeq float [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP174]], label [[COND_TRUE175:%.*]], label [[COND_FALSE176:%.*]]
// SIMD-ONLY0:       cond.true175:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END177:%.*]]
// SIMD-ONLY0:       cond.false176:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END177]]
// SIMD-ONLY0:       cond.end177:
// SIMD-ONLY0-NEXT:    [[COND178:%.*]] = phi float [ [[TMP177]], [[COND_TRUE175]] ], [ [[TMP178]], [[COND_FALSE176]] ]
// SIMD-ONLY0-NEXT:    store float [[COND178]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP179]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load float, ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    ret float [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @dxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[DX:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DV:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DE:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DD:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON1]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON2]], ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON3]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP0]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi double [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store double [[COND]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4:%.*]] = fcmp olt double [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4]], label [[COND_TRUE5:%.*]], label [[COND_FALSE6:%.*]]
// SIMD-ONLY0:       cond.true5:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END7:%.*]]
// SIMD-ONLY0:       cond.false6:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END7]]
// SIMD-ONLY0:       cond.end7:
// SIMD-ONLY0-NEXT:    [[COND8:%.*]] = phi double [ [[TMP8]], [[COND_TRUE5]] ], [ [[TMP9]], [[COND_FALSE6]] ]
// SIMD-ONLY0-NEXT:    store double [[COND8]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP10]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP9:%.*]] = fcmp oeq double [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP9]], label [[COND_TRUE10:%.*]], label [[COND_FALSE11:%.*]]
// SIMD-ONLY0:       cond.true10:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END12:%.*]]
// SIMD-ONLY0:       cond.false11:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END12]]
// SIMD-ONLY0:       cond.end12:
// SIMD-ONLY0-NEXT:    [[COND13:%.*]] = phi double [ [[TMP13]], [[COND_TRUE10]] ], [ [[TMP14]], [[COND_FALSE11]] ]
// SIMD-ONLY0-NEXT:    store double [[COND13]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = fcmp ogt double [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE15:%.*]], label [[COND_FALSE16:%.*]]
// SIMD-ONLY0:       cond.true15:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END17:%.*]]
// SIMD-ONLY0:       cond.false16:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END17]]
// SIMD-ONLY0:       cond.end17:
// SIMD-ONLY0-NEXT:    [[COND18:%.*]] = phi double [ [[TMP17]], [[COND_TRUE15]] ], [ [[TMP18]], [[COND_FALSE16]] ]
// SIMD-ONLY0-NEXT:    store double [[COND18]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP19]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP19:%.*]] = fcmp olt double [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP19]], label [[COND_TRUE20:%.*]], label [[COND_FALSE21:%.*]]
// SIMD-ONLY0:       cond.true20:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false21:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi double [ [[TMP22]], [[COND_TRUE20]] ], [ [[TMP23]], [[COND_FALSE21]] ]
// SIMD-ONLY0-NEXT:    store double [[COND23]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP24]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP24:%.*]] = fcmp oeq double [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP24]], label [[COND_TRUE25:%.*]], label [[COND_FALSE26:%.*]]
// SIMD-ONLY0:       cond.true25:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END27:%.*]]
// SIMD-ONLY0:       cond.false26:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END27]]
// SIMD-ONLY0:       cond.end27:
// SIMD-ONLY0-NEXT:    [[COND28:%.*]] = phi double [ [[TMP27]], [[COND_TRUE25]] ], [ [[TMP28]], [[COND_FALSE26]] ]
// SIMD-ONLY0-NEXT:    store double [[COND28]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP29]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP30]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = fcmp ogt double [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE30:%.*]], label [[COND_FALSE31:%.*]]
// SIMD-ONLY0:       cond.true30:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END32:%.*]]
// SIMD-ONLY0:       cond.false31:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END32]]
// SIMD-ONLY0:       cond.end32:
// SIMD-ONLY0-NEXT:    [[COND33:%.*]] = phi double [ [[TMP33]], [[COND_TRUE30]] ], [ [[TMP34]], [[COND_FALSE31]] ]
// SIMD-ONLY0-NEXT:    store double [[COND33]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP35]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP34:%.*]] = fcmp olt double [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP34]], label [[COND_TRUE35:%.*]], label [[COND_FALSE36:%.*]]
// SIMD-ONLY0:       cond.true35:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false36:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi double [ [[TMP38]], [[COND_TRUE35]] ], [ [[TMP39]], [[COND_FALSE36]] ]
// SIMD-ONLY0-NEXT:    store double [[COND38]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP40]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP39:%.*]] = fcmp oeq double [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP39]], label [[COND_TRUE40:%.*]], label [[COND_FALSE41:%.*]]
// SIMD-ONLY0:       cond.true40:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END42:%.*]]
// SIMD-ONLY0:       cond.false41:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END42]]
// SIMD-ONLY0:       cond.end42:
// SIMD-ONLY0-NEXT:    [[COND43:%.*]] = phi double [ [[TMP43]], [[COND_TRUE40]] ], [ [[TMP44]], [[COND_FALSE41]] ]
// SIMD-ONLY0-NEXT:    store double [[COND43]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = fcmp ogt double [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE45:%.*]], label [[COND_FALSE46:%.*]]
// SIMD-ONLY0:       cond.true45:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END47:%.*]]
// SIMD-ONLY0:       cond.false46:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END47]]
// SIMD-ONLY0:       cond.end47:
// SIMD-ONLY0-NEXT:    [[COND48:%.*]] = phi double [ [[TMP47]], [[COND_TRUE45]] ], [ [[TMP48]], [[COND_FALSE46]] ]
// SIMD-ONLY0-NEXT:    store double [[COND48]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP49]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP49:%.*]] = fcmp olt double [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP49]], label [[COND_TRUE50:%.*]], label [[COND_FALSE51:%.*]]
// SIMD-ONLY0:       cond.true50:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false51:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi double [ [[TMP52]], [[COND_TRUE50]] ], [ [[TMP53]], [[COND_FALSE51]] ]
// SIMD-ONLY0-NEXT:    store double [[COND53]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP54]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP54:%.*]] = fcmp oeq double [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP54]], label [[COND_TRUE55:%.*]], label [[COND_FALSE56:%.*]]
// SIMD-ONLY0:       cond.true55:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END57:%.*]]
// SIMD-ONLY0:       cond.false56:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END57]]
// SIMD-ONLY0:       cond.end57:
// SIMD-ONLY0-NEXT:    [[COND58:%.*]] = phi double [ [[TMP57]], [[COND_TRUE55]] ], [ [[TMP58]], [[COND_FALSE56]] ]
// SIMD-ONLY0-NEXT:    store double [[COND58]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP59]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP60]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = fcmp ogt double [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[COND_TRUE60:%.*]], label [[COND_FALSE61:%.*]]
// SIMD-ONLY0:       cond.true60:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END62:%.*]]
// SIMD-ONLY0:       cond.false61:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END62]]
// SIMD-ONLY0:       cond.end62:
// SIMD-ONLY0-NEXT:    [[COND63:%.*]] = phi double [ [[TMP63]], [[COND_TRUE60]] ], [ [[TMP64]], [[COND_FALSE61]] ]
// SIMD-ONLY0-NEXT:    store double [[COND63]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP65]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP64:%.*]] = fcmp olt double [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP64]], label [[COND_TRUE65:%.*]], label [[COND_FALSE66:%.*]]
// SIMD-ONLY0:       cond.true65:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END67:%.*]]
// SIMD-ONLY0:       cond.false66:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END67]]
// SIMD-ONLY0:       cond.end67:
// SIMD-ONLY0-NEXT:    [[COND68:%.*]] = phi double [ [[TMP68]], [[COND_TRUE65]] ], [ [[TMP69]], [[COND_FALSE66]] ]
// SIMD-ONLY0-NEXT:    store double [[COND68]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP70]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP69:%.*]] = fcmp oeq double [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP69]], label [[COND_TRUE70:%.*]], label [[COND_FALSE71:%.*]]
// SIMD-ONLY0:       cond.true70:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END72:%.*]]
// SIMD-ONLY0:       cond.false71:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END72]]
// SIMD-ONLY0:       cond.end72:
// SIMD-ONLY0-NEXT:    [[COND73:%.*]] = phi double [ [[TMP73]], [[COND_TRUE70]] ], [ [[TMP74]], [[COND_FALSE71]] ]
// SIMD-ONLY0-NEXT:    store double [[COND73]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = fcmp ogt double [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE75:%.*]], label [[COND_FALSE76:%.*]]
// SIMD-ONLY0:       cond.true75:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END77:%.*]]
// SIMD-ONLY0:       cond.false76:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END77]]
// SIMD-ONLY0:       cond.end77:
// SIMD-ONLY0-NEXT:    [[COND78:%.*]] = phi double [ [[TMP77]], [[COND_TRUE75]] ], [ [[TMP78]], [[COND_FALSE76]] ]
// SIMD-ONLY0-NEXT:    store double [[COND78]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP79]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP79:%.*]] = fcmp olt double [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP79]], label [[COND_TRUE80:%.*]], label [[COND_FALSE81:%.*]]
// SIMD-ONLY0:       cond.true80:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END82:%.*]]
// SIMD-ONLY0:       cond.false81:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END82]]
// SIMD-ONLY0:       cond.end82:
// SIMD-ONLY0-NEXT:    [[COND83:%.*]] = phi double [ [[TMP82]], [[COND_TRUE80]] ], [ [[TMP83]], [[COND_FALSE81]] ]
// SIMD-ONLY0-NEXT:    store double [[COND83]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP84]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP84:%.*]] = fcmp oeq double [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP84]], label [[COND_TRUE85:%.*]], label [[COND_FALSE86:%.*]]
// SIMD-ONLY0:       cond.true85:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END87:%.*]]
// SIMD-ONLY0:       cond.false86:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END87]]
// SIMD-ONLY0:       cond.end87:
// SIMD-ONLY0-NEXT:    [[COND88:%.*]] = phi double [ [[TMP87]], [[COND_TRUE85]] ], [ [[TMP88]], [[COND_FALSE86]] ]
// SIMD-ONLY0-NEXT:    store double [[COND88]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP89]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP90]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = fcmp ogt double [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE90:%.*]], label [[COND_FALSE91:%.*]]
// SIMD-ONLY0:       cond.true90:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END92:%.*]]
// SIMD-ONLY0:       cond.false91:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END92]]
// SIMD-ONLY0:       cond.end92:
// SIMD-ONLY0-NEXT:    [[COND93:%.*]] = phi double [ [[TMP93]], [[COND_TRUE90]] ], [ [[TMP94]], [[COND_FALSE91]] ]
// SIMD-ONLY0-NEXT:    store double [[COND93]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP95]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP94:%.*]] = fcmp olt double [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP94]], label [[COND_TRUE95:%.*]], label [[COND_FALSE96:%.*]]
// SIMD-ONLY0:       cond.true95:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false96:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi double [ [[TMP98]], [[COND_TRUE95]] ], [ [[TMP99]], [[COND_FALSE96]] ]
// SIMD-ONLY0-NEXT:    store double [[COND98]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP100]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP99:%.*]] = fcmp oeq double [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP99]], label [[COND_TRUE100:%.*]], label [[COND_FALSE101:%.*]]
// SIMD-ONLY0:       cond.true100:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END102:%.*]]
// SIMD-ONLY0:       cond.false101:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END102]]
// SIMD-ONLY0:       cond.end102:
// SIMD-ONLY0-NEXT:    [[COND103:%.*]] = phi double [ [[TMP103]], [[COND_TRUE100]] ], [ [[TMP104]], [[COND_FALSE101]] ]
// SIMD-ONLY0-NEXT:    store double [[COND103]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = fcmp ogt double [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE105:%.*]], label [[COND_FALSE106:%.*]]
// SIMD-ONLY0:       cond.true105:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END107:%.*]]
// SIMD-ONLY0:       cond.false106:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END107]]
// SIMD-ONLY0:       cond.end107:
// SIMD-ONLY0-NEXT:    [[COND108:%.*]] = phi double [ [[TMP107]], [[COND_TRUE105]] ], [ [[TMP108]], [[COND_FALSE106]] ]
// SIMD-ONLY0-NEXT:    store double [[COND108]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP109]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP109:%.*]] = fcmp olt double [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP109]], label [[COND_TRUE110:%.*]], label [[COND_FALSE111:%.*]]
// SIMD-ONLY0:       cond.true110:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false111:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi double [ [[TMP112]], [[COND_TRUE110]] ], [ [[TMP113]], [[COND_FALSE111]] ]
// SIMD-ONLY0-NEXT:    store double [[COND113]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP114]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP114:%.*]] = fcmp oeq double [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP114]], label [[COND_TRUE115:%.*]], label [[COND_FALSE116:%.*]]
// SIMD-ONLY0:       cond.true115:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END117:%.*]]
// SIMD-ONLY0:       cond.false116:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END117]]
// SIMD-ONLY0:       cond.end117:
// SIMD-ONLY0-NEXT:    [[COND118:%.*]] = phi double [ [[TMP117]], [[COND_TRUE115]] ], [ [[TMP118]], [[COND_FALSE116]] ]
// SIMD-ONLY0-NEXT:    store double [[COND118]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP119]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP120]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = fcmp ogt double [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[COND_TRUE120:%.*]], label [[COND_FALSE121:%.*]]
// SIMD-ONLY0:       cond.true120:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END122:%.*]]
// SIMD-ONLY0:       cond.false121:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END122]]
// SIMD-ONLY0:       cond.end122:
// SIMD-ONLY0-NEXT:    [[COND123:%.*]] = phi double [ [[TMP123]], [[COND_TRUE120]] ], [ [[TMP124]], [[COND_FALSE121]] ]
// SIMD-ONLY0-NEXT:    store double [[COND123]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP125]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP124:%.*]] = fcmp olt double [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP124]], label [[COND_TRUE125:%.*]], label [[COND_FALSE126:%.*]]
// SIMD-ONLY0:       cond.true125:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false126:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi double [ [[TMP128]], [[COND_TRUE125]] ], [ [[TMP129]], [[COND_FALSE126]] ]
// SIMD-ONLY0-NEXT:    store double [[COND128]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP130]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP129:%.*]] = fcmp oeq double [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP129]], label [[COND_TRUE130:%.*]], label [[COND_FALSE131:%.*]]
// SIMD-ONLY0:       cond.true130:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END132:%.*]]
// SIMD-ONLY0:       cond.false131:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END132]]
// SIMD-ONLY0:       cond.end132:
// SIMD-ONLY0-NEXT:    [[COND133:%.*]] = phi double [ [[TMP133]], [[COND_TRUE130]] ], [ [[TMP134]], [[COND_FALSE131]] ]
// SIMD-ONLY0-NEXT:    store double [[COND133]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = fcmp ogt double [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[COND_TRUE135:%.*]], label [[COND_FALSE136:%.*]]
// SIMD-ONLY0:       cond.true135:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END137:%.*]]
// SIMD-ONLY0:       cond.false136:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END137]]
// SIMD-ONLY0:       cond.end137:
// SIMD-ONLY0-NEXT:    [[COND138:%.*]] = phi double [ [[TMP137]], [[COND_TRUE135]] ], [ [[TMP138]], [[COND_FALSE136]] ]
// SIMD-ONLY0-NEXT:    store double [[COND138]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP139]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP139:%.*]] = fcmp olt double [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP139]], label [[COND_TRUE140:%.*]], label [[COND_FALSE141:%.*]]
// SIMD-ONLY0:       cond.true140:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END142:%.*]]
// SIMD-ONLY0:       cond.false141:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END142]]
// SIMD-ONLY0:       cond.end142:
// SIMD-ONLY0-NEXT:    [[COND143:%.*]] = phi double [ [[TMP142]], [[COND_TRUE140]] ], [ [[TMP143]], [[COND_FALSE141]] ]
// SIMD-ONLY0-NEXT:    store double [[COND143]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP144]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP144:%.*]] = fcmp oeq double [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP144]], label [[COND_TRUE145:%.*]], label [[COND_FALSE146:%.*]]
// SIMD-ONLY0:       cond.true145:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END147:%.*]]
// SIMD-ONLY0:       cond.false146:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END147]]
// SIMD-ONLY0:       cond.end147:
// SIMD-ONLY0-NEXT:    [[COND148:%.*]] = phi double [ [[TMP147]], [[COND_TRUE145]] ], [ [[TMP148]], [[COND_FALSE146]] ]
// SIMD-ONLY0-NEXT:    store double [[COND148]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP149]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP150]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP149:%.*]] = fcmp ogt double [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP149]], label [[COND_TRUE150:%.*]], label [[COND_FALSE151:%.*]]
// SIMD-ONLY0:       cond.true150:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END152:%.*]]
// SIMD-ONLY0:       cond.false151:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END152]]
// SIMD-ONLY0:       cond.end152:
// SIMD-ONLY0-NEXT:    [[COND153:%.*]] = phi double [ [[TMP153]], [[COND_TRUE150]] ], [ [[TMP154]], [[COND_FALSE151]] ]
// SIMD-ONLY0-NEXT:    store double [[COND153]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP155]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP154:%.*]] = fcmp olt double [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP154]], label [[COND_TRUE155:%.*]], label [[COND_FALSE156:%.*]]
// SIMD-ONLY0:       cond.true155:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false156:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi double [ [[TMP158]], [[COND_TRUE155]] ], [ [[TMP159]], [[COND_FALSE156]] ]
// SIMD-ONLY0-NEXT:    store double [[COND158]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP160]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP159:%.*]] = fcmp oeq double [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP159]], label [[COND_TRUE160:%.*]], label [[COND_FALSE161:%.*]]
// SIMD-ONLY0:       cond.true160:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END162:%.*]]
// SIMD-ONLY0:       cond.false161:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END162]]
// SIMD-ONLY0:       cond.end162:
// SIMD-ONLY0-NEXT:    [[COND163:%.*]] = phi double [ [[TMP163]], [[COND_TRUE160]] ], [ [[TMP164]], [[COND_FALSE161]] ]
// SIMD-ONLY0-NEXT:    store double [[COND163]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP164:%.*]] = fcmp ogt double [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP164]], label [[COND_TRUE165:%.*]], label [[COND_FALSE166:%.*]]
// SIMD-ONLY0:       cond.true165:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END167:%.*]]
// SIMD-ONLY0:       cond.false166:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END167]]
// SIMD-ONLY0:       cond.end167:
// SIMD-ONLY0-NEXT:    [[COND168:%.*]] = phi double [ [[TMP167]], [[COND_TRUE165]] ], [ [[TMP168]], [[COND_FALSE166]] ]
// SIMD-ONLY0-NEXT:    store double [[COND168]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP169]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP169:%.*]] = fcmp olt double [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP169]], label [[COND_TRUE170:%.*]], label [[COND_FALSE171:%.*]]
// SIMD-ONLY0:       cond.true170:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END172:%.*]]
// SIMD-ONLY0:       cond.false171:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END172]]
// SIMD-ONLY0:       cond.end172:
// SIMD-ONLY0-NEXT:    [[COND173:%.*]] = phi double [ [[TMP172]], [[COND_TRUE170]] ], [ [[TMP173]], [[COND_FALSE171]] ]
// SIMD-ONLY0-NEXT:    store double [[COND173]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP174]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP174:%.*]] = fcmp oeq double [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP174]], label [[COND_TRUE175:%.*]], label [[COND_FALSE176:%.*]]
// SIMD-ONLY0:       cond.true175:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END177:%.*]]
// SIMD-ONLY0:       cond.false176:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END177]]
// SIMD-ONLY0:       cond.end177:
// SIMD-ONLY0-NEXT:    [[COND178:%.*]] = phi double [ [[TMP177]], [[COND_TRUE175]] ], [ [[TMP178]], [[COND_FALSE176]] ]
// SIMD-ONLY0-NEXT:    store double [[COND178]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP179]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    ret double [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @fail_dxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[DX:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DV:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DE:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DD:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON1:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON1]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON2:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON2]], ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[FREEZE_POISON3:%.*]] = freeze double poison
// SIMD-ONLY0-NEXT:    store double [[FREEZE_POISON3]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = fcmp oeq double [[TMP0]], [[TMP1]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
// SIMD-ONLY0:       if.then:
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END:%.*]]
// SIMD-ONLY0:       if.else:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP3]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END]]
// SIMD-ONLY0:       if.end:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4:%.*]] = fcmp oeq double [[TMP4]], [[TMP5]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4]], label [[IF_THEN5:%.*]], label [[IF_ELSE6:%.*]]
// SIMD-ONLY0:       if.then5:
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP6]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7:%.*]]
// SIMD-ONLY0:       if.else6:
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP7]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7]]
// SIMD-ONLY0:       if.end7:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP8:%.*]] = fcmp oeq double [[TMP8]], [[TMP9]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP8]], label [[IF_THEN9:%.*]], label [[IF_ELSE10:%.*]]
// SIMD-ONLY0:       if.then9:
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP10]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END11:%.*]]
// SIMD-ONLY0:       if.else10:
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP11]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END11]]
// SIMD-ONLY0:       if.end11:
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP12:%.*]] = fcmp oeq double [[TMP12]], [[TMP13]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP12]], label [[IF_THEN13:%.*]], label [[IF_ELSE14:%.*]]
// SIMD-ONLY0:       if.then13:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP14]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END15:%.*]]
// SIMD-ONLY0:       if.else14:
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP15]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END15]]
// SIMD-ONLY0:       if.end15:
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP16:%.*]] = fcmp oeq double [[TMP16]], [[TMP17]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP16]], label [[IF_THEN17:%.*]], label [[IF_ELSE18:%.*]]
// SIMD-ONLY0:       if.then17:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP18]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END19:%.*]]
// SIMD-ONLY0:       if.else18:
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP19]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END19]]
// SIMD-ONLY0:       if.end19:
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP20:%.*]] = fcmp oeq double [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP20]], label [[IF_THEN21:%.*]], label [[IF_ELSE22:%.*]]
// SIMD-ONLY0:       if.then21:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP22]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END23:%.*]]
// SIMD-ONLY0:       if.else22:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP23]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END23]]
// SIMD-ONLY0:       if.end23:
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP24:%.*]] = fcmp oeq double [[TMP24]], [[TMP25]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP24]], label [[IF_THEN25:%.*]], label [[IF_ELSE26:%.*]]
// SIMD-ONLY0:       if.then25:
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP26]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END27:%.*]]
// SIMD-ONLY0:       if.else26:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP27]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END27]]
// SIMD-ONLY0:       if.end27:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP28:%.*]] = fcmp oeq double [[TMP28]], [[TMP29]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP28]], label [[IF_THEN29:%.*]], label [[IF_ELSE30:%.*]]
// SIMD-ONLY0:       if.then29:
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP30]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END31:%.*]]
// SIMD-ONLY0:       if.else30:
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP31]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END31]]
// SIMD-ONLY0:       if.end31:
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP32:%.*]] = fcmp oeq double [[TMP32]], [[TMP33]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP32]], label [[IF_THEN33:%.*]], label [[IF_ELSE34:%.*]]
// SIMD-ONLY0:       if.then33:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP34]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END35:%.*]]
// SIMD-ONLY0:       if.else34:
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP35]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END35]]
// SIMD-ONLY0:       if.end35:
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP36:%.*]] = fcmp oeq double [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP36]], label [[IF_THEN37:%.*]], label [[IF_ELSE38:%.*]]
// SIMD-ONLY0:       if.then37:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP38]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END39:%.*]]
// SIMD-ONLY0:       if.else38:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP39]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END39]]
// SIMD-ONLY0:       if.end39:
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP40:%.*]] = fcmp oeq double [[TMP40]], [[TMP41]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP40]], label [[IF_THEN41:%.*]], label [[IF_ELSE42:%.*]]
// SIMD-ONLY0:       if.then41:
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP42]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END43:%.*]]
// SIMD-ONLY0:       if.else42:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP43]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END43]]
// SIMD-ONLY0:       if.end43:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = fcmp oeq double [[TMP44]], [[TMP45]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[IF_THEN45:%.*]], label [[IF_ELSE46:%.*]]
// SIMD-ONLY0:       if.then45:
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP46]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END47:%.*]]
// SIMD-ONLY0:       if.else46:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP47]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END47]]
// SIMD-ONLY0:       if.end47:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP48:%.*]] = fcmp oeq double [[TMP48]], [[TMP49]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP48]], label [[IF_THEN49:%.*]], label [[IF_ELSE50:%.*]]
// SIMD-ONLY0:       if.then49:
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP50]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END51:%.*]]
// SIMD-ONLY0:       if.else50:
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP51]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END51]]
// SIMD-ONLY0:       if.end51:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP52:%.*]] = fcmp oeq double [[TMP52]], [[TMP53]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP52]], label [[IF_THEN53:%.*]], label [[IF_ELSE54:%.*]]
// SIMD-ONLY0:       if.then53:
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP54]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END55:%.*]]
// SIMD-ONLY0:       if.else54:
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP55]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END55]]
// SIMD-ONLY0:       if.end55:
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP56:%.*]] = fcmp oeq double [[TMP56]], [[TMP57]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP56]], label [[IF_THEN57:%.*]], label [[IF_ELSE58:%.*]]
// SIMD-ONLY0:       if.then57:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP58]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END59:%.*]]
// SIMD-ONLY0:       if.else58:
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP59]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END59]]
// SIMD-ONLY0:       if.end59:
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP60:%.*]] = fcmp olt double [[TMP60]], [[TMP61]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP60]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi double [ [[TMP62]], [[COND_TRUE]] ], [ [[TMP63]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store double [[COND]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP61:%.*]] = fcmp ogt double [[TMP64]], [[TMP65]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP61]], label [[COND_TRUE62:%.*]], label [[COND_FALSE63:%.*]]
// SIMD-ONLY0:       cond.true62:
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64:%.*]]
// SIMD-ONLY0:       cond.false63:
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64]]
// SIMD-ONLY0:       cond.end64:
// SIMD-ONLY0-NEXT:    [[COND65:%.*]] = phi double [ [[TMP66]], [[COND_TRUE62]] ], [ [[TMP67]], [[COND_FALSE63]] ]
// SIMD-ONLY0-NEXT:    store double [[COND65]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    ret double [[TMP68]]
//
