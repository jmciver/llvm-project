// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang_cc1 -std=c++17 -triple x86_64-gnu-linux -O0 -enable-noundef-load-analysis -emit-llvm -o - %s | FileCheck %s
// RUN: %clang_cc1 -std=c++17 -triple x86_64-gnu-linux -O0 -no-enable-noundef-load-analysis -emit-llvm -o - %s | FileCheck %s --check-prefix=DISABLE

using VecOfFourBools __attribute__((ext_vector_type(4))) = bool;
using VecOfThreeChars __attribute__((ext_vector_type(3))) = char;
using VecOfThreeUChars __attribute__((ext_vector_type(3))) = unsigned char;

using VecOfFourFloats __attribute__((ext_vector_type(4))) = float;
using VecOfTwoFloats __attribute__((ext_vector_type(2))) = float;

// CHECK-LABEL: @_Z15getElement4BoolRDv4_b(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[A:%.*]], ptr [[A_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// CHECK-NEXT:    [[LOAD_BITS:%.*]] = load i8, ptr [[TMP0]], align 1, !noundef [[NOUNDEF2:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast i8 [[LOAD_BITS]] to <8 x i1>
// CHECK-NEXT:    [[EXTRACTVEC:%.*]] = shufflevector <8 x i1> [[TMP1]], <8 x i1> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
// CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <4 x i1> [[EXTRACTVEC]], i32 0
// CHECK-NEXT:    ret i1 [[VECEXT]]
//
// DISABLE-LABEL: @_Z15getElement4BoolRDv4_b(
// DISABLE-NEXT:  entry:
// DISABLE-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// DISABLE-NEXT:    store ptr [[A:%.*]], ptr [[A_ADDR]], align 8
// DISABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// DISABLE-NEXT:    [[LOAD_BITS:%.*]] = load i8, ptr [[TMP0]], align 1
// DISABLE-NEXT:    [[TMP1:%.*]] = bitcast i8 [[LOAD_BITS]] to <8 x i1>
// DISABLE-NEXT:    [[EXTRACTVEC:%.*]] = shufflevector <8 x i1> [[TMP1]], <8 x i1> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
// DISABLE-NEXT:    [[VECEXT:%.*]] = extractelement <4 x i1> [[EXTRACTVEC]], i32 0
// DISABLE-NEXT:    ret i1 [[VECEXT]]
//
bool getElement4Bool(VecOfFourBools& a)
{
  return a[0];
}

// CHECK-LABEL: @_Z15getElement3CharRDv3_c(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[A:%.*]], ptr [[A_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// CHECK-NEXT:    [[LOADVEC4:%.*]] = load <4 x i8>, ptr [[TMP0]], align 4, !noundef [[NOUNDEF2]]
// CHECK-NEXT:    [[EXTRACTVEC:%.*]] = shufflevector <4 x i8> [[LOADVEC4]], <4 x i8> poison, <3 x i32> <i32 0, i32 1, i32 2>
// CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <3 x i8> [[EXTRACTVEC]], i32 0
// CHECK-NEXT:    ret i8 [[VECEXT]]
//
// DISABLE-LABEL: @_Z15getElement3CharRDv3_c(
// DISABLE-NEXT:  entry:
// DISABLE-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// DISABLE-NEXT:    store ptr [[A:%.*]], ptr [[A_ADDR]], align 8
// DISABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// DISABLE-NEXT:    [[LOADVEC4:%.*]] = load <4 x i8>, ptr [[TMP0]], align 4
// DISABLE-NEXT:    [[EXTRACTVEC:%.*]] = shufflevector <4 x i8> [[LOADVEC4]], <4 x i8> poison, <3 x i32> <i32 0, i32 1, i32 2>
// DISABLE-NEXT:    [[VECEXT:%.*]] = extractelement <3 x i8> [[EXTRACTVEC]], i32 0
// DISABLE-NEXT:    ret i8 [[VECEXT]]
//
char getElement3Char(VecOfThreeChars& a)
{
  return a[0];
}

// CHECK-LABEL: @_Z16getElement3UCharRDv3_h(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[A:%.*]], ptr [[A_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// CHECK-NEXT:    [[LOADVEC4:%.*]] = load <4 x i8>, ptr [[TMP0]], align 4
// CHECK-NEXT:    [[EXTRACTVEC:%.*]] = shufflevector <4 x i8> [[LOADVEC4]], <4 x i8> poison, <3 x i32> <i32 0, i32 1, i32 2>
// CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <3 x i8> [[EXTRACTVEC]], i32 0
// CHECK-NEXT:    ret i8 [[VECEXT]]
//
// DISABLE-LABEL: @_Z16getElement3UCharRDv3_h(
// DISABLE-NEXT:  entry:
// DISABLE-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// DISABLE-NEXT:    store ptr [[A:%.*]], ptr [[A_ADDR]], align 8
// DISABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// DISABLE-NEXT:    [[LOADVEC4:%.*]] = load <4 x i8>, ptr [[TMP0]], align 4
// DISABLE-NEXT:    [[EXTRACTVEC:%.*]] = shufflevector <4 x i8> [[LOADVEC4]], <4 x i8> poison, <3 x i32> <i32 0, i32 1, i32 2>
// DISABLE-NEXT:    [[VECEXT:%.*]] = extractelement <3 x i8> [[EXTRACTVEC]], i32 0
// DISABLE-NEXT:    ret i8 [[VECEXT]]
//
char getElement3UChar(VecOfThreeUChars& a)
{
  return a[0];
}

// CHECK-LABEL: @_Z16vectorSubsectionRDv2_fRDv4_f(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[VEC2_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[VEC4_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[VEC2:%.*]], ptr [[VEC2_ADDR]], align 8
// CHECK-NEXT:    store ptr [[VEC4:%.*]], ptr [[VEC4_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[VEC4_ADDR]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load <4 x float>, ptr [[TMP0]], align 16, !noundef [[NOUNDEF2]]
// CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <4 x float> [[TMP1]], <4 x float> poison, <2 x i32> <i32 0, i32 1>
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[VEC2_ADDR]], align 8
// CHECK-NEXT:    store <2 x float> [[TMP2]], ptr [[TMP3]], align 8
// CHECK-NEXT:    ret void
//
// DISABLE-LABEL: @_Z16vectorSubsectionRDv2_fRDv4_f(
// DISABLE-NEXT:  entry:
// DISABLE-NEXT:    [[VEC2_ADDR:%.*]] = alloca ptr, align 8
// DISABLE-NEXT:    [[VEC4_ADDR:%.*]] = alloca ptr, align 8
// DISABLE-NEXT:    store ptr [[VEC2:%.*]], ptr [[VEC2_ADDR]], align 8
// DISABLE-NEXT:    store ptr [[VEC4:%.*]], ptr [[VEC4_ADDR]], align 8
// DISABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[VEC4_ADDR]], align 8
// DISABLE-NEXT:    [[TMP1:%.*]] = load <4 x float>, ptr [[TMP0]], align 16
// DISABLE-NEXT:    [[TMP2:%.*]] = shufflevector <4 x float> [[TMP1]], <4 x float> poison, <2 x i32> <i32 0, i32 1>
// DISABLE-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[VEC2_ADDR]], align 8
// DISABLE-NEXT:    store <2 x float> [[TMP2]], ptr [[TMP3]], align 8
// DISABLE-NEXT:    ret void
//
void vectorSubsection(VecOfTwoFloats& vec2, VecOfFourFloats& vec4) {
    vec2 = vec4.xy;
}
